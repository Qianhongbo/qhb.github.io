<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog | Qian Homeberg</title>
  
  <subtitle>Look! Who is here! Welcome~~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.qianhongbo.com/"/>
  <updated>2022-06-22T18:24:16.266Z</updated>
  <id>https://www.qianhongbo.com/</id>
  
  <author>
    <name>Qian Hongbo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Angular Basis</title>
    <link href="https://www.qianhongbo.com/Fullstack/Angular-Basis.html"/>
    <id>https://www.qianhongbo.com/Fullstack/Angular-Basis.html</id>
    <published>2022-06-20T04:07:47.000Z</published>
    <updated>2022-06-22T18:24:16.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular-Basis"><a href="#Angular-Basis" class="headerlink" title="Angular Basis"></a>Angular Basis</h1><h2 id="Angular-CLI"><a href="#Angular-CLI" class="headerlink" title="Angular CLI"></a>Angular CLI</h2><p>The <strong>Angular CLI</strong> is a command-line interface (CLI) that allows developers to initialize, develop, scaffold, and maintain Angular applications directly from the command line. In short, the Angular CLI allows us to:</p><ul><li><strong>Create a new Angular application</strong> from the ground up <code>ng new</code></li><li><strong>Add features</strong> to the application, such as additional components, support for external libraries, and updates to the application and its dependencies <code>ng generate</code></li><li><strong>Run unit tests</strong> : <code>ng test</code></li><li><strong>Run a development server</strong> with live reload (i.e., automated page reloads when a change in the application is detected) <code>ng serve</code></li><li><strong>Re-build the application</strong> on change (think Webpack)</li><li><strong>Build the application</strong> for production <code>ng build</code></li></ul><h2 id="Install-and-Configure-the-Angular-CLI"><a href="#Install-and-Configure-the-Angular-CLI" class="headerlink" title="Install and Configure the Angular CLI"></a>Install and Configure the Angular CLI</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure><blockquote><p>-g means global</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng --version</span><br></pre></td></tr></table></figure><h2 id="Create-a-New-Angular-Project"><a href="#Create-a-New-Angular-Project" class="headerlink" title="Create a New Angular Project"></a>Create a New Angular Project</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new my_first app</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve</span><br></pre></td></tr></table></figure><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><h3 id="What-is-a-component"><a href="#What-is-a-component" class="headerlink" title="What is a component?"></a>What is a component?</h3><ul><li>Fundamental building block of an Angular application</li><li>Controls the view displayed as HTML output</li><li>Components determines the user interface of an Angular app</li></ul><h3 id="What-makes-up-a-component"><a href="#What-makes-up-a-component" class="headerlink" title="What makes up a component?"></a>What makes up a component?</h3><ul><li>An <strong>HTML template</strong> (*.html file) that defines the user interface (i.e., what is actually rendered on the page)</li><li>A <strong>TypeScript component class</strong> (*.ts file) containing the behavior and logic of the component. The component class supports and interacts with the view through the properties and methods defined in it</li><li><strong>CSS styles</strong> (*.css file) that define the presentation and style of the component</li></ul><h3 id="Visualizing-Components"><a href="#Visualizing-Components" class="headerlink" title="Visualizing Components"></a>Visualizing Components</h3><p>All of the boxes in the following image are components.</p><p><img src="https://video.udacity-data.com/topher/2021/March/604d07e8_fsjs-c3-l2-components/fsjs-c3-l2-components.jpg" alt></p><h3 id="Generate-a-Component"><a href="#Generate-a-Component" class="headerlink" title="Generate a Component"></a>Generate a Component</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ng generate component &lt;name&gt;</span><br><span class="line"><span class="comment"># example: </span></span><br><span class="line">ng generate component Photos</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Result:</span></span><br><span class="line">~$ ng generate component Photos</span><br><span class="line">CREATE src/app/photos/photos.component.css (0 bytes)</span><br><span class="line">CREATE src/app/photos/photos.component.html (21 bytes)</span><br><span class="line">CREATE src/app/photos/photos.component.spec.ts (626 bytes)</span><br><span class="line">CREATE src/app/photos/photos.component.ts (275 bytes)</span><br><span class="line">UPDATE src/app/app.module.ts (475 bytes)</span><br></pre></td></tr></table></figure><p>The Angular CLI tells us that four files were created:</p><ul><li>The Photos component CSS styles</li><li>The Photos component HTML template</li><li>The Photos component unit test (optional)</li><li>The Photos component class (TypeScript)</li></ul><h3 id="What-is-in-a-Component-Class"><a href="#What-is-in-a-Component-Class" class="headerlink" title="What is in a Component Class"></a>What is in a Component Class</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app/photos/photos.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-photos'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./photos.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./photos.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PhotosComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The component class contains a <code>@Component</code> <strong>decorator</strong>. A decorator is a feature that provides a way to add annotations and meta-programming syntax for class declarations. Angular needs this metadata so that it knows how to build that particular component. Specifically, it takes a look at a few properties:</p><ul><li><code>selector</code>: The identifying name for the component, which can be used in an HTML template</li><li><code>templateUrl</code>: The path of the HTML template file associated with component</li><li><code>styleUrls</code>: The path(s) for the file(s) containing CSS stylesheets that the component can use</li></ul><p>The rest of the file contains an exported <code>PhotosComponent</code> class, with two methods:</p><ul><li><code>constructor()</code>, which is used primarily for dependency injection and initializing variables. </li><li><code>ngOnInit()</code>, which is called after the component has initialized. The <code>ngOnInit()</code> method is a lifecycle method used to handle additional initialization tasks.</li></ul><h3 id="Data-in-the-Component-Class"><a href="#Data-in-the-Component-Class" class="headerlink" title="Data in the Component Class"></a>Data in the Component Class</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// students.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-student'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./student.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./student.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> StudentComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  name: <span class="built_in">string</span> = <span class="string">"Taylor"</span>;</span><br><span class="line">  grade: <span class="built_in">number</span> = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above example, we define two properties:</p><ul><li><code>name</code>, which points to a <code>string</code> with the value <code>&quot;Taylor&quot;</code></li><li><code>grade</code>, which points to a <code>number</code> with the value <code>12</code></li></ul><p>We can use these data in our html file with double curly braces.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- student.component.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125; is a student in grade &#123;&#123; grade &#125;&#125;.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>As it turns out, the double curly braces syntax helps facilitate <strong>interpolation</strong>. By interpolating data, what we mean is that under the hood, Angular first evaluates the data properties (e.g., <code>name</code> and <code>grade</code>) of the component class (e.g., <code>StudentComponent</code>). It then converts them to strings before finally rendering everything on the page:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Taylor is a student in grade 12.</span><br></pre></td></tr></table></figure><p>As such, we can say that the <code>name</code> and <code>grade</code> properties are <em>bound</em> (i.e., through <strong>data binding</strong>) to the component class.</p><h3 id="The-component-lifecycle"><a href="#The-component-lifecycle" class="headerlink" title="The component lifecycle"></a>The component lifecycle</h3><p>Every Angular component goes through a cycle: from the moment it is created and mounted to the document object model (DOM), all the way to the moment it is unmounted and ultimately destroyed. This is what we refer to as the <strong>component lifecycle</strong>.</p><p><img src="https://video.udacity-data.com/topher/2021/March/604d05aa_fsjs-c3-l2-component-lifecycle/fsjs-c3-l2-component-lifecycle.jpg" alt></p><h3 id="Lifecycle-Methods"><a href="#Lifecycle-Methods" class="headerlink" title="Lifecycle Methods"></a>Lifecycle Methods</h3><p>The answer to the question lives in the component’s <strong>lifecycle methods</strong>. These predefined methods in the component class allow us to run any code or logic during any particular stage of the component’s lifecycle:</p><ul><li><code>ngOnChanges()</code></li><li><code>ngOnInit()</code></li><li><code>ngDoCheck()</code></li><li><code>ngAfterContentInit()</code></li><li><code>ngAfterContentChecked()</code></li><li><code>ngAfterViewInit()</code></li><li><code>ngAfterViewChecked()</code></li><li><code>ngOnDestroy()</code></li></ul><p>Note that these methods are called <em>automatically</em> during specific points in time of the lifecycle (e.g., <code>ngOninit()</code> during initialization). You won’t need to manually invoke these functions in your application.</p><p>Another thing to keep in mind that usage of these methods is not required. That is, you won’t need to use leverage lifecycle methods in every single Angular application that you build. That said, using certain methods is considered standard in the industry and can greatly benefit your application’s functionality.</p><h3 id="ngOnInit"><a href="#ngOnInit" class="headerlink" title="ngOnInit()"></a><code>ngOnInit()</code></h3><p>The <code>ngOnInit()</code> lifecycle method is called during the <code>OnInit</code> event, which occurs during the initializing phase of a component. It is one of the most common lifecycle methods you’ll see and use, and is only called <em>once</em> during a component’s lifecycle.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// countries.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-countries'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./countries.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./countries.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CountriesComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  countryList: object[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.countryList = [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'Spain'</span>,</span><br><span class="line">        population: <span class="number">46754778</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'New Zealand'</span>,</span><br><span class="line">        population: <span class="number">4822233</span>    </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'United States of America'</span>,</span><br><span class="line">        population: <span class="number">331002651</span>    </span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We first import <code>OnInit</code> from <code>@angular/core</code> (which is where all lifecycle events are imported from). When <code>OnInit</code> occurs, the variable <code>countryList</code>, which is initially an empty array, is available for us to use.</p><p>At this point, Angular automatically invokes <code>ngOnInit()</code> for us, the lifecycle method containing the code that we want to run during this initialization. In particular, we reassign the value of the component class’s <code>countryList</code> property to a new array of objects. This way, when the component mounts to the DOM, the <code>countryList</code> will be populated with an array of objects containing the data that we need, and the template will have access to the country data.</p><blockquote><h3 id="💡️-Can-I-Just-Use-the-constructor-Instead"><a href="#💡️-Can-I-Just-Use-the-constructor-Instead" class="headerlink" title="💡️ Can I Just Use the constructor() Instead?"></a>💡️ Can I Just Use the <code>constructor()</code> Instead?</h3><p>On the surface, it seems like the <code>constructor()</code> would be a logical place to keep initialization tasks as well.</p><p>Recall that the <code>constructor()</code> is called <em>before</em> <code>ngOnInit()</code> in the component lifecycle. That is, data-bound properties haven’t be set and ready to use yet. If we tried referencing <code>countryList</code> in the <code>constructor()</code>, it would be an <code>undefined</code> value rather than the array we’d expect.</p><p>As such, the <code>constructor()</code> should generally only be used for dependency injection (which we’ll visit later in this course), and not much more. Ideally, your <code>constructor()</code> functions should be kept relatively simple, and away from business logic.</p></blockquote><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><h3 id="What-is-a-Module"><a href="#What-is-a-Module" class="headerlink" title="What is a Module?"></a>What is a Module?</h3><p>In general, a module collects a block of code dedicated to a single purpose.</p><ul><li>Cohesive, organized set of functionality</li><li>TypeScript </li><li>At least one root module(AppModule)</li><li>Generated with the Angular CLI</li></ul><h3 id="Recall"><a href="#Recall" class="headerlink" title="Recall"></a>Recall</h3><p>Recall the terminal output when we ran the command, <code>ng generate component Photos</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~$ ng generate component Photos</span><br><span class="line">CREATE src/app/photos/photos.component.css (0 bytes)</span><br><span class="line">CREATE src/app/photos/photos.component.html (21 bytes)</span><br><span class="line">CREATE src/app/photos/photos.component.spec.ts (626 bytes)</span><br><span class="line">CREATE src/app/photos/photos.component.ts (275 bytes)</span><br><span class="line">UPDATE src/app/app.module.ts (475 bytes)</span><br></pre></td></tr></table></figure><p>The Angular CLI reports that four files were created, and one file was updated: <code>src/app/app.module.ts</code>. This is because generating an Angular component involves two steps:</p><ol><li>Creating the component files</li><li>Registering the newly-generated component to a module (recall that a module is a set of closely-related capabilities or functionalities)</li></ol><p>As such, the Angular CLI automatically registers the module to the root application module, the <code>AppModule</code>.</p><h3 id="The-AppModule"><a href="#The-AppModule" class="headerlink" title="The AppModule"></a>The <code>AppModule</code></h3><p>So, what happens to the <code>AppModule</code> when it is updated by the Angular CLI? Specifically, by registering the component, the Angular CLI updates a property called <code>declarations</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app/app.module.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppRoutingModule &#125; <span class="keyword">from</span> <span class="string">'./app-routing.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="comment">// The new component is automatically imported:</span></span><br><span class="line"><span class="keyword">import</span> &#123; PhotosComponent &#125; <span class="keyword">from</span> <span class="string">'./photos/photos.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    PhotosComponent <span class="comment">// The new component is added to declarations</span></span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    AppRoutingModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>Registering a component with a module is crucial, as it allows the component to be recognized by Angular. After importing <code>PhotosComponent</code> using ES6 <code>import</code> syntax, it is added to the <code>declarations</code> array, which defines all the components that live within the module. If the new component weren’t included here, and we try to use that component in our application, Angular will throw an error!</p><h3 id="Generate-a-Module"><a href="#Generate-a-Module" class="headerlink" title="Generate a Module"></a>Generate a Module</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ ng generate module books</span><br><span class="line">CREATE src/app/books/books.module.ts (191 bytes)</span><br></pre></td></tr></table></figure><p>The file created will have everything ready for you to start registering your components!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app/books/books.module.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [],</span><br><span class="line">  imports: [</span><br><span class="line">    CommonModule</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> BooksModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>We can open the folder of the module and create a component. This component will belong to the module.</p><p>After we create a new module, we should add this module to <code>AppModule</code> in the imports part.</p><h2 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h2><h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><p>The main responsibility for directives is to manipulate the DOM. There are three kinds of directives in Angular:</p><ul><li><strong>Components</strong> are directives with a template</li><li><strong>Structural directive</strong> manipulate the DOM by adding or removing DOM elements</li><li><strong>Attribute directives</strong> modify the appearance or behavior of a DOM element</li></ul><h3 id="ngFor"><a href="#ngFor" class="headerlink" title="ngFor"></a><code>ngFor</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- countries.component.html --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; countryList &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">Browser output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[object Object],[object Object],[object Object] </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- countries.component.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let country of countryList"</span>&gt;</span></span><br><span class="line">    &#123;&#123; country.name &#125;&#125; has &#123;&#123; country.population &#125;&#125; people.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">Browser output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- Spain has 46754778 people.</span></span><br><span class="line"><span class="comment">- New Zealand has 4822233 people.</span></span><br><span class="line"><span class="comment">- United States of America has 331002651 people.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ngIf"><a href="#ngIf" class="headerlink" title="ngIf"></a><code>ngIf</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-blogs'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./blogs.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./blogs.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> BlogsComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  title: <span class="built_in">string</span> = <span class="string">'My Favorite Blogs'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- blogs.component.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;p *ngIf=<span class="string">"title === 'My Favorite Blogs'"</span>&gt;</span><br><span class="line">  This is a list of my favorite blogs!</span><br><span class="line">&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- </span></span><br><span class="line"><span class="regexp">Browser output:</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">This is a list of my favorite blogs!</span></span><br><span class="line"><span class="regexp">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Attribute-Directives"><a href="#Attribute-Directives" class="headerlink" title="Attribute Directives"></a>Attribute Directives</h3><p>Along with structural directives, we can also leverage attribute directives to help manipulate the DOM.</p><p>Recall that the attribute directive’s main responsibility is to modify the behavior or appearance of a DOM element. Consider <code>ngStyle</code>, which is an attribute directive that updates styles for the containing HTML element:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// header.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-header'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./header.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./header.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeaderComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  title: <span class="built_in">string</span> = <span class="string">'Header'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- header.component.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;p [ngStyle]=<span class="string">"&#123;'font-size': title === 'Header' ? '48px' : '12px' &#125;"</span>&gt;This is the header.&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>Header</code> component class above contains a <code>title</code> property whose value is set to <code>&#39;Header&#39;</code>. The component’s template leverages the <code>ngStyle</code> directive to conditionally apply styles directly to the paragraph element.</p><h2 id="Sending-data"><a href="#Sending-data" class="headerlink" title="Sending data"></a>Sending data</h2><h3 id="Passing-Data-From-Parent-to-Child-Input"><a href="#Passing-Data-From-Parent-to-Child-Input" class="headerlink" title="Passing Data From Parent to Child: @Input"></a>Passing Data From Parent to Child: <code>@Input</code></h3><p>Angular gives us a useful tool to facilitate passing data from a parent component to its child component. By leveraging the <code>@Input</code> decorator in the child component class, we can get it ready to receive data from its parent.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="PostItem-Class"><a href="#PostItem-Class" class="headerlink" title="PostItem Class"></a>PostItem Class</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PostItemComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="meta">@Input</span>() post: Post;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">this</span>.post = &#123;</span><br><span class="line">      id: <span class="number">0</span>,</span><br><span class="line">      title: <span class="string">''</span>,</span><br><span class="line">      body: <span class="string">''</span>,</span><br><span class="line">      votes: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="PostItem-html"><a href="#PostItem-html" class="headerlink" title="PostItem html"></a>PostItem html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; post.body &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Votes: &#123;&#123; post.votes &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Posts-html"><a href="#Posts-html" class="headerlink" title="Posts html"></a>Posts html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- still use ngFor to iterate posts. </span></span><br><span class="line"><span class="comment">Rather than show the posts use list, pass each post to its child (post item) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-post-item</span> *<span class="attr">ngFor</span> = <span class="string">"let post of posts"</span> [<span class="attr">post</span>] = <span class="string">"post"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-post-item</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Event-binding"><a href="#Event-binding" class="headerlink" title="Event binding"></a>Event binding</h2><p><strong>Event binding</strong> allows us to listen for and respond to such user actions. That is, we detect when something has occurred on a target DOM element, and in response, we can invoke certain function methods in the template’s associated component class. As a result, with event binding, we can send information from the template <em>to</em> its corresponding component class.</p><p>Consider the following example of an HTML template.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- click.component.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"onClick()"</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>On the <code>&lt;button&gt;</code> element, note the block of code that says <code>(click)=&quot;onClick()&quot;</code>. This shows standard event binding syntax in Angular, which is made of two parts:</p><ul><li>The <strong>target event</strong> name in parentheses to the left of the equal sign (i.e., <code>click</code>)</li><li>The <strong>template statement</strong> on the right of the equal sign, which is the method (<code>onClick()</code>) called in the component class whenever the target event occurs.</li></ul><p>Back in the component class, then, we might see something like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// click.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-click'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./click.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./click.component.scss'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ClickComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  clickAmount: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onClick(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.clickAmount += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sending-data-to-a-parent-component"><a href="#Sending-data-to-a-parent-component" class="headerlink" title="Sending data to a parent component"></a>Sending data to a parent component</h2><p>In many real-world applications, data for the book list, as well as any associated data for that list, might live in the parent <code>BooksList</code> component. As such, the parent needs to be notified of certain actions that occur in its child component.</p><p>To accomplish this, the child component needs to <em>emit an event up</em> to its parent. We can leverage the <code>@Output</code> decorator as well as the <code>EvenEmitter</code> class to do just that:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// book-item.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, Input, Output, EventEmitter &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-book-item'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./book-item.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./book-item.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> BookItemComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="meta">@Input</span>() book;</span><br><span class="line">  <span class="meta">@Output</span>() marked = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similar to the event binding that we saw on the previous page, we can bind an event handler method from the parent <code>BooksList</code> component to the output property of its child component.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- books-list-component.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>List of available books<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-book-item</span> *<span class="attr">ngFor</span>=<span class="string">"let book of bookList"</span> [<span class="attr">book</span>]=<span class="string">"book"</span> (<span class="attr">marked</span>)=<span class="string">"markAsFavorite(book)"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-book-item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In the above template, we “capture” the event emitted from the child component on the <code>marked</code> output property. This way, when the user clicks the button, the <code>BooksList</code> component invokes its <code>markAsFavorite()</code> method:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-books-list'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./books-list.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./books-list.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> BooksListComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  bookList: object[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.bookList = [</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        title: <span class="string">'Pride and Prejudice'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">2</span>,</span><br><span class="line">        title: <span class="string">'The Great Gatsby'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">3</span>,</span><br><span class="line">        title: <span class="string">'The Catcher in the Rye'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  markAsFavorite(book: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;book.title&#125;</span> has been added to favorites.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h2><h2 id="Configuring-the-Angular-Router"><a href="#Configuring-the-Angular-Router" class="headerlink" title="Configuring the Angular Router"></a>Configuring the Angular Router</h2><p>In order to map a component to a particular path, most of the work involves configuring <code>routes</code>, which is an array of <code>Route</code> objects. Each object in the array defines a route in the application, as well as the component that responds to that route.</p><p>For example, consider a web application that shows information about the libraries in your local county. Its <code>routes</code> may look something like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app-routing.module.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Routes, RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeComponent &#125; <span class="keyword">from</span> <span class="string">'./components/home/home.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ContactComponent &#125; <span class="keyword">from</span> <span class="string">'./components/contact/contact.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LibrariesComponent &#125; <span class="keyword">from</span> <span class="string">'./components/pages/libraries/libraries.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="string">''</span>, component: HomeComponent &#125;,</span><br><span class="line">  &#123; path: <span class="string">'contact'</span>, component: ContactComponent &#125;,</span><br><span class="line">  &#123; path: <span class="string">'libraries/:id'</span>, component: LibrariesComponent &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [RouterModule.forRoot(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppRoutingModule &#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.component.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Setting-Up-Hyperlinks"><a href="#Setting-Up-Hyperlinks" class="headerlink" title="Setting Up Hyperlinks"></a>Setting Up Hyperlinks</h3><p>At this point, our routes do indeed work, but only if our users directly access them. That is, if the user types the URL (e.g., <code>http://localhost:4200/contact</code>) directly into the browser.</p><p>This, of course, wouldn’t be an optimal experience for users of your application. In order to make anchor tags (<code>&lt;a&gt;</code>) work properly in the browser, we must add the proper route to the <code>routerLink</code> directive. For example:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- navigation.component.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Library Directory<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"/contact"</span>&gt;</span>Contact us<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Since we are building a single-page application, using <code>routerLink</code> (versus <code>href</code>) allows us to navigate to other components without reloading the page. Note that unlike the <code>path</code> property of the <code>Route</code> objects we saw previously, there is a preceding <code>/</code> that we use before the component name in the value for <code>routerLink</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Angular-Basis&quot;&gt;&lt;a href=&quot;#Angular-Basis&quot; class=&quot;headerlink&quot; title=&quot;Angular Basis&quot;&gt;&lt;/a&gt;Angular Basis&lt;/h1&gt;&lt;h2 id=&quot;Angular-CLI&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
  </entry>
  
  <entry>
    <title>Authentication and Authorization in a Node API</title>
    <link href="https://www.qianhongbo.com/Fullstack/Authentication-and-Authorization-in-a-Node-API.html"/>
    <id>https://www.qianhongbo.com/Fullstack/Authentication-and-Authorization-in-a-Node-API.html</id>
    <published>2022-05-20T03:07:15.000Z</published>
    <updated>2022-05-21T04:31:06.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hash-and-Salt"><a href="#Hash-and-Salt" class="headerlink" title="Hash and Salt"></a>Hash and Salt</h2><ul><li>A hashed password has been run through a function that generates a long encrypted string from the original password.</li><li>The same password run through the same hash function will generate the same response, this is how we can match passwords when users log in. But from the result, we can’t get the password back.</li><li>Simply hashing passwords though isn’t enough, adding <strong>Salt</strong>, an extra string sequence to the beginning or end of a password before hashing it makes it much harder for attackers to decrypt passwords</li></ul><h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><ul><li>Add the dependency: <code>npm i bcrypt</code></li><li>Import bcrypt into the user model <code>import bcrypt from &#39;bcrypt&#39;</code></li><li>Create some environment variable in the local <ul><li><code>BCRYPT_PASSWORD</code>=some string</li><li><code>SALT_ROUNDS</code>=10</li></ul></li><li>Use the hash method inside the create method to hash, salt and pepper the password and save the resulting value to the password column on the users table</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pepper = process.env.BCRYPT_PASSWORD;</span><br><span class="line"><span class="keyword">const</span> saltRounds = process.env.SALT_ROUNDS <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">const</span> hash = bcrypt.hashSync(</span><br><span class="line">  u.password + pepper,</span><br><span class="line">  <span class="built_in">parseInt</span>(saltRounds)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> conn.query(sql, [u.username, hash])</span><br></pre></td></tr></table></figure><ul><li>Add an authentication route to implement this job</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">async authenticate(username: string, password: string): Promise&lt;User | null&gt; &#123;</span><br><span class="line">    // @ts-ignore</span><br><span class="line">    const conn = await Client.connect();</span><br><span class="line">    const sql = &apos;SELECT password FROM users where username=($1)&apos;;</span><br><span class="line">    const result = await conn.query(sql, [username]);</span><br><span class="line">    const pepper = process.env.BCRYPT_PASSWORD;</span><br><span class="line">    console.log(password + pepper);</span><br><span class="line"></span><br><span class="line">    if (result.rows.length) &#123;</span><br><span class="line">      const user = result.rows[0];</span><br><span class="line">      console.log(user);</span><br><span class="line">      if (bcrypt.compareSync(password + pepper, user.password)) &#123;</span><br><span class="line">        return user;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="JSON-Web-Tokens-JWT"><a href="#JSON-Web-Tokens-JWT" class="headerlink" title="JSON Web Tokens (JWT)"></a>JSON Web Tokens (JWT)</h2><h3 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h3><ul><li>header</li><li>payload</li><li>signature</li></ul><h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><h4 id="header"><a href="#header" class="headerlink" title="header"></a>header</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p>Used for indentify which user this request belongs to.</p><p>Note: Don’t put any secret information to this part.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"user"</span>: <span class="string">"Maverick"</span>,</span><br><span class="line">  <span class="attr">"school"</span>: <span class="string">"UCSD"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hash-and-Salt&quot;&gt;&lt;a href=&quot;#Hash-and-Salt&quot; class=&quot;headerlink&quot; title=&quot;Hash and Salt&quot;&gt;&lt;/a&gt;Hash and Salt&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A hashed password ha
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
  </entry>
  
  <entry>
    <title>Create an API with Express</title>
    <link href="https://www.qianhongbo.com/Fullstack/Create-an-API-with-Express.html"/>
    <id>https://www.qianhongbo.com/Fullstack/Create-an-API-with-Express.html</id>
    <published>2022-05-19T13:04:44.000Z</published>
    <updated>2022-05-20T18:05:19.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RESTful-APIs"><a href="#RESTful-APIs" class="headerlink" title="RESTful APIs"></a>RESTful APIs</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><ul><li><p>RESTful: <strong>R</strong>epresentational <strong>S</strong>tate <strong>T</strong>ransfer(-<strong>ful</strong>) <strong>A</strong>pplication <strong>P</strong>rogramming <strong>I</strong>nterface.</p></li><li><p>REST: A pattern for organizing API endpoints.</p></li></ul><h3 id="There-are-five-actionable-RESTful-routes-for-APIs"><a href="#There-are-five-actionable-RESTful-routes-for-APIs" class="headerlink" title="There are five actionable RESTful routes for APIs:"></a>There are five actionable RESTful routes for APIs:</h3><table><thead><tr><th>URL(Routes)</th><th>CRUD</th></tr></thead><tbody><tr><td>GET [‘/cats’]</td><td>INDEX</td></tr><tr><td>GET [‘/cats/:id’]</td><td>SHOW</td></tr><tr><td>POST [‘/cats’]</td><td>CREATE</td></tr><tr><td>PUT [‘/cats/:id’]</td><td>EDIT</td></tr><tr><td>DELETE [‘/cats/:id’]</td><td>DELETE</td></tr></tbody></table><h2 id="Define-functions"><a href="#Define-functions" class="headerlink" title="Define functions"></a>Define functions</h2><p>In the <code>src/handles/book.ts</code> file. We write some functions to handle the query.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express, &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">'express'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Book, BookStore &#125; <span class="keyword">from</span> <span class="string">'../models/book'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> BookStore();</span><br><span class="line"></span><br><span class="line"><span class="comment">// get all the records</span></span><br><span class="line"><span class="keyword">const</span> index = <span class="keyword">async</span> (_req: Request, res: Response) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> books = <span class="keyword">await</span> store.index();</span><br><span class="line">  res.json(books);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// show one specific record</span></span><br><span class="line"><span class="keyword">const</span> show = <span class="keyword">async</span> (req: Request, res: Response) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> book = <span class="keyword">await</span> store.show(req.params.id);</span><br><span class="line">  res.json(book);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create an record</span></span><br><span class="line"><span class="comment">// need to put the details in the request body</span></span><br><span class="line"><span class="keyword">const</span> create = <span class="keyword">async</span> (req: Request, res: Response) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> book: Book = &#123;</span><br><span class="line">        title: req.body.title,</span><br><span class="line">        author: req.body.author,</span><br><span class="line">        total_pages: req.body.total_pages,</span><br><span class="line">        summary: req.body.summary,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> newBook = <span class="keyword">await</span> store.create(book)</span><br><span class="line">    res.json(newBook)</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">      res.status(<span class="number">400</span>)</span><br><span class="line">      res.json(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete a record</span></span><br><span class="line"><span class="keyword">const</span> destroy = <span class="keyword">async</span> (req: Request, res: Response) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> deleted = <span class="keyword">await</span> store.delete(req.params.id)</span><br><span class="line">  res.json(deleted)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> book_routes = <span class="function">(<span class="params">app: express.Application</span>) =&gt;</span> &#123;</span><br><span class="line">  app.get(<span class="string">'/products'</span>, index);</span><br><span class="line">  app.get(<span class="string">'/products/:id'</span>, show);</span><br><span class="line">  app.post(<span class="string">'/products'</span>, create);</span><br><span class="line">  app.delete(<span class="string">'/products/:id'</span>, destroy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> book_routes;</span><br></pre></td></tr></table></figure><h2 id="Add-routes-to-server"><a href="#Add-routes-to-server" class="headerlink" title="Add routes to server"></a>Add routes to server</h2><p>In the <code>src/server.ts</code>, we can just use one line to call the function in <code>handler/book.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express, &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">'express'</span></span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'body-parser'</span></span><br><span class="line"><span class="keyword">import</span> book_routes <span class="keyword">from</span> <span class="string">'./handles/book'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app: express.Application = express()</span><br><span class="line"><span class="keyword">const</span> address: <span class="built_in">string</span> = <span class="string">"0.0.0.0:3000"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req: Request, res: Response</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// just use this line to handle the query!</span></span><br><span class="line">book_routes(app);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`starting app on: <span class="subst">$&#123;address&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Full-Stack-Big-Picture"><a href="#Full-Stack-Big-Picture" class="headerlink" title="Full Stack Big Picture"></a>Full Stack Big Picture</h2><ul><li>Express handles incoming HTTP requests to the API and the handler functions call model methods</li><li>Model methods query the database and send the information back to the handler, which parses it into json and sends the HTTP response</li></ul><p><img src="https://video.udacity-data.com/topher/2021/March/605cf319_l4-create-an-api-with-express-1/l4-create-an-api-with-express-1.png" alt="full stack summary"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RESTful-APIs&quot;&gt;&lt;a href=&quot;#RESTful-APIs&quot; class=&quot;headerlink&quot; title=&quot;RESTful APIs&quot;&gt;&lt;/a&gt;RESTful APIs&lt;/h2&gt;&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Def
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
  </entry>
  
  <entry>
    <title>Databases and SQL</title>
    <link href="https://www.qianhongbo.com/Fullstack/Databases-and-SQL.html"/>
    <id>https://www.qianhongbo.com/Fullstack/Databases-and-SQL.html</id>
    <published>2022-05-09T12:37:41.000Z</published>
    <updated>2022-05-10T19:01:26.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Different-kinds-of-databases"><a href="#Different-kinds-of-databases" class="headerlink" title="Different kinds of databases"></a>Different kinds of databases</h2><h3 id="SQL-Relational-Type-Databases"><a href="#SQL-Relational-Type-Databases" class="headerlink" title="SQL/Relational Type Databases"></a>SQL/Relational Type Databases</h3><p>SQL type databases are organized to be query-able using SQL (Structured Query Language) and organize information in tables. These are pretty much like giant spreadsheets, where an item stored in the database is a row in the table, and columns hold data points on each item.</p><h4 id="Ideal-Use-Cases"><a href="#Ideal-Use-Cases" class="headerlink" title="Ideal Use Cases:"></a>Ideal Use Cases:</h4><p>Repeating, structured data, such as:</p><ul><li>user information</li><li>product inventories</li><li>blogs</li></ul><h4 id="Common-SQL-Relational-Database-Technologies"><a href="#Common-SQL-Relational-Database-Technologies" class="headerlink" title="Common SQL/Relational Database Technologies:"></a>Common SQL/Relational Database Technologies:</h4><ul><li>MySQL</li><li>PostgreSQL</li><li>MariaDB</li><li>Microsoft SQL Server</li></ul><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>As you might have guessed, a NoSQL database …doesn’t use SQL. Really this means it isn’t set up like a spreadsheet. These databases can take a few different forms and are used for large sets of distributed data (like for use in micro service architectures).</p><h4 id="Ideal-Use-Cases-1"><a href="#Ideal-Use-Cases-1" class="headerlink" title="Ideal Use Cases:"></a>Ideal Use Cases:</h4><p>Partially structured or un-structured data: really big collections of complex data, caches</p><h4 id="Types-of-NoSQL-Databases"><a href="#Types-of-NoSQL-Databases" class="headerlink" title="Types of NoSQL Databases:"></a>Types of NoSQL Databases:</h4><ul><li>Key-Value store<ul><li>A key-value store is a non-relational, noSQL database type that stores data in key-value pairs (exactly like objects or dictionaries in programming). These databases are fast because the keys are unique and easily searchable, and they are flexible, because these key value pairs can store any combination of data types required.</li></ul></li><li>Document store<ul><li>A document store is a non-relational, noSQL database type that organizes data into documents. Documents can hold any shape of data, which means document stores can easily handle data with no structure or that is arbitrarily nested, which can be a headache to account for in a relational way.</li></ul></li><li>Column-oriented<ul><li>Data organized by column instead of by row. This architecture scales easily and makes fast, efficient queries. I’m including this architecture as a NoSQL type dbms, but this architecture can actually be used with SQL as well.</li></ul></li></ul><h3 id="Common-NoSQL-Database-Technologies"><a href="#Common-NoSQL-Database-Technologies" class="headerlink" title="Common NoSQL Database Technologies:"></a>Common NoSQL Database Technologies:</h3><ul><li>Redis [Key Value store]</li><li>MongoDB [Document store]</li><li>Elasticsearch [Document store]</li><li>Apache Cassandra [Column-oriented]</li></ul><h2 id="PostgreSQL-Cheat-Sheet"><a href="#PostgreSQL-Cheat-Sheet" class="headerlink" title="PostgreSQL Cheat Sheet"></a>PostgreSQL Cheat Sheet</h2><h3 id="Meta-Commands"><a href="#Meta-Commands" class="headerlink" title="Meta Commands"></a>Meta Commands</h3><ul><li><code>\l</code> <strong>List</strong> databases</li><li><code>\c</code> <strong>Connect</strong> to a database</li><li><code>\dt</code> <strong>Display Tables</strong> in a database</li><li><code>\q</code> <strong>Quit</strong> out of psql to normal terminal</li></ul><h3 id="Queries"><a href="#Queries" class="headerlink" title="Queries"></a>Queries</h3><ul><li>CREATE <code>INSERT INTO worlds (name) VALUES (&#39;Asgard&#39;);</code></li><li>READ <code>SELECT* FROM herbs;</code></li><li>UPDATE <code>UPDATE herbs SET sighting_date = &#39;2021-01-10&#39; WHERE id=&#39;1&#39;;</code></li><li>DELETE <code>DELETE FROM herbs WHERE id=&#39;1&#39;;</code></li><li>Filters<ul><li>BETWEEN<code>SELECT * FROM trips WHERE start_date BETWEEN &#39;2021-02-01&#39; AND &#39;2021-02-12&#39;;</code></li><li>LIKE <code>SELECT * FROM books WHERE title LIKE &#39;%ship%&#39;;</code></li></ul></li></ul><h2 id="Connect-PostSQL-using-Docker"><a href="#Connect-PostSQL-using-Docker" class="headerlink" title="Connect PostSQL using Docker"></a>Connect PostSQL using Docker</h2><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><ol><li>Add <code>pg</code> to dependencies</li><li>Create environment variables</li><li>Use <code>.env</code> file to save the db name, user name and password</li><li></li></ol><h3 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h3><p>Working with sensitive information can be hard, especially when your application relies on keys and passwords in order to connect to and access databases or APIs. The instructions below will walk you through adding a library for environment variables in Node so that we can safely store information away from public eyes without moving it out of reach.</p><ol><li>The library we will use for environment variables is called dotenv. You can add it via npm or yarn like this: <code>yarn add dotenv</code></li><li>Once we have dotenv listed in the package.json dependencies, we need to create one file. Make a new file called <code>.env</code> in the root of the project. In that file, add this: <code>TEST_VAR=testing123</code>. This is our first environment variable!</li><li>One last, <strong>super</strong> important step. The .env file hides sensitive information and makes it available to our application via a variable, so it holds a lot of really important, secret information. Information we don’t want shared even in a respository. If a gitignore file exists in your project add the .env file there. If there isn’t a gitignore, add a file called <code>.gitignore</code> to the root of the project and add a single line in the file that says just <code>.env</code>. <strong>If you include your env file in a public repository, you have completely negated the purpose of adding environment variables.</strong></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Different-kinds-of-databases&quot;&gt;&lt;a href=&quot;#Different-kinds-of-databases&quot; class=&quot;headerlink&quot; title=&quot;Different kinds of databases&quot;&gt;&lt;/a&gt;Di
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
  </entry>
  
  <entry>
    <title>Express</title>
    <link href="https://www.qianhongbo.com/Fullstack/Express.html"/>
    <id>https://www.qianhongbo.com/Fullstack/Express.html</id>
    <published>2022-04-06T07:01:57.000Z</published>
    <updated>2022-04-07T03:55:03.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-Basic"><a href="#HTTP-Basic" class="headerlink" title="HTTP Basic"></a>HTTP Basic</h2><h3 id="HTTP-Request"><a href="#HTTP-Request" class="headerlink" title="HTTP Request"></a>HTTP Request</h3><ul><li><strong>GET</strong> - retrieves data from the server</li><li><strong>POST</strong> - sends data to the server</li><li><strong>DELETE</strong> - removes data from the server</li><li><strong>PUT</strong> - replaces data on the server</li><li><strong>PATCH</strong> - updates data on the server</li></ul><h3 id="Query-Parameters"><a href="#Query-Parameters" class="headerlink" title="Query Parameters"></a>Query Parameters</h3><ul><li>Query strings are parameters in the URL, identified by a ‘?’<ul><li>Ex: <a href="https://coffee.com/search?decaf=true" target="_blank" rel="noopener">https://coffee.com/search?decaf=true</a></li></ul></li><li>To chain multiple parameters together in a query string, use ‘&amp;”<ul><li>Ex: <a href="https://coffee.com/search?decaf=true&amp;size=large&amp;creamer=soy" target="_blank" rel="noopener">https://coffee.com/search?decaf=true&amp;size=large&amp;creamer=soy</a></li></ul></li></ul><h3 id="HTTP-Response-Status-Codes"><a href="#HTTP-Response-Status-Codes" class="headerlink" title="HTTP Response Status Codes"></a>HTTP Response Status Codes</h3><table><thead><tr><th align="left">Status Code Range</th><th align="left">Example Code</th></tr></thead><tbody><tr><td align="left">100-199: information</td><td align="left">100 Continue</td></tr><tr><td align="left">200-299: request was successful</td><td align="left">200 OK 201 Created</td></tr><tr><td align="left">300-399: request was redirected</td><td align="left">301 Moved Permanently 307 Temporary Redirect</td></tr><tr><td align="left">400-499: client-side error</td><td align="left">400 Bad Request 401 Unauthorized 405 Method Not Allowed</td></tr><tr><td align="left">500-599: server-side error</td><td align="left">500 Internal Server Error</td></tr></tbody></table><h2 id="Express-basics"><a href="#Express-basics" class="headerlink" title="Express basics"></a>Express basics</h2><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p>Every Express application requires the creation of what is known as the application object. All of the core functions of express take place on the application object including endpoint methods.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express();</span><br></pre></td></tr></table></figure><h3 id="Core-Methods"><a href="#Core-Methods" class="headerlink" title="Core Methods"></a>Core Methods</h3><ul><li><code>.listen()</code> - listens for connections to a specified host and port</li><li><code>.get()</code> - used to get a route and takes a route and a callback function as arguments. The callback function takes two arguments, the request from the browser and the response from the server. Additionally, middleware can also be passed in as an argument which will be covered in the middleware section.</li><li><code>.post()</code>, <code>.put()</code>, <code>.delete()</code> - the other app methods that make up endpoints. They require having the ability to store data. <code>.post()</code> is used to post a new item, <code>.put()</code> used to edit an item already in existence, and <code>.delete()</code> to remove an item from the data. Like get above, all three methods will take a route.</li></ul><h3 id="Create-an-endpoint"><a href="#Create-an-endpoint" class="headerlink" title="Create an endpoint"></a>Create an endpoint</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/students&apos;, (req, res) =&gt; &#123;</span><br><span class="line">  // perform an action with req or res. </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h2><p>Middleware is a function that is applied between the request and response. Meaning you get the request, do something with it, and then send the response. Common uses of middleware include checking the authentication status of a user before sending a response or logging the request before sending the response.</p><h3 id="Using-middleware"><a href="#Using-middleware" class="headerlink" title="Using middleware"></a>Using middleware</h3><h4 id="use"><a href="#use" class="headerlink" title=".use();"></a><code>.use();</code></h4><p>The <code>.use();</code> method is a method that can be applied to the application object or to route objects. It is used for applying middleware and can take in a route, and middleware as arguments</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(middleware);</span><br></pre></td></tr></table></figure><h4 id="Endpoint-level"><a href="#Endpoint-level" class="headerlink" title="Endpoint level"></a>Endpoint level</h4><p>Applies middleware to a specific endpoint.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students.get(<span class="string">'/'</span>, middleware, (req, res) =&gt; &#123; <span class="comment">// do stuff &#125;);</span></span><br></pre></td></tr></table></figure><h3 id="Writing-middleware"><a href="#Writing-middleware" class="headerlink" title="Writing middleware"></a>Writing middleware</h3><p>Middleware is really just a function that is applied between the request and response. As such, if writing middleware, you create a function.</p><p>A middleware function takes at least 3 arguments (req, res, next); a 4th is also available of err (err, req, res, next) for use in writing error-handling middleware.</p><h4 id="next"><a href="#next" class="headerlink" title="next();"></a><code>next();</code></h4><p>The next method is a method from the express router. next() calls the next middleware in a chain of middlewares. Without adding next to your middleware function, your application will get stuck on the middleware.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMiddleware = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do stuff</span></span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Working-with-routes"><a href="#Working-with-routes" class="headerlink" title="Working with routes"></a>Working with routes</h3><blockquote><p>The sample code for this topic is on the <a href="https://github.com/Qianhongbo/JavaScript/tree/master/work_with_routes" target="_blank" rel="noopener">website</a>.</p></blockquote><p>When building an express application, it’s best practice to keep the server and application endpoints and functionality separate. With the router object, you’re able to create a directory of routes and separate the functionality of each route onto its own file.</p><h4 id="Router"><a href="#Router" class="headerlink" title="Router()"></a><code>Router()</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span>;   </span><br><span class="line"><span class="keyword">const</span> routes = express.Router();</span><br><span class="line"></span><br><span class="line">routes.get(<span class="string">'/'</span>, (req, res) =&gt; &#123; <span class="comment">//do something &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes;</span><br></pre></td></tr></table></figure><h4 id="Use-the-Router"><a href="#Use-the-Router" class="headerlink" title="Use the Router"></a>Use the Router</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./routes/index'</span>;</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, routes);</span><br></pre></td></tr></table></figure><h2 id="When-to-use-Express"><a href="#When-to-use-Express" class="headerlink" title="When to use Express"></a>When to use Express</h2><p>Everything we’ve done in this lesson so far has been the foundation of what’s known as a REST API (Representational State Transfer). It’s an architectural standard for APIs and currently the most popular type of API in use. RESTful APIs are considered to be stateless meaning the user/browser is independent of the server and they don’t care what the other is doing.</p><p>But what if you need the interactions between the server and the user to be stateful meaning the server is aware of what the user is doing. Think about when you are waiting for someone to send a text message and you see the dots pop up letting you know they are working on a response–that’s stateful. So what do we do when we need a real-time application? Instead of a REST API, you create a <strong>WebSocket API.</strong></p><p>Websocket APIs are stateful and allow for real-time communication between the user and the server allowing for one user to know what another user is doing. Websockets do not use the HTTP protocol and have their own WebSocket protocol.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP-Basic&quot;&gt;&lt;a href=&quot;#HTTP-Basic&quot; class=&quot;headerlink&quot; title=&quot;HTTP Basic&quot;&gt;&lt;/a&gt;HTTP Basic&lt;/h2&gt;&lt;h3 id=&quot;HTTP-Request&quot;&gt;&lt;a href=&quot;#HTTP-Requ
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
  </entry>
  
  <entry>
    <title>Jasmine</title>
    <link href="https://www.qianhongbo.com/Fullstack/Jasmine.html"/>
    <id>https://www.qianhongbo.com/Fullstack/Jasmine.html</id>
    <published>2022-04-03T04:01:39.000Z</published>
    <updated>2022-04-06T22:01:27.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Configure-Jasmine"><a href="#Configure-Jasmine" class="headerlink" title="Configure Jasmine"></a>Configure Jasmine</h2><h3 id="Install-Jasmine"><a href="#Install-Jasmine" class="headerlink" title="Install Jasmine:"></a>Install Jasmine:</h3><ol><li><p>To install Jasmine run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jasmine</span><br></pre></td></tr></table></figure></li><li><p>Add a reporter for outputting Jasmine results to the terminal:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jasmine-spec-reporter</span><br></pre></td></tr></table></figure></li><li><p>Add type definitions for Jasmine with :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev @types/jasmine</span><br></pre></td></tr></table></figure></li></ol><h3 id="Add-Testing-Scripts"><a href="#Add-Testing-Scripts" class="headerlink" title="Add Testing Scripts:"></a>Add Testing Scripts:</h3><p>Add the scripts object in the <code>package.json</code> and add the followingto run Jasmine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"jasmine"</span>: <span class="string">"jasmine"</span></span><br></pre></td></tr></table></figure><h3 id="Set-up-the-file-structure"><a href="#Set-up-the-file-structure" class="headerlink" title="Set up the file structure"></a>Set up the file structure</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules</span><br><span class="line">├── spec</span><br><span class="line">│      └── support</span><br><span class="line">│           └── jasmine.json</span><br><span class="line">├── src</span><br><span class="line">│     ├──  tests</span><br><span class="line">│     │     ├── helpers</span><br><span class="line">│     │     │      └── reporter.ts</span><br><span class="line">│     │     └── indexSpec.ts</span><br><span class="line">│     └── index.ts</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── tsconfig.json</span><br></pre></td></tr></table></figure><h3 id="Add-code-to-reporter-ts"><a href="#Add-code-to-reporter-ts" class="headerlink" title="Add code to reporter.ts"></a>Add code to <code>reporter.ts</code></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;DisplayProcessor, SpecReporter, StacktraceOption&#125; <span class="keyword">from</span> <span class="string">"jasmine-spec-reporter"</span>;</span><br><span class="line"><span class="keyword">import</span> SuiteInfo = jasmine.SuiteInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CustomProcessor <span class="keyword">extends</span> DisplayProcessor &#123;</span><br><span class="line">    <span class="keyword">public</span> displayJasmineStarted(info: SuiteInfo, log: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;log&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jasmine.getEnv().clearReporters();</span><br><span class="line">jasmine.getEnv().addReporter(<span class="keyword">new</span> SpecReporter(&#123;</span><br><span class="line">    spec: &#123;</span><br><span class="line">        displayStacktrace: StacktraceOption.NONE</span><br><span class="line">    &#125;,</span><br><span class="line">    customProcessors: [CustomProcessor],</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h3 id="Add-code-to-jasmine-json"><a href="#Add-code-to-jasmine-json" class="headerlink" title="Add code to jasmine.json"></a>Add code to <code>jasmine.json</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;spec_dir&quot;: &quot;build/tests&quot;,</span><br><span class="line">    &quot;spec_files&quot;: [</span><br><span class="line">        &quot;**/*[sS]pec.js&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;helpers&quot;: [</span><br><span class="line">        &quot;helpers/**/*.js&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;stopSpecOnExpectationFailure&quot;: false,</span><br><span class="line">    &quot;random&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Add-code-to-tsconfig-json"><a href="#Add-code-to-tsconfig-json" class="headerlink" title="Add code to tsconfig.json"></a>Add code to <code>tsconfig.json</code></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"exclude": ["node_modules", "./dist", "spec"]</span><br></pre></td></tr></table></figure><h2 id="Write-a-Basic-Test"><a href="#Write-a-Basic-Test" class="headerlink" title="Write a Basic Test"></a>Write a Basic Test</h2><p><code>index.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = (num: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num * num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> myFunc;</span><br></pre></td></tr></table></figure><p><code>indexSpec.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> myFunc <span class="keyword">from</span> <span class="string">'../index'</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'expect myFunc(5) to equal 25'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  expect(myFunc(<span class="number">5</span>)).toEqual(<span class="number">25</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>To test this we’ll need to first run the build script and then the test script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm run jasmine</span><br></pre></td></tr></table></figure><h2 id="Jasmine-syntax"><a href="#Jasmine-syntax" class="headerlink" title="Jasmine syntax"></a>Jasmine syntax</h2><blockquote><p>The sample code is in this <a href="https://github.com/Qianhongbo/JavaScript/tree/master/jasmine_comparisons" target="_blank" rel="noopener">website</a>.</p></blockquote><blockquote><ul><li><strong>Spec</strong>: an individual test</li><li><strong>Suite</strong>: a collection of similar tests related to one function</li></ul></blockquote><ul><li>Use the <strong>describe</strong> keyword followed by a short description of what the suite is testing and one or more specs.</li><li>A best practice is to start a sentence with “it” and then complete the sentence with the description of what the suite is testing.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(“suite description”, () =&gt; &#123;</span><br><span class="line">    it(“describes the spec”, () =&gt; &#123;</span><br><span class="line">        const myVar = true;</span><br><span class="line">        expect(myVar).toBe(true);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Comparisons"><a href="#Comparisons" class="headerlink" title="Comparisons"></a>Comparisons</h3><ul><li><p><code>.toEqual</code> : check the value</p></li><li><p><code>.toBe</code> : check the object</p></li><li><p><code>.toBeTruthy()</code>passes when</p><ul><li>The expectation has any non-zero value</li><li>The expectation evaluates to <code>true</code></li></ul></li><li><p><code>.toBeFalsy()</code> passes when the value is:</p><ul><li><code>0</code></li><li><code>&#39;&#39;</code> (an empty string)</li><li><code>undefined</code></li><li><code>null</code></li><li><code>NaN</code></li></ul></li><li><p><code>.toBeCloseTo(expected value, precision)</code></p><ul><li>Passes if a value is within a specified precision of the expected value</li><li>Precision is optional and is represented the number of decimal points to check (defaults to 2)</li></ul></li><li><p><code>.toBeGreaterThan(expected value)</code></p></li><li><p><code>.toBeLessThan(expected value)</code></p></li><li><p><code>.toBeGreaterThanOrEqual(expected value)</code></p></li><li><p><code>.toBeLessThanOrEqual(expected value)</code></p></li><li><p>use <code>.not</code> to negate the matcher</p></li></ul><h2 id="Test-asynchronous-code"><a href="#Test-asynchronous-code" class="headerlink" title="Test asynchronous code"></a>Test asynchronous code</h2><blockquote><p>The sample code is in this <a href="https://github.com/Qianhongbo/JavaScript/tree/master/jasmine_asynchronous" target="_blank" rel="noopener">website</a>.</p></blockquote><h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(&apos;expects asyncFunc() result to equal value&apos;, </span><br><span class="line">  async () =&gt; &#123;</span><br><span class="line">    const result = await asyncFunc();</span><br><span class="line">    expect(result).toEqual(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(&apos;expects asyncFunc() result to equal value&apos;,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    return asyncFunc().then( result =&gt; &#123;</span><br><span class="line">        expect(result).toEqual(value);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Endpoint-testing"><a href="#Endpoint-testing" class="headerlink" title="Endpoint testing"></a>Endpoint testing</h2><blockquote><p>The sample code is in this <a href="https://github.com/Qianhongbo/JavaScript/tree/master/endpoint_tesing" target="_blank" rel="noopener">website</a>.</p></blockquote><h3 id="Benefits-of-Endpoint-Testing"><a href="#Benefits-of-Endpoint-Testing" class="headerlink" title="Benefits of Endpoint Testing"></a>Benefits of Endpoint Testing</h3><ul><li>Confirms that the server is working.</li><li>Confirms that endpoints are configured properly.</li><li>More efficient than manual testing.</li></ul><h3 id="Setting-Up-Endpoint-Testing"><a href="#Setting-Up-Endpoint-Testing" class="headerlink" title="Setting Up Endpoint Testing"></a>Setting Up Endpoint Testing</h3><ul><li>Install Supertest as a dependency.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i supertest</span><br></pre></td></tr></table></figure><ul><li>Add type definition to allow the code to compile without TypeScript errors.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i --save-dev @types/supertest.</span><br></pre></td></tr></table></figure><ul><li>Import SuperTest in the spec file.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> supertest <span class="keyword">from</span> <span class="string">'supertest'</span>;</span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">'../index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = supertest(app);</span><br><span class="line">describe(<span class="string">'Test endpoint responses'</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'gets the api endpoint'</span>, <span class="keyword">async</span> (done) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> request.get(<span class="string">'/api'</span>);</span><br><span class="line">        expect(response.status).toBe(<span class="number">200</span>);</span><br><span class="line">        done();</span><br><span class="line">    &#125;</span><br><span class="line">)&#125;);</span><br></pre></td></tr></table></figure><ul><li>Create and Run Tests</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="Setup-and-teardown"><a href="#Setup-and-teardown" class="headerlink" title="Setup and teardown"></a>Setup and teardown</h2><ul><li><p><code>beforeAll();</code>can be used to run some code before the specs run, and any log statements show up before the specs.</p></li><li><p><code>afterAll();</code> allows functionality to be added after all of the specs in a suite have run. Log statements will show after the specs.</p></li><li><p><code>beforeEach();</code> and <code>afterEach();</code> will run before or after each one of the individual specs.</p></li><li><p><code>fdescribe</code> and <code>fit</code> allows jasmine to focus on one specific suite, skipping the others</p></li><li><p><code>xdescribe</code> and <code>xit</code> allows Jasmine to skip a specific suite or test, running all others.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Configure-Jasmine&quot;&gt;&lt;a href=&quot;#Configure-Jasmine&quot; class=&quot;headerlink&quot; title=&quot;Configure Jasmine&quot;&gt;&lt;/a&gt;Configure Jasmine&lt;/h2&gt;&lt;h3 id=&quot;Insta
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="https://www.qianhongbo.com/Fullstack/TypeScript.html"/>
    <id>https://www.qianhongbo.com/Fullstack/TypeScript.html</id>
    <published>2022-04-01T03:56:13.000Z</published>
    <updated>2022-04-03T19:21:06.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-TypeScript"><a href="#Why-TypeScript" class="headerlink" title="Why TypeScript"></a>Why TypeScript</h2><h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><p>Types are applied to:</p><ul><li>variables</li><li>function parameters</li><li>function returns</li><li>object values.</li></ul><h3 id="JavaScript-is-Weakly-Typed"><a href="#JavaScript-is-Weakly-Typed" class="headerlink" title="JavaScript is Weakly-Typed."></a>JavaScript is Weakly-Typed.</h3><p>This means that types are assigned by the interpreter based on the data and makes an educated guess when the code’s intention is ambiguous. This can lead to unintended results.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 + &apos;2&apos; = &apos;22&apos;</span><br></pre></td></tr></table></figure><h3 id="TypeScript-Adds-Typing-to-JavaScript"><a href="#TypeScript-Adds-Typing-to-JavaScript" class="headerlink" title="TypeScript Adds Typing to JavaScript"></a>TypeScript Adds Typing to JavaScript</h3><p>In short, TypeScript is a static and strong typed superset of JavaScript. When we’re done with our TypeScript code, it compiles to JavaScript.</p><h2 id="Configure-TypeScript"><a href="#Configure-TypeScript" class="headerlink" title="Configure TypeScript"></a>Configure TypeScript</h2><h3 id="Install-TypeScript"><a href="#Install-TypeScript" class="headerlink" title="Install TypeScript"></a>Install TypeScript</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i typescript // save to dependencies</span><br><span class="line">$ npm i typescript --save-dev // save to devDependencies</span><br></pre></td></tr></table></figure><p>Add <code>typescript</code>, <code>ts-node</code> and <code>@types/node</code> definitions to dev dependencies.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev typescript</span><br><span class="line">npm i --save-dev ts-node </span><br><span class="line">npm i --save-dev @types/node</span><br></pre></td></tr></table></figure><h3 id="Creating-your-package-json-Script"><a href="#Creating-your-package-json-Script" class="headerlink" title="Creating your package.json Script"></a>Creating your package.json Script</h3><p>To use TypeScript, you need to add a script to your package.json file to compile TypeScript to JavaScript. This is generally called your “build” script but could be named anything.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"npx tsc"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>To execute your <code>&quot;build&quot;</code> script use the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p>Run the completed index file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node build/.</span><br></pre></td></tr></table></figure><p><code>tsconfig.json</code> can also be named <code>jsconfig.json</code>.</p><p>To install the config file, run</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx tsc --init</span><br></pre></td></tr></table></figure><h3 id="Helpful-configurations-to-note"><a href="#Helpful-configurations-to-note" class="headerlink" title="Helpful configurations to note:"></a>Helpful configurations to note:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>,                          </span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span>,                     </span><br><span class="line">    <span class="string">"lib"</span>: [<span class="string">"ES2018"</span>, <span class="string">"DOM"</span>], </span><br><span class="line">    <span class="string">"outDir"</span>: <span class="string">"./build"</span>,                        </span><br><span class="line">    <span class="string">"strict"</span>: <span class="literal">true</span>,                           </span><br><span class="line">    <span class="string">"noImplicitAny"</span>: <span class="literal">true</span>,                 </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"exclude"</span>: [<span class="string">"node_modules"</span>, <span class="string">"tests"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You will see many more options available than what is above. Your application may require additional settings to be configured, but these are typically the main settings to start with.</p><ul><li><code>target</code> - sets what version of JS TypeScript will be transpiled to.</li><li><code>module</code> - sets what module system will be used when transpiling. Node.js uses the common.js module system by default</li><li><code>lib</code> - is used to say what libraries your code is using. In this case, ES2018 and the DOM API</li><li><code>outDir</code> - where you want your src code to output to. Often named build, prod, or server (when using it serverside)</li><li><code>strict</code> - enable strict typing</li><li><code>noImplicitAny</code> - disallow the <code>&quot;any&quot;</code> type (covered in TypeScript Basics)</li><li><code>exclude</code> - directories to exclude in compiling</li></ul><h2 id="ES6-Modules"><a href="#ES6-Modules" class="headerlink" title="ES6 Modules"></a>ES6 Modules</h2><p>Now that we are using TypeScript for our application, we can also easily utilize the ES6 module system instead of the CommonJS module system. Destructuring should only be used when you are exporting the functions individually. If choosing to use export default, you must import the entire default as a module.</p><h3 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h3><p>For importing modules, use the following syntax</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Rename the module</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'name'</span> <span class="keyword">from</span> <span class="string">'module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use destructuring to pull in specific functions when they are exported individually</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="function"><span class="keyword">function</span>, <span class="title">function</span>&#125; <span class="title">from</span> '<span class="title">module</span>';</span></span><br></pre></td></tr></table></figure><h3 id="Export"><a href="#Export" class="headerlink" title="Export"></a>Export</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Export an individual function or other type of object in code</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> myFunction = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export a single item at the end</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> object;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export a list of objects</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;object1, object2&#125;;</span><br></pre></td></tr></table></figure><h2 id="TypeScript-Basics"><a href="#TypeScript-Basics" class="headerlink" title="TypeScript Basics"></a>TypeScript Basics</h2><h3 id="Implicit-Typing-and-Explicit-Typing"><a href="#Implicit-Typing-and-Explicit-Typing" class="headerlink" title="Implicit Typing and Explicit Typing"></a>Implicit Typing and Explicit Typing</h3><h4 id="Implicit-Typing"><a href="#Implicit-Typing" class="headerlink" title="Implicit Typing"></a>Implicit Typing</h4><p>TypeScript will automatically assume types of objects if the object is not typed. It is best practice to allow TypeScript to type immutable variables and simple functions implicitly.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myNum = <span class="number">3</span>; <span class="comment">// TypeScript implicitly types myNum as a number based on the variable</span></span><br></pre></td></tr></table></figure><p>Implicit Typing is a best practice when the app is self-contained (meaning that it does not depend on other applications or APIs) or variables are immutable.</p><p><img src="https://video.udacity-data.com/topher/2021/March/603f9e26_fsjs-c1-l2-implicit-typing/fsjs-c1-l2-implicit-typing.jpg" alt></p><h4 id="Explicit-Typing"><a href="#Explicit-Typing" class="headerlink" title="Explicit Typing"></a>Explicit Typing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myVar: number = <span class="number">3</span>; <span class="comment">// myVar has been explicitly typed as a number</span></span><br></pre></td></tr></table></figure><p><img src="https://video.udacity-data.com/topher/2021/March/603fa213_fsjs-c1-l2-explicit-typing/fsjs-c1-l2-explicit-typing.jpg" alt></p><h3 id="Basic-Types"><a href="#Basic-Types" class="headerlink" title="Basic Types"></a>Basic Types</h3><p><code>string</code> - used for string types, textual data</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> studentName:string;</span><br><span class="line">studentName = <span class="string">'Dae Lee'</span></span><br></pre></td></tr></table></figure><hr><p><code>number</code> - used for number types including integers and decimals</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> studentAge: number;</span><br><span class="line">studentAge = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><hr><p><code>boolean</code> - used for <code>true</code>/<code>false</code> types</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> studentEnriched: boolean;</span><br><span class="line">studentEnriched = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><hr><p><code>Union Types</code> - used when more than one type can be used</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> studentPhone: (number | string);</span><br><span class="line">studentPhone = <span class="string">'(555) 555 - 5555'</span>;</span><br><span class="line">studentPhone = <span class="number">5555555555</span>;</span><br></pre></td></tr></table></figure><hr><p><code>null</code> - used when an object or variable is intentionally <code>null</code>, typically only functionally found in union types</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getCapitals = (str:string):string[] | <span class="function"><span class="params">null</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> capitals = str.match(<span class="regexp">/[A-Z]/</span>);</span><br><span class="line">  <span class="keyword">return</span> capitals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getCapitals(<span class="string">'something'</span>));</span><br><span class="line"><span class="comment">// returns null</span></span><br><span class="line"><span class="built_in">console</span>.log(getCapitals(<span class="string">'Something'</span>));</span><br><span class="line"><span class="comment">// returns ['S']</span></span><br></pre></td></tr></table></figure><hr><p><code>undefined</code> - used when a variable has yet to be defined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = <span class="function">(<span class="params">student: string | <span class="literal">undefined</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> ( student === <span class="literal">undefined</span> )&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><code>void</code> - used as a return type when the function returns nothing</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = (student: string): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(student);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><code>never</code> - used as a return type when the function will never return anything, such as with functions that throw errors or infinite loops</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myError = (err: string): never &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(err); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><code>any</code> - <em>should be avoided</em>. Used when the type of the item being typed can be anything</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = (student: any): <span class="function"><span class="params">any</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><code>unknown</code> - used when the type of the thing being typed is unknown. Used heavily for type assertion</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = (student: unknown): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Type-Assertions"><a href="#Type-Assertions" class="headerlink" title="Type Assertions"></a>Type Assertions</h3><p>Type Assertions are used to tell TypeScript that even though TypeScript thinks it should be one type, it is actually a different type. Common to see when a type is <code>unknown</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = (student: unknown): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  newStudent = student <span class="keyword">as</span> string;</span><br><span class="line">  <span class="keyword">return</span> newStudent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Object-like-types"><a href="#Object-like-types" class="headerlink" title="Object-like types"></a>Object-like types</h3><p><strong>Array</strong> - to type as an array, use the type, followed by square brackets. Union types can be used to allow for multiple types in an array.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let arr: string[]; // only accepts strings</span><br><span class="line">let arr2: (string | number)[]; // accepts strings or numbers</span><br></pre></td></tr></table></figure><hr><p><strong>Tuple</strong> - tuples are not native to JavaScript. When you know exactly what data will be in the array, and you will not be adding to the array or modifying the type for any value, you can use a tuple.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: [<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">string</span>]; <span class="comment">// ['cat', 7, 'dog']</span></span><br></pre></td></tr></table></figure><hr><p><code>enum</code> - enums are not native to JavaScript but are similar to enumeration used in other languages like C++ and Java. You use an enum when you have a constant set of values that will not be changed. By default, the values in an enum are also given a numeric value starting at 0. However, the numeric value can manually be set to any number explicitly or by calculation. Uses PascalCase to name the type.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Weekend &#123;</span><br><span class="line">  Friday,</span><br><span class="line">  Saturday,</span><br><span class="line">  Sunday</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Objects-and-Interfaces"><a href="#Objects-and-Interfaces" class="headerlink" title="Objects and Interfaces"></a>Objects and Interfaces</h3><p>Objects are easily created in JavaScript due to JavaScript’s weak typing. With TypeScript, they take a bit more work. It is possible to create an object in TypeScript, but TypeScript offers better tools for doing so.</p><p><strong>Object</strong> - creating an object requires defining the object before setting values. Once you have defined the object, additional properties cannot be added to the type definition, making it unhelpful when you need to add more properties after creation.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> student:&#123; name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, enrolled: <span class="built_in">boolean</span>&#125; = &#123;name: <span class="string">'Maria'</span>, age: <span class="number">10</span>, enrolled: <span class="literal">true</span>&#125;;</span><br></pre></td></tr></table></figure><hr><p><code>interface</code> - Interfaces are a concept not native to javascript, but similar concepts exist in other languages like Java, C++, and Python, where you create an abstract class as an interface for creating classes. With TypeScript, interfaces are simply used as the blueprint for the shape of something. Interfaces can be used to create functions but are most commonly seen to create objects.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface Student &#123; </span><br><span class="line">  name: string, </span><br><span class="line">  age: number, </span><br><span class="line">  enrolled: boolean</span><br><span class="line">&#125;;</span><br><span class="line">let newStudent:Student = &#123;name: &apos;Maria&apos;, age: 10, enrolled: true&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface Undergrad extends Student &#123;</span><br><span class="line">  major: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Duck-Typing"><a href="#Duck-Typing" class="headerlink" title="Duck Typing"></a>Duck Typing</h4><p>Duck Typing is a programming concept that tests if an object meets the duck test: “If it walks like a duck and it quacks like a duck, then it must be a duck.”</p><p>TypeScript uses duck typing for interfaces, meaning that even though you may say a function takes in an argument of interface A, if interface B has the same properties of A, it will also accept B. Interface A is the duck, and Interface B walks and quacks like a duck, so we’ll accept it as a duck too.</p><h4 id="Optional-and-Readonly-Properties"><a href="#Optional-and-Readonly-Properties" class="headerlink" title="Optional and Readonly Properties"></a>Optional and Readonly Properties</h4><p><strong>Optional</strong> - use when an object may or may not have a specific property by adding a <code>?</code> at the end of the property name.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface Student &#123; </span><br><span class="line">  name: string, </span><br><span class="line">  age: number, </span><br><span class="line">  enrolled: boolean,</span><br><span class="line">  phone?: number // phone becomes optional</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><code>readonly</code> - use when a property should not be able to be modified after the object has been created.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Student &#123; </span><br><span class="line">  name: <span class="built_in">string</span>, </span><br><span class="line">  age: <span class="built_in">number</span>, </span><br><span class="line">  enrolled: <span class="built_in">boolean</span>,</span><br><span class="line">  readonly id: <span class="built_in">number</span> <span class="comment">// id is readonly</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Type-Aliases"><a href="#Type-Aliases" class="headerlink" title="Type Aliases"></a>Type Aliases</h3><h4 id="With-primitive-types-for-documentation"><a href="#With-primitive-types-for-documentation" class="headerlink" title="With primitive types for documentation"></a>With primitive types for documentation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Name = string;</span><br></pre></td></tr></table></figure><h4 id="Workes-with-unions-and-tuples"><a href="#Workes-with-unions-and-tuples" class="headerlink" title="Workes with unions and tuples"></a>Workes with unions and tuples</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type Input = string | number;</span><br><span class="line">type Coord = [number, number];</span><br></pre></td></tr></table></figure><p>Type Aliases can also be used as object. It is similar as interface.</p><h3 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h3><p>TypeScript classes look and behave very much like the classes introduced in ES6. The biggest addition to TypeScript classes is the addition of access modifiers. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Student &#123;</span><br><span class="line">  protected studentGrade: number;</span><br><span class="line">  private studentId: number;</span><br><span class="line">  public constructor(grade: number, id: number) &#123;</span><br><span class="line">    this.studentGrade = grade;</span><br><span class="line">    this.studentId = id;</span><br><span class="line">  &#125;</span><br><span class="line">  id()&#123;</span><br><span class="line">    return this.studentId;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Factory-Functions"><a href="#Factory-Functions" class="headerlink" title="Factory Functions"></a>Factory Functions</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface Student &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age: number</span><br><span class="line">  greet(): void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const studentFactory = (name: string, age: number): Student =&gt;&#123; </span><br><span class="line">  const greet = ():void =&gt; console.log(&apos;hello&apos;); </span><br><span class="line">  return &#123; name, age, greet &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const myStudent = studentFactory(&apos;Hana&apos;, 16);</span><br></pre></td></tr></table></figure><h2 id="Generics-and-Asynchronous-TypeScript"><a href="#Generics-and-Asynchronous-TypeScript" class="headerlink" title="Generics and Asynchronous TypeScript"></a>Generics and Asynchronous TypeScript</h2><h3 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h3><p>We can combine the following function using generics.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const getItem = (arr: number[]):number =&gt; &#123;</span><br><span class="line">  return arr[1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const getItem = (arr: string[]):string =&gt; &#123;</span><br><span class="line">  return arr[1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Generic Function</span><br><span class="line">const getItem = &lt;T&gt;(arr: T[]):T =&gt; &#123;</span><br><span class="line">  return arr[1];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Why-TypeScript&quot;&gt;&lt;a href=&quot;#Why-TypeScript&quot; class=&quot;headerlink&quot; title=&quot;Why TypeScript&quot;&gt;&lt;/a&gt;Why TypeScript&lt;/h2&gt;&lt;h3 id=&quot;Types&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
      <category term="Typescript" scheme="https://www.qianhongbo.com/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Database Tutorial</title>
    <link href="https://www.qianhongbo.com/Backend/Database/Database-Tutorial.html"/>
    <id>https://www.qianhongbo.com/Backend/Database/Database-Tutorial.html</id>
    <published>2022-03-28T14:20:28.000Z</published>
    <updated>2022-03-29T05:22:12.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Database-Tutorial"><a href="#Database-Tutorial" class="headerlink" title="Database Tutorial"></a>Database Tutorial</h1><h2 id="Install-MYSQL-as-a-Docker-Container"><a href="#Install-MYSQL-as-a-Docker-Container" class="headerlink" title="Install MYSQL as a Docker Container"></a>Install MYSQL as a Docker Container</h2><p>First, we need to install Docker to our system. After that we just run the following code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name ECE141MySQL -e MYSQL_ROOT_PASS</span><br><span class="line">WORD=root -e MYSQL_DATABASE=testing -d mysql</span><br></pre></td></tr></table></figure><p>This creates a mysql container(ECE141MySQL) in docker, a database called “testing”, and a root user (root) with a passward of “root”.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it ECE141MySQL bash</span><br><span class="line">mysql -p // use &quot;root&quot; when asked for password</span><br></pre></td></tr></table></figure><p>Now, we can use mysql!</p><h2 id="Create-the-first-database"><a href="#Create-the-first-database" class="headerlink" title="Create the first database"></a>Create the first database</h2><h3 id="Create-database"><a href="#Create-database" class="headerlink" title="Create database"></a>Create database</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create databsed &lt;dbname&gt;; // &lt;dbname&gt; can be test...</span><br></pre></td></tr></table></figure><h3 id="Show-databases"><a href="#Show-databases" class="headerlink" title="Show databases"></a>Show databases</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><h3 id="Select-a-database"><a href="#Select-a-database" class="headerlink" title="Select a database"></a>Select a database</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> testing;</span><br></pre></td></tr></table></figure><h3 id="Create-a-table"><a href="#Create-a-table" class="headerlink" title="Create a table"></a>Create a table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">Authors</span> ( </span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment PRIMARY <span class="keyword">KEY</span>, </span><br><span class="line">  firstname <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">  lastname <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Describe-the-table"><a href="#Describe-the-table" class="headerlink" title="Describe the table"></a>Describe the table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">describe</span> <span class="keyword">authors</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field     | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">-----------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">| id        | int         | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| firstname | varchar(50) | NO   |     | NULL    |                |</span><br><span class="line">| lastname  | varchar(50) | NO   |     | NULL    |                |</span><br><span class="line">+<span class="comment">-----------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="Insert-data-into-a-table"><a href="#Insert-data-into-a-table" class="headerlink" title="Insert data into a table"></a>Insert data into a table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Authors</span> (firstname, lastname) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'Elon'</span>, <span class="string">'Must'</span>), (<span class="string">'Bill'</span>, <span class="string">'Gates'</span>), (<span class="string">'Bill'</span>, <span class="string">'Chen'</span>);</span><br></pre></td></tr></table></figure><h3 id="Show-rows-in-a-table"><a href="#Show-rows-in-a-table" class="headerlink" title="Show rows in a table"></a>Show rows in a table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="keyword">Authors</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+-----------+----------+</span></span><br><span class="line">| id | firstname | lastname |</span><br><span class="line">+<span class="comment">----+-----------+----------+</span></span><br><span class="line">|  1 | Elon      | Must     |</span><br><span class="line">|  2 | Bill      | Gates    |</span><br><span class="line">|  3 | Bill      | Chen     |</span><br><span class="line">+<span class="comment">----+-----------+----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="keyword">Authors</span> <span class="keyword">WHERE</span> firstname=<span class="string">'Bill'</span> <span class="keyword">order</span> <span class="keyword">by</span> lastname;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+-----------+----------+</span></span><br><span class="line">| id | firstname | lastname |</span><br><span class="line">+<span class="comment">----+-----------+----------+</span></span><br><span class="line">|  3 | Bill      | Chen     |</span><br><span class="line">|  2 | Bill      | Gates    |</span><br><span class="line">+<span class="comment">----+-----------+----------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="keyword">id</span>), firstname <span class="keyword">from</span> <span class="keyword">Authors</span> <span class="keyword">group</span> <span class="keyword">by</span> firstname;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------+-----------+</span></span><br><span class="line">| count(id) | firstname |</span><br><span class="line">+<span class="comment">-----------+-----------+</span></span><br><span class="line">|         1 | Elon      |</span><br><span class="line">|         2 | Bill      |</span><br><span class="line">+<span class="comment">-----------+-----------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="Update-and-delete-rows"><a href="#Update-and-delete-rows" class="headerlink" title="Update and delete rows"></a>Update and delete rows</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Authors set lastname=&quot;Musk&quot; where lastname=&quot;Must&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE from Authors where firstname=&quot;Bill&quot;;</span><br></pre></td></tr></table></figure><h3 id="Join-data-from-tables"><a href="#Join-data-from-tables" class="headerlink" title="Join data from tables"></a>Join data from tables</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Books (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">integer</span> auto_increment PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  title <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  author_id <span class="built_in">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Books (title, author_id)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">"Of Earth and Mars"</span>, <span class="number">1</span>), </span><br><span class="line">(<span class="string">"The Road Ahead"</span>, <span class="number">2</span>), </span><br><span class="line">(<span class="string">"Business at the Speed of Thought"</span>, <span class="number">2</span>), </span><br><span class="line">(<span class="string">"THe Mathematics of Poker"</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> firstname, lastname, title</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Authors</span> <span class="keyword">left</span> <span class="keyword">join</span> Books <span class="keyword">on</span> Authors.id=Books.author_id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------+----------+-------------------+</span></span><br><span class="line">| firstname | lastname | title             |</span><br><span class="line">+<span class="comment">-----------+----------+-------------------+</span></span><br><span class="line">| Elon      | Musk     | Of Earth and Mars |</span><br><span class="line">| Bill      | Gates    | NULL              |</span><br><span class="line">| Bill      | Chen     | NULL              |</span><br><span class="line">+<span class="comment">-----------+----------+-------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Database-Tutorial&quot;&gt;&lt;a href=&quot;#Database-Tutorial&quot; class=&quot;headerlink&quot; title=&quot;Database Tutorial&quot;&gt;&lt;/a&gt;Database Tutorial&lt;/h1&gt;&lt;h2 id=&quot;Insta
      
    
    </summary>
    
      <category term="Database" scheme="https://www.qianhongbo.com/categories/Database/"/>
    
    
  </entry>
  
  <entry>
    <title>hashmap</title>
    <link href="https://www.qianhongbo.com/LeetCode/hashmap.html"/>
    <id>https://www.qianhongbo.com/LeetCode/hashmap.html</id>
    <published>2022-03-08T01:02:07.000Z</published>
    <updated>2022-03-08T17:06:39.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Two-sum"><a href="#Two-sum" class="headerlink" title="Two sum"></a>Two sum</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>You may assume that each input would have <strong><em>exactly\</em> one solution</strong>, and you may not use the <em>same</em> element twice. You can return the answer in any order.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,7,11,15], target = 9</span><br><span class="line">Output: [0,1]</span><br><span class="line">Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Brute-force"><a href="#Brute-force" class="headerlink" title="Brute force"></a>Brute force</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Double loop</span></span><br><span class="line"><span class="comment"># O(n^2) time | O(1) square</span></span><br></pre></td></tr></table></figure><h4 id="Two-pass-hash-table"><a href="#Two-pass-hash-table" class="headerlink" title="Two-pass hash table"></a>Two-pass hash table</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) square</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            hashmap[nums[i]] = i</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            complement = target - nums[i]</span><br><span class="line">            <span class="keyword">if</span> complement <span class="keyword">in</span> hashmap <span class="keyword">and</span> hashmap[complement] != i:</span><br><span class="line">                <span class="keyword">return</span> [i, hashmap[complement]]</span><br></pre></td></tr></table></figure><h4 id="One-pass-hash-table"><a href="#One-pass-hash-table" class="headerlink" title="One-pass hash table"></a>One-pass hash table</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) square</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            hashmap[nums[i]] = i</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            complement = target - nums[i]</span><br><span class="line">            <span class="keyword">if</span> complement <span class="keyword">in</span> hashmap <span class="keyword">and</span> hashmap[complement] != i:</span><br><span class="line">                <span class="keyword">return</span> [i, hashmap[complement]]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Two-sum&quot;&gt;&lt;a href=&quot;#Two-sum&quot; class=&quot;headerlink&quot; title=&quot;Two sum&quot;&gt;&lt;/a&gt;Two sum&lt;/h2&gt;&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.qianhongbo.com/Fullstack/Node-js.html"/>
    <id>https://www.qianhongbo.com/Fullstack/Node-js.html</id>
    <published>2022-03-07T14:08:58.000Z</published>
    <updated>2022-04-01T18:56:51.144Z</updated>
    
    <content type="html"><![CDATA[<h2 id="History-of-Backend-Development"><a href="#History-of-Backend-Development" class="headerlink" title="History of Backend Development"></a>History of Backend Development</h2><p><img src="https://video.udacity-data.com/topher/2021/February/60351af5_screen-shot-2021-02-23-at-9.04.16-am/screen-shot-2021-02-23-at-9.04.16-am.png" alt></p><h2 id="pros-and-cons"><a href="#pros-and-cons" class="headerlink" title="pros and cons"></a>pros and cons</h2><h3 id="The-Node-js-Advantage"><a href="#The-Node-js-Advantage" class="headerlink" title="The Node.js Advantage"></a>The Node.js Advantage</h3><ul><li>Node.js allows for JavaScript to be used on the frontend and backend.</li><li>Node.js allows for easy application scaling and maintenance.</li></ul><h3 id="The-Node-js-Disadvantage"><a href="#The-Node-js-Disadvantage" class="headerlink" title="The Node.js Disadvantage"></a>The Node.js Disadvantage</h3><p>Node.js is <strong>not</strong> well-suited for applications that require heavy processing and computation, like video processing, 3D games, and traffic mapping.</p><h2 id="Javascript-with-Node-js"><a href="#Javascript-with-Node-js" class="headerlink" title="Javascript with Node.js"></a>Javascript with Node.js</h2><h3 id="To-run-index-js-use"><a href="#To-run-index-js-use" class="headerlink" title="To run index.js use:"></a>To run <code>index.js</code> use:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node src/index.js</span><br></pre></td></tr></table></figure><h2 id="Common-JS-Module-System"><a href="#Common-JS-Module-System" class="headerlink" title="Common JS Module System"></a>Common JS Module System</h2><p>The module system creates the ability to export and import JavaScript from separate files.</p><h3 id="Export"><a href="#Export" class="headerlink" title="Export"></a>Export</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// working file = util/logger.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exports as object</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; </span><br><span class="line">    myFirstFunction: myFirstFunction,</span><br><span class="line">    mySecondFunction: mySecondFunction</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// using ES6 shorthand property names</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123; </span><br><span class="line">    myFirstFunction,</span><br><span class="line">    mySecondFunction</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Require"><a href="#Require" class="headerlink" title="Require"></a>Require</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// working file = index.js</span></span><br><span class="line"><span class="comment">// all functions in util/logger.js are available</span></span><br><span class="line"><span class="keyword">const</span> logger = <span class="built_in">require</span>(<span class="string">'./util/logger.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// using ES6 object destructuring, only myFirstFunction is available</span></span><br><span class="line"><span class="keyword">const</span> &#123; myFirstFunction &#125; = <span class="built_in">require</span>(<span class="string">'./util/logger.js'</span>);</span><br></pre></td></tr></table></figure><h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><p>Nearly every Node.js feature is considered to be asynchronous (non-blocking). This means that we can request an API using promises and have our application continue running while that request is being waited for. But how does Node.js process that asynchronous request? Both the Browser and Node.js take advantage of something called the Event Loop. The Event Loop isn’t an API or language; it’s a process that runs anytime you have asynchronous code.</p><p>The Event Loop controls the order in which results (output) of asynchronous tasks (input) are displayed. Think of the Event Loop as the person working the door at an exclusive venue. That person lets people in based on a set of information provided by the venue. Your application is the venue, your asynchronous tasks are the people trying to get in, and it’s your job to tell the door person how to do so. Once you become familiar with the Event Loop and the order in which Node.js handles tasks, you will control when those tasks occur in your application</p><h3 id="Six-Phases-of-The-Event-Loop"><a href="#Six-Phases-of-The-Event-Loop" class="headerlink" title="Six Phases of The Event Loop"></a>Six Phases of The Event Loop</h3><ol><li><strong>Timers</strong> - executes callbacks using timers. If there are timers set to <code>0 ms</code> or <code>setImmediate(),</code> they will run here. Incomplete timers will run in later iterations of the loop.</li><li><strong>Pending</strong> - <em>internal phase</em></li><li><strong>Idle/Prepare</strong> - <em>internal phase</em></li><li><strong>Poll</strong> - process I/O callbacks</li><li><strong>Check</strong> - execute any <code>setImmediate()</code> timers added in the Poll phase</li><li><strong>Close</strong> - loop continues if there are more timers or I/O calls. If all timers and I/O calls are done, the loop closes and the process ends.</li></ol><p><img src="https://video.udacity-data.com/topher/2021/February/6033fb75_fsjs-c1-l1-event-loop/fsjs-c1-l1-event-loop.jpg" alt></p><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><h3 id="Initializing-npm-and-Creating-a-package-json-file"><a href="#Initializing-npm-and-Creating-a-package-json-file" class="headerlink" title="Initializing npm and Creating a package.json file"></a>Initializing <code>npm</code> and Creating a <code>package.json</code> file</h3><p>Initializing npm will create a package.json within the root of your application folder containing general information about the project.</p><p>To initialize <code>npm</code> and go through all of the settings use:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init</span><br></pre></td></tr></table></figure><p>To automatically select all defaults use <code>-y</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y</span><br></pre></td></tr></table></figure><h3 id="Adding-Dependencies"><a href="#Adding-Dependencies" class="headerlink" title="Adding Dependencies"></a>Adding Dependencies</h3><blockquote><p><a href="http://www.npmjs.com" target="_blank" rel="noopener">www.npmjs.com</a> is the node package management library.</p></blockquote><p>Applications will either include both dependencies and devDependencies or just dependencies. It is dependent on the team setting up the project. <code>devDependencies</code> are thought of as dependencies that are only necessary for development whereas <code>dependencies</code> are those dependencies used in both development and production. </p><p>An example would be needing TypeScript added as a dependency for development, but since it compiles to standard JavaScript to be used in production, TypeScript is not needed for production and therefore could be just a <code>devDependency</code>. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm i module-name // install module to dependencies</span><br><span class="line">$ npm i --save-dev module-name // install to dev dependencies</span><br><span class="line">$ npm i --save-dev module-name@1.19 // install a specific version (1.19 here) of module</span><br></pre></td></tr></table></figure><p>Installing dependencies adds the dependency to your package.json file in the format:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"prettier"</span>: <span class="string">"^2.2.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The version states what was installed, but it also clarifies how it can be updated should you remove the node_modules and package-lock.json files and reinstall all dependencies with <code>$ npm install</code>.</p><h3 id="package-lock-json"><a href="#package-lock-json" class="headerlink" title="package-lock.json"></a>package-lock.json</h3><p><code>package-lock.json</code> contains all of the information for the dependencies of the modules you have installed.</p><p>It is best practice to add <code>package-lock.json</code> as well as .<code>/node_modules</code> to your <code>.gitignore</code> file when using a repository. The <code>node_modules</code> folder can grow rapidly, containing thousands of files. It is best to clone a repository without <code>node_modules</code> and run <code>npm install</code> to reinstall all dependencies of the project directly from npm.</p><h3 id="npm-update"><a href="#npm-update" class="headerlink" title="npm update"></a>npm update</h3><p>running <code>$ npm update</code> will update all of your dependencies based on the specifications given in your package.json file.</p><h3 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h3><p>To run a script that you have added to your package.json file, simply run <code>$ npm run</code> argument with the name of the script as the argument.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run prettier</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// touch .prettierrc</span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"semi"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"singleQuote"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"prettier"</span>: <span class="string">"prettier --config .prettierrc 'NPM/**/*.js' --write"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Compiled-vs-Interpreted-Language"><a href="#Compiled-vs-Interpreted-Language" class="headerlink" title="Compiled vs. Interpreted Language"></a>Compiled vs. Interpreted Language</h2><h3 id="Compiled-Language"><a href="#Compiled-Language" class="headerlink" title="Compiled Language"></a>Compiled Language</h3><ul><li>Language is written and compiled to machine code inside of an application</li><li>Errors are detected during compiling</li><li>The code won’t compile until it’s error-free</li><li>Examples: C, C++, Erlang, Go</li></ul><h3 id="JavaScript-is-an-Interpreted-Language"><a href="#JavaScript-is-an-Interpreted-Language" class="headerlink" title="JavaScript is an Interpreted Language"></a>JavaScript is an Interpreted Language</h3><ul><li>Errors found when the code is run</li><li>The interpreter translates and runs code one statement at a time</li><li>Interpreted code runs more slowly</li></ul><h3 id="Node-js-Is-an-Interpreter"><a href="#Node-js-Is-an-Interpreter" class="headerlink" title="Node.js Is an Interpreter"></a>Node.js Is an Interpreter</h3><ul><li>Node.js is mostly written in C++</li><li>Many node modules also include some C++ code</li><li>Other modules include Python or C</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;History-of-Backend-Development&quot;&gt;&lt;a href=&quot;#History-of-Backend-Development&quot; class=&quot;headerlink&quot; title=&quot;History of Backend Development&quot;&gt;
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
      <category term="Node.js" scheme="https://www.qianhongbo.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Notes</title>
    <link href="https://www.qianhongbo.com/Fullstack/JavaScript-Notes.html"/>
    <id>https://www.qianhongbo.com/Fullstack/JavaScript-Notes.html</id>
    <published>2022-03-07T14:08:43.000Z</published>
    <updated>2022-03-25T03:30:14.608Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Null-Undefined-and-NaN"><a href="#Null-Undefined-and-NaN" class="headerlink" title="Null, Undefined and NaN"></a>Null, Undefined and NaN</h2><h3 id="null-means-“value-of-nothing”"><a href="#null-means-“value-of-nothing”" class="headerlink" title="null means “value of nothing”"></a>null means “value of nothing”</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="undefined-means-“absence-of-value”"><a href="#undefined-means-“absence-of-value”" class="headerlink" title="undefined means “absence of value”"></a>undefined means “absence of value”</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><h3 id="NaN-means-“not-a-number”"><a href="#NaN-means-“not-a-number”" class="headerlink" title="NaN means “not a number”"></a>NaN means “not a number”</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// calculating the square root of a negative number will return NaN</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">-10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// trying to divide a string by 5 will return NaN</span></span><br><span class="line"><span class="string">"hello"</span>/<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="Equality"><a href="#Equality" class="headerlink" title="Equality"></a>Equality</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"1"</span> == <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Returns:</strong> true</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"1"</span> === <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Returns:</strong> false</p></blockquote><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = x + y;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sum = add(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><blockquote><p>If you don’t explicitly define a return value, the function will return <code>undefined</code> by default.</p></blockquote><h2 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h2><p>The function can be declared after we call it. The interpreter will help us to change the sequence of the code. </p><p>Also, we can also declare the variable after we use it, but the value we set is still at the original place.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sayHi(<span class="string">"Julia"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(greeting + <span class="string">" "</span> + name);</span><br><span class="line">  <span class="keyword">var</span> greeting;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// result: undefined Julia</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sayHi(<span class="string">"Julia"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(greeting + <span class="string">" "</span> + name);</span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="string">"Hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// result: undefined Julia</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The above function is equal to the following function...</span></span><br><span class="line"><span class="comment">function sayHi(name) &#123;</span></span><br><span class="line"><span class="comment">  var greeting;</span></span><br><span class="line"><span class="comment">  console.log(greeting + " " + name);</span></span><br><span class="line"><span class="comment">  greeting = "Hello";</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Function-Expressions"><a href="#Function-Expressions" class="headerlink" title="Function Expressions"></a>Function Expressions</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> catSays = <span class="function"><span class="keyword">function</span>(<span class="params">max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> catMessage = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">    catMessage += <span class="string">"meow "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> catMessage;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Notice how the <code>function</code> keyword no longer has a name.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> catSays = <span class="function"><span class="keyword">function</span>(<span class="params">max</span>) </span>&#123; </span><br><span class="line">  <span class="comment">// code here </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>It’s an <strong>anonymous function</strong>, a function with no name, and you’ve stored it in a variable called <code>catSays</code>.</p><h3 id="Use-function-expressions-as-parameters"><a href="#Use-function-expressions-as-parameters" class="headerlink" title="Use function expressions as parameters"></a>Use function expressions as parameters</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function expression catSays</span></span><br><span class="line"><span class="keyword">var</span> catSays = <span class="function"><span class="keyword">function</span>(<span class="params">max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> catMessage = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">    catMessage += <span class="string">"meow "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> catMessage;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function declaration helloCat accepting a callback</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloCat</span>(<span class="params">callbackFunc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Hello "</span> + callbackFunc(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pass in catSays as a callback function</span></span><br><span class="line">helloCat(catSays);</span><br></pre></td></tr></table></figure><h3 id="Inline-function-expressions"><a href="#Inline-function-expressions" class="headerlink" title="Inline function expressions"></a>Inline function expressions</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> favoriteMovie = <span class="function"><span class="keyword">function</span> <span class="title">displayFavorite</span>(<span class="params">movieName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"My favorite movie is "</span> + movieName);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">movies</span>(<span class="params">messageFunction, name</span>) </span>&#123;</span><br><span class="line">  messageFunction(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">movies(favoriteMovie, <span class="string">"Finding Nemo"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">movies</span>(<span class="params">messageFunction, name</span>) </span>&#123;</span><br><span class="line">  messageFunction(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">movies(<span class="function"><span class="keyword">function</span> <span class="title">displayFavorite</span>(<span class="params">movieName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"My favorite movie is "</span> + movieName);</span><br><span class="line">&#125;, <span class="string">"Finding Nemo"</span>);</span><br></pre></td></tr></table></figure><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// creates a `donuts` array with three strings</span></span><br><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"powdered"</span>, <span class="string">"jelly"</span>];</span><br></pre></td></tr></table></figure><p>But strings aren’t the only type of data you can store in an array. You can also store numbers, booleans… and really anything!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// creates a `mixedData` array with mixed data types</span></span><br><span class="line"><span class="keyword">var</span> mixedData = [<span class="string">"abcd"</span>, <span class="number">1</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">null</span>, <span class="string">"all the things"</span>];</span><br></pre></td></tr></table></figure><p>You can even store an array in an array to create a <strong>nested array</strong>!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arraysInArrays = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">  [<span class="string">"Julia"</span>, <span class="string">"James"</span>], </span><br><span class="line">  [<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="Indexing"><a href="#Indexing" class="headerlink" title="Indexing"></a>Indexing</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"powdered"</span>, <span class="string">"sprinkled"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(donuts[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h3 id="Length"><a href="#Length" class="headerlink" title="Length"></a>Length</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"powdered"</span>, <span class="string">"sprinkled"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(donuts.length);</span><br></pre></td></tr></table></figure><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"chocolate frosted"</span>, <span class="string">"Boston creme"</span>, <span class="string">"glazed cruller"</span>, <span class="string">"cinnamon sugar"</span>, <span class="string">"sprinkled"</span>];</span><br><span class="line">donuts.push(<span class="string">"powdered"</span>); </span><br><span class="line"><span class="comment">// the `push()` method returns 7 because the `donuts` array now has 7 elements</span></span><br></pre></td></tr></table></figure><h3 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"chocolate frosted"</span>, <span class="string">"Boston creme"</span>, <span class="string">"glazed cruller"</span>, <span class="string">"cinnamon sugar"</span>, <span class="string">"sprinkled"</span>, <span class="string">"powdered"</span>];</span><br><span class="line">donuts.pop(); </span><br><span class="line"><span class="comment">// pops "powdered" off the end of the `donuts` array</span></span><br></pre></td></tr></table></figure><h3 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"jelly donut"</span>, <span class="string">"chocolate donut"</span>, <span class="string">"glazed donut"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; donuts.length; i++) &#123;</span><br><span class="line">    donuts[i] += <span class="string">" hole"</span>;</span><br><span class="line">    donuts[i] = donuts[i].toUpperCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="forEach-loop"><a href="#forEach-loop" class="headerlink" title="forEach loop"></a>forEach loop</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"jelly donut"</span>, <span class="string">"chocolate donut"</span>, <span class="string">"glazed donut"</span>];</span><br><span class="line"></span><br><span class="line">donuts.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">donut</span>) </span>&#123;</span><br><span class="line">  donut += <span class="string">" hole"</span>;</span><br><span class="line">  donut = donut.toUpperCase();</span><br><span class="line">  <span class="built_in">console</span>.log(donut);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The function that you pass to the <code>forEach()</code> method can take up to three parameters. In the video, these are called <code>element</code>, <code>index</code>, and <code>array</code>, but you can call them whatever you like.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">"cat"</span>, <span class="string">"in"</span>, <span class="string">"hat"</span>];</span><br><span class="line">words.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">word, num, all</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Word "</span> + num + <span class="string">" in "</span> + all.toString() + <span class="string">" is "</span> + word);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Result:</span></span><br><span class="line"><span class="comment">Word 0 in cat,in,hat is cat</span></span><br><span class="line"><span class="comment">Word 1 in cat,in,hat is in</span></span><br><span class="line"><span class="comment">Word 2 in cat,in,hat is hat</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>With the <code>map()</code> method, you can take an array, perform some operation on each element of the array, and return <strong>a new array</strong>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"jelly donut"</span>, <span class="string">"chocolate donut"</span>, <span class="string">"glazed donut"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> improvedDonuts = donuts.map(<span class="function"><span class="keyword">function</span>(<span class="params">donut</span>) </span>&#123;</span><br><span class="line">  donut += <span class="string">" hole"</span>;</span><br><span class="line">  donut = donut.toUpperCase();</span><br><span class="line">  <span class="keyword">return</span> donut;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">donuts array: ["jelly donut", "chocolate donut", "glazed donut"]</span></span><br><span class="line"><span class="comment">improvedDonuts array: ["JELLY DONUT HOLE", "CHOCOLATE DONUT HOLE", "GLAZED DONUT HOLE"]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sister = &#123;</span><br><span class="line">  name: <span class="string">"Sarah"</span>,</span><br><span class="line">  age: <span class="number">23</span>,</span><br><span class="line">  parents: [ <span class="string">"alice"</span>, <span class="string">"andy"</span> ],</span><br><span class="line">  siblings: [<span class="string">"julia"</span>],</span><br><span class="line">  favoriteColor: <span class="string">"purple"</span>,</span><br><span class="line">  pets: <span class="literal">true</span>,</span><br><span class="line">  paintPicture: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"Sarah paints!"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sister.paintPicture();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Return: </span></span><br><span class="line"><span class="comment">"Sarah paints!"</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Null-Undefined-and-NaN&quot;&gt;&lt;a href=&quot;#Null-Undefined-and-NaN&quot; class=&quot;headerlink&quot; title=&quot;Null, Undefined and NaN&quot;&gt;&lt;/a&gt;Null, Undefined and
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
      <category term="JavaScript" scheme="https://www.qianhongbo.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>lambda expression in C++</title>
    <link href="https://www.qianhongbo.com/Backend/C++/lambda-expression-in-C.html"/>
    <id>https://www.qianhongbo.com/Backend/C++/lambda-expression-in-C.html</id>
    <published>2022-02-26T08:22:27.000Z</published>
    <updated>2022-02-27T00:46:41.895Z</updated>
    
    <content type="html"><![CDATA[<p>There are three ways to call the function.</p><ul><li>Just call</li><li>Function pointer</li><li>Lambda expression</li></ul><h2 id="Just-call"><a href="#Just-call" class="headerlink" title="Just call"></a>Just call</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> foo(<span class="keyword">size_t</span> aValue) &#123;</span><br><span class="line">    <span class="keyword">return</span> rand() % <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Container</span> &#123;</span></span><br><span class="line">    Container() &#123;</span><br><span class="line">        values.push_back(<span class="number">10</span>);</span><br><span class="line">        values.push_back(<span class="number">20</span>);</span><br><span class="line">        values.push_back(<span class="number">30</span>);</span><br><span class="line">        values.push_back(<span class="number">40</span>);</span><br><span class="line">        values.push_back(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eachFrom</span><span class="params">(<span class="keyword">size_t</span> anIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> ((anIndex = foo(values[anIndex]))) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; values[anIndex] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    Container theContainer;</span><br><span class="line">    theContainer.eachFrom(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Function-pointer"><a href="#Function-pointer" class="headerlink" title="Function pointer"></a>Function pointer</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Container</span> &#123;</span></span><br><span class="line">    Container() &#123;</span><br><span class="line">        values.push_back(<span class="number">10</span>);</span><br><span class="line">        values.push_back(<span class="number">20</span>);</span><br><span class="line">        values.push_back(<span class="number">30</span>);</span><br><span class="line">        values.push_back(<span class="number">40</span>);</span><br><span class="line">        values.push_back(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> EachVisitor = <span class="built_in">std</span>::function&lt;<span class="keyword">size_t</span>(<span class="keyword">size_t</span>)&gt;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eachFrom</span><span class="params">(<span class="keyword">size_t</span> anIndex, EachVisitor aVisitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> ((anIndex = aVisitor(values[anIndex]))) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; values[anIndex] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> foo(<span class="keyword">size_t</span> aValue) &#123;</span><br><span class="line">    <span class="keyword">return</span> rand() % <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    Container theContainer;</span><br><span class="line">    theContainer.eachFrom(<span class="number">1</span>, foo);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lambda-expression"><a href="#Lambda-expression" class="headerlink" title="Lambda expression"></a>Lambda expression</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Container</span> &#123;</span></span><br><span class="line">    Container() &#123;</span><br><span class="line">        values.push_back(<span class="number">10</span>);</span><br><span class="line">        values.push_back(<span class="number">20</span>);</span><br><span class="line">        values.push_back(<span class="number">30</span>);</span><br><span class="line">        values.push_back(<span class="number">40</span>);</span><br><span class="line">        values.push_back(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> EachVisitor = <span class="built_in">std</span>::function&lt;<span class="keyword">size_t</span>(<span class="keyword">size_t</span>)&gt;;</span><br><span class="line">    <span class="keyword">size_t</span> eachFrom(<span class="keyword">size_t</span> anIndex, EachVisitor aVisitor) &#123;</span><br><span class="line">        <span class="keyword">while</span>((anIndex = aVisitor(values[anIndex]))) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"value"</span> &lt;&lt; values[anIndex] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>)); </span><br><span class="line">    Container theContainer;</span><br><span class="line">    theContainer.eachFrom(<span class="number">1</span>, [&amp;](<span class="keyword">size_t</span> aValue) &#123;<span class="keyword">return</span> rand() % <span class="number">5</span>;&#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;There are three ways to call the function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Just call&lt;/li&gt;
&lt;li&gt;Function pointer&lt;/li&gt;
&lt;li&gt;Lambda expression&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="c++" scheme="https://www.qianhongbo.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Two pointers</title>
    <link href="https://www.qianhongbo.com/LeetCode/Two-pointers.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Two-pointers.html</id>
    <published>2022-02-26T07:29:37.000Z</published>
    <updated>2022-03-24T23:48:04.023Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trap-Rain-Water-LeetCode-42"><a href="#Trap-Rain-Water-LeetCode-42" class="headerlink" title="Trap Rain Water(LeetCode 42)"></a>Trap Rain Water(LeetCode 42)</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining. </p><p><img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Brute-force"><a href="#Brute-force" class="headerlink" title="Brute force"></a>Brute force</h4><p>For every position, find <code>left_max</code> and <code>right_max</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(1) space</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">      <span class="keyword">if</span> height <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(height)):</span><br><span class="line">            left_max, right_max = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                left_max = max(left_max, height[j])</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(i, len(height)):</span><br><span class="line">                right_max = max(right_max, height[k])</span><br><span class="line">            ans += min(left_max, right_max) - height[i]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h4 id="Dynamic-programming"><a href="#Dynamic-programming" class="headerlink" title="Dynamic programming"></a>Dynamic programming</h4><p>We can find that we don’t need to find <code>left_max</code> and <code>right_max</code> at every position. We can traverse the list and store them. Although we improved the time complexity, we use more space than brute force. This is also not a good way.</p><p><img src="https://leetcode.com/problems/trapping-rain-water/Figures/42/trapping_rain_water.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> height <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        theSize = len(height)</span><br><span class="line">        left_max, right_max = [height[<span class="number">0</span>]] * theSize, [height[theSize - <span class="number">1</span>]] * theSize</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, theSize):</span><br><span class="line">            left_max[i] = max(height[i], left_max[i - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(theSize - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            right_max[j] = max(height[j], right_max[j + <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, theSize - <span class="number">1</span>):</span><br><span class="line">            ans += min(left_max[k], right_max[k]) - height[k]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h4 id="Two-pointers"><a href="#Two-pointers" class="headerlink" title="Two pointers"></a>Two pointers</h4><p>The best way for this question is using two pointers, which is also a good way for some array questions. If we don’t want to preserve the data like in dynamic programming way, we can find a way to get the <code>left_max</code> and <code>right_max</code> during the for loop.</p><p>Firstly, set the <code>leftId</code> and <code>rightId</code> as 0, and size. Then, set the <code>left_max</code> and <code>right_max</code> as leftmost value and rightmost value. We should know that we only use the minimum of <code>left_max</code> and <code>right_max</code>, so we should start with smaller side. When we found that the current <code>left_max</code> or <code>right_max</code> is larger than another one. We should change to another side. This ensures that we always use the minimun of <code>left_max</code> and <code>right_max</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> height:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left, right = <span class="number">0</span>, len(height) - <span class="number">1</span></span><br><span class="line">        left_max, right_max = height[left], height[right]</span><br><span class="line">        water = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            <span class="keyword">if</span> left_max &lt; right_max:</span><br><span class="line">                left_max = max(left_max, height[left])</span><br><span class="line">                water += left_max - height[left]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right_max = max(right_max, height[right])</span><br><span class="line">                water += right_max - height[right]</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> water</span><br></pre></td></tr></table></figure><h4 id="Using-stacks"><a href="#Using-stacks" class="headerlink" title="Using stacks"></a>Using stacks</h4><p>This way is not the best and also not easy to understand. The main idea is to track and compute the <code>V</code> shape, because it is only possible to trap vater in <code>V</code> shape.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, heights: List[int])</span> -&gt; int:</span></span><br><span class="line">        stack, trapped_water = [], <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> hi_index, height <span class="keyword">in</span> enumerate(heights):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> height &gt;= heights[stack[<span class="number">-1</span>]]:</span><br><span class="line">                ground_height = heights[stack.pop()]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                     <span class="keyword">continue</span></span><br><span class="line">                lo_index = stack[<span class="number">-1</span>]</span><br><span class="line">                water_line = min(heights[lo_index], height)</span><br><span class="line">                trapped_water += (water_line - ground_height) * (hi_index - lo_index - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            stack.append(hi_index)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> trapped_water</span><br></pre></td></tr></table></figure><h2 id="Merge-Sorted-Array"><a href="#Merge-Sorted-Array" class="headerlink" title="Merge Sorted Array"></a>Merge Sorted Array</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <strong>non-decreasing order</strong>, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p><p><strong>Merge</strong> <code>nums1</code> and <code>nums2</code> into a single array sorted in <strong>non-decreasing order</strong>.</p><p>The final sorted array should not be returned by the function, but instead be stored inside the array <code>nums1</code>. To accommodate this, <code>nums1</code> has a length of <code>m + n</code>, where the first <code>m</code> elements denote the elements that should be merged, and the last <code>n</code> elements are set to <code>0</code> and should be ignored. <code>nums2</code> has a length of <code>n</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3</span><br><span class="line">Output: [1,2,2,3,5,6]</span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Brute-Force-Merge-and-sort"><a href="#Brute-Force-Merge-and-sort" class="headerlink" title="Brute Force: Merge and sort"></a>Brute Force: Merge and sort</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O((n+m)log(n+m)) time | O(n) space</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1: List[int], m: int, nums2: List[int], n: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="comment"># Write the elements of num2 into the end of nums1.</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">            nums1[i + m] = nums2[i]</span><br><span class="line">        <span class="comment"># Sort nums1 list in-place.</span></span><br><span class="line">        nums1.sort()</span><br></pre></td></tr></table></figure><h4 id="Three-Pointers-Start-from-the-beginning"><a href="#Three-Pointers-Start-from-the-beginning" class="headerlink" title="Three Pointers (Start from the beginning)"></a>Three Pointers (Start from the beginning)</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n+m) time | O(m) space</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1: List[int], m: int, nums2: List[int], n: int)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="comment"># must copy the nums1[:m] first...</span></span><br><span class="line">        <span class="comment"># can't use nums1_copy = nums1, because it will be alias</span></span><br><span class="line">        nums1_copy = nums1[:m]</span><br><span class="line">        idx1 = <span class="number">0</span></span><br><span class="line">        idx2 = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m + n):</span><br><span class="line">            <span class="comment"># have to put idx2 &gt;= n before... need to check it first</span></span><br><span class="line">            <span class="comment"># or the list will be out of the index...</span></span><br><span class="line">            <span class="keyword">if</span> idx2 &gt;= n <span class="keyword">or</span> (idx1 &lt; m <span class="keyword">and</span> nums1_copy[idx1] &lt;= nums2[idx2]):</span><br><span class="line">                nums1[i] = nums1_copy[idx1]</span><br><span class="line">                idx1 += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1[i] = nums2[idx2]</span><br><span class="line">                idx2 += <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Three-Pointers-Start-from-the-end"><a href="#Three-Pointers-Start-from-the-end" class="headerlink" title="Three Pointers (Start from the end)"></a>Three Pointers (Start from the end)</h3><p>Approach 2 already demonstrates the best possible time complexity, but still uses additional space. This is because the elements of array <code>nums1</code> have to be stored somwhere so that they aren’t overwritten.</p><p>So, if instead we start to overwrite <code>nums1</code> from the end, we can solve this problem.</p><blockquote><p><strong>Interview Tip</strong>: Whenever you’re trying to solve an array problem in-place, always consider the possibility of iterating backwards instead of forwards through the array. It can completely change the problem, and make it a lot easier.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n+m) time | O(1) space</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1: List[int], m: int, nums2: List[int], n: int)</span> -&gt; <span class="keyword">None</span>:</span>   </span><br><span class="line">        idx1 = m - <span class="number">1</span></span><br><span class="line">        idx2 = n - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m + n - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> idx2 &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> idx1 &gt;= <span class="number">0</span> <span class="keyword">and</span> nums1[idx1] &gt; nums2[idx2]:</span><br><span class="line">                nums1[i] = nums1[idx1]</span><br><span class="line">                idx1 -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                nums1[i] = nums2[idx2]</span><br><span class="line">                idx2 -= <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Trap-Rain-Water-LeetCode-42&quot;&gt;&lt;a href=&quot;#Trap-Rain-Water-LeetCode-42&quot; class=&quot;headerlink&quot; title=&quot;Trap Rain Water(LeetCode 42)&quot;&gt;&lt;/a&gt;Trap
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Java Notes 4</title>
    <link href="https://www.qianhongbo.com/Backend/Java/Java-Notes-4.html"/>
    <id>https://www.qianhongbo.com/Backend/Java/Java-Notes-4.html</id>
    <published>2022-02-24T13:03:49.000Z</published>
    <updated>2022-02-25T06:18:01.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><h3 id="What-is-Reflection"><a href="#What-is-Reflection" class="headerlink" title="What is Reflection?"></a>What is Reflection?</h3><p><strong>Reflection</strong>, which is sometimes called <strong>introspection</strong>, is the ability of a program to examine its own structure at runtime.</p><h3 id="Static-vs-Dynamic-Code"><a href="#Static-vs-Dynamic-Code" class="headerlink" title="Static vs Dynamic Code"></a>Static vs Dynamic Code</h3><h4 id="Static-Code"><a href="#Static-Code" class="headerlink" title="Static Code"></a>Static Code</h4><p>Normally, when you write a program, all the class names, method names, and variable names are known <em>statically</em>, when the code is being written and compiled:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Foo myObject = <span class="keyword">new</span> Foo();</span><br></pre></td></tr></table></figure><p>Static code gives you the benefit of <strong>static analysis</strong>, which includes compile-type checking of static symbols like class and method names, and useful IDE features like auto-completion.</p><p>The Java compiler will return an error if you used an invalid class or method name.</p><h4 id="Dynamic-Code"><a href="#Dynamic-Code" class="headerlink" title="Dynamic Code"></a>Dynamic Code</h4><p>You can also create a <code>Foo</code> object <em>without</em> static symbol names. This is sometimes called <em>dynamic</em> coding:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object myObject = Class.forName(<span class="string">"Foo"</span>).getConstructor().newInstance();</span><br></pre></td></tr></table></figure><p>Writing this kind of code, you won’t get any static or compile-time checks to make sure you got the class name correct. If you run this code and there is no class named “Foo”, a <code>ClassNotFoundException</code> will be thrown.</p><h3 id="What-are-Annotations"><a href="#What-are-Annotations" class="headerlink" title="What are Annotations?"></a>What are Annotations?</h3><p><strong>Annotations</strong> are a way to provide extra metadata about your program. Annotations only provide metadata — they have no other effect on execution of the annotated code.</p><h4 id="Common-built-in-annotations"><a href="#Common-built-in-annotations" class="headerlink" title="Common built-in annotations"></a>Common built-in annotations</h4><table><thead><tr><th>Annotations</th><th>Description</th></tr></thead><tbody><tr><td><code>@Override</code></td><td>Tells the compuler that a method is inteded to iverride a superclass method.</td></tr><tr><td><code>@Deprecated</code></td><td>Indicated that a method is deprecated an should not be used. Using it will result in a compiler warning.</td></tr><tr><td><code>@FunctionalInterface</code></td><td>Tells the compuler that the annotated interface is intended to be a functional interface.</td></tr><tr><td><code>@SuppressWarnings</code></td><td>Stops the compuler from generating warnings such as for type casting or deprecation warnings.</td></tr></tbody></table><h3 id="Defining-custom-annotations"><a href="#Defining-custom-annotations" class="headerlink" title="Defining custom annotations"></a>Defining custom annotations</h3><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)  <span class="comment">// Applies to class, interface, or enum</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConvertsTo &#123;</span><br><span class="line">  Class&lt;?&gt; targetClass();</span><br><span class="line">  <span class="function">String <span class="title">setterPrefix</span><span class="params">()</span> <span class="keyword">default</span> "set"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Test &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Retention-Policies"><a href="#Retention-Policies" class="headerlink" title="Retention Policies"></a>Retention Policies</h4><p>Here are the possible retention policies for an annotation:</p><table><thead><tr><th align="left"><strong>Retention Policy</strong></th><th align="left"><strong>Description</strong></th></tr></thead><tbody><tr><td align="left"><code>SOURCE</code></td><td align="left">Annotation only exists in the source code.</td></tr><tr><td align="left"><code>RUNTIME</code></td><td align="left">Annotation exists in the .class bytecode file and is available at runtime to be used with reflection.</td></tr><tr><td align="left"><code>CLASS</code></td><td align="left">Annotation exists in the <code>.class</code> bytecode file but not exist while the program is running.</td></tr></tbody></table><h4 id="Annotation-Targets"><a href="#Annotation-Targets" class="headerlink" title="Annotation Targets"></a>Annotation Targets</h4><p>The target types determine which parts of the program can be given a particular annotation. Here are the possible target types:</p><table><thead><tr><th align="left"><strong>Element Type</strong></th><th align="left"><strong>Description</strong></th></tr></thead><tbody><tr><td align="left"><code>ANNOTATION_TYPE</code></td><td align="left">Annotation type declarations (for annotations that apply to other annotations).</td></tr><tr><td align="left"><code>CONSTRUCTOR</code></td><td align="left">Constructor declarations</td></tr><tr><td align="left"><code>FIELD</code></td><td align="left">Field declarations, including enum constants.</td></tr><tr><td align="left"><code>LOCAL_VARIABLE</code></td><td align="left">Local variable declarations.</td></tr><tr><td align="left"><code>METHOD</code></td><td align="left">Method declarations.</td></tr><tr><td align="left"><code>PACKAGE</code></td><td align="left">Package declarations.</td></tr><tr><td align="left"><code>PARAMETER</code></td><td align="left">Method parameter declarations.</td></tr><tr><td align="left"><code>TYPE</code></td><td align="left">Type declarations, such as classes, interfaces, annotation types, and enum declarations.</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Test &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reflection-API"><a href="#Reflection-API" class="headerlink" title="Reflection API"></a>Reflection API</h3><p>Every class, interface, and type (including primitive types) has a corresponding <code>Class</code> object that accesses metadata about that type.</p><p><code>Class</code> objects are the main entry point into Java’s <strong>Reflection API</strong>.</p><h4 id="Obtaining-Class-Objects"><a href="#Obtaining-Class-Objects" class="headerlink" title="Obtaining Class Objects"></a>Obtaining <code>Class</code> Objects</h4><p>There are many ways to get <code>Class</code> objects:</p><ul><li><p>Call <code>getClass()</code> on an object:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;String&gt; c = <span class="string">"Hello world!"</span>.getClass();</span><br></pre></td></tr></table></figure></li><li><p>Use <code>.class</code> to create a class literal:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;String&gt; c = String.class;</span><br><span class="line">Class&lt;<span class="keyword">int</span>[]&gt;  c = <span class="keyword">int</span>[].class;</span><br></pre></td></tr></table></figure></li><li><p>Create classes dynamically using <code>Class.forName()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;String&gt; c = Class.forName(<span class="string">"java.lang.String"</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="Working-with-Methods"><a href="#Working-with-Methods" class="headerlink" title="Working with Methods"></a>Working with Methods</h4><p>Using the <code>Class</code> API, you can also obtain <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/reflect/Method.html" target="_blank" rel="noopener"><code>Method</code></a> objects.</p><p><code>Method</code>s have some smiliar functionality as <code>Class</code>es, such as finding annotations and listing qualifiers, but methods can also be invoked by calling <code>Method.invoke()</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Method m = String.class.getMethod(<span class="string">"equals"</span>, Object.class);</span><br><span class="line">m.invoke(<span class="string">"foo"</span>, <span class="string">"bar"</span>);</span><br><span class="line"><span class="comment">// This is the same as `"foo".equals("bar")` return false</span></span><br></pre></td></tr></table></figure><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;?&gt;&gt; TESTS = List.of(CalculatorTest.class);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; passed = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; failed = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; klass : TESTS) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!UnitTest.class.isAssignableFrom(klass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Class "</span> + klass.toString() + <span class="string">" must implement UnitTest"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (Method method : klass.getDeclaredMethods()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getAnnotation(Test.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            UnitTest test = (UnitTest) klass.getConstructor().newInstance();</span><br><span class="line">            test.beforeEachTest();</span><br><span class="line">            method.invoke(test);</span><br><span class="line">            test.afterEachTest();</span><br><span class="line">            passed.add(getTestName(klass, method));</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            failed.add(getTestName(klass, method));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"Passed tests: "</span> + passed);</span><br><span class="line">    System.out.println(<span class="string">"FAILED tests: "</span> + failed);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getTestName</span><span class="params">(Class&lt;?&gt; klass, Method method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> klass.getName() + <span class="string">"#"</span> + method.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reflection&quot;&gt;&lt;a href=&quot;#Reflection&quot; class=&quot;headerlink&quot; title=&quot;Reflection&quot;&gt;&lt;/a&gt;Reflection&lt;/h2&gt;&lt;h3 id=&quot;What-is-Reflection&quot;&gt;&lt;a href=&quot;#Wha
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="Java" scheme="https://www.qianhongbo.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Kadane&#39;s Algorithm</title>
    <link href="https://www.qianhongbo.com/LeetCode/Kadane&#39;s%20Algorithm.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Kadane&#39;s Algorithm.html</id>
    <published>2022-02-23T02:42:03.000Z</published>
    <updated>2022-02-23T18:56:29.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Write a function that takes in a non-empty array of integers an returns the maximum sum that can be obtained by summing up all of the integers in a non empty sunarray of the input array. A subarray must only contain adjacent numbers.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">-9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">-2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">-9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span> // [<span class="number">1</span>, <span class="number">3</span>, <span class="number">-2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">-9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The reason why this question is not that straightforward is that there exists negative number in the array. If the negative number is small enough, we need to discard all preceding numbers and it.</p><p>Compare the sum ending here with the number here. Save the bigger number as <code>maxEndingHere</code>. If the number here is negative and small enough, we just save the next number. </p><p>Compare all the <code>maxEndingHere</code>, the maximum <code>maxSoFar</code> will be the final result.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kadanesAlgorithm</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Find the maximum sum that can be obtained by </span></span><br><span class="line"><span class="string">    all of the integers of the subarray of input array.</span></span><br><span class="line"><span class="string">    :param array: an array</span></span><br><span class="line"><span class="string">    :return: the maximum sum</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> isinstance(array, list)</span><br><span class="line"></span><br><span class="line">    maxEndingHere = array[<span class="number">0</span>]</span><br><span class="line">    maxSoFar = array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(array)):</span><br><span class="line">        num = array[i]</span><br><span class="line">        maxEndingHere = max(maxEndingHere + num, num)</span><br><span class="line">        maxSoFar = max(maxSoFar, maxEndingHere)</span><br><span class="line">    <span class="keyword">return</span> maxSoFar</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h2&gt;&lt;p&gt;Write a function that takes in a non-empty arr
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Connect different classes in C++</title>
    <link href="https://www.qianhongbo.com/Backend/C++/Connect-different-classes-in-C.html"/>
    <id>https://www.qianhongbo.com/Backend/C++/Connect-different-classes-in-C.html</id>
    <published>2022-02-19T10:04:57.000Z</published>
    <updated>2022-02-20T02:19:20.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description"></a>Problem description</h2><p>How to connect different classes, but they don’t know each other?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="IMessenger-Interface"><a href="#IMessenger-Interface" class="headerlink" title="IMessenger Interface"></a>IMessenger Interface</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IMessenger</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setOther</span><span class="params">(IMessenger *anOther)</span> </span>&#123;other=anOther;&#125;</span><br><span class="line">    </span><br><span class="line">    IMessenger* other;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Two-class"><a href="#Two-class" class="headerlink" title="Two class"></a>Two class</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> :</span> <span class="keyword">public</span> IMessenger &#123;</span><br><span class="line">    A() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tell</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> override </span>&#123;</span><br><span class="line">        other-&gt;receive(aMsg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A got "</span> &lt;&lt; aMsg &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> :</span> <span class="keyword">public</span> IMessenger &#123;</span><br><span class="line">    B() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tell</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> override </span>&#123;</span><br><span class="line">        other-&gt;receive(aMsg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B got "</span> &lt;&lt; aMsg &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    A theA;</span><br><span class="line">    B theB;</span><br><span class="line">    theA.setOther(&amp;theB);</span><br><span class="line">    theB.setOther(&amp;theA);</span><br><span class="line">    theA.tell(<span class="string">"Hello world!"</span>);</span><br><span class="line">    theB.tell(<span class="string">"Happy everyday!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// B got Hello world!</span></span><br><span class="line"><span class="comment">// A got Happy everyday!</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem-description&quot;&gt;&lt;a href=&quot;#Problem-description&quot; class=&quot;headerlink&quot; title=&quot;Problem description&quot;&gt;&lt;/a&gt;Problem description&lt;/h2&gt;&lt;p&gt;Ho
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="c++" scheme="https://www.qianhongbo.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Sorting</title>
    <link href="https://www.qianhongbo.com/LeetCode/Sorting.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Sorting.html</id>
    <published>2022-02-12T07:00:18.000Z</published>
    <updated>2022-02-17T17:48:13.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Three-Number-Sort"><a href="#Three-Number-Sort" class="headerlink" title="Three Number Sort"></a>Three Number Sort</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>The order is an array of three distinct integers. The first array is guaranteed to only contain integers that are in the second array, and the second array represents a desired order for the integers in the first array.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sample input</span></span><br><span class="line">array = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">order = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample output</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Bucket-sort"><a href="#Bucket-sort" class="headerlink" title="Bucket sort"></a>Bucket sort</h4><p>Traverse the array two times. Get the number of each elements in the order in the  first time. Set the number in the array in the second time.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeNumberSort</span><span class="params">(array, order)</span>:</span></span><br><span class="line">    buckets = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">buckets[order.index(i)] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line"><span class="keyword">if</span> i &lt; buckets[<span class="number">0</span>]: </span><br><span class="line">array[i] = order[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">elif</span> i &lt; buckets[<span class="number">0</span>] + buckets[<span class="number">1</span>]:</span><br><span class="line">array[i] = order[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">array[i] = order[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><h4 id="Two-pointers"><a href="#Two-pointers" class="headerlink" title="Two pointers"></a>Two pointers</h4><p>Still traverse two times using two pointers.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"> ^  ^      </span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ^  ^ </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ^          ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">               ^        ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">           ^         ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">          ^         ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line"> ^              ^</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeNumberSort</span><span class="params">(array, order)</span>:</span></span><br><span class="line">    Idx = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line"><span class="keyword">if</span> array[i] == order[<span class="number">0</span>]:</span><br><span class="line">array[Idx], array[i] = array[i], array[Idx]</span><br><span class="line">Idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Idy = len(array) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len(array))):</span><br><span class="line"><span class="keyword">if</span> array[i] == order[<span class="number">-1</span>]:</span><br><span class="line">array[Idy], array[i] = array[i], array[Idy]</span><br><span class="line">Idy -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><h4 id="Three-pointers"><a href="#Three-pointers" class="headerlink" title="Three pointers"></a>Three pointers</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"> ^  ^                   ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ^  ^                ^      </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">       ^   ^            ^   </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^  ^         ^  </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^      ^     ^  </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^     ^  ^  </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^        ^ </span><br><span class="line">                ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^        ^   ^</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeNumberSort</span><span class="params">(array, order)</span>:</span></span><br><span class="line">    Idx0, Idx1, Idx2 = <span class="number">0</span>, <span class="number">0</span>, len(array) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> Idx1 &lt;= Idx2:</span><br><span class="line">value = array[Idx1]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value == order[<span class="number">0</span>]:</span><br><span class="line">array[Idx0], array[Idx1] = array[Idx1], array[Idx0]</span><br><span class="line">Idx0 += <span class="number">1</span></span><br><span class="line">Idx1 += <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> value == order[<span class="number">1</span>]:</span><br><span class="line">Idx1 += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">array[Idx1], array[Idx2] = array[Idx2], array[Idx1]</span><br><span class="line">Idx2 -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><h2 id="Search-in-Sorted-Matrix"><a href="#Search-in-Sorted-Matrix" class="headerlink" title="Search in Sorted Matrix"></a>Search in Sorted Matrix</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">matrix = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">1000</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">5</span>, <span class="number">19</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1001</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">33</span>, <span class="number">35</span>, <span class="number">1002</span>],</span><br><span class="line">  [<span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">1003</span>],</span><br><span class="line">  [<span class="number">99</span>, <span class="number">100</span>, <span class="number">103</span>, <span class="number">106</span>, <span class="number">128</span>, <span class="number">1004</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">target = <span class="number">44</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># output = [3, 3]</span></span><br></pre></td></tr></table></figure><p>If the matrix does not contain the integer, return [-1, -1].</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchInSortedMatrix</span><span class="params">(matrix, target)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    search the target  number in a sorted matrix</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param matrix: a two dimensional array of distinct integers. each row is sorted; each column is sorted</span></span><br><span class="line"><span class="string">    :param target: a target integer</span></span><br><span class="line"><span class="string">    :return: an array of the row and column indices of the target integer</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> isinstance(matrix, list)</span><br><span class="line">    <span class="keyword">assert</span> isinstance(target, int)</span><br><span class="line"></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    column = len(matrix[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> row &lt; len(matrix) <span class="keyword">and</span> column &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> matrix[row][column] &gt; target:</span><br><span class="line">            column -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> matrix[row][column] &lt; target:</span><br><span class="line">            row += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> [row, column]</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Three-Number-Sort&quot;&gt;&lt;a href=&quot;#Three-Number-Sort&quot; class=&quot;headerlink&quot; title=&quot;Three Number Sort&quot;&gt;&lt;/a&gt;Three Number Sort&lt;/h2&gt;&lt;h3 id=&quot;Quest
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>c++多层Switch简化</title>
    <link href="https://www.qianhongbo.com/Backend/C++/c-%E5%A4%9A%E5%B1%82Switch%E7%AE%80%E5%8C%96.html"/>
    <id>https://www.qianhongbo.com/Backend/C++/c-多层Switch简化.html</id>
    <published>2022-02-10T10:07:40.000Z</published>
    <updated>2022-02-17T17:45:58.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何简化多层switch条件判断"><a href="#如何简化多层switch条件判断" class="headerlink" title="如何简化多层switch条件判断"></a>如何简化多层switch条件判断</h2><h3 id="Logic-before"><a href="#Logic-before" class="headerlink" title="Logic before"></a>Logic before</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">      <span class="keyword">case</span>(Bird):</span><br><span class="line">      <span class="keyword">switch</span>(color) &#123;</span><br><span class="line">        <span class="keyword">case</span> Red: ...</span><br><span class="line">          <span class="keyword">case</span> Blue ...</span><br><span class="line">      <span class="keyword">case</span> Fox ...</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Simplify"><a href="#Simplify" class="headerlink" title="Simplify"></a>Simplify</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span>  &#123;</span>Red, Blue, End_&#125;;</span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span>Bird, Fox, Lizard, End_&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Enum&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_t <span class="title">enumValue</span><span class="params">(Enum aValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(aValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Enum&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_t <span class="title">param</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> enumValue(Enum::End_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Just like a hash map</span></span><br><span class="line"><span class="comment">// Map every situation to an int</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Enum1, <span class="keyword">typename</span> Enum2&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_t <span class="title">combineEnums</span><span class="params">(Enum1 e1, Enum2 e2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> enumValue(e1) + param&lt;Enum1&gt;() * enumValue(e2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> theC1 = combineEnums(Color::Red, Animal::Lizard);</span><br><span class="line">    <span class="keyword">switch</span>(theC1) &#123;</span><br><span class="line">        case combineEnums(Color::Red, Animal::Bird):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Red Bird\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Red, Animal::Fox):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Red Fox\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Red, Animal::Lizard):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Red Lizard\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Blue, Animal::Bird):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Blue Bird\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Blue, Animal::Fox):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Blue Fox\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Blue, Animal::Lizard):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Blue Lizard\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何简化多层switch条件判断&quot;&gt;&lt;a href=&quot;#如何简化多层switch条件判断&quot; class=&quot;headerlink&quot; title=&quot;如何简化多层switch条件判断&quot;&gt;&lt;/a&gt;如何简化多层switch条件判断&lt;/h2&gt;&lt;h3 id=&quot;Logic-bef
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="c++" scheme="https://www.qianhongbo.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Data Structure</title>
    <link href="https://www.qianhongbo.com/Data%20Structure/Data-Structure.html"/>
    <id>https://www.qianhongbo.com/Data Structure/Data-Structure.html</id>
    <published>2022-02-02T02:50:06.000Z</published>
    <updated>2022-02-10T04:13:11.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gyrm73geuxj319q0u041v.jpg" alt="image-20220126100207323"></p><h3 id="Bit"><a href="#Bit" class="headerlink" title="Bit"></a>Bit</h3><p>Short for binary digit. It represents <code>0</code> and <code>1</code>.</p><h3 id="Byte"><a href="#Byte" class="headerlink" title="Byte"></a>Byte</h3><p>A group of <code>8</code> bits. For example, <code>01101000</code> is a byte.</p><p>A single byte can represent up to <code>256</code> data values($2^8$).</p><h3 id="Fixed-width-integer"><a href="#Fixed-width-integer" class="headerlink" title="Fixed-width integer"></a>Fixed-width integer</h3><p>An integer represented by a fixed amount of bits. For example, a 32-bit integer is an an integer represented by <code>32</code> bits(<code>4</code> bytes), and a 64-bit integer is an integer represented by <code>64</code> bits(<code>8</code> bytes).</p><h3 id="Memory-1"><a href="#Memory-1" class="headerlink" title="Memory"></a>Memory</h3><ul><li>Data stored in memory is stored in bytes and, by extension, bits.</li><li>Bytes in memory can point to other bytes in memory, so as to store references to other data.</li><li>The amount of memory that a machine has is bounded, making it valuable to limit how much memory an algorithm takes up.</li><li>Accessing a byte or a fixed number of bytesis an elementary operation.</li></ul><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>The following are an array’s standard operations and their corresponding time complexities:</p><ol><li>Accessing a value at a given index: <code>O(1)</code></li><li>Updating a value at a given index: <code>O(1)</code></li><li>Inserting a value at the beginning: <code>O(n)</code></li><li>Inserting a value in the middle: <code>O(n)</code></li><li>Inserting a value at the end: <code>O(1)</code> for dynamic array; <code>O(n)</code> for static array</li><li>Removing a value at the beginning: <code>O(n)</code></li><li>Removing a value in the middle: <code>O(n)</code></li><li>Removing a value at the end: <code>O(1)</code></li><li>Copying the array: <code>O(n)</code></li></ol><blockquote><p>A static array is an implementation of an array that allocates a fixed amount of memory to be used for storing the array’s values. Appending values to the array therefor involves copying the entire array and allocating new memory for it. This is a linear time operation.</p><p>A lot of popular programming languages like JavaScript and Python implement arrays as dynamic arrays.</p></blockquote><h2 id="Linked-Lists"><a href="#Linked-Lists" class="headerlink" title="Linked Lists"></a>Linked Lists</h2><h3 id="Singly-Linked-Lists"><a href="#Singly-Linked-Lists" class="headerlink" title="Singly Linked Lists"></a>Singly Linked Lists</h3><p>A linked list node’s value and next node are typically stored in <code>value</code> and <code>next</code> properties.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; null</span><br></pre></td></tr></table></figure><p>A singly linked list typically exposes its head to its user for easy access. While finding a node in a singly linked list involves traversing through all of the nodes leading up to the node in question (as opposed to instant access with an array).</p><ol><li>Accessing the head: <code>O(1)</code></li><li>Accessing the tail: <code>O(n)</code></li><li>Accessing the middle node: <code>O(n)</code></li><li>Inserting/Removing the head: <code>O(1)</code></li><li>Inserting/Removing the tail: <code>O(n)</code> + <code>O(1)</code></li><li>Inserting/Removing a middle node: <code>O(n)</code> + <code>O(1)</code></li><li>Searching for a value: <code>O(n)</code></li></ol><h3 id="Doubly-Linked-List"><a href="#Doubly-Linked-List" class="headerlink" title="Doubly Linked List"></a>Doubly Linked List</h3><p>A doubly linked list also has a pointer to the previous node in the linked list. THe previous node is typically stored in a <code>prev</code> property.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null &lt;- 0 &lt;-&gt; 1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; 4 &lt;-&gt; 5 &lt;-&gt; 6 &lt;-&gt; 7 -&gt; null</span><br></pre></td></tr></table></figure><p>The doubly linked list typically exposes both its head an tail to its user.</p><ol><li>Accessing the head: <code>O(1)</code></li><li>Accessing the tail: <code>O(1)</code></li><li>Accessing the middle node: <code>O(n)</code></li><li>Inserting/Removing the head: <code>O(1)</code></li><li>Inserting/Removing the tail:  <code>O(1)</code></li><li>Inserting/Removing a middle node: <code>O(n)</code> + <code>O(1)</code></li><li>Searching for a value: <code>O(n)</code></li></ol><h2 id="Hash-Tables"><a href="#Hash-Tables" class="headerlink" title="Hash Tables"></a>Hash Tables</h2><p>Under the hood, a hash table uses a dynamic array of linked lists to efficiently store key/value pairs. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0: (value1, key1) -&gt; null</span><br><span class="line">1: (value2, key2) -&gt; (value3, key3) -&gt; (value4, key4)</span><br><span class="line">2: (value5, key5) -&gt; null</span><br><span class="line">3: (value6, key6) -&gt; null</span><br><span class="line">4: null</span><br><span class="line">5: (value7, key7) -&gt; (value8, key8)</span><br><span class="line">6: (value9, key9) -&gt; null</span><br></pre></td></tr></table></figure><p>Hash table rely on highly optimized hash functions to minimize the number of <code>collisions</code> than occur when storing values: cases where two keys map to the same index.</p><ol><li>Inserting a key/value pair: <code>O(1)</code> on average; <code>O(n)</code> in the worse case</li><li>Removing a key/value pair: <code>O(1)</code> on average; <code>O(n)</code> in the worse case</li><li>Looking up a key: <code>O(1)</code> on average; <code>O(n)</code> in the worse case</li></ol><p>The worst-case linear time operations occur when a hash table experiences a lot of collisions, leading to long linked lists internally, which take <code>O(n)</code> time to traverse.</p><p>However, in practice and especially in coding interviews, we typically assume that the hash functions employed by hash tables are so optimized that collisions are extremely rare and constant-time operations are all but guaranteed.</p><h2 id="Stacks-and-Queues"><a href="#Stacks-and-Queues" class="headerlink" title="Stacks and Queues"></a>Stacks and Queues</h2><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>An array-like data structure whose elements follow the <code>LIFO</code> rule: Last In, First Out.</p><p>A stack is typically implemented with a <code>dynamic array</code>.</p><ol><li>Push an element onto the stack: <code>O(1)</code></li><li>Hoping an element onto the stack: <code>O(1)</code></li><li>Peeking at the element on the top of the stack: <code>O(1)</code></li><li>Searching for an element in the stack: <code>O(n)</code></li></ol><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>An array-like data structure whose elements follow the <code>FIFO</code> rule: First In, First Out.</p><p>A queue is typically implemented with a doubly linked list.</p><ol><li>Enqueuing an element into the queue: <code>O(1)</code></li><li>Dequeuing an element out of the queue: <code>O(1)</code></li><li>Peeking at the element ar the front of the queue: <code>O(1)</code></li><li>Searching for an lement in the queue: <code>O(n)</code></li></ol><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>Strings are stored in memory as arrays of integers, where each character in a given string is mapped to an integer via some characer encoding standard like <code>ASCII</code>.</p><p>If the character is encoded in ASCII, it requires one byte. 1 byte(256) can cover all of the English characters. </p><p>Stri ngs behave much like normal arrays. In most programming languages(<code>C++</code> is a notable exception), strings are immutable, meaning that they can’t be edited after creation. This also means that simple operations like appending a chracter to a string are more expensive than they might appear.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"this is a string"</span></span><br><span class="line">newString = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> character <span class="keyword">in</span> string:</span><br><span class="line">newString += character</span><br></pre></td></tr></table></figure><p>The operation above has a time complexity of <code>O(n2)</code> where n is the length of string, because each addition of a character to newString creates an entirely new string and is itself an <code>O(n)</code> operation. </p><h2 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h2><p>A collection of nodes or values called vertices that might be related; relations between vertices are called edges.</p><h3 id="Graph-cycle"><a href="#Graph-cycle" class="headerlink" title="Graph cycle"></a>Graph cycle</h3><p>A cycle occurs in a graph when three or more vertices in the graph are connected so as to form a closed loop</p><ul><li>Acyclic graph: A graph that has no cycles.</li><li>Cyclic graph: A graph that has at least one cycle.</li></ul><h3 id="Directed-and-undirected-graph"><a href="#Directed-and-undirected-graph" class="headerlink" title="Directed and undirected graph"></a>Directed and undirected graph</h3><ul><li>Directed graph: they can only be reversed in one direction, which is specified.</li><li>Undirected graph: they can be traversed in both directions.</li></ul><h3 id="Connected-graph"><a href="#Connected-graph" class="headerlink" title="Connected graph"></a>Connected graph</h3><p>A graph is connected if for every pair of vertices in the graph, there is a path of one or more edges connecting the given vertices.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Memory&quot;&gt;&lt;a href=&quot;#Memory&quot; class=&quot;headerlink&quot; title=&quot;Memory&quot;&gt;&lt;/a&gt;Memory&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008i3skNgy1gyr
      
    
    </summary>
    
      <category term="Data Structure" scheme="https://www.qianhongbo.com/categories/Data-Structure/"/>
    
    
  </entry>
  
  <entry>
    <title>Reverse Integer</title>
    <link href="https://www.qianhongbo.com/LeetCode/Reverse-Integer.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Reverse-Integer.html</id>
    <published>2022-02-01T02:02:27.000Z</published>
    <updated>2022-02-01T18:16:14.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reverse-Integer"><a href="#Reverse-Integer" class="headerlink" title="Reverse Integer"></a>Reverse Integer</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> <em>with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range $[-2^{31}, 2^{31} - 1]$, then return $0$.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 123</span><br><span class="line">Output: 321</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: x = -123</span><br><span class="line">Output: -321</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 120</span><br><span class="line">Output: 21</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time complexity: O(log10(n))</span></span><br><span class="line"><span class="comment"># Space complexity: O(1)  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        INT_MAX = <span class="number">2</span>**<span class="number">31</span><span class="number">-1</span></span><br><span class="line">        INT_MIN = <span class="number">-2</span>**<span class="number">31</span></span><br><span class="line">        <span class="keyword">while</span> x != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x &gt; <span class="number">0</span>: </span><br><span class="line">                remain = x % <span class="number">10</span></span><br><span class="line">                x //= <span class="number">10</span></span><br><span class="line">            <span class="keyword">else</span>: </span><br><span class="line">                remain = x % <span class="number">-10</span></span><br><span class="line">                x = -(x//<span class="number">-10</span>)</span><br><span class="line">            <span class="keyword">if</span> result &gt; INT_MAX / <span class="number">10</span> <span class="keyword">or</span> (result == INT_MAX // <span class="number">10</span> <span class="keyword">and</span> remain &gt; <span class="number">7</span>): <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> result &lt; INT_MIN / <span class="number">10</span> <span class="keyword">or</span> (result == INT_MIN // <span class="number">10</span> <span class="keyword">and</span> remain &lt; <span class="number">-8</span>): <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            result = result * <span class="number">10</span> + remain</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><blockquote><p>python的取余和java并不一样，<a href="https://zhuanlan.zhihu.com/p/70819721" target="_blank" rel="noopener">一篇很好的解释文章</a></p></blockquote><h2 id="Palindrome-Number"><a href="#Palindrome-Number" class="headerlink" title="Palindrome Number"></a>Palindrome Number</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 121</span><br><span class="line">Output: true</span><br><span class="line">Explanation: 121 reads as 121 from left to right and from right to left.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: x = -121</span><br><span class="line">Output: false</span><br><span class="line">Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time complexity: O(log10(n))</span></span><br><span class="line"><span class="comment"># Space complexity: O(1)  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> (x % <span class="number">10</span> == <span class="number">0</span> <span class="keyword">and</span> x != <span class="number">0</span>): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        reversedNumber = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; reversedNumber:</span><br><span class="line">            reversedNumber = reversedNumber * <span class="number">10</span> + x % <span class="number">10</span></span><br><span class="line">            x = x // <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> reversedNumber == x <span class="keyword">or</span> x == reversedNumber // <span class="number">10</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reverse-Integer&quot;&gt;&lt;a href=&quot;#Reverse-Integer&quot; class=&quot;headerlink&quot; title=&quot;Reverse Integer&quot;&gt;&lt;/a&gt;Reverse Integer&lt;/h2&gt;&lt;h3 id=&quot;Question&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
</feed>
