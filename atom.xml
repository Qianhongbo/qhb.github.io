<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog | Qian Homeberg</title>
  
  <subtitle>Look! Who is here! Welcome~~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.qianhongbo.com/"/>
  <updated>2022-12-06T22:27:55.238Z</updated>
  <id>https://www.qianhongbo.com/</id>
  
  <author>
    <name>Qian Hongbo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>gcc makefile c++</title>
    <link href="https://www.qianhongbo.com/Backend/C++/gcc-makefile-c.html"/>
    <id>https://www.qianhongbo.com/Backend/C++/gcc-makefile-c.html</id>
    <published>2022-12-06T06:04:44.000Z</published>
    <updated>2022-12-06T22:27:55.238Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><code>gcc</code>是<code>GNU Compiler Collection</code>（就是GNU编译器套件），也可以简单认为是编译器，它可以编译很<strong>多种编程语言</strong>（包括<code>C</code>、<code>C++</code>、<code>Objective-C</code>、<code>Fortran</code>、<code>Java</code>等等）。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>当你的程序只有<strong>一个</strong>源文件时，直接就可以用gcc命令编译它。</p></li><li><p>但是当你的程序包含很<strong>多个</strong>源文件时，用gcc命令逐个去编译时，你就很容易混乱而且工作量大</p></li></ul><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><p>所以出现了<code>make</code>工具，make工具可以看成是一个智能的批处理工具，它本身并没有编译和链接的功能，而是用类似于批处理的方式—通过调用<code>makefile</code>文件中用户指定的命令来进行编译和链接的。</p><h3 id="makefile"><a href="#makefile" class="headerlink" title="makefile"></a>makefile</h3><p><code>makefile</code>简单的说就像一首歌的乐谱，make工具就像指挥家，指挥家根据乐谱指挥整个乐团怎么样演奏，make工具就根据makefile中的命令进行编译和链接的。</p><p>makefile命令中就包含了调用gcc（也可以是别的编译器）去编译某个源文件的命令。</p><p>makefile在一些简单的工程完全可以人工手下，但是当工程非常大的时候，手写makefile也是非常麻烦的，如果换了个平台makefile又要重新修改。</p><h3 id="cmake"><a href="#cmake" class="headerlink" title="cmake"></a>cmake</h3><p>这时候就出现了<code>cmake</code>这个工具，cmake就可以更加简单的生成makefile文件给上面那个make用。当然cmake还有其他功能，就是可以跨平台生成对应平台能用的makefile，你不用再自己去修改了。</p><p>可是cmake根据什么生成makefile呢？它又要根据一个叫CMakeLists.txt文件（学名：组态档）去生成makefile。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CMake ———&gt; makefile （包含调用gcc的命令）————&gt; make工具 —————&gt; 编译链接源文件</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc (选项) (参数)</span><br></pre></td></tr></table></figure><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-o：指定生成的输出文件；</span><br><span class="line">-E：仅执行编译预处理；</span><br><span class="line">-S：将C代码转换为汇编代码；</span><br><span class="line">-wall：显示警告信息；</span><br><span class="line">-c：仅执行编译操作，不进行连接操作。</span><br><span class="line">-l：用来指定程序要链接的库，-l参数紧接着就是库名</span><br><span class="line">-I：寻找头文件的目录</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>C源文件：指定C语言源代码文件。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>常用编译命令选项</strong></p><p>假设源程序文件名为test.c</p><p><strong>无选项编译链接</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc test.c</span><br></pre></td></tr></table></figure><p>将 <code>test.c</code> 预处理、汇编、编译并链接形成可执行文件。这里未指定输出文件，默认输出为 <code>a.out</code>。</p><p><strong>选项 -o</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc test.c -o test</span><br></pre></td></tr></table></figure><p>将 <code>test.c</code> 预处理、汇编、编译并链接形成可执行文件 <code>test</code>。<code>-o</code> 选项用来指定输出文件的文件名。</p><p><strong>选项 -E</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -E test.c -o test.i</span><br></pre></td></tr></table></figure><p>将 <code>test.c</code> 预处理输出 <code>test.i</code> 文件。</p><p><strong>选项 -S</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -S test.i</span><br></pre></td></tr></table></figure><p>将预处理输出文件 <code>test.i</code> 汇编成 <code>test.s</code> 文件。</p><p><strong>选项 -c</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c test.s</span><br></pre></td></tr></table></figure><p>将汇编输出文件 <code>test.s</code> 编译输出 <code>test.o</code> 文件。</p><p><strong>无选项链接</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc test.o -o test</span><br></pre></td></tr></table></figure><p>将编译输出文件 <code>test.o</code> 链接成最终可执行文件 <code>test</code>。</p><p><strong>选项 -O</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -O1 test.c -o test</span><br></pre></td></tr></table></figure><p>使用编译优化级别1编译程序。级别为1~3，级别越大优化效果越好，但编译时间越长。</p><p><strong>多源文件的编译方法</strong></p><p>如果有多个源文件，基本上有两种编译方法：</p><p>假设有两个源文件为 <code>test.c</code> 和 <code>testfun.c</code></p><p><strong>多个文件一起编译</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc testfun.c test.c -o test</span><br></pre></td></tr></table></figure><p>将 <code>testfun.c</code> 和 <code>test.c</code> 分别编译后链接成 <code>test</code> 可执行文件。</p><p><strong>分别编译各个源文件，之后对编译后输出的目标文件链接。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -c testfun.c    #将testfun.c编译成testfun.o</span><br><span class="line">gcc -c test.c       #将test.c编译成test.o</span><br><span class="line">gcc testfun.o test.o -o test   #将testfun.o和test.o链接成test</span><br></pre></td></tr></table></figure><p>以上两种方法相比较，第一中方法编译时需要所有文件重新编译，而第二种方法可以只重新编译修改的文件，未修改的文件不用重新编译。</p><p><strong>加载动态链接库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -lpthread -o hello</span><br></pre></td></tr></table></figure><p><strong>手动添加文件头路径</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -lpthread -I /lib64/ -o hello</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;gcc&quot;&gt;&lt;a href=&quot;#gcc&quot; class=&quot;headerlink&quot; title=&quot;gcc&quot;&gt;&lt;/a&gt;gcc&lt;/h2&gt;&lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;p
      
    
    </summary>
    
      <category term="c++" scheme="https://www.qianhongbo.com/categories/c/"/>
    
    
      <category term="c++" scheme="https://www.qianhongbo.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>内存对齐</title>
    <link href="https://www.qianhongbo.com/Backend/C++/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90.html"/>
    <id>https://www.qianhongbo.com/Backend/C++/内存对齐.html</id>
    <published>2022-11-20T05:16:35.000Z</published>
    <updated>2022-12-06T22:27:55.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内存对齐的目的"><a href="#内存对齐的目的" class="headerlink" title="内存对齐的目的"></a>内存对齐的目的</h2><p>主要是由于 CPU 的访问内存的特性决定，CPU 访问内存时并不是以字节为单位来读取内存，而是<strong>以机器字长为单位</strong>，实际机器字长<strong>由 CPU 数据总线宽度决定</strong>的。实际 CPU 运行时，每一次控制内存读写信号发生时，CPU 可以从内存中读取数据总线宽度的数据，并将其写入到 CPU 的通用寄存器中。比如 32 位 CPU，机器字长为 <strong>4 字节</strong>，数据总线宽度为 32 位，如果该 CPU 的地址总线宽度也是为 3232 位，则其可以访问的地址空间为[0,0xffffffff]。</p><p>内存对齐的主要目的是为了<strong>减少 CPU 访问内存的次数</strong>，<strong>加大 CPU 访问内存的吞吐量</strong>。假设读取 8 个字节的数据，按照每次读取 4 个字节的速度，则 8 个字节需要 CPU 耗费 2 次读取操作。CPU 始终以字长访问内存，如果不进行内存对齐，很可能增加 CPU 访问内存的次数。</p><p><img src="https://pic.leetcode-cn.com/1661173255-dXASLi-1_5_1.png" alt></p><p>比如以上在读取变量 <code>b</code> 时，如果不进行内存对齐的话，会导致 <code>CPU</code> 读取次数为 <code>2</code>，在内存对齐的情况下，只需读取一次即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内存对齐的目的&quot;&gt;&lt;a href=&quot;#内存对齐的目的&quot; class=&quot;headerlink&quot; title=&quot;内存对齐的目的&quot;&gt;&lt;/a&gt;内存对齐的目的&lt;/h2&gt;&lt;p&gt;主要是由于 CPU 的访问内存的特性决定，CPU 访问内存时并不是以字节为单位来读取内存，而是&lt;st
      
    
    </summary>
    
      <category term="c++" scheme="https://www.qianhongbo.com/categories/c/"/>
    
    
      <category term="c++" scheme="https://www.qianhongbo.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>变量定义</title>
    <link href="https://www.qianhongbo.com/Backend/C++/%E5%8F%98%E9%87%8F%E5%AE%9A%E4%B9%89.html"/>
    <id>https://www.qianhongbo.com/Backend/C++/变量定义.html</id>
    <published>2022-11-20T05:03:16.000Z</published>
    <updated>2022-12-06T22:27:55.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="四种变量"><a href="#四种变量" class="headerlink" title="四种变量"></a>四种变量</h2><ul><li><strong>全局变量</strong>：具有全局作用域。全局变量只需在一个源文件中定义，就可以作用于所有的源文件。其他不包含全局变量定义的源文件需要用 extern 关键字再次声明这个全局变量。</li><li><strong>静态全局变量</strong>：具有文件作用域。它与全局变量的区别在于如果程序包含多个文件的话，它作用于定义它的文件里，不能作用到其它文件里，即被 static 关键字修饰过的变量具有文件作用域。这样即使两个不同的源文件都定义了相同名字的静态全局变量，它们也是不同的变量。</li><li><strong>局部变量</strong>：具有局部作用域。它是自动对象（auto），在程序运行期间不是一直存在，而是只在函数执行期间存在，函数的一次调用执行结束后，变量被撤销，其所占用的内存也被收回，局部变量对于函数外部的程序来说是不可见的。当然内部实际更复杂，实际是以 {} 为作用域的。</li><li><strong>静态局部变量</strong>：具有局部作用域。它只被初始化一次，自从第一次被初始化直到程序运行结束都一直存在，它和全局变量的区别在于全局变量对所有的函数都是可见的，而静态局部变量只对定义自己的函数体始终可见, 只有定义<strong>该变量的函数内部</strong>可以使用访问和修改该变量。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> g_var = <span class="number">0</span>; <span class="comment">// 全局变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">char</span> *gs_var;  <span class="comment">// 静态全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var;                    <span class="comment">// 局部变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> s_var = <span class="number">0</span>;       <span class="comment">// 静态局部变量</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> g_var = <span class="number">0</span>; <span class="comment">// 访问全局变量</span></span><br><span class="line"><span class="comment">// extern static char *gs_var;  无法访问静态全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    g_var = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><ul><li><strong>全局变量</strong>: 全局变量在整个程序运行期间都会一直存在，都可以随时访问，当程序结束时，对应的变量则会自动销毁，内存会被系统回收。</li><li><strong>局部变量</strong>: 局部变量的生命周期仅限于函数被调用期间，当函数调用结束时，该变量会自动销毁。</li><li><strong>静态局部变量</strong>：实际上静态局部变量的作用域仅限于函数内部，它的作用域与局部变量相同，但实际上该变量在程序运行期间是一直存在的，生命周期贯穿于整个程序运行期间。局部静态变量只能被初始化一次。</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>静态变量和栈变量（存储在栈中的变量）、堆变量（存储在堆中的变量）的区别：静态变量会被放在程序的静态数据存储区（.data 段，bss 段，rodata 段）中（静态变量会自动初始化），这样可以在下一次调用的时候还可以保持原来的赋值。而栈变量或堆变量不能保证在下一次调用的时候依然保持原来的值。</li><li>静态变量和全局变量的区别：静态变量仅在变量的作用范围内可见，实际是依靠编译器来控制作用域。全局变量在整个程序范围内都可可见，只需声明该全局变量，即可使用。</li><li>全局变量定义在不要在头文件中定义：如果在头文件中定义全局变量，当该头文件被多个文件 include 时，该头文件中的全局变量就会被定义多次，编译时会因为重复定义而报错，因此不能再头文件中定义全局变量。一般情况下我们将变量的定义放在 .cpp 文件中，一般在 .h 文件使用extern 对变量进行声明。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;四种变量&quot;&gt;&lt;a href=&quot;#四种变量&quot; class=&quot;headerlink&quot; title=&quot;四种变量&quot;&gt;&lt;/a&gt;四种变量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局变量&lt;/strong&gt;：具有全局作用域。全局变量只需在一个源文件中定义，就可以作用于所有的源
      
    
    </summary>
    
      <category term="c++" scheme="https://www.qianhongbo.com/categories/c/"/>
    
    
      <category term="c++" scheme="https://www.qianhongbo.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>编译与链接</title>
    <link href="https://www.qianhongbo.com/Backend/C++/%E7%BC%96%E8%AF%91%E4%B8%8E%E9%93%BE%E6%8E%A5.html"/>
    <id>https://www.qianhongbo.com/Backend/C++/编译与链接.html</id>
    <published>2022-11-20T03:23:15.000Z</published>
    <updated>2022-12-06T22:27:55.241Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译的目的"><a href="#编译的目的" class="headerlink" title="编译的目的"></a>编译的目的</h2><p>我们常见的C/C++ 语言，CPU 是无法理解的，这就需要将我们编写好的代码最终翻译为机器可执行的<strong>二进制指令</strong>，编译的过程本质上也即是翻译的过程，当然中间涉及的细节非常复杂。</p><h2 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h2><p>编译器读取源文件 cpp，并将其翻译为可执行文件「ELF」，ELF 文件可以经过操作系统进行加载执行。常见的编译过程分为四个过程：<strong>编译预处理、编译、汇编、链接</strong>。</p><p><img src="https://pic.leetcode-cn.com/1661172766-jkudLd-1_1_1.png" alt></p><ul><li>编译预处理：在预编译过程中主要处理源代码中的预处理指令，比如引入头文件（#include），去除注释，处理所有的条件编译指令（#ifdef, #ifndef, #else, #elif, #endif），宏的替换（#define），添加行号，保留所有的编译器指令；</li><li>编译：针对预处理后的文件进行<strong>词法分析、语法分析、语义分析、符号汇总、汇编代码</strong>生成，并针对程序的结构或者特定的 CPU 平台进行<strong>优化</strong>，其中涉及的过程较为复杂。简单来说编译的过程即为将 .cpp 源文件翻译成 <strong>.s</strong> 的汇编代码；</li><li>汇编：将汇编代码 .s 翻译成机器指令 <strong>.o</strong> 文件，一个 .cpp 文件只会生成一个 .o 文件；</li><li>链接：汇编程序生成的目标文件即为 .o 文件，单独的 .o 文件可能无法执行。因为一个程序可能由多个源文件组成，此时就存在多个 .o 文件。文件 A 中的函数引用了另一个文件 B 中定义的符号或者调用了某个库文件中的函数，这就需要链接处理。那链接的目的就是<strong>将这些文件对应的目标文件连接成一个整体</strong>，从而生成一个可被操作系统加载执行的ELF 程序文件。</li></ul><h2 id="静态链接与动态链接"><a href="#静态链接与动态链接" class="headerlink" title="静态链接与动态链接"></a>静态链接与动态链接</h2><ul><li><strong>静态链接</strong>：代码在生成可执行文件时，将该程序所需要的<strong>全部</strong>外部调用函数全部<strong>拷贝</strong>到最终的<strong>可执行程序文件中</strong>，在该程序被执行时，该程序运行时所需要的全部代码都会被装入到该进程的虚拟地址空间中。在 Linux 系统下，静态链接库一般以 <strong>.a</strong> 文件，我们可以将多个 .o 文件链接成一个静态链接库。</li><li><strong>动态链接</strong>：代码在生成可执行文件时，该程序所调用的部分程序被放到动态链接库或共享对象的某个目标文件中，链接程序只是在最终的可执行程序中<strong>记录了共享对象的名字等一些信息</strong>，最终生成的 ELF 文件中并<strong>不包含</strong>这些调用程序二进制指令。在程序执行时，当需要调用这部分程序时，操作系统会从将这些动态链或者共享对象进行加载，并将全部内容会被<strong>映射</strong>到该进行运行的虚拟地址的空间。在 Linux 系统下，动态链接库一般以 <strong>.so</strong> 文件，我们可以将多个 .o 文件链接成一个动态链接库。</li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><table><thead><tr><th></th><th>静态链接</th><th>动态链接</th></tr></thead><tbody><tr><td>空间</td><td>浪费空间，每个可执行程序都会有目标文件的一个副本</td><td>动态链接节省内存</td></tr><tr><td>更新</td><td>如果目标文件进行了更新操作，就需要重新进行编译链接生成可执行程序（更新困难）</td><td>更新方便</td></tr><tr><td>效率</td><td>执行的时候运行速度快，因为可执行程序具备了程序运行的所有内容</td><td>相比静态链接会有一定的性能损失</td></tr><tr><td>连接方式</td><td>静态链接是由连接器完成的</td><td>动态链接最终是由操作系统来完成链接的功能</td></tr></tbody></table><blockquote><p>动态链接在不同的操作系统下可能由不同的实现原理，比如在 Linux 系统下，动态链接库通常以 <strong>.so</strong> 文件存在，在 windows 下同下，动态链接库一般以 <strong>.dll</strong> 文件存在。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编译的目的&quot;&gt;&lt;a href=&quot;#编译的目的&quot; class=&quot;headerlink&quot; title=&quot;编译的目的&quot;&gt;&lt;/a&gt;编译的目的&lt;/h2&gt;&lt;p&gt;我们常见的C/C++ 语言，CPU 是无法理解的，这就需要将我们编写好的代码最终翻译为机器可执行的&lt;strong&gt;二
      
    
    </summary>
    
      <category term="c++" scheme="https://www.qianhongbo.com/categories/c/"/>
    
    
      <category term="c++" scheme="https://www.qianhongbo.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>内存管理</title>
    <link href="https://www.qianhongbo.com/Backend/operating-system/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html"/>
    <id>https://www.qianhongbo.com/Backend/operating-system/内存管理.html</id>
    <published>2022-11-19T14:32:12.000Z</published>
    <updated>2022-12-06T22:27:55.241Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h1><h2 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h2><h3 id="引入的目的"><a href="#引入的目的" class="headerlink" title="引入的目的"></a>引入的目的</h3><p>把进程所使用的地址「隔离」开来，即让操作系统为每个进程分配独立的一套「<strong>虚拟地址</strong>」，互不干涉。但是有个前提每个进程都不能访问物理地址，至于虚拟地址最终怎么落到物理内存里，对进程来说是透明的，操作系统已经把这些都安排的明明白白了。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><blockquote><p><strong>操作系统会提供一种机制，将不同进程的虚拟地址和不同内存的物理地址映射起来。</strong></p><p>如果程序要访问虚拟地址的时候，由操作系统转换成不同的物理地址，这样不同的进程运行的时候，写入的是不同的物理地址，这样就不会冲突了。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/72ab76ba697e470b8ceb14d5fc5688d9.png" alt></p><h3 id="操作系统管理虚拟地址与物理地址之间的关系：分页和分段"><a href="#操作系统管理虚拟地址与物理地址之间的关系：分页和分段" class="headerlink" title="操作系统管理虚拟地址与物理地址之间的关系：分页和分段"></a>操作系统管理虚拟地址与物理地址之间的关系：<strong>分页和分段</strong></h3><h4 id="内存分段-Segmentation"><a href="#内存分段-Segmentation" class="headerlink" title="内存分段 Segmentation"></a>内存分段 Segmentation</h4><p>分段的好处是能产生连续的内存空间，但是会出现外部内存碎片和内存交换过大的问题。</p><p>段选择因子和段内偏移量：</p><ul><li><strong>段选择子</strong>就保存在段寄存器里面。段选择子里面最重要的是<strong>段号</strong>，用作段表的索引。<strong>段表</strong>里面保存的是这个<strong>段的基地址、段的界限和特权等级</strong>等。</li><li>虚拟地址中的<strong>段内偏移量</strong>应该位于 0 和段界限之间，如果段内偏移量是合法的，就将段基地址加上段内偏移量得到物理内存地址。</li></ul><p><img src="https://img-blog.csdnimg.cn/c5e2ab63e6ee4c8db575f3c7c9c85962.png" alt></p><p>但它也有一些不足之处：</p><ul><li>第一个就是<strong>内存碎片</strong>的问题。（外部内存碎片）原因：些未分配的连续内存区域太小，以至于不能满足任意进程的内存分配请求。解决方法是内存交换。</li><li>第二个就是<strong>内存交换的效率低</strong>的问题。原因：经常会产生外部碎片，需要进行和硬盘之间的内存交换，重新Swap区域，会产生性能瓶颈。</li></ul><h4 id="内存分页-Paging"><a href="#内存分页-Paging" class="headerlink" title="内存分页 Paging"></a>内存分页 Paging</h4><p><strong>分页是把整个虚拟和物理内存空间切成一段段固定尺寸的大小</strong>。这样一个连续并且尺寸固定的内存空间，我们叫<strong>页</strong>（<em>Page</em>）。在 Linux 下，每一页的大小为 <code>4KB</code>。</p><p><img src="https://img-blog.csdnimg.cn/388a29f45fe947e5a49240e4eff13538.png" alt></p><h5 id="缺页异常"><a href="#缺页异常" class="headerlink" title="缺页异常"></a>缺页异常</h5><p>而当进程访问的虚拟地址在页表中查不到时，系统会产生一个<strong>缺页异常</strong>，进入系统内核空间分配物理内存、更新进程页表，最后再返回用户空间，恢复进程的运行。</p><h5 id="内部碎片"><a href="#内部碎片" class="headerlink" title="内部碎片"></a>内部碎片</h5><p><strong>采用了分页，页与页之间是紧密排列的，所以不会有外部碎片。</strong>但是，因为内存分页机制分配内存的最小单位是一页，即使程序不足一页大小，我们最少只能分配一个页，所以页内会出现内存浪费，所以针对<strong>内存分页机制会有内部内存碎片</strong>的现象。</p><h5 id="换入换出"><a href="#换入换出" class="headerlink" title="换入换出"></a>换入换出</h5><p>如果内存空间不够，操作系统会把其他正在运行的进程中的「最近没被使用」的内存页面给释放掉，也就是暂时写在硬盘上，称为<strong>换出</strong>（<em>Swap Out</em>）。一旦需要的时候，再加载进来，称为<strong>换入</strong>（<em>Swap In</em>）。所以，一次性写入磁盘的也只有少数的一个页或者几个页，不会花太多时间，<strong>内存交换的效率就相对比较高。</strong></p><p><img src="https://img-blog.csdnimg.cn/8f187878c809414ca2486b0b71e8880e.png" alt></p><h5 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h5><p>有<strong>空间</strong>上的缺陷。</p><p>在 32 位的环境下，虚拟地址空间共有 4GB，假设一个页的大小是 4KB（2^12），那么就需要大约 100 万 （2^20） 个页，每个「页表项」需要 4 个字节大小来存储，那么整个 4GB 空间的映射就需要有 <code>4MB</code> 的内存来存储页表。</p><p>这 4MB 大小的页表，看起来也不是很大。但是要知道每个进程都是有自己的虚拟地址空间的，也就说都有自己的页表。</p><p>那么，<code>100</code> 个进程的话，就需要 <code>400MB</code> 的内存来存储页表，这是非常大的内存了，更别说 64 位的环境了。</p><h5 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h5><p>将页表（一级页表）分为 <code>1024</code> 个页表（二级页表），每个表（二级页表）中包含 <code>1024</code> 个「页表项」，形成<strong>二级分页</strong>。</p><p><img src="https://img-blog.csdnimg.cn/19296e249b2240c29f9c52be70f611d5.png" alt></p><blockquote><p>如果使用了二级分页，一级页表就可以覆盖整个 4GB 虚拟地址空间，但<strong>如果某个一级页表的页表项没有被用到，也就不需要创建这个页表项对应的二级页表了，即可以在需要时才创建二级页表</strong>。</p></blockquote><blockquote><p>那么为什么不分级的页表就做不到这样节约内存呢？</p><p>我们从页表的性质来看，保存在内存中的页表承担的职责是将虚拟地址翻译成物理地址。假如虚拟地址在页表中找不到对应的页表项，计算机系统就不能工作了。所以<strong>页表一定要覆盖全部虚拟地址空间，不分级的页表就需要有 100 多万个页表项来映射，而二级分页则只需要 1024 个页表项</strong></p></blockquote><blockquote><p>对于 64 位的系统，两级分页肯定不够了，就变成了四级目录</p></blockquote><h5 id="TLB"><a href="#TLB" class="headerlink" title="TLB"></a>TLB</h5><p>多级页表虽然解决了空间上的问题，但是虚拟地址到物理地址的转换就多了几道转换的工序，这显然就降低了这俩地址转换的速度，也就是带来了时间上的开销。</p><p>我们就可以利用这一特性，把最常访问的几个页表项存储到访问速度更快的硬件，于是计算机科学家们，就在 CPU 芯片中，加入了一个专门存放程序最常访问的页表项的 Cache，这个 Cache 就是 TLB（<em>Translation Lookaside Buffer</em>） ，通常称为页表缓存、转址旁路缓存、快表等。</p><p><img src="https://img-blog.csdnimg.cn/a3cdf27646b24614a64cfc5d7ccffa35.png" alt></p><h4 id="段页式内存管理"><a href="#段页式内存管理" class="headerlink" title="段页式内存管理"></a>段页式内存管理</h4><h5 id="管理方式"><a href="#管理方式" class="headerlink" title="管理方式"></a>管理方式</h5><ul><li>先将程序划分为多个有逻辑意义的段，也就是前面提到的分段机制；</li><li>接着再把每个段划分为多个页，也就是对分段划分出来的连续空间，再划分固定大小的页；</li></ul><p>这样，地址结构就由<strong>段号、段内页号和页内位移</strong>三部分组成。</p><p><img src="https://img-blog.csdnimg.cn/8904fb89ae0c49c4b0f2f7b5a0a7b099.png" alt></p><h2 id="Linux的虚拟地址空间分布"><a href="#Linux的虚拟地址空间分布" class="headerlink" title="Linux的虚拟地址空间分布"></a>Linux的虚拟地址空间分布</h2><p>在 Linux 操作系统中，虚拟地址空间的内部又被分为<strong>内核空间和用户空间</strong>两部分，不同位数的系统，地址空间的范围也不同。比如最常见的 32 位和 64 位系统，如下所示：</p><p><img src="https://img-blog.csdnimg.cn/3a6cb4e3f27241d3b09b4766bb0b1124.png" alt></p><ul><li><code>32</code> 位系统的内核空间占用 <code>1G</code>，位于最高处，剩下的 <code>3G</code> 是用户空间；</li><li><code>64</code> 位系统的内核空间和用户空间都是 <code>128T</code>，分别占据整个内存空间的最高和最低处，剩下的中间部分是未定义的。</li></ul><blockquote><p>内核空间与用户空间的区别：</p><ul><li>进程在用户态时，只能访问用户空间内存；</li><li>只有进入内核态后，才可以访问内核空间的内存；</li></ul></blockquote><p>虽然每个进程都各自有独立的虚拟内存，但是<strong>每个虚拟内存中的内核地址，其实关联的都是相同的物理内存</strong>。这样，进程切换到内核态后，就可以很方便地访问内核空间内存。</p><p><img src="https://img-blog.csdnimg.cn/48403193b7354e618bf336892886bcff.png" alt></p><h3 id="用户空间分布"><a href="#用户空间分布" class="headerlink" title="用户空间分布"></a>用户空间分布</h3><p><img src="https://img-blog.csdnimg.cn/img_convert/b4f882b9447760ce5321de109276ec23.png" alt></p><p>通过这张图你可以看到，用户空间内存，从<strong>低到高</strong>分别是 6 种不同的内存段：</p><ul><li>程序文件段（.text），包括二进制可执行代码；</li><li>已初始化数据段（.data），包括静态常量；</li><li>未初始化数据段（.bss），包括未初始化的静态变量；</li><li>堆段，包括动态分配的内存，从低地址开始向上增长；</li><li>文件映射段，包括动态库、共享内存等，从低地址开始向上增长；</li><li>栈段，包括局部变量和函数调用的上下文等。栈的大小是固定的，一般是 <code>8 MB</code>。当然系统也提供了参数，以便我们自定义大小；</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">说明：C++ 中不再区分初始化和未初始化的全局变量、静态变量的存储区，如果非要区分下述程序标注在了括号中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> g_var = <span class="number">0</span>; <span class="comment">// g_var 在全局区（.data 段）</span></span><br><span class="line"><span class="keyword">char</span> *gp_var;  <span class="comment">// gp_var 在全局区（.bss 段）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var;                    <span class="comment">// var 在栈区</span></span><br><span class="line">    <span class="keyword">char</span> *p_var;                <span class="comment">// p_var 在栈区</span></span><br><span class="line">    <span class="keyword">char</span> arr[] = <span class="string">"abc"</span>;         <span class="comment">// arr 为数组变量，存储在栈区；"abc"为字符串常量，存储在常量区</span></span><br><span class="line">    <span class="keyword">char</span> *p_var1 = <span class="string">"123456"</span>;    <span class="comment">// p_var1 在栈区；"123456"为字符串常量，存储在常量区</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> s_var = <span class="number">0</span>;       <span class="comment">// s_var 为静态变量，存在静态存储区（.data 段）</span></span><br><span class="line">    p_var = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span>); <span class="comment">// 分配得来的 10 个字节的区域在堆区</span></span><br><span class="line">    <span class="built_in">free</span>(p_var);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆和栈的区别"><a href="#堆和栈的区别" class="headerlink" title="堆和栈的区别"></a>堆和栈的区别</h3><table><thead><tr><th></th><th>栈</th><th>堆</th></tr></thead><tbody><tr><td>管理方式</td><td>编译器自动管理</td><td>程序员管理</td></tr><tr><td>空间大小</td><td>较小</td><td>较大</td></tr><tr><td>碎片问题</td><td>连续，无碎片</td><td>不连续，有碎片</td></tr><tr><td>分配效率</td><td>高</td><td>低（内存碎片，内核态用户态切换）</td></tr><tr><td>生长方向</td><td>想下</td><td>向上</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内存管理&quot;&gt;&lt;a href=&quot;#内存管理&quot; class=&quot;headerlink&quot; title=&quot;内存管理&quot;&gt;&lt;/a&gt;内存管理&lt;/h1&gt;&lt;h2 id=&quot;虚拟内存&quot;&gt;&lt;a href=&quot;#虚拟内存&quot; class=&quot;headerlink&quot; title=&quot;虚拟内存&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="Operating System" scheme="https://www.qianhongbo.com/tags/Operating-System/"/>
    
      <category term="操作系统" scheme="https://www.qianhongbo.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>C++ data types size</title>
    <link href="https://www.qianhongbo.com/Backend/C++/C-data-types-size.html"/>
    <id>https://www.qianhongbo.com/Backend/C++/C-data-types-size.html</id>
    <published>2022-10-01T05:09:44.000Z</published>
    <updated>2022-10-30T21:07:58.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">the size of bool is: 1</span><br><span class="line">the size of char is: 1</span><br><span class="line">the size of short is: 2</span><br><span class="line">the size of int is: 4</span><br><span class="line">the size of unsigned int is: 4</span><br><span class="line">the size of long is: 8</span><br><span class="line">the size of unsigned long is: 8</span><br><span class="line">the size of float is: 4</span><br><span class="line">the size of double is: 8</span><br><span class="line">the size of long int is: 8</span><br><span class="line">the size of long long is: 8</span><br><span class="line">the size of long double is: 8</span><br><span class="line">the max of short is 32767</span><br><span class="line">the min of short is -32768</span><br><span class="line">the max of int is 2147483647</span><br><span class="line">the min of int is -2147483648</span><br><span class="line">the max of unsigned int is 4294967295</span><br><span class="line">the min of unsigned int is 0</span><br><span class="line">the max of long is 9223372036854775807</span><br><span class="line">the min of long is -9223372036854775808</span><br><span class="line">the max of unsigned long is 18446744073709551615</span><br><span class="line">the min of unsigned long is 0</span><br><span class="line">the max of long long is 9223372036854775807</span><br><span class="line">the min of long long is -9223372036854775808</span><br></pre></td></tr></table></figure><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">bool</span> a;</span><br><span class="line">  <span class="keyword">char</span> b;</span><br><span class="line">  <span class="keyword">short</span> c;</span><br><span class="line">  <span class="keyword">int</span> d;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> e;</span><br><span class="line">  <span class="keyword">long</span> f;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">long</span> g;</span><br><span class="line">  <span class="keyword">float</span> h;</span><br><span class="line">  <span class="keyword">double</span> i;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">int</span> j; <span class="comment">// this is the same as long</span></span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> k; <span class="comment">// for linux x64 long and long long are both 8 bytes</span></span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">double</span> l;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the size of bool is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(a) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the size of char is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(b) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the size of short is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(c) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the size of int is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(d) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the size of unsigned int is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(e) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the size of long is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(f) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the size of unsigned long is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(g) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the size of float is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(h) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the size of double is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(i) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the size of long int is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(j) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the size of long long is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(k) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the size of long double is: "</span> &lt;&lt; <span class="keyword">sizeof</span>(l) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the max of short is "</span> &lt;&lt; <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">short</span>&gt;::max() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the min of short is "</span> &lt;&lt; <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">short</span>&gt;::min() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the max of int is "</span> &lt;&lt; <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">int</span>&gt;::max() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the min of int is "</span> &lt;&lt; <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">int</span>&gt;::min() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the max of unsigned int is "</span> &lt;&lt; <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;::max() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the min of unsigned int is "</span> &lt;&lt; <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">int</span>&gt;::min() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the max of long is "</span> &lt;&lt; <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">long</span>&gt;::max() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the min of long is "</span> &lt;&lt; <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">long</span>&gt;::min() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the max of unsigned long is "</span> &lt;&lt; <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;::max() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the min of unsigned long is "</span> &lt;&lt; <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;::min() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the max of long long is "</span> &lt;&lt; <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;::max() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"the min of long long is "</span> &lt;&lt; <span class="built_in">std</span>::numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">long</span>&gt;::min() &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Result&quot;&gt;&lt;a href=&quot;#Result&quot; class=&quot;headerlink&quot; title=&quot;Result&quot;&gt;&lt;/a&gt;Result&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="c++" scheme="https://www.qianhongbo.com/categories/c/"/>
    
    
      <category term="c++" scheme="https://www.qianhongbo.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>C++ generate random number</title>
    <link href="https://www.qianhongbo.com/Backend/C++/C-generate-random-number.html"/>
    <id>https://www.qianhongbo.com/Backend/C++/C-generate-random-number.html</id>
    <published>2022-09-14T04:27:50.000Z</published>
    <updated>2022-10-30T21:07:58.204Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// initialize random seed</span></span><br><span class="line">  srand(time(<span class="literal">NULL</span>));</span><br><span class="line">  <span class="comment">// * generate random number</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i&#123;<span class="number">0</span>&#125;; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; rand() % <span class="number">10</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// * generate random number in range [a, b), e.g. [3, 6)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i&#123;<span class="number">0</span>&#125;; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; rand() % (<span class="number">6</span> - <span class="number">3</span>) + <span class="number">3</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// * generate random number in range [a, b], e.g. [3, 6]</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i&#123;<span class="number">0</span>&#125;; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; rand() % (<span class="number">6</span> - <span class="number">3</span> + <span class="number">1</span>) + <span class="number">3</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// * generate random number in range (a, b], e.g. (3, 6]</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i&#123;<span class="number">0</span>&#125;; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; rand() % (<span class="number">6</span> - <span class="number">3</span>) + <span class="number">3</span> + <span class="number">1</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1 5 6 4 5 2 1 2 1 9</span></span><br><span class="line"><span class="comment">3 4 3 4 4 5 3 4 5 3</span></span><br><span class="line"><span class="comment">6 5 4 4 5 3 5 4 3 6</span></span><br><span class="line"><span class="comment">4 6 4 4 6 5 6 5 4 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="c++" scheme="https://www.qianhongbo.com/categories/c/"/>
    
    
      <category term="c++" scheme="https://www.qianhongbo.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>AWS CLI</title>
    <link href="https://www.qianhongbo.com/Fullstack/AWS/AWS-CLI.html"/>
    <id>https://www.qianhongbo.com/Fullstack/AWS/AWS-CLI.html</id>
    <published>2022-07-05T07:36:10.000Z</published>
    <updated>2022-07-06T07:34:46.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AWS-console-or-the-CLI"><a href="#AWS-console-or-the-CLI" class="headerlink" title="AWS console or the CLI"></a>AWS console or the CLI</h2><p>Often we are also faced with the decision of using <strong>the AWS console or the CLI</strong>. While in most cases we can accomplish the same with both options, we should prioritize the console when we are learning new services. On the other hand, we must prioritize the CLI when doing repetitive tasks and when writing scripts.</p><h2 id="Create-an-IAM-user"><a href="#Create-an-IAM-user" class="headerlink" title="Create an IAM user"></a>Create an IAM user</h2><ol><li>Go to the IAM dashboard</li><li>Create a new user</li><li>Set user name</li><li>Set the permissions to the new user by attaching the AWS Managed <strong>AdministratorAccess</strong> policy from the list of existing policies.</li><li>After a user is created successfully, download the access key file (.csv) containing the <em>Access Key ID</em> and a <em>Secret Access Key</em>. You can even copy the keys and stay on the same page. <strong>Don’t skip this step as this will be your only opportunity to download the secret access key file.</strong></li></ol><p>AWS will generate an IAM access key when you create an IAM user. <strong>IAM key</strong> is the identity access management key that can identify your application (terminal) to the AWS CLI. The IAM key holds the associated permissions to access your account.</p><h2 id="Install-AWS-CLI-Mac"><a href="#Install-AWS-CLI-Mac" class="headerlink" title="Install AWS CLI (Mac)"></a>Install AWS CLI (Mac)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install awscli</span><br><span class="line">aws --version</span><br></pre></td></tr></table></figure><h2 id="Configure-the-AWS-CLI"><a href="#Configure-the-AWS-CLI" class="headerlink" title="Configure the AWS CLI"></a>Configure the AWS CLI</h2><p>Run the command below to configure the AWS CLI using the <em>Access Key ID</em> and a <em>Secret Access Key</em> generated in the previous step. If you have closed the web console that showed the access key, you can open the downloaded access key file (.csv) to copy the keys later.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws configure</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Prompt</th><th align="left">Value</th></tr></thead><tbody><tr><td align="left">AWS Access Key ID</td><td align="left">[Copy from the classroom]</td></tr><tr><td align="left">AWS Secret Access Key</td><td align="left">[Copy from the classroom]</td></tr><tr><td align="left">Default region name</td><td align="left">us-east-2 OR us-east-1 (or your choice)</td></tr><tr><td align="left">Default output format</td><td align="left">json</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If you are using the Access key of an Admin IAM user, you should reset the `aws_session_token`</span></span><br><span class="line">aws configure <span class="built_in">set</span> aws_session_token <span class="string">""</span> </span><br><span class="line"><span class="comment"># If you are using the Udacity generated Access key, you should set the `aws_session_token`</span></span><br><span class="line">aws configure <span class="built_in">set</span> aws_session_token <span class="string">"XXXXXXXX"</span></span><br></pre></td></tr></table></figure><p>where, <code>&quot;XXXXXXXX&quot;</code> is the session token copied from the classroom after clicking on the “OPEN CLOUD GATEWAY” button.</p><h2 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># View the current configuration</span></span><br><span class="line">aws configure list </span><br><span class="line"><span class="comment"># View all existing profile names</span></span><br><span class="line">aws configure list-profiles</span><br><span class="line"><span class="comment"># In case, you want to change the region in a given profile</span></span><br><span class="line"><span class="comment"># aws configure set &lt;parameter&gt; &lt;value&gt;  --profile &lt;profile-name&gt;</span></span><br><span class="line">aws configure <span class="built_in">set</span> region us-east-1</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># If you've just one profile set locally</span></span><br><span class="line">aws iam list-users</span><br><span class="line"><span class="comment"># If you've multiple profiles set locally</span></span><br><span class="line">aws iam list-users --profile &lt;profile-name&gt;</span><br></pre></td></tr></table></figure><h2 id="Create-a-Bucket-using-the-CLI"><a href="#Create-a-Bucket-using-the-CLI" class="headerlink" title="Create a Bucket using the CLI"></a>Create a Bucket using the CLI</h2><h3 id="Create-a-public-bucket-in-the-us-east-1-region"><a href="#Create-a-public-bucket-in-the-us-east-1-region" class="headerlink" title="Create a public bucket in the us-east-1 region:"></a>Create a public bucket in the us-east-1 region:</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Bucket names are unique across the Internet, just like DNS. </span></span><br><span class="line"><span class="comment"># Replace the `033212455158` part with some other set of digits. </span></span><br><span class="line">aws s3api  create-bucket --bucket mybucket033212455158 --acl bucket-owner-full-control --region us-east-2 --create-bucket-configuration LocationConstraint=us-east-2</span><br></pre></td></tr></table></figure><p>In the command above,</p><ul><li><code>--bucket</code> option specifies the bucket name of your choice. It must be unique across all AWS accounts.</li><li><code>--acl</code> option specifies the accessibility level</li><li><code>--region</code> specifies the AWS region where you want to create this bucket.</li><li><code>--create-bucket-configuration</code>: If you want to create the bucket in the desired region outside of us-east-1, you will need something like <code>--region us-east-2 --create-bucket-configuration LocationConstraint=us-east-2</code> which will set an appropriate LocationConstraint.</li></ul><h3 id="Upload-a-sample-file-to-your-bucket"><a href="#Upload-a-sample-file-to-your-bucket" class="headerlink" title="Upload a sample file to your bucket."></a>Upload a sample file to your bucket.</h3><p>The <strong>sample.html</strong> file used in the command below is present at the bottom of this page.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws s3api put-object --bucket mybucket033212455158 --key sample.html --body sample.html --content-type text/html</span><br></pre></td></tr></table></figure><p>In the command above,</p><ul><li><code>--key</code> option specifies the name you want to assign to your object in the bucket</li><li><code>--body</code> option specifies the file name (complete path) to upload from your local system</li><li><code>--content-type</code> specifies the standard MIME type describing the format of the contents.</li></ul><h3 id="Verification"><a href="#Verification" class="headerlink" title="Verification"></a>Verification</h3><p>Verify the S3 bucket by going to the AWS web console. Alternatively, you can run <code>aws s3 ls</code> in the command line. This will show all of the S3 buckets in your account.</p><h3 id="Delete-the-bucket-and-its-content"><a href="#Delete-the-bucket-and-its-content" class="headerlink" title="Delete the bucket and its content"></a>Delete the bucket and its content</h3><p>A bucket can only be deleted if it is empty. Therefore, first delete the <code>Sample.html</code>, and then delete the bucket, as follows:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aws s3api delete-object --bucket mybucket033212455158 --key sample.html</span><br><span class="line">aws s3api delete-bucket --bucket mybucket033212455158</span><br></pre></td></tr></table></figure><p>Navigate back to the S3 dashboard (AWS web console), and verify if the bucket has been deleted successfully.</p><h2 id="Using-the-Beanstalk-CLI"><a href="#Using-the-Beanstalk-CLI" class="headerlink" title="Using the Beanstalk CLI"></a>Using the Beanstalk CLI</h2><p>While, AWS CLI can be used to perform almost any possible actions on the AWS platform, the commands to create and manage EB so are long.</p><p>Therefore, AWS created a dedicated Elastic Beanstalk (EB) CLI. The EB CLI is simple to use and provides a set of easy commands that let you control your application environment in a convenient way!</p><h3 id="Install-EB-CLI"><a href="#Install-EB-CLI" class="headerlink" title="Install EB CLI"></a>Install EB CLI</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install awsebcli</span><br></pre></td></tr></table></figure><h3 id="Deploy-a-sample-NodeJS-application"><a href="#Deploy-a-sample-NodeJS-application" class="headerlink" title="Deploy a sample NodeJS application"></a>Deploy a sample NodeJS application</h3><ul><li><p>Let’s create a directory. The next few command will deploy a sample NodeJS application to EB.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir testEB</span><br><span class="line"><span class="built_in">cd</span> testEB</span><br></pre></td></tr></table></figure></li><li><p>Initialize an environment. Run this command in the root directory of the application you want to deploy. The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-init.html" target="_blank" rel="noopener">eb init</a> command will create “.elasticbeanstalk/config.yml” file in the current directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use the node.js 14 or 16 and the default region as applicable to you</span></span><br><span class="line">eb init</span><br></pre></td></tr></table></figure></li><li><p>The <a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb3-create.html" target="_blank" rel="noopener">eb create</a> will bundle you application, if present in the current directory, and deploy to the EB. Otherwise, a sample application will be deployed. We can specify the <code>--sample</code> to be sure.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eb create --sample --single --instance-types t2.small</span><br></pre></td></tr></table></figure><p>Provide you input for the prompts that appear, such as:</p><ul><li>Enter Environment Name: Default</li><li>Enter DNS CNAME prefix: Default</li><li>Would you like to enable Spot Fleet requests for this environment? (y/N): N</li><li>Do you want to download the sample application into the current directory? (Y/n): Y</li></ul></li></ul><p>The command above will take upto 15 mins to create the following resources as part of the environment:</p><ol><li>An EC2 instance (size: <em>t2.small</em>) to host your application, and without a load balancer because we have use the <em>–single</em> option.</li><li>A security group (firewall rules) for the EC2 instance</li><li>An S3 bucket to store the application artifacts</li><li>A CloudWatch alarm for logging and monitoring</li><li>A domain name</li></ol><h3 id="Some-more-commands"><a href="#Some-more-commands" class="headerlink" title="Some more commands"></a>Some more commands</h3><ul><li><p>Check the health of the environment using the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eb health</span><br></pre></td></tr></table></figure></li><li><p>For troubleshooting, look into the logs from your terminal:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eb logs</span><br></pre></td></tr></table></figure></li><li><p>Editing and redeploying the application. You can edit you local application, and commit your changes. It is important to commit the code changes before you<code>eb deploy</code> it to the beanstalk environment.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add -A</span><br><span class="line">git commit -m <span class="string">"change log"</span></span><br><span class="line">eb deploy</span><br></pre></td></tr></table></figure></li><li><p>If you have multiple environments running, you can associate the EB CLI with a particular one using:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eb list</span><br><span class="line">eb use [env-name]</span><br></pre></td></tr></table></figure></li><li><p>Clean up</p><p>Don’t forget to delete your environment(s) if they are not in use:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eb list</span><br><span class="line">eb terminate [env-name]</span><br></pre></td></tr></table></figure></li></ul><h2 id="S3-using-the-AWS-CLI"><a href="#S3-using-the-AWS-CLI" class="headerlink" title="S3 using the AWS CLI"></a>S3 using the AWS CLI</h2><h3 id="List-the-buckets"><a href="#List-the-buckets" class="headerlink" title="List the buckets"></a>List the buckets</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aws s3 ls</span><br><span class="line"><span class="comment"># Assuming the bucket name is: myawsbucket-751397240855</span></span><br></pre></td></tr></table></figure><h3 id="Synchronize-the-content-of-the-build-folder-into-the-S3-bucket"><a href="#Synchronize-the-content-of-the-build-folder-into-the-S3-bucket" class="headerlink" title="Synchronize the content of the build folder into the S3 bucket"></a>Synchronize the content of the build folder into the S3 bucket</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Change the bucket name as applicable to you</span></span><br><span class="line">aws s3 cp --recursive --acl public-read ./build s3://myawsbucket-751397240855/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;AWS-console-or-the-CLI&quot;&gt;&lt;a href=&quot;#AWS-console-or-the-CLI&quot; class=&quot;headerlink&quot; title=&quot;AWS console or the CLI&quot;&gt;&lt;/a&gt;AWS console or the C
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
      <category term="AWS" scheme="https://www.qianhongbo.com/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>AWS s3</title>
    <link href="https://www.qianhongbo.com/Fullstack/AWS/AWS-s3.html"/>
    <id>https://www.qianhongbo.com/Fullstack/AWS/AWS-s3.html</id>
    <published>2022-07-05T07:05:43.000Z</published>
    <updated>2022-07-06T07:34:46.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>While we could use a web server that we set up on Elastic Beanstalk to serve HTML files, there are other options like AWS S3 for this purpose. It is possible that you have already heard about S3 since it is a really popular service. Here are some of its strengths:</p><ul><li>Inexpensive</li><li>Foundational service on AWS upon which many other services are built</li><li>Global and available in all regions</li></ul><p>S3 Stands for Simple Storage Service. It is AWS’s file storage service. S3 is different from a hard drive. It can be referred to as <strong>object-based storage</strong>.</p><p>By object-based, we mean that the file name is a key and the value of that key is the actual content of the file. Metadata, which includes information about the object, such as owner, date created, and other important information, is also stored.</p><h2 id="Limitations-and-Strengths-of-S3"><a href="#Limitations-and-Strengths-of-S3" class="headerlink" title="Limitations and Strengths of S3"></a>Limitations and Strengths of S3</h2><ul><li><strong>S3 can’t run a file system:</strong> S3 is just meant to serve files and cannot act as an operating system.</li><li><strong>Fine-grained permission system:</strong> We can control the access to the bucket with Access Control List (ACL) policy, which is a file written in JSON or yml.</li><li><strong>Configurable for web hosting:</strong> We can serve static files like HTML and CSS on S3.</li></ul><h2 id="Create-an-S3-bucket"><a href="#Create-an-S3-bucket" class="headerlink" title="Create an S3 bucket"></a>Create an S3 bucket</h2><p>Here are the summarized steps:</p><ol><li>Navigate to the <a href="https://s3.console.aws.amazon.com/s3/home?region=us-east-1#" target="_blank" rel="noopener">S3 dashboard</a>, and click on the <strong>Create bucket</strong> button. It will launch a new wizard.</li></ol><p><img src="https://video.udacity-data.com/topher/2020/November/5fbe37ba_screenshot-2020-11-25-at-4.06.17-pm/screenshot-2020-11-25-at-4.06.17-pm.png" alt="S3 Service - Bucket Dashboard"></p><p>We create a bucket first, and later we upload files and folders to it.</p><table><thead><tr><th align="left"><strong>Field</strong></th><th align="left"><strong>Value</strong></th></tr></thead><tbody><tr><td align="left">Bucket name</td><td align="left">Choose a unique name, such as <em>myawsbucket-75139724085</em></td></tr><tr><td align="left">AWS Region</td><td align="left">Default</td></tr><tr><td align="left">Object Ownership</td><td align="left">ACLs enabled Bucket owner preferred to determine object access.</td></tr><tr><td align="left">Block all public access</td><td align="left">No Create a <strong>public</strong> S3 bucket</td></tr></tbody></table><h2 id="Configure-the-S3-bucket"><a href="#Configure-the-S3-bucket" class="headerlink" title="Configure the S3 bucket"></a>Configure the S3 bucket</h2><h3 id="Configure-the-Bucket-Properties"><a href="#Configure-the-Bucket-Properties" class="headerlink" title="Configure the Bucket Properties"></a>Configure the Bucket Properties</h3><p>Once your bucket is created, go to the <strong>Properties</strong> tab and scroll down to the bottom of the page to find <strong>Static website hosting</strong> section.</p><p>Enable the static web hosting to host a static website. Also, mention the <em>index.html</em> as the default Index document, as shown in the snapshots below.</p><p><img src="https://video.udacity-data.com/topher/2022/June/629f3ef5_screenshot-2022-06-07-at-5.31.24-pm/screenshot-2022-06-07-at-5.31.24-pm.jpeg" alt="Navigate to the **Properties &gt;&gt; Static website hosting** section to Enable it. "></p><p><img src="https://video.udacity-data.com/topher/2022/June/629f3f25_screenshot-2022-06-07-at-5.31.48-pm/screenshot-2022-06-07-at-5.31.48-pm.jpeg" alt="Enable the static web hosting to host a static website. "></p><h3 id="Configure-the-Bucket-Permissions"><a href="#Configure-the-Bucket-Permissions" class="headerlink" title="Configure the Bucket Permissions"></a>Configure the Bucket Permissions</h3><p>Go to the <strong>Permissions</strong> tab and add the following:</p><p>Add bucket policy allowing other AWS services to access the bucket contents. You can use the <a href="https://awspolicygen.s3.amazonaws.com/policygen.html" target="_blank" rel="noopener">policy generator</a> tool to generate such an IAM policy. Enter the following bucket policy replacing your-website [myBucketName] with the name of your bucket and click “Save”.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"Version"</span>: <span class="string">"2012-10-17"</span>,</span><br><span class="line"> <span class="attr">"Statement"</span>: [</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="attr">"Sid"</span>: <span class="string">"PublicReadGetObject"</span>,</span><br><span class="line">         <span class="attr">"Effect"</span>: <span class="string">"Allow"</span>,</span><br><span class="line">         <span class="attr">"Principal"</span>: <span class="string">"*"</span>,</span><br><span class="line">         <span class="attr">"Action"</span>: [</span><br><span class="line">             <span class="string">"s3:GetObject"</span></span><br><span class="line">         ],</span><br><span class="line">         <span class="attr">"Resource"</span>: [</span><br><span class="line">             <span class="string">"arn:aws:s3:::[myBucketName]/*"</span></span><br><span class="line">         ]</span><br><span class="line">     &#125;</span><br><span class="line"> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Upload-File-Folders-to-the-Bucket"><a href="#Upload-File-Folders-to-the-Bucket" class="headerlink" title="Upload File/Folders to the Bucket"></a>Upload File/Folders to the Bucket</h2><p>From the <a href="https://learn.udacity.com/nanodegrees/nd0067/parts/cd0295/lessons/6f2afba3-3053-4b84-b155-a2887806965f/concepts/console.aws.amazon.com/s3/home" target="_blank" rel="noopener">S3 dashboard</a>, click on the name of the bucket you have created in the step above.</p><p><img src="https://video.udacity-data.com/topher/2020/November/5fbe3ad2_screenshot-2020-11-25-at-4.12.35-pm/screenshot-2020-11-25-at-4.12.35-pm.png" alt="Details of an existing bucket. Upload files/folders to this bucket."></p><p>Click on the <strong>Upload</strong> button to upload files and folders into the current bucket.</p><p><img src="https://video.udacity-data.com/topher/2020/November/5fbe3e6d_screenshot-2020-11-25-at-4.52.03-pm/screenshot-2020-11-25-at-4.52.03-pm.png" alt="A sample file in the bucket"></p><p>Click on the file name to view the file-specific details, as shown below.</p><p><img src="https://video.udacity-data.com/topher/2020/November/5fbe3ec1_screenshot-2020-11-25-at-4.53.35-pm/screenshot-2020-11-25-at-4.53.35-pm.png" alt="Details of an individual file (object)"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;While we could use a web server that we set up on 
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
      <category term="AWS" scheme="https://www.qianhongbo.com/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>AWS Elastic Beanstalk</title>
    <link href="https://www.qianhongbo.com/Fullstack/AWS/AWS-Elastic-Beanstalk.html"/>
    <id>https://www.qianhongbo.com/Fullstack/AWS/AWS-Elastic-Beanstalk.html</id>
    <published>2022-07-05T06:45:26.000Z</published>
    <updated>2022-07-06T07:34:46.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Elastic-Beanstalk-Overview"><a href="#Elastic-Beanstalk-Overview" class="headerlink" title="Elastic Beanstalk Overview"></a>Elastic Beanstalk Overview</h2><p>AWS Elastic Beanstalk is a service (platform as a service) that allows you to run your web application on the AWS cloud without worrying about scaling or configuring the underlying virtual machines (web servers).</p><p>AWS Elastic Beanstalk supports Java, .NET, PHP, Node.js, Python, Ruby, and Go platforms. You just need to upload an application zip file to the AWS Elastic Beanstalk and configure some settings to make the app run. We can either upload the zip file using the AWS UI (web console) or use the explicit commands in the local terminal.</p><p>After uploading the application zip file, Elastic Beanstalk will handle deploying the application to the (right-sized) EC2 VMs, load balancing, auto-scaling, and application health monitoring.</p><p>Elastic Beanstalk offers the following advantages:</p><ul><li><strong>Free</strong>: You only pay for the servers that elastic beanstalk uses. The extra tools are free of charge.</li><li><strong>Pre-built Environments</strong>: Most major programming languages are supported out of the box.</li><li><strong>Simple Server Management</strong>: Security updates and system upgrades are done for you.</li><li><strong>Easy Scaling</strong>: If you need to provision extra servers, you can quickly change your configuration.</li></ul><h2 id="What-does-Elastic-Beanstalk-use"><a href="#What-does-Elastic-Beanstalk-use" class="headerlink" title="What does Elastic Beanstalk use?"></a>What does Elastic Beanstalk use?</h2><ul><li><strong>Elastic Compute Cloud (EC2)</strong>: Used for hosting servers.</li><li><strong>Simple Storage Service (S3)</strong>: Used for storing application code and sending it to other servers.</li><li><strong>Simple Notification Service (SNS)</strong>: Provides a way to notify you of events inside the environment.</li></ul><h2 id="Deployment-process"><a href="#Deployment-process" class="headerlink" title="Deployment process"></a>Deployment process</h2><h3 id="Step-1-Prepare-the-Application-Code"><a href="#Step-1-Prepare-the-Application-Code" class="headerlink" title="Step 1. Prepare the Application Code"></a>Step 1. Prepare the Application Code</h3><p>Fork and clone the <a href="https://github.com/udacity/cd0295-reactnd-contacts-server" target="_blank" rel="noopener">Github repository</a> and follow the steps mentioned in the README.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/udacity/cd0295-reactnd-contacts-server.git</span><br><span class="line"><span class="built_in">cd</span> cd0295-reactnd-contacts-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the files for Archive.zip</span></span><br><span class="line">npm run build</span><br><span class="line"><span class="comment"># Create an Archive.zip in the exercise root directory</span></span><br><span class="line">npm run zip</span><br></pre></td></tr></table></figure><h3 id="Step-2-Create-Elastic-Beanstalk-Node-js-Environment"><a href="#Step-2-Create-Elastic-Beanstalk-Node-js-Environment" class="headerlink" title="Step 2. Create Elastic Beanstalk Node.js Environment"></a>Step 2. Create Elastic Beanstalk Node.js Environment</h3><p>There are two ways to create an Elastic Beanstalk environment - using the EB CLI or AWS console. Let’s use the AWS console to create a Node.js environment. Navigate to the Elastic Beanstalk service in the AWS console, and start creating an environment. Use the following values during the configuration:</p><table><thead><tr><th align="left">Field</th><th align="left">Value</th></tr></thead><tbody><tr><td align="left">Environment tier</td><td align="left">Web server environment</td></tr><tr><td align="left"><strong>Application information</strong>  Application name</td><td align="left"><em>demo-app</em></td></tr><tr><td align="left"><strong>Environment information</strong>  Environment name</td><td align="left">Default</td></tr><tr><td align="left"><strong>Managed platform</strong>  Platform Platform branch</td><td align="left">Node.js Node.js 14 running on 64bit Amazon Linux 2 (Node.js 12 is deprecated now)</td></tr><tr><td align="left"><strong>Application code</strong></td><td align="left">Upload your application code (<strong>Archive.zip</strong> file)</td></tr></tbody></table><p>Leave the remaining fields as default, and finish creating the environment. It will take upto 15 mins to create the following resources as part of the environment:</p><ol><li>An EC2 instance to host your application, and a load balancer</li><li>A security group (firewall rules) for the EC2 instance</li><li>An S3 bucket to store the application artifacts</li><li>A CloudWatch alarm for logging and monitoring</li><li>A domain name</li></ol><p>Once you application is deployed to the Elastic Beanstalk, it will automatically run these comamnds on your behalf:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --production</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h2 id="Step-3-Save-the-Environment-Variable"><a href="#Step-3-Save-the-Environment-Variable" class="headerlink" title="Step 3. Save the Environment Variable"></a>Step 3. Save the Environment Variable</h2><p>Specify an environment variable in the <strong>Elastic Beanstalk environment &gt;&gt; Configuration &gt;&gt; Software settings &gt;&gt; Environment Properties</strong> section. Save a value against the <code>FIRST_NAME</code> variable, as shown in the snapshot below.</p><p><img src="https://video.udacity-data.com/topher/2022/June/629f2183_screenshot-2022-06-07-at-3.28.49-pm/screenshot-2022-06-07-at-3.28.49-pm.jpeg" alt="Set the environment variable for your application"></p><h2 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4."></a>Step 4.</h2><p>Once the environment is deployed and the environment variable created, navigate to the deployed URL and ensure that the server responds.</p><h3 id="Known-Issue"><a href="#Known-Issue" class="headerlink" title="Known Issue"></a>Known Issue</h3><p>Chorme has a security feature that does not allow the cross-platform request to pass. As a result, it generates:</p><blockquote><p>Access to fetch at ‘<a href="http://localhost:4000/contacts&#39;" target="_blank" rel="noopener">http://localhost:4000/contacts&#39;</a> from origin ‘<a href="http://demoapp-env.eba-2ph6pbkm.us-east-1.elasticbeanstalk.com'/" target="_blank" rel="noopener">http://demoapp-env.eba-2ph6pbkm.us-east-1.elasticbeanstalk.com’</a> has been blocked by CORS policy: The request client is not a secure context and the resource is in more-private address space <code>local</code>.</p></blockquote><p>The workaround if to use an alternative browser, such as Safari or Firefox.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Elastic-Beanstalk-Overview&quot;&gt;&lt;a href=&quot;#Elastic-Beanstalk-Overview&quot; class=&quot;headerlink&quot; title=&quot;Elastic Beanstalk Overview&quot;&gt;&lt;/a&gt;Elastic 
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
      <category term="AWS" scheme="https://www.qianhongbo.com/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>AWS RDS</title>
    <link href="https://www.qianhongbo.com/Fullstack/AWS/AWS-RDS.html"/>
    <id>https://www.qianhongbo.com/Fullstack/AWS/AWS-RDS.html</id>
    <published>2022-07-05T06:21:14.000Z</published>
    <updated>2022-07-06T07:34:46.808Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-RDS"><a href="#What-is-RDS" class="headerlink" title="What is RDS"></a>What is <code>RDS</code></h2><p><strong>RDS</strong>: AWS Relational Database Service, which is a service that aids in the administration and management of databases. RDS assists with database administrative tasks that include upgrades, patching, installs, backups, monitoring, performance checks, security, etc.</p><h3 id="Database-Engine-Support"><a href="#Database-Engine-Support" class="headerlink" title="Database Engine Support"></a>Database Engine Support</h3><ul><li>Oracle</li><li>PostgreSQL</li><li>MySQL</li><li>MariaDB</li><li>SQL Server</li></ul><h2 id="Configure-a-database"><a href="#Configure-a-database" class="headerlink" title="Configure a database"></a>Configure a database</h2><h3 id="What-do-we-need-to-configure"><a href="#What-do-we-need-to-configure" class="headerlink" title="What do we need to configure"></a>What do we need to configure</h3><ul><li><strong>Backups</strong>: A copy of your database can be made on a regular interval to avoid losing data if something goes wrong.</li><li><strong>Public or private</strong>: A database could be made available on the open web, or only within a private Internet network.</li><li><strong>Multiple Availability Zones:</strong> You can configure a database to be physically in multiple data-centers.</li><li><strong>Server specs:</strong> You can choose the size of the server.</li></ul><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><ol><li>Navigate to the <a href="https://console.aws.amazon.com/rds/home" target="_blank" rel="noopener">RDS dashboard</a> and create a PostgreSQL database with the following configuration, and leave the remaining fields as default.</li></ol><table><thead><tr><th align="left"><strong>Field</strong></th><th align="left"><strong>Value</strong></th></tr></thead><tbody><tr><td align="left">Database creation method</td><td align="left"><strong>Standard create</strong>. Easy create option creates a private database by default.</td></tr><tr><td align="left">Engine option</td><td align="left">PostgreSQL 12 or 13, any release candidate</td></tr><tr><td align="left">Templates</td><td align="left">Free tier</td></tr><tr><td align="left"><strong>Settings</strong> DB instance identifier, master username, and password</td><td align="left">Your choice</td></tr><tr><td align="left"><strong>Instance configuration</strong> DB instance class</td><td align="left">Burstable classes with minimal size like db.t3.micro or db.t2.micro</td></tr><tr><td align="left"><strong>Storage</strong></td><td align="left">Default</td></tr><tr><td align="left"><strong>Connectivity</strong> VPC and subnet Public access VPC security group Availability Zone Database port</td><td align="left">Default YES Default No preferencce <code>5432</code></td></tr><tr><td align="left"><strong>Additional configuration</strong> Initial database name</td><td align="left"><code>postgres</code></td></tr></tbody></table><h3 id="Some-more-steps"><a href="#Some-more-steps" class="headerlink" title="Some more steps"></a>Some more steps</h3><ul><li>Once the database is created successfully, copy and save the database endpoint, master username, and password. It will help your application discover the database.</li><li><strong>Allow access to the database</strong>: Edit the security group’s inbound rule to allow incoming connections from anywhere (<code>0.0.0.0/0</code>). It will allow your local application to connect to the database.</li></ul><p><img src="https://video.udacity-data.com/topher/2022/June/629dfaac_screenshot-2022-06-06-at-6.01.39-pm/screenshot-2022-06-06-at-6.01.39-pm.jpeg" alt></p><p><img src="https://video.udacity-data.com/topher/2022/June/629dfa8f_screenshot-2022-06-06-at-6.02.14-pm/screenshot-2022-06-06-at-6.02.14-pm.jpeg" alt></p><h2 id="Test-the-connection-using-the-PostgreSQL-client"><a href="#Test-the-connection-using-the-PostgreSQL-client" class="headerlink" title="Test the connection using the PostgreSQL client."></a>Test the connection using the PostgreSQL client.</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Assuming the endpoint is: database-1.csxbuclmtj3c.us-east-1.rds.amazonaws.com</span></span><br><span class="line">psql -h database-1.csxbuclmtj3c.us-east-1.rds.amazonaws.com -U postgres postgres</span><br><span class="line"><span class="comment"># It will open the "postgres=&gt;" prompt if the connection is successful.</span></span><br><span class="line"><span class="comment"># Provide the database password when prompted.</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;What-is-RDS&quot;&gt;&lt;a href=&quot;#What-is-RDS&quot; class=&quot;headerlink&quot; title=&quot;What is RDS&quot;&gt;&lt;/a&gt;What is &lt;code&gt;RDS&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;RDS&lt;/strong&gt;:
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
      <category term="AWS" scheme="https://www.qianhongbo.com/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>Angular Basis</title>
    <link href="https://www.qianhongbo.com/Fullstack/Angular-Basis.html"/>
    <id>https://www.qianhongbo.com/Fullstack/Angular-Basis.html</id>
    <published>2022-06-20T04:07:47.000Z</published>
    <updated>2022-07-06T07:07:40.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Angular-Basis"><a href="#Angular-Basis" class="headerlink" title="Angular Basis"></a>Angular Basis</h1><h2 id="Angular-CLI"><a href="#Angular-CLI" class="headerlink" title="Angular CLI"></a>Angular CLI</h2><p>The <strong>Angular CLI</strong> is a command-line interface (CLI) that allows developers to initialize, develop, scaffold, and maintain Angular applications directly from the command line. In short, the Angular CLI allows us to:</p><ul><li><strong>Create a new Angular application</strong> from the ground up <code>ng new</code></li><li><strong>Add features</strong> to the application, such as additional components, support for external libraries, and updates to the application and its dependencies <code>ng generate</code></li><li><strong>Run unit tests</strong> : <code>ng test</code></li><li><strong>Run a development server</strong> with live reload (i.e., automated page reloads when a change in the application is detected) <code>ng serve</code></li><li><strong>Re-build the application</strong> on change (think Webpack)</li><li><strong>Build the application</strong> for production <code>ng build</code></li></ul><h2 id="Install-and-Configure-the-Angular-CLI"><a href="#Install-and-Configure-the-Angular-CLI" class="headerlink" title="Install and Configure the Angular CLI"></a>Install and Configure the Angular CLI</h2><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @angular/cli</span><br></pre></td></tr></table></figure><blockquote><p>-g means global</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng --version</span><br></pre></td></tr></table></figure><h2 id="Create-a-New-Angular-Project"><a href="#Create-a-New-Angular-Project" class="headerlink" title="Create a New Angular Project"></a>Create a New Angular Project</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng new my_first app</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve</span><br></pre></td></tr></table></figure><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><h3 id="What-is-a-component"><a href="#What-is-a-component" class="headerlink" title="What is a component?"></a>What is a component?</h3><ul><li>Fundamental building block of an Angular application</li><li>Controls the view displayed as HTML output</li><li>Components determines the user interface of an Angular app</li></ul><h3 id="What-makes-up-a-component"><a href="#What-makes-up-a-component" class="headerlink" title="What makes up a component?"></a>What makes up a component?</h3><ul><li>An <strong>HTML template</strong> (*.html file) that defines the user interface (i.e., what is actually rendered on the page)</li><li>A <strong>TypeScript component class</strong> (*.ts file) containing the behavior and logic of the component. The component class supports and interacts with the view through the properties and methods defined in it</li><li><strong>CSS styles</strong> (*.css file) that define the presentation and style of the component</li></ul><h3 id="Visualizing-Components"><a href="#Visualizing-Components" class="headerlink" title="Visualizing Components"></a>Visualizing Components</h3><p>All of the boxes in the following image are components.</p><p><img src="https://video.udacity-data.com/topher/2021/March/604d07e8_fsjs-c3-l2-components/fsjs-c3-l2-components.jpg" alt></p><h3 id="Generate-a-Component"><a href="#Generate-a-Component" class="headerlink" title="Generate a Component"></a>Generate a Component</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ng generate component &lt;name&gt;</span><br><span class="line"><span class="comment"># example: </span></span><br><span class="line">ng generate component Photos</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Result:</span></span><br><span class="line">~$ ng generate component Photos</span><br><span class="line">CREATE src/app/photos/photos.component.css (0 bytes)</span><br><span class="line">CREATE src/app/photos/photos.component.html (21 bytes)</span><br><span class="line">CREATE src/app/photos/photos.component.spec.ts (626 bytes)</span><br><span class="line">CREATE src/app/photos/photos.component.ts (275 bytes)</span><br><span class="line">UPDATE src/app/app.module.ts (475 bytes)</span><br></pre></td></tr></table></figure><p>The Angular CLI tells us that four files were created:</p><ul><li>The Photos component CSS styles</li><li>The Photos component HTML template</li><li>The Photos component unit test (optional)</li><li>The Photos component class (TypeScript)</li></ul><h3 id="What-is-in-a-Component-Class"><a href="#What-is-in-a-Component-Class" class="headerlink" title="What is in a Component Class"></a>What is in a Component Class</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app/photos/photos.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-photos'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./photos.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./photos.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PhotosComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The component class contains a <code>@Component</code> <strong>decorator</strong>. A decorator is a feature that provides a way to add annotations and meta-programming syntax for class declarations. Angular needs this metadata so that it knows how to build that particular component. Specifically, it takes a look at a few properties:</p><ul><li><code>selector</code>: The identifying name for the component, which can be used in an HTML template</li><li><code>templateUrl</code>: The path of the HTML template file associated with component</li><li><code>styleUrls</code>: The path(s) for the file(s) containing CSS stylesheets that the component can use</li></ul><p>The rest of the file contains an exported <code>PhotosComponent</code> class, with two methods:</p><ul><li><code>constructor()</code>, which is used primarily for dependency injection and initializing variables. </li><li><code>ngOnInit()</code>, which is called after the component has initialized. The <code>ngOnInit()</code> method is a lifecycle method used to handle additional initialization tasks.</li></ul><h3 id="Data-in-the-Component-Class"><a href="#Data-in-the-Component-Class" class="headerlink" title="Data in the Component Class"></a>Data in the Component Class</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// students.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-student'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./student.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./student.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> StudentComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  name: <span class="built_in">string</span> = <span class="string">"Taylor"</span>;</span><br><span class="line">  grade: <span class="built_in">number</span> = <span class="number">12</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the above example, we define two properties:</p><ul><li><code>name</code>, which points to a <code>string</code> with the value <code>&quot;Taylor&quot;</code></li><li><code>grade</code>, which points to a <code>number</code> with the value <code>12</code></li></ul><p>We can use these data in our html file with double curly braces.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- student.component.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; name &#125;&#125; is a student in grade &#123;&#123; grade &#125;&#125;.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>As it turns out, the double curly braces syntax helps facilitate <strong>interpolation</strong>. By interpolating data, what we mean is that under the hood, Angular first evaluates the data properties (e.g., <code>name</code> and <code>grade</code>) of the component class (e.g., <code>StudentComponent</code>). It then converts them to strings before finally rendering everything on the page:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Taylor is a student in grade 12.</span><br></pre></td></tr></table></figure><p>As such, we can say that the <code>name</code> and <code>grade</code> properties are <em>bound</em> (i.e., through <strong>data binding</strong>) to the component class.</p><h3 id="The-component-lifecycle"><a href="#The-component-lifecycle" class="headerlink" title="The component lifecycle"></a>The component lifecycle</h3><p>Every Angular component goes through a cycle: from the moment it is created and mounted to the document object model (DOM), all the way to the moment it is unmounted and ultimately destroyed. This is what we refer to as the <strong>component lifecycle</strong>.</p><p><img src="https://video.udacity-data.com/topher/2021/March/604d05aa_fsjs-c3-l2-component-lifecycle/fsjs-c3-l2-component-lifecycle.jpg" alt></p><h3 id="Lifecycle-Methods"><a href="#Lifecycle-Methods" class="headerlink" title="Lifecycle Methods"></a>Lifecycle Methods</h3><p>The answer to the question lives in the component’s <strong>lifecycle methods</strong>. These predefined methods in the component class allow us to run any code or logic during any particular stage of the component’s lifecycle:</p><ul><li><code>ngOnChanges()</code></li><li><code>ngOnInit()</code></li><li><code>ngDoCheck()</code></li><li><code>ngAfterContentInit()</code></li><li><code>ngAfterContentChecked()</code></li><li><code>ngAfterViewInit()</code></li><li><code>ngAfterViewChecked()</code></li><li><code>ngOnDestroy()</code></li></ul><p>Note that these methods are called <em>automatically</em> during specific points in time of the lifecycle (e.g., <code>ngOninit()</code> during initialization). You won’t need to manually invoke these functions in your application.</p><p>Another thing to keep in mind that usage of these methods is not required. That is, you won’t need to use leverage lifecycle methods in every single Angular application that you build. That said, using certain methods is considered standard in the industry and can greatly benefit your application’s functionality.</p><h3 id="ngOnInit"><a href="#ngOnInit" class="headerlink" title="ngOnInit()"></a><code>ngOnInit()</code></h3><p>The <code>ngOnInit()</code> lifecycle method is called during the <code>OnInit</code> event, which occurs during the initializing phase of a component. It is one of the most common lifecycle methods you’ll see and use, and is only called <em>once</em> during a component’s lifecycle.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// countries.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-countries'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./countries.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./countries.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CountriesComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  countryList: object[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.countryList = [</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'Spain'</span>,</span><br><span class="line">        population: <span class="number">46754778</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'New Zealand'</span>,</span><br><span class="line">        population: <span class="number">4822233</span>    </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'United States of America'</span>,</span><br><span class="line">        population: <span class="number">331002651</span>    </span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We first import <code>OnInit</code> from <code>@angular/core</code> (which is where all lifecycle events are imported from). When <code>OnInit</code> occurs, the variable <code>countryList</code>, which is initially an empty array, is available for us to use.</p><p>At this point, Angular automatically invokes <code>ngOnInit()</code> for us, the lifecycle method containing the code that we want to run during this initialization. In particular, we reassign the value of the component class’s <code>countryList</code> property to a new array of objects. This way, when the component mounts to the DOM, the <code>countryList</code> will be populated with an array of objects containing the data that we need, and the template will have access to the country data.</p><blockquote><h3 id="💡️-Can-I-Just-Use-the-constructor-Instead"><a href="#💡️-Can-I-Just-Use-the-constructor-Instead" class="headerlink" title="💡️ Can I Just Use the constructor() Instead?"></a>💡️ Can I Just Use the <code>constructor()</code> Instead?</h3><p>On the surface, it seems like the <code>constructor()</code> would be a logical place to keep initialization tasks as well.</p><p>Recall that the <code>constructor()</code> is called <em>before</em> <code>ngOnInit()</code> in the component lifecycle. That is, data-bound properties haven’t be set and ready to use yet. If we tried referencing <code>countryList</code> in the <code>constructor()</code>, it would be an <code>undefined</code> value rather than the array we’d expect.</p><p>As such, the <code>constructor()</code> should generally only be used for dependency injection (which we’ll visit later in this course), and not much more. Ideally, your <code>constructor()</code> functions should be kept relatively simple, and away from business logic.</p></blockquote><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><h3 id="What-is-a-Module"><a href="#What-is-a-Module" class="headerlink" title="What is a Module?"></a>What is a Module?</h3><p>In general, a module collects a block of code dedicated to a single purpose.</p><ul><li>Cohesive, organized set of functionality</li><li>TypeScript </li><li>At least one root module(AppModule)</li><li>Generated with the Angular CLI</li></ul><h3 id="Recall"><a href="#Recall" class="headerlink" title="Recall"></a>Recall</h3><p>Recall the terminal output when we ran the command, <code>ng generate component Photos</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~$ ng generate component Photos</span><br><span class="line">CREATE src/app/photos/photos.component.css (0 bytes)</span><br><span class="line">CREATE src/app/photos/photos.component.html (21 bytes)</span><br><span class="line">CREATE src/app/photos/photos.component.spec.ts (626 bytes)</span><br><span class="line">CREATE src/app/photos/photos.component.ts (275 bytes)</span><br><span class="line">UPDATE src/app/app.module.ts (475 bytes)</span><br></pre></td></tr></table></figure><p>The Angular CLI reports that four files were created, and one file was updated: <code>src/app/app.module.ts</code>. This is because generating an Angular component involves two steps:</p><ol><li>Creating the component files</li><li>Registering the newly-generated component to a module (recall that a module is a set of closely-related capabilities or functionalities)</li></ol><p>As such, the Angular CLI automatically registers the module to the root application module, the <code>AppModule</code>.</p><h3 id="The-AppModule"><a href="#The-AppModule" class="headerlink" title="The AppModule"></a>The <code>AppModule</code></h3><p>So, what happens to the <code>AppModule</code> when it is updated by the Angular CLI? Specifically, by registering the component, the Angular CLI updates a property called <code>declarations</code>:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app/app.module.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppRoutingModule &#125; <span class="keyword">from</span> <span class="string">'./app-routing.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="comment">// The new component is automatically imported:</span></span><br><span class="line"><span class="keyword">import</span> &#123; PhotosComponent &#125; <span class="keyword">from</span> <span class="string">'./photos/photos.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    PhotosComponent <span class="comment">// The new component is added to declarations</span></span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    AppRoutingModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>Registering a component with a module is crucial, as it allows the component to be recognized by Angular. After importing <code>PhotosComponent</code> using ES6 <code>import</code> syntax, it is added to the <code>declarations</code> array, which defines all the components that live within the module. If the new component weren’t included here, and we try to use that component in our application, Angular will throw an error!</p><h3 id="Generate-a-Module"><a href="#Generate-a-Module" class="headerlink" title="Generate a Module"></a>Generate a Module</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~$ ng generate module books</span><br><span class="line">CREATE src/app/books/books.module.ts (191 bytes)</span><br></pre></td></tr></table></figure><p>The file created will have everything ready for you to start registering your components!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/app/books/books.module.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [],</span><br><span class="line">  imports: [</span><br><span class="line">    CommonModule</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> BooksModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>We can open the folder of the module and create a component. This component will belong to the module.</p><p>After we create a new module, we should add this module to <code>AppModule</code> in the imports part.</p><h2 id="Directives"><a href="#Directives" class="headerlink" title="Directives"></a>Directives</h2><h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><p>The main responsibility for directives is to manipulate the DOM. There are three kinds of directives in Angular:</p><ul><li><strong>Components</strong> are directives with a template</li><li><strong>Structural directive</strong> manipulate the DOM by adding or removing DOM elements</li><li><strong>Attribute directives</strong> modify the appearance or behavior of a DOM element</li></ul><h3 id="ngFor"><a href="#ngFor" class="headerlink" title="ngFor"></a><code>ngFor</code></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- countries.component.html --&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;&#123; countryList &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">Browser output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">[object Object],[object Object],[object Object] </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- countries.component.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let country of countryList"</span>&gt;</span></span><br><span class="line">    &#123;&#123; country.name &#125;&#125; has &#123;&#123; country.population &#125;&#125; people.</span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">Browser output:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">- Spain has 46754778 people.</span></span><br><span class="line"><span class="comment">- New Zealand has 4822233 people.</span></span><br><span class="line"><span class="comment">- United States of America has 331002651 people.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ngIf"><a href="#ngIf" class="headerlink" title="ngIf"></a><code>ngIf</code></h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-blogs'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./blogs.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./blogs.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> BlogsComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  title: <span class="built_in">string</span> = <span class="string">'My Favorite Blogs'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- blogs.component.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;p *ngIf=<span class="string">"title === 'My Favorite Blogs'"</span>&gt;</span><br><span class="line">  This is a list of my favorite blogs!</span><br><span class="line">&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- </span></span><br><span class="line"><span class="regexp">Browser output:</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">This is a list of my favorite blogs!</span></span><br><span class="line"><span class="regexp">--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Attribute-Directives"><a href="#Attribute-Directives" class="headerlink" title="Attribute Directives"></a>Attribute Directives</h3><p>Along with structural directives, we can also leverage attribute directives to help manipulate the DOM.</p><p>Recall that the attribute directive’s main responsibility is to modify the behavior or appearance of a DOM element. Consider <code>ngStyle</code>, which is an attribute directive that updates styles for the containing HTML element:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// header.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-header'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./header.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./header.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HeaderComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  title: <span class="built_in">string</span> = <span class="string">'Header'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- header.component.html --&gt;</span><br><span class="line"></span><br><span class="line">&lt;p [ngStyle]=<span class="string">"&#123;'font-size': title === 'Header' ? '48px' : '12px' &#125;"</span>&gt;This is the header.&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><p>The <code>Header</code> component class above contains a <code>title</code> property whose value is set to <code>&#39;Header&#39;</code>. The component’s template leverages the <code>ngStyle</code> directive to conditionally apply styles directly to the paragraph element.</p><h2 id="Sending-data"><a href="#Sending-data" class="headerlink" title="Sending data"></a>Sending data</h2><h3 id="Passing-Data-From-Parent-to-Child-Input"><a href="#Passing-Data-From-Parent-to-Child-Input" class="headerlink" title="Passing Data From Parent to Child: @Input"></a>Passing Data From Parent to Child: <code>@Input</code></h3><p>Angular gives us a useful tool to facilitate passing data from a parent component to its child component. By leveraging the <code>@Input</code> decorator in the child component class, we can get it ready to receive data from its parent.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="PostItem-Class"><a href="#PostItem-Class" class="headerlink" title="PostItem Class"></a>PostItem Class</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PostItemComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="meta">@Input</span>() post: Post;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="keyword">this</span>.post = &#123;</span><br><span class="line">      id: <span class="number">0</span>,</span><br><span class="line">      title: <span class="string">''</span>,</span><br><span class="line">      body: <span class="string">''</span>,</span><br><span class="line">      votes: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="PostItem-html"><a href="#PostItem-html" class="headerlink" title="PostItem html"></a>PostItem html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; post.body &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Votes: &#123;&#123; post.votes &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Posts-html"><a href="#Posts-html" class="headerlink" title="Posts html"></a>Posts html</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- still use ngFor to iterate posts. </span></span><br><span class="line"><span class="comment">Rather than show the posts use list, pass each post to its child (post item) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-post-item</span> *<span class="attr">ngFor</span> = <span class="string">"let post of posts"</span> [<span class="attr">post</span>] = <span class="string">"post"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-post-item</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Event-binding"><a href="#Event-binding" class="headerlink" title="Event binding"></a>Event binding</h2><p><strong>Event binding</strong> allows us to listen for and respond to such user actions. That is, we detect when something has occurred on a target DOM element, and in response, we can invoke certain function methods in the template’s associated component class. As a result, with event binding, we can send information from the template <em>to</em> its corresponding component class.</p><p>Consider the following example of an HTML template.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- click.component.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"onClick()"</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>On the <code>&lt;button&gt;</code> element, note the block of code that says <code>(click)=&quot;onClick()&quot;</code>. This shows standard event binding syntax in Angular, which is made of two parts:</p><ul><li>The <strong>target event</strong> name in parentheses to the left of the equal sign (i.e., <code>click</code>)</li><li>The <strong>template statement</strong> on the right of the equal sign, which is the method (<code>onClick()</code>) called in the component class whenever the target event occurs.</li></ul><p>Back in the component class, then, we might see something like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// click.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-click'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./click.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./click.component.scss'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ClickComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line"></span><br><span class="line">  clickAmount: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onClick(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.clickAmount += <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Sending-data-to-a-parent-component"><a href="#Sending-data-to-a-parent-component" class="headerlink" title="Sending data to a parent component"></a>Sending data to a parent component</h2><p>In many real-world applications, data for the book list, as well as any associated data for that list, might live in the parent <code>BooksList</code> component. As such, the parent needs to be notified of certain actions that occur in its child component.</p><p>To accomplish this, the child component needs to <em>emit an event up</em> to its parent. We can leverage the <code>@Output</code> decorator as well as the <code>EvenEmitter</code> class to do just that:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// book-item.component.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; Component, OnInit, Input, Output, EventEmitter &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-book-item'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./book-item.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./book-item.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> BookItemComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  <span class="meta">@Input</span>() book;</span><br><span class="line">  <span class="meta">@Output</span>() marked = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similar to the event binding that we saw on the previous page, we can bind an event handler method from the parent <code>BooksList</code> component to the output property of its child component.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- books-list-component.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>List of available books<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-book-item</span> *<span class="attr">ngFor</span>=<span class="string">"let book of bookList"</span> [<span class="attr">book</span>]=<span class="string">"book"</span> (<span class="attr">marked</span>)=<span class="string">"markAsFavorite(book)"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-book-item</span>&gt;</span></span><br></pre></td></tr></table></figure><p>In the above template, we “capture” the event emitted from the child component on the <code>marked</code> output property. This way, when the user clicks the button, the <code>BooksList</code> component invokes its <code>markAsFavorite()</code> method:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-books-list'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./books-list.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./books-list.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> BooksListComponent <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  bookList: object[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.bookList = [</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">1</span>,</span><br><span class="line">        title: <span class="string">'Pride and Prejudice'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">2</span>,</span><br><span class="line">        title: <span class="string">'The Great Gatsby'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: <span class="number">3</span>,</span><br><span class="line">        title: <span class="string">'The Catcher in the Rye'</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  markAsFavorite(book: <span class="built_in">any</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;book.title&#125;</span> has been added to favorites.`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Navigation"><a href="#Navigation" class="headerlink" title="Navigation"></a>Navigation</h2><h2 id="Configuring-the-Angular-Router"><a href="#Configuring-the-Angular-Router" class="headerlink" title="Configuring the Angular Router"></a>Configuring the Angular Router</h2><p>In order to map a component to a particular path, most of the work involves configuring <code>routes</code>, which is an array of <code>Route</code> objects. Each object in the array defines a route in the application, as well as the component that responds to that route.</p><p>For example, consider a web application that shows information about the libraries in your local county. Its <code>routes</code> may look something like this:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app-routing.module.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Routes, RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomeComponent &#125; <span class="keyword">from</span> <span class="string">'./components/home/home.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ContactComponent &#125; <span class="keyword">from</span> <span class="string">'./components/contact/contact.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LibrariesComponent &#125; <span class="keyword">from</span> <span class="string">'./components/pages/libraries/libraries.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123; path: <span class="string">''</span>, component: HomeComponent &#125;,</span><br><span class="line">  &#123; path: <span class="string">'contact'</span>, component: ContactComponent &#125;,</span><br><span class="line">  &#123; path: <span class="string">'libraries/:id'</span>, component: LibrariesComponent &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [RouterModule.forRoot(routes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppRoutingModule &#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- app.component.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">app-header</span>&gt;</span><span class="tag">&lt;/<span class="name">app-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Setting-Up-Hyperlinks"><a href="#Setting-Up-Hyperlinks" class="headerlink" title="Setting Up Hyperlinks"></a>Setting Up Hyperlinks</h3><p>At this point, our routes do indeed work, but only if our users directly access them. That is, if the user types the URL (e.g., <code>http://localhost:4200/contact</code>) directly into the browser.</p><p>This, of course, wouldn’t be an optimal experience for users of your application. In order to make anchor tags (<code>&lt;a&gt;</code>) work properly in the browser, we must add the proper route to the <code>routerLink</code> directive. For example:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- navigation.component.html --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Library Directory<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">routerLink</span>=<span class="string">"/contact"</span>&gt;</span>Contact us<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Since we are building a single-page application, using <code>routerLink</code> (versus <code>href</code>) allows us to navigate to other components without reloading the page. Note that unlike the <code>path</code> property of the <code>Route</code> objects we saw previously, there is a preceding <code>/</code> that we use before the component name in the value for <code>routerLink</code>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Angular-Basis&quot;&gt;&lt;a href=&quot;#Angular-Basis&quot; class=&quot;headerlink&quot; title=&quot;Angular Basis&quot;&gt;&lt;/a&gt;Angular Basis&lt;/h1&gt;&lt;h2 id=&quot;Angular-CLI&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
  </entry>
  
  <entry>
    <title>Authentication and Authorization in a Node API</title>
    <link href="https://www.qianhongbo.com/Fullstack/Authentication-and-Authorization-in-a-Node-API.html"/>
    <id>https://www.qianhongbo.com/Fullstack/Authentication-and-Authorization-in-a-Node-API.html</id>
    <published>2022-05-20T03:07:15.000Z</published>
    <updated>2022-05-21T04:31:06.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hash-and-Salt"><a href="#Hash-and-Salt" class="headerlink" title="Hash and Salt"></a>Hash and Salt</h2><ul><li>A hashed password has been run through a function that generates a long encrypted string from the original password.</li><li>The same password run through the same hash function will generate the same response, this is how we can match passwords when users log in. But from the result, we can’t get the password back.</li><li>Simply hashing passwords though isn’t enough, adding <strong>Salt</strong>, an extra string sequence to the beginning or end of a password before hashing it makes it much harder for attackers to decrypt passwords</li></ul><h2 id="Process"><a href="#Process" class="headerlink" title="Process"></a>Process</h2><ul><li>Add the dependency: <code>npm i bcrypt</code></li><li>Import bcrypt into the user model <code>import bcrypt from &#39;bcrypt&#39;</code></li><li>Create some environment variable in the local <ul><li><code>BCRYPT_PASSWORD</code>=some string</li><li><code>SALT_ROUNDS</code>=10</li></ul></li><li>Use the hash method inside the create method to hash, salt and pepper the password and save the resulting value to the password column on the users table</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pepper = process.env.BCRYPT_PASSWORD;</span><br><span class="line"><span class="keyword">const</span> saltRounds = process.env.SALT_ROUNDS <span class="keyword">as</span> <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">const</span> hash = bcrypt.hashSync(</span><br><span class="line">  u.password + pepper,</span><br><span class="line">  <span class="built_in">parseInt</span>(saltRounds)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">const</span> result = <span class="keyword">await</span> conn.query(sql, [u.username, hash])</span><br></pre></td></tr></table></figure><ul><li>Add an authentication route to implement this job</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">async authenticate(username: string, password: string): Promise&lt;User | null&gt; &#123;</span><br><span class="line">    // @ts-ignore</span><br><span class="line">    const conn = await Client.connect();</span><br><span class="line">    const sql = &apos;SELECT password FROM users where username=($1)&apos;;</span><br><span class="line">    const result = await conn.query(sql, [username]);</span><br><span class="line">    const pepper = process.env.BCRYPT_PASSWORD;</span><br><span class="line">    console.log(password + pepper);</span><br><span class="line"></span><br><span class="line">    if (result.rows.length) &#123;</span><br><span class="line">      const user = result.rows[0];</span><br><span class="line">      console.log(user);</span><br><span class="line">      if (bcrypt.compareSync(password + pepper, user.password)) &#123;</span><br><span class="line">        return user;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return null;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="JSON-Web-Tokens-JWT"><a href="#JSON-Web-Tokens-JWT" class="headerlink" title="JSON Web Tokens (JWT)"></a>JSON Web Tokens (JWT)</h2><h3 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a>Structure</h3><ul><li>header</li><li>payload</li><li>signature</li></ul><h3 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h3><h4 id="header"><a href="#header" class="headerlink" title="header"></a>header</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><p>Used for indentify which user this request belongs to.</p><p>Note: Don’t put any secret information to this part.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"user"</span>: <span class="string">"Maverick"</span>,</span><br><span class="line">  <span class="attr">"school"</span>: <span class="string">"UCSD"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hash-and-Salt&quot;&gt;&lt;a href=&quot;#Hash-and-Salt&quot; class=&quot;headerlink&quot; title=&quot;Hash and Salt&quot;&gt;&lt;/a&gt;Hash and Salt&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A hashed password ha
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
  </entry>
  
  <entry>
    <title>Create an API with Express</title>
    <link href="https://www.qianhongbo.com/Fullstack/Create-an-API-with-Express.html"/>
    <id>https://www.qianhongbo.com/Fullstack/Create-an-API-with-Express.html</id>
    <published>2022-05-19T13:04:44.000Z</published>
    <updated>2022-05-20T18:05:19.294Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RESTful-APIs"><a href="#RESTful-APIs" class="headerlink" title="RESTful APIs"></a>RESTful APIs</h2><h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><ul><li><p>RESTful: <strong>R</strong>epresentational <strong>S</strong>tate <strong>T</strong>ransfer(-<strong>ful</strong>) <strong>A</strong>pplication <strong>P</strong>rogramming <strong>I</strong>nterface.</p></li><li><p>REST: A pattern for organizing API endpoints.</p></li></ul><h3 id="There-are-five-actionable-RESTful-routes-for-APIs"><a href="#There-are-five-actionable-RESTful-routes-for-APIs" class="headerlink" title="There are five actionable RESTful routes for APIs:"></a>There are five actionable RESTful routes for APIs:</h3><table><thead><tr><th>URL(Routes)</th><th>CRUD</th></tr></thead><tbody><tr><td>GET [‘/cats’]</td><td>INDEX</td></tr><tr><td>GET [‘/cats/:id’]</td><td>SHOW</td></tr><tr><td>POST [‘/cats’]</td><td>CREATE</td></tr><tr><td>PUT [‘/cats/:id’]</td><td>EDIT</td></tr><tr><td>DELETE [‘/cats/:id’]</td><td>DELETE</td></tr></tbody></table><h2 id="Define-functions"><a href="#Define-functions" class="headerlink" title="Define functions"></a>Define functions</h2><p>In the <code>src/handles/book.ts</code> file. We write some functions to handle the query.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express, &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">'express'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Book, BookStore &#125; <span class="keyword">from</span> <span class="string">'../models/book'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> BookStore();</span><br><span class="line"></span><br><span class="line"><span class="comment">// get all the records</span></span><br><span class="line"><span class="keyword">const</span> index = <span class="keyword">async</span> (_req: Request, res: Response) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> books = <span class="keyword">await</span> store.index();</span><br><span class="line">  res.json(books);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// show one specific record</span></span><br><span class="line"><span class="keyword">const</span> show = <span class="keyword">async</span> (req: Request, res: Response) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> book = <span class="keyword">await</span> store.show(req.params.id);</span><br><span class="line">  res.json(book);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create an record</span></span><br><span class="line"><span class="comment">// need to put the details in the request body</span></span><br><span class="line"><span class="keyword">const</span> create = <span class="keyword">async</span> (req: Request, res: Response) =&gt; &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> book: Book = &#123;</span><br><span class="line">        title: req.body.title,</span><br><span class="line">        author: req.body.author,</span><br><span class="line">        total_pages: req.body.total_pages,</span><br><span class="line">        summary: req.body.summary,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> newBook = <span class="keyword">await</span> store.create(book)</span><br><span class="line">    res.json(newBook)</span><br><span class="line">  &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">      res.status(<span class="number">400</span>)</span><br><span class="line">      res.json(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// delete a record</span></span><br><span class="line"><span class="keyword">const</span> destroy = <span class="keyword">async</span> (req: Request, res: Response) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> deleted = <span class="keyword">await</span> store.delete(req.params.id)</span><br><span class="line">  res.json(deleted)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> book_routes = <span class="function">(<span class="params">app: express.Application</span>) =&gt;</span> &#123;</span><br><span class="line">  app.get(<span class="string">'/products'</span>, index);</span><br><span class="line">  app.get(<span class="string">'/products/:id'</span>, show);</span><br><span class="line">  app.post(<span class="string">'/products'</span>, create);</span><br><span class="line">  app.delete(<span class="string">'/products/:id'</span>, destroy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> book_routes;</span><br></pre></td></tr></table></figure><h2 id="Add-routes-to-server"><a href="#Add-routes-to-server" class="headerlink" title="Add routes to server"></a>Add routes to server</h2><p>In the <code>src/server.ts</code>, we can just use one line to call the function in <code>handler/book.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express, &#123; Request, Response &#125; <span class="keyword">from</span> <span class="string">'express'</span></span><br><span class="line"><span class="keyword">import</span> bodyParser <span class="keyword">from</span> <span class="string">'body-parser'</span></span><br><span class="line"><span class="keyword">import</span> book_routes <span class="keyword">from</span> <span class="string">'./handles/book'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app: express.Application = express()</span><br><span class="line"><span class="keyword">const</span> address: <span class="built_in">string</span> = <span class="string">"0.0.0.0:3000"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// parse application/x-www-form-urlencoded</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: <span class="literal">false</span> &#125;))</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req: Request, res: Response</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World!'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// just use this line to handle the query!</span></span><br><span class="line">book_routes(app);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`starting app on: <span class="subst">$&#123;address&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Full-Stack-Big-Picture"><a href="#Full-Stack-Big-Picture" class="headerlink" title="Full Stack Big Picture"></a>Full Stack Big Picture</h2><ul><li>Express handles incoming HTTP requests to the API and the handler functions call model methods</li><li>Model methods query the database and send the information back to the handler, which parses it into json and sends the HTTP response</li></ul><p><img src="https://video.udacity-data.com/topher/2021/March/605cf319_l4-create-an-api-with-express-1/l4-create-an-api-with-express-1.png" alt="full stack summary"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RESTful-APIs&quot;&gt;&lt;a href=&quot;#RESTful-APIs&quot; class=&quot;headerlink&quot; title=&quot;RESTful APIs&quot;&gt;&lt;/a&gt;RESTful APIs&lt;/h2&gt;&lt;h3 id=&quot;Definition&quot;&gt;&lt;a href=&quot;#Def
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
  </entry>
  
  <entry>
    <title>Databases and SQL</title>
    <link href="https://www.qianhongbo.com/Fullstack/Databases-and-SQL.html"/>
    <id>https://www.qianhongbo.com/Fullstack/Databases-and-SQL.html</id>
    <published>2022-05-09T12:37:41.000Z</published>
    <updated>2022-05-10T19:01:26.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Different-kinds-of-databases"><a href="#Different-kinds-of-databases" class="headerlink" title="Different kinds of databases"></a>Different kinds of databases</h2><h3 id="SQL-Relational-Type-Databases"><a href="#SQL-Relational-Type-Databases" class="headerlink" title="SQL/Relational Type Databases"></a>SQL/Relational Type Databases</h3><p>SQL type databases are organized to be query-able using SQL (Structured Query Language) and organize information in tables. These are pretty much like giant spreadsheets, where an item stored in the database is a row in the table, and columns hold data points on each item.</p><h4 id="Ideal-Use-Cases"><a href="#Ideal-Use-Cases" class="headerlink" title="Ideal Use Cases:"></a>Ideal Use Cases:</h4><p>Repeating, structured data, such as:</p><ul><li>user information</li><li>product inventories</li><li>blogs</li></ul><h4 id="Common-SQL-Relational-Database-Technologies"><a href="#Common-SQL-Relational-Database-Technologies" class="headerlink" title="Common SQL/Relational Database Technologies:"></a>Common SQL/Relational Database Technologies:</h4><ul><li>MySQL</li><li>PostgreSQL</li><li>MariaDB</li><li>Microsoft SQL Server</li></ul><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>As you might have guessed, a NoSQL database …doesn’t use SQL. Really this means it isn’t set up like a spreadsheet. These databases can take a few different forms and are used for large sets of distributed data (like for use in micro service architectures).</p><h4 id="Ideal-Use-Cases-1"><a href="#Ideal-Use-Cases-1" class="headerlink" title="Ideal Use Cases:"></a>Ideal Use Cases:</h4><p>Partially structured or un-structured data: really big collections of complex data, caches</p><h4 id="Types-of-NoSQL-Databases"><a href="#Types-of-NoSQL-Databases" class="headerlink" title="Types of NoSQL Databases:"></a>Types of NoSQL Databases:</h4><ul><li>Key-Value store<ul><li>A key-value store is a non-relational, noSQL database type that stores data in key-value pairs (exactly like objects or dictionaries in programming). These databases are fast because the keys are unique and easily searchable, and they are flexible, because these key value pairs can store any combination of data types required.</li></ul></li><li>Document store<ul><li>A document store is a non-relational, noSQL database type that organizes data into documents. Documents can hold any shape of data, which means document stores can easily handle data with no structure or that is arbitrarily nested, which can be a headache to account for in a relational way.</li></ul></li><li>Column-oriented<ul><li>Data organized by column instead of by row. This architecture scales easily and makes fast, efficient queries. I’m including this architecture as a NoSQL type dbms, but this architecture can actually be used with SQL as well.</li></ul></li></ul><h3 id="Common-NoSQL-Database-Technologies"><a href="#Common-NoSQL-Database-Technologies" class="headerlink" title="Common NoSQL Database Technologies:"></a>Common NoSQL Database Technologies:</h3><ul><li>Redis [Key Value store]</li><li>MongoDB [Document store]</li><li>Elasticsearch [Document store]</li><li>Apache Cassandra [Column-oriented]</li></ul><h2 id="PostgreSQL-Cheat-Sheet"><a href="#PostgreSQL-Cheat-Sheet" class="headerlink" title="PostgreSQL Cheat Sheet"></a>PostgreSQL Cheat Sheet</h2><h3 id="Meta-Commands"><a href="#Meta-Commands" class="headerlink" title="Meta Commands"></a>Meta Commands</h3><ul><li><code>\l</code> <strong>List</strong> databases</li><li><code>\c</code> <strong>Connect</strong> to a database</li><li><code>\dt</code> <strong>Display Tables</strong> in a database</li><li><code>\q</code> <strong>Quit</strong> out of psql to normal terminal</li></ul><h3 id="Queries"><a href="#Queries" class="headerlink" title="Queries"></a>Queries</h3><ul><li>CREATE <code>INSERT INTO worlds (name) VALUES (&#39;Asgard&#39;);</code></li><li>READ <code>SELECT* FROM herbs;</code></li><li>UPDATE <code>UPDATE herbs SET sighting_date = &#39;2021-01-10&#39; WHERE id=&#39;1&#39;;</code></li><li>DELETE <code>DELETE FROM herbs WHERE id=&#39;1&#39;;</code></li><li>Filters<ul><li>BETWEEN<code>SELECT * FROM trips WHERE start_date BETWEEN &#39;2021-02-01&#39; AND &#39;2021-02-12&#39;;</code></li><li>LIKE <code>SELECT * FROM books WHERE title LIKE &#39;%ship%&#39;;</code></li></ul></li></ul><h2 id="Connect-PostSQL-using-Docker"><a href="#Connect-PostSQL-using-Docker" class="headerlink" title="Connect PostSQL using Docker"></a>Connect PostSQL using Docker</h2><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h3><ol><li>Add <code>pg</code> to dependencies</li><li>Create environment variables</li><li>Use <code>.env</code> file to save the db name, user name and password</li><li></li></ol><h3 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h3><p>Working with sensitive information can be hard, especially when your application relies on keys and passwords in order to connect to and access databases or APIs. The instructions below will walk you through adding a library for environment variables in Node so that we can safely store information away from public eyes without moving it out of reach.</p><ol><li>The library we will use for environment variables is called dotenv. You can add it via npm or yarn like this: <code>yarn add dotenv</code></li><li>Once we have dotenv listed in the package.json dependencies, we need to create one file. Make a new file called <code>.env</code> in the root of the project. In that file, add this: <code>TEST_VAR=testing123</code>. This is our first environment variable!</li><li>One last, <strong>super</strong> important step. The .env file hides sensitive information and makes it available to our application via a variable, so it holds a lot of really important, secret information. Information we don’t want shared even in a respository. If a gitignore file exists in your project add the .env file there. If there isn’t a gitignore, add a file called <code>.gitignore</code> to the root of the project and add a single line in the file that says just <code>.env</code>. <strong>If you include your env file in a public repository, you have completely negated the purpose of adding environment variables.</strong></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Different-kinds-of-databases&quot;&gt;&lt;a href=&quot;#Different-kinds-of-databases&quot; class=&quot;headerlink&quot; title=&quot;Different kinds of databases&quot;&gt;&lt;/a&gt;Di
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
  </entry>
  
  <entry>
    <title>Express</title>
    <link href="https://www.qianhongbo.com/Fullstack/Express.html"/>
    <id>https://www.qianhongbo.com/Fullstack/Express.html</id>
    <published>2022-04-06T07:01:57.000Z</published>
    <updated>2022-04-07T03:55:03.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-Basic"><a href="#HTTP-Basic" class="headerlink" title="HTTP Basic"></a>HTTP Basic</h2><h3 id="HTTP-Request"><a href="#HTTP-Request" class="headerlink" title="HTTP Request"></a>HTTP Request</h3><ul><li><strong>GET</strong> - retrieves data from the server</li><li><strong>POST</strong> - sends data to the server</li><li><strong>DELETE</strong> - removes data from the server</li><li><strong>PUT</strong> - replaces data on the server</li><li><strong>PATCH</strong> - updates data on the server</li></ul><h3 id="Query-Parameters"><a href="#Query-Parameters" class="headerlink" title="Query Parameters"></a>Query Parameters</h3><ul><li>Query strings are parameters in the URL, identified by a ‘?’<ul><li>Ex: <a href="https://coffee.com/search?decaf=true" target="_blank" rel="noopener">https://coffee.com/search?decaf=true</a></li></ul></li><li>To chain multiple parameters together in a query string, use ‘&amp;”<ul><li>Ex: <a href="https://coffee.com/search?decaf=true&amp;size=large&amp;creamer=soy" target="_blank" rel="noopener">https://coffee.com/search?decaf=true&amp;size=large&amp;creamer=soy</a></li></ul></li></ul><h3 id="HTTP-Response-Status-Codes"><a href="#HTTP-Response-Status-Codes" class="headerlink" title="HTTP Response Status Codes"></a>HTTP Response Status Codes</h3><table><thead><tr><th align="left">Status Code Range</th><th align="left">Example Code</th></tr></thead><tbody><tr><td align="left">100-199: information</td><td align="left">100 Continue</td></tr><tr><td align="left">200-299: request was successful</td><td align="left">200 OK 201 Created</td></tr><tr><td align="left">300-399: request was redirected</td><td align="left">301 Moved Permanently 307 Temporary Redirect</td></tr><tr><td align="left">400-499: client-side error</td><td align="left">400 Bad Request 401 Unauthorized 405 Method Not Allowed</td></tr><tr><td align="left">500-599: server-side error</td><td align="left">500 Internal Server Error</td></tr></tbody></table><h2 id="Express-basics"><a href="#Express-basics" class="headerlink" title="Express basics"></a>Express basics</h2><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><p>Every Express application requires the creation of what is known as the application object. All of the core functions of express take place on the application object including endpoint methods.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = express();</span><br></pre></td></tr></table></figure><h3 id="Core-Methods"><a href="#Core-Methods" class="headerlink" title="Core Methods"></a>Core Methods</h3><ul><li><code>.listen()</code> - listens for connections to a specified host and port</li><li><code>.get()</code> - used to get a route and takes a route and a callback function as arguments. The callback function takes two arguments, the request from the browser and the response from the server. Additionally, middleware can also be passed in as an argument which will be covered in the middleware section.</li><li><code>.post()</code>, <code>.put()</code>, <code>.delete()</code> - the other app methods that make up endpoints. They require having the ability to store data. <code>.post()</code> is used to post a new item, <code>.put()</code> used to edit an item already in existence, and <code>.delete()</code> to remove an item from the data. Like get above, all three methods will take a route.</li></ul><h3 id="Create-an-endpoint"><a href="#Create-an-endpoint" class="headerlink" title="Create an endpoint"></a>Create an endpoint</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/students&apos;, (req, res) =&gt; &#123;</span><br><span class="line">  // perform an action with req or res. </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Middleware"><a href="#Middleware" class="headerlink" title="Middleware"></a>Middleware</h2><p>Middleware is a function that is applied between the request and response. Meaning you get the request, do something with it, and then send the response. Common uses of middleware include checking the authentication status of a user before sending a response or logging the request before sending the response.</p><h3 id="Using-middleware"><a href="#Using-middleware" class="headerlink" title="Using middleware"></a>Using middleware</h3><h4 id="use"><a href="#use" class="headerlink" title=".use();"></a><code>.use();</code></h4><p>The <code>.use();</code> method is a method that can be applied to the application object or to route objects. It is used for applying middleware and can take in a route, and middleware as arguments</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(middleware);</span><br></pre></td></tr></table></figure><h4 id="Endpoint-level"><a href="#Endpoint-level" class="headerlink" title="Endpoint level"></a>Endpoint level</h4><p>Applies middleware to a specific endpoint.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">students.get(<span class="string">'/'</span>, middleware, (req, res) =&gt; &#123; <span class="comment">// do stuff &#125;);</span></span><br></pre></td></tr></table></figure><h3 id="Writing-middleware"><a href="#Writing-middleware" class="headerlink" title="Writing middleware"></a>Writing middleware</h3><p>Middleware is really just a function that is applied between the request and response. As such, if writing middleware, you create a function.</p><p>A middleware function takes at least 3 arguments (req, res, next); a 4th is also available of err (err, req, res, next) for use in writing error-handling middleware.</p><h4 id="next"><a href="#next" class="headerlink" title="next();"></a><code>next();</code></h4><p>The next method is a method from the express router. next() calls the next middleware in a chain of middlewares. Without adding next to your middleware function, your application will get stuck on the middleware.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myMiddleware = <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do stuff</span></span><br><span class="line">  next();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Working-with-routes"><a href="#Working-with-routes" class="headerlink" title="Working with routes"></a>Working with routes</h3><blockquote><p>The sample code for this topic is on the <a href="https://github.com/Qianhongbo/JavaScript/tree/master/work_with_routes" target="_blank" rel="noopener">website</a>.</p></blockquote><p>When building an express application, it’s best practice to keep the server and application endpoints and functionality separate. With the router object, you’re able to create a directory of routes and separate the functionality of each route onto its own file.</p><h4 id="Router"><a href="#Router" class="headerlink" title="Router()"></a><code>Router()</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">'express'</span>;   </span><br><span class="line"><span class="keyword">const</span> routes = express.Router();</span><br><span class="line"></span><br><span class="line">routes.get(<span class="string">'/'</span>, (req, res) =&gt; &#123; <span class="comment">//do something &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> routes;</span><br></pre></td></tr></table></figure><h4 id="Use-the-Router"><a href="#Use-the-Router" class="headerlink" title="Use the Router"></a>Use the Router</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> routes <span class="keyword">from</span> <span class="string">'./routes/index'</span>;</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, routes);</span><br></pre></td></tr></table></figure><h2 id="When-to-use-Express"><a href="#When-to-use-Express" class="headerlink" title="When to use Express"></a>When to use Express</h2><p>Everything we’ve done in this lesson so far has been the foundation of what’s known as a REST API (Representational State Transfer). It’s an architectural standard for APIs and currently the most popular type of API in use. RESTful APIs are considered to be stateless meaning the user/browser is independent of the server and they don’t care what the other is doing.</p><p>But what if you need the interactions between the server and the user to be stateful meaning the server is aware of what the user is doing. Think about when you are waiting for someone to send a text message and you see the dots pop up letting you know they are working on a response–that’s stateful. So what do we do when we need a real-time application? Instead of a REST API, you create a <strong>WebSocket API.</strong></p><p>Websocket APIs are stateful and allow for real-time communication between the user and the server allowing for one user to know what another user is doing. Websockets do not use the HTTP protocol and have their own WebSocket protocol.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTTP-Basic&quot;&gt;&lt;a href=&quot;#HTTP-Basic&quot; class=&quot;headerlink&quot; title=&quot;HTTP Basic&quot;&gt;&lt;/a&gt;HTTP Basic&lt;/h2&gt;&lt;h3 id=&quot;HTTP-Request&quot;&gt;&lt;a href=&quot;#HTTP-Requ
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
  </entry>
  
  <entry>
    <title>Jasmine</title>
    <link href="https://www.qianhongbo.com/Fullstack/Jasmine.html"/>
    <id>https://www.qianhongbo.com/Fullstack/Jasmine.html</id>
    <published>2022-04-03T04:01:39.000Z</published>
    <updated>2022-04-06T22:01:27.199Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Configure-Jasmine"><a href="#Configure-Jasmine" class="headerlink" title="Configure Jasmine"></a>Configure Jasmine</h2><h3 id="Install-Jasmine"><a href="#Install-Jasmine" class="headerlink" title="Install Jasmine:"></a>Install Jasmine:</h3><ol><li><p>To install Jasmine run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jasmine</span><br></pre></td></tr></table></figure></li><li><p>Add a reporter for outputting Jasmine results to the terminal:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jasmine-spec-reporter</span><br></pre></td></tr></table></figure></li><li><p>Add type definitions for Jasmine with :</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev @types/jasmine</span><br></pre></td></tr></table></figure></li></ol><h3 id="Add-Testing-Scripts"><a href="#Add-Testing-Scripts" class="headerlink" title="Add Testing Scripts:"></a>Add Testing Scripts:</h3><p>Add the scripts object in the <code>package.json</code> and add the followingto run Jasmine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"jasmine"</span>: <span class="string">"jasmine"</span></span><br></pre></td></tr></table></figure><h3 id="Set-up-the-file-structure"><a href="#Set-up-the-file-structure" class="headerlink" title="Set up the file structure"></a>Set up the file structure</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules</span><br><span class="line">├── spec</span><br><span class="line">│      └── support</span><br><span class="line">│           └── jasmine.json</span><br><span class="line">├── src</span><br><span class="line">│     ├──  tests</span><br><span class="line">│     │     ├── helpers</span><br><span class="line">│     │     │      └── reporter.ts</span><br><span class="line">│     │     └── indexSpec.ts</span><br><span class="line">│     └── index.ts</span><br><span class="line">├── package-lock.json</span><br><span class="line">├── package.json</span><br><span class="line">└── tsconfig.json</span><br></pre></td></tr></table></figure><h3 id="Add-code-to-reporter-ts"><a href="#Add-code-to-reporter-ts" class="headerlink" title="Add code to reporter.ts"></a>Add code to <code>reporter.ts</code></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;DisplayProcessor, SpecReporter, StacktraceOption&#125; <span class="keyword">from</span> <span class="string">"jasmine-spec-reporter"</span>;</span><br><span class="line"><span class="keyword">import</span> SuiteInfo = jasmine.SuiteInfo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> CustomProcessor <span class="keyword">extends</span> DisplayProcessor &#123;</span><br><span class="line">    <span class="keyword">public</span> displayJasmineStarted(info: SuiteInfo, log: <span class="built_in">string</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;log&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jasmine.getEnv().clearReporters();</span><br><span class="line">jasmine.getEnv().addReporter(<span class="keyword">new</span> SpecReporter(&#123;</span><br><span class="line">    spec: &#123;</span><br><span class="line">        displayStacktrace: StacktraceOption.NONE</span><br><span class="line">    &#125;,</span><br><span class="line">    customProcessors: [CustomProcessor],</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h3 id="Add-code-to-jasmine-json"><a href="#Add-code-to-jasmine-json" class="headerlink" title="Add code to jasmine.json"></a>Add code to <code>jasmine.json</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;spec_dir&quot;: &quot;build/tests&quot;,</span><br><span class="line">    &quot;spec_files&quot;: [</span><br><span class="line">        &quot;**/*[sS]pec.js&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;helpers&quot;: [</span><br><span class="line">        &quot;helpers/**/*.js&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;stopSpecOnExpectationFailure&quot;: false,</span><br><span class="line">    &quot;random&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Add-code-to-tsconfig-json"><a href="#Add-code-to-tsconfig-json" class="headerlink" title="Add code to tsconfig.json"></a>Add code to <code>tsconfig.json</code></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"exclude": ["node_modules", "./dist", "spec"]</span><br></pre></td></tr></table></figure><h2 id="Write-a-Basic-Test"><a href="#Write-a-Basic-Test" class="headerlink" title="Write a Basic Test"></a>Write a Basic Test</h2><p><code>index.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = (num: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num * num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> myFunc;</span><br></pre></td></tr></table></figure><p><code>indexSpec.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> myFunc <span class="keyword">from</span> <span class="string">'../index'</span>;</span><br><span class="line"></span><br><span class="line">it(<span class="string">'expect myFunc(5) to equal 25'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  expect(myFunc(<span class="number">5</span>)).toEqual(<span class="number">25</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>To test this we’ll need to first run the build script and then the test script:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm run jasmine</span><br></pre></td></tr></table></figure><h2 id="Jasmine-syntax"><a href="#Jasmine-syntax" class="headerlink" title="Jasmine syntax"></a>Jasmine syntax</h2><blockquote><p>The sample code is in this <a href="https://github.com/Qianhongbo/JavaScript/tree/master/jasmine_comparisons" target="_blank" rel="noopener">website</a>.</p></blockquote><blockquote><ul><li><strong>Spec</strong>: an individual test</li><li><strong>Suite</strong>: a collection of similar tests related to one function</li></ul></blockquote><ul><li>Use the <strong>describe</strong> keyword followed by a short description of what the suite is testing and one or more specs.</li><li>A best practice is to start a sentence with “it” and then complete the sentence with the description of what the suite is testing.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">describe(“suite description”, () =&gt; &#123;</span><br><span class="line">    it(“describes the spec”, () =&gt; &#123;</span><br><span class="line">        const myVar = true;</span><br><span class="line">        expect(myVar).toBe(true);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Comparisons"><a href="#Comparisons" class="headerlink" title="Comparisons"></a>Comparisons</h3><ul><li><p><code>.toEqual</code> : check the value</p></li><li><p><code>.toBe</code> : check the object</p></li><li><p><code>.toBeTruthy()</code>passes when</p><ul><li>The expectation has any non-zero value</li><li>The expectation evaluates to <code>true</code></li></ul></li><li><p><code>.toBeFalsy()</code> passes when the value is:</p><ul><li><code>0</code></li><li><code>&#39;&#39;</code> (an empty string)</li><li><code>undefined</code></li><li><code>null</code></li><li><code>NaN</code></li></ul></li><li><p><code>.toBeCloseTo(expected value, precision)</code></p><ul><li>Passes if a value is within a specified precision of the expected value</li><li>Precision is optional and is represented the number of decimal points to check (defaults to 2)</li></ul></li><li><p><code>.toBeGreaterThan(expected value)</code></p></li><li><p><code>.toBeLessThan(expected value)</code></p></li><li><p><code>.toBeGreaterThanOrEqual(expected value)</code></p></li><li><p><code>.toBeLessThanOrEqual(expected value)</code></p></li><li><p>use <code>.not</code> to negate the matcher</p></li></ul><h2 id="Test-asynchronous-code"><a href="#Test-asynchronous-code" class="headerlink" title="Test asynchronous code"></a>Test asynchronous code</h2><blockquote><p>The sample code is in this <a href="https://github.com/Qianhongbo/JavaScript/tree/master/jasmine_asynchronous" target="_blank" rel="noopener">website</a>.</p></blockquote><h3 id="async-await"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">it(&apos;expects asyncFunc() result to equal value&apos;, </span><br><span class="line">  async () =&gt; &#123;</span><br><span class="line">    const result = await asyncFunc();</span><br><span class="line">    expect(result).toEqual(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">it(&apos;expects asyncFunc() result to equal value&apos;,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    return asyncFunc().then( result =&gt; &#123;</span><br><span class="line">        expect(result).toEqual(value);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Endpoint-testing"><a href="#Endpoint-testing" class="headerlink" title="Endpoint testing"></a>Endpoint testing</h2><blockquote><p>The sample code is in this <a href="https://github.com/Qianhongbo/JavaScript/tree/master/endpoint_tesing" target="_blank" rel="noopener">website</a>.</p></blockquote><h3 id="Benefits-of-Endpoint-Testing"><a href="#Benefits-of-Endpoint-Testing" class="headerlink" title="Benefits of Endpoint Testing"></a>Benefits of Endpoint Testing</h3><ul><li>Confirms that the server is working.</li><li>Confirms that endpoints are configured properly.</li><li>More efficient than manual testing.</li></ul><h3 id="Setting-Up-Endpoint-Testing"><a href="#Setting-Up-Endpoint-Testing" class="headerlink" title="Setting Up Endpoint Testing"></a>Setting Up Endpoint Testing</h3><ul><li>Install Supertest as a dependency.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i supertest</span><br></pre></td></tr></table></figure><ul><li>Add type definition to allow the code to compile without TypeScript errors.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i --save-dev @types/supertest.</span><br></pre></td></tr></table></figure><ul><li>Import SuperTest in the spec file.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> supertest <span class="keyword">from</span> <span class="string">'supertest'</span>;</span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">'../index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> request = supertest(app);</span><br><span class="line">describe(<span class="string">'Test endpoint responses'</span>, () =&gt; &#123;</span><br><span class="line">    it(<span class="string">'gets the api endpoint'</span>, <span class="keyword">async</span> (done) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> response = <span class="keyword">await</span> request.get(<span class="string">'/api'</span>);</span><br><span class="line">        expect(response.status).toBe(<span class="number">200</span>);</span><br><span class="line">        done();</span><br><span class="line">    &#125;</span><br><span class="line">)&#125;);</span><br></pre></td></tr></table></figure><ul><li>Create and Run Tests</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h2 id="Setup-and-teardown"><a href="#Setup-and-teardown" class="headerlink" title="Setup and teardown"></a>Setup and teardown</h2><ul><li><p><code>beforeAll();</code>can be used to run some code before the specs run, and any log statements show up before the specs.</p></li><li><p><code>afterAll();</code> allows functionality to be added after all of the specs in a suite have run. Log statements will show after the specs.</p></li><li><p><code>beforeEach();</code> and <code>afterEach();</code> will run before or after each one of the individual specs.</p></li><li><p><code>fdescribe</code> and <code>fit</code> allows jasmine to focus on one specific suite, skipping the others</p></li><li><p><code>xdescribe</code> and <code>xit</code> allows Jasmine to skip a specific suite or test, running all others.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Configure-Jasmine&quot;&gt;&lt;a href=&quot;#Configure-Jasmine&quot; class=&quot;headerlink&quot; title=&quot;Configure Jasmine&quot;&gt;&lt;/a&gt;Configure Jasmine&lt;/h2&gt;&lt;h3 id=&quot;Insta
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="https://www.qianhongbo.com/Fullstack/TypeScript.html"/>
    <id>https://www.qianhongbo.com/Fullstack/TypeScript.html</id>
    <published>2022-04-01T03:56:13.000Z</published>
    <updated>2022-04-03T19:21:06.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why-TypeScript"><a href="#Why-TypeScript" class="headerlink" title="Why TypeScript"></a>Why TypeScript</h2><h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><p>Types are applied to:</p><ul><li>variables</li><li>function parameters</li><li>function returns</li><li>object values.</li></ul><h3 id="JavaScript-is-Weakly-Typed"><a href="#JavaScript-is-Weakly-Typed" class="headerlink" title="JavaScript is Weakly-Typed."></a>JavaScript is Weakly-Typed.</h3><p>This means that types are assigned by the interpreter based on the data and makes an educated guess when the code’s intention is ambiguous. This can lead to unintended results.</p><p><strong>Example:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 + &apos;2&apos; = &apos;22&apos;</span><br></pre></td></tr></table></figure><h3 id="TypeScript-Adds-Typing-to-JavaScript"><a href="#TypeScript-Adds-Typing-to-JavaScript" class="headerlink" title="TypeScript Adds Typing to JavaScript"></a>TypeScript Adds Typing to JavaScript</h3><p>In short, TypeScript is a static and strong typed superset of JavaScript. When we’re done with our TypeScript code, it compiles to JavaScript.</p><h2 id="Configure-TypeScript"><a href="#Configure-TypeScript" class="headerlink" title="Configure TypeScript"></a>Configure TypeScript</h2><h3 id="Install-TypeScript"><a href="#Install-TypeScript" class="headerlink" title="Install TypeScript"></a>Install TypeScript</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm i typescript // save to dependencies</span><br><span class="line">$ npm i typescript --save-dev // save to devDependencies</span><br></pre></td></tr></table></figure><p>Add <code>typescript</code>, <code>ts-node</code> and <code>@types/node</code> definitions to dev dependencies.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i --save-dev typescript</span><br><span class="line">npm i --save-dev ts-node </span><br><span class="line">npm i --save-dev @types/node</span><br></pre></td></tr></table></figure><h3 id="Creating-your-package-json-Script"><a href="#Creating-your-package-json-Script" class="headerlink" title="Creating your package.json Script"></a>Creating your package.json Script</h3><p>To use TypeScript, you need to add a script to your package.json file to compile TypeScript to JavaScript. This is generally called your “build” script but could be named anything.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"build"</span>: <span class="string">"npx tsc"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>To execute your <code>&quot;build&quot;</code> script use the following:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p>Run the completed index file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ node build/.</span><br></pre></td></tr></table></figure><p><code>tsconfig.json</code> can also be named <code>jsconfig.json</code>.</p><p>To install the config file, run</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npx tsc --init</span><br></pre></td></tr></table></figure><h3 id="Helpful-configurations-to-note"><a href="#Helpful-configurations-to-note" class="headerlink" title="Helpful configurations to note:"></a>Helpful configurations to note:</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="string">"target"</span>: <span class="string">"es5"</span>,                          </span><br><span class="line">    <span class="string">"module"</span>: <span class="string">"commonjs"</span>,                     </span><br><span class="line">    <span class="string">"lib"</span>: [<span class="string">"ES2018"</span>, <span class="string">"DOM"</span>], </span><br><span class="line">    <span class="string">"outDir"</span>: <span class="string">"./build"</span>,                        </span><br><span class="line">    <span class="string">"strict"</span>: <span class="literal">true</span>,                           </span><br><span class="line">    <span class="string">"noImplicitAny"</span>: <span class="literal">true</span>,                 </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"exclude"</span>: [<span class="string">"node_modules"</span>, <span class="string">"tests"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You will see many more options available than what is above. Your application may require additional settings to be configured, but these are typically the main settings to start with.</p><ul><li><code>target</code> - sets what version of JS TypeScript will be transpiled to.</li><li><code>module</code> - sets what module system will be used when transpiling. Node.js uses the common.js module system by default</li><li><code>lib</code> - is used to say what libraries your code is using. In this case, ES2018 and the DOM API</li><li><code>outDir</code> - where you want your src code to output to. Often named build, prod, or server (when using it serverside)</li><li><code>strict</code> - enable strict typing</li><li><code>noImplicitAny</code> - disallow the <code>&quot;any&quot;</code> type (covered in TypeScript Basics)</li><li><code>exclude</code> - directories to exclude in compiling</li></ul><h2 id="ES6-Modules"><a href="#ES6-Modules" class="headerlink" title="ES6 Modules"></a>ES6 Modules</h2><p>Now that we are using TypeScript for our application, we can also easily utilize the ES6 module system instead of the CommonJS module system. Destructuring should only be used when you are exporting the functions individually. If choosing to use export default, you must import the entire default as a module.</p><h3 id="Import"><a href="#Import" class="headerlink" title="Import"></a>Import</h3><p>For importing modules, use the following syntax</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Rename the module</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'name'</span> <span class="keyword">from</span> <span class="string">'module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use destructuring to pull in specific functions when they are exported individually</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="function"><span class="keyword">function</span>, <span class="title">function</span>&#125; <span class="title">from</span> '<span class="title">module</span>';</span></span><br></pre></td></tr></table></figure><h3 id="Export"><a href="#Export" class="headerlink" title="Export"></a>Export</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Export an individual function or other type of object in code</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> myFunction = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export a single item at the end</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> object;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Export a list of objects</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;object1, object2&#125;;</span><br></pre></td></tr></table></figure><h2 id="TypeScript-Basics"><a href="#TypeScript-Basics" class="headerlink" title="TypeScript Basics"></a>TypeScript Basics</h2><h3 id="Implicit-Typing-and-Explicit-Typing"><a href="#Implicit-Typing-and-Explicit-Typing" class="headerlink" title="Implicit Typing and Explicit Typing"></a>Implicit Typing and Explicit Typing</h3><h4 id="Implicit-Typing"><a href="#Implicit-Typing" class="headerlink" title="Implicit Typing"></a>Implicit Typing</h4><p>TypeScript will automatically assume types of objects if the object is not typed. It is best practice to allow TypeScript to type immutable variables and simple functions implicitly.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myNum = <span class="number">3</span>; <span class="comment">// TypeScript implicitly types myNum as a number based on the variable</span></span><br></pre></td></tr></table></figure><p>Implicit Typing is a best practice when the app is self-contained (meaning that it does not depend on other applications or APIs) or variables are immutable.</p><p><img src="https://video.udacity-data.com/topher/2021/March/603f9e26_fsjs-c1-l2-implicit-typing/fsjs-c1-l2-implicit-typing.jpg" alt></p><h4 id="Explicit-Typing"><a href="#Explicit-Typing" class="headerlink" title="Explicit Typing"></a>Explicit Typing</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myVar: number = <span class="number">3</span>; <span class="comment">// myVar has been explicitly typed as a number</span></span><br></pre></td></tr></table></figure><p><img src="https://video.udacity-data.com/topher/2021/March/603fa213_fsjs-c1-l2-explicit-typing/fsjs-c1-l2-explicit-typing.jpg" alt></p><h3 id="Basic-Types"><a href="#Basic-Types" class="headerlink" title="Basic Types"></a>Basic Types</h3><p><code>string</code> - used for string types, textual data</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> studentName:string;</span><br><span class="line">studentName = <span class="string">'Dae Lee'</span></span><br></pre></td></tr></table></figure><hr><p><code>number</code> - used for number types including integers and decimals</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> studentAge: number;</span><br><span class="line">studentAge = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><hr><p><code>boolean</code> - used for <code>true</code>/<code>false</code> types</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> studentEnriched: boolean;</span><br><span class="line">studentEnriched = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><hr><p><code>Union Types</code> - used when more than one type can be used</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> studentPhone: (number | string);</span><br><span class="line">studentPhone = <span class="string">'(555) 555 - 5555'</span>;</span><br><span class="line">studentPhone = <span class="number">5555555555</span>;</span><br></pre></td></tr></table></figure><hr><p><code>null</code> - used when an object or variable is intentionally <code>null</code>, typically only functionally found in union types</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getCapitals = (str:string):string[] | <span class="function"><span class="params">null</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> capitals = str.match(<span class="regexp">/[A-Z]/</span>);</span><br><span class="line">  <span class="keyword">return</span> capitals;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getCapitals(<span class="string">'something'</span>));</span><br><span class="line"><span class="comment">// returns null</span></span><br><span class="line"><span class="built_in">console</span>.log(getCapitals(<span class="string">'Something'</span>));</span><br><span class="line"><span class="comment">// returns ['S']</span></span><br></pre></td></tr></table></figure><hr><p><code>undefined</code> - used when a variable has yet to be defined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = <span class="function">(<span class="params">student: string | <span class="literal">undefined</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> ( student === <span class="literal">undefined</span> )&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><code>void</code> - used as a return type when the function returns nothing</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = (student: string): <span class="keyword">void</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(student);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><code>never</code> - used as a return type when the function will never return anything, such as with functions that throw errors or infinite loops</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myError = (err: string): never &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(err); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><code>any</code> - <em>should be avoided</em>. Used when the type of the item being typed can be anything</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = (student: any): <span class="function"><span class="params">any</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><code>unknown</code> - used when the type of the thing being typed is unknown. Used heavily for type assertion</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = (student: unknown): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Type-Assertions"><a href="#Type-Assertions" class="headerlink" title="Type Assertions"></a>Type Assertions</h3><p>Type Assertions are used to tell TypeScript that even though TypeScript thinks it should be one type, it is actually a different type. Common to see when a type is <code>unknown</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myFunc = (student: unknown): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  newStudent = student <span class="keyword">as</span> string;</span><br><span class="line">  <span class="keyword">return</span> newStudent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Object-like-types"><a href="#Object-like-types" class="headerlink" title="Object-like types"></a>Object-like types</h3><p><strong>Array</strong> - to type as an array, use the type, followed by square brackets. Union types can be used to allow for multiple types in an array.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let arr: string[]; // only accepts strings</span><br><span class="line">let arr2: (string | number)[]; // accepts strings or numbers</span><br></pre></td></tr></table></figure><hr><p><strong>Tuple</strong> - tuples are not native to JavaScript. When you know exactly what data will be in the array, and you will not be adding to the array or modifying the type for any value, you can use a tuple.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr: [<span class="built_in">string</span>, <span class="built_in">number</span>, <span class="built_in">string</span>]; <span class="comment">// ['cat', 7, 'dog']</span></span><br></pre></td></tr></table></figure><hr><p><code>enum</code> - enums are not native to JavaScript but are similar to enumeration used in other languages like C++ and Java. You use an enum when you have a constant set of values that will not be changed. By default, the values in an enum are also given a numeric value starting at 0. However, the numeric value can manually be set to any number explicitly or by calculation. Uses PascalCase to name the type.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Weekend &#123;</span><br><span class="line">  Friday,</span><br><span class="line">  Saturday,</span><br><span class="line">  Sunday</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Objects-and-Interfaces"><a href="#Objects-and-Interfaces" class="headerlink" title="Objects and Interfaces"></a>Objects and Interfaces</h3><p>Objects are easily created in JavaScript due to JavaScript’s weak typing. With TypeScript, they take a bit more work. It is possible to create an object in TypeScript, but TypeScript offers better tools for doing so.</p><p><strong>Object</strong> - creating an object requires defining the object before setting values. Once you have defined the object, additional properties cannot be added to the type definition, making it unhelpful when you need to add more properties after creation.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> student:&#123; name: <span class="built_in">string</span>, age: <span class="built_in">number</span>, enrolled: <span class="built_in">boolean</span>&#125; = &#123;name: <span class="string">'Maria'</span>, age: <span class="number">10</span>, enrolled: <span class="literal">true</span>&#125;;</span><br></pre></td></tr></table></figure><hr><p><code>interface</code> - Interfaces are a concept not native to javascript, but similar concepts exist in other languages like Java, C++, and Python, where you create an abstract class as an interface for creating classes. With TypeScript, interfaces are simply used as the blueprint for the shape of something. Interfaces can be used to create functions but are most commonly seen to create objects.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface Student &#123; </span><br><span class="line">  name: string, </span><br><span class="line">  age: number, </span><br><span class="line">  enrolled: boolean</span><br><span class="line">&#125;;</span><br><span class="line">let newStudent:Student = &#123;name: &apos;Maria&apos;, age: 10, enrolled: true&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">interface Undergrad extends Student &#123;</span><br><span class="line">  major: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Duck-Typing"><a href="#Duck-Typing" class="headerlink" title="Duck Typing"></a>Duck Typing</h4><p>Duck Typing is a programming concept that tests if an object meets the duck test: “If it walks like a duck and it quacks like a duck, then it must be a duck.”</p><p>TypeScript uses duck typing for interfaces, meaning that even though you may say a function takes in an argument of interface A, if interface B has the same properties of A, it will also accept B. Interface A is the duck, and Interface B walks and quacks like a duck, so we’ll accept it as a duck too.</p><h4 id="Optional-and-Readonly-Properties"><a href="#Optional-and-Readonly-Properties" class="headerlink" title="Optional and Readonly Properties"></a>Optional and Readonly Properties</h4><p><strong>Optional</strong> - use when an object may or may not have a specific property by adding a <code>?</code> at the end of the property name.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">interface Student &#123; </span><br><span class="line">  name: string, </span><br><span class="line">  age: number, </span><br><span class="line">  enrolled: boolean,</span><br><span class="line">  phone?: number // phone becomes optional</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><code>readonly</code> - use when a property should not be able to be modified after the object has been created.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Student &#123; </span><br><span class="line">  name: <span class="built_in">string</span>, </span><br><span class="line">  age: <span class="built_in">number</span>, </span><br><span class="line">  enrolled: <span class="built_in">boolean</span>,</span><br><span class="line">  readonly id: <span class="built_in">number</span> <span class="comment">// id is readonly</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Type-Aliases"><a href="#Type-Aliases" class="headerlink" title="Type Aliases"></a>Type Aliases</h3><h4 id="With-primitive-types-for-documentation"><a href="#With-primitive-types-for-documentation" class="headerlink" title="With primitive types for documentation"></a>With primitive types for documentation</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">type Name = string;</span><br></pre></td></tr></table></figure><h4 id="Workes-with-unions-and-tuples"><a href="#Workes-with-unions-and-tuples" class="headerlink" title="Workes with unions and tuples"></a>Workes with unions and tuples</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type Input = string | number;</span><br><span class="line">type Coord = [number, number];</span><br></pre></td></tr></table></figure><p>Type Aliases can also be used as object. It is similar as interface.</p><h3 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h3><p>TypeScript classes look and behave very much like the classes introduced in ES6. The biggest addition to TypeScript classes is the addition of access modifiers. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Student &#123;</span><br><span class="line">  protected studentGrade: number;</span><br><span class="line">  private studentId: number;</span><br><span class="line">  public constructor(grade: number, id: number) &#123;</span><br><span class="line">    this.studentGrade = grade;</span><br><span class="line">    this.studentId = id;</span><br><span class="line">  &#125;</span><br><span class="line">  id()&#123;</span><br><span class="line">    return this.studentId;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Factory-Functions"><a href="#Factory-Functions" class="headerlink" title="Factory Functions"></a>Factory Functions</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface Student &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  age: number</span><br><span class="line">  greet(): void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const studentFactory = (name: string, age: number): Student =&gt;&#123; </span><br><span class="line">  const greet = ():void =&gt; console.log(&apos;hello&apos;); </span><br><span class="line">  return &#123; name, age, greet &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const myStudent = studentFactory(&apos;Hana&apos;, 16);</span><br></pre></td></tr></table></figure><h2 id="Generics-and-Asynchronous-TypeScript"><a href="#Generics-and-Asynchronous-TypeScript" class="headerlink" title="Generics and Asynchronous TypeScript"></a>Generics and Asynchronous TypeScript</h2><h3 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h3><p>We can combine the following function using generics.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const getItem = (arr: number[]):number =&gt; &#123;</span><br><span class="line">  return arr[1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const getItem = (arr: string[]):string =&gt; &#123;</span><br><span class="line">  return arr[1];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// Generic Function</span><br><span class="line">const getItem = &lt;T&gt;(arr: T[]):T =&gt; &#123;</span><br><span class="line">  return arr[1];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Why-TypeScript&quot;&gt;&lt;a href=&quot;#Why-TypeScript&quot; class=&quot;headerlink&quot; title=&quot;Why TypeScript&quot;&gt;&lt;/a&gt;Why TypeScript&lt;/h2&gt;&lt;h3 id=&quot;Types&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
      <category term="Typescript" scheme="https://www.qianhongbo.com/tags/Typescript/"/>
    
  </entry>
  
  <entry>
    <title>Database Tutorial</title>
    <link href="https://www.qianhongbo.com/Backend/Database/Database-Tutorial.html"/>
    <id>https://www.qianhongbo.com/Backend/Database/Database-Tutorial.html</id>
    <published>2022-03-28T14:20:28.000Z</published>
    <updated>2022-03-29T05:22:12.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Database-Tutorial"><a href="#Database-Tutorial" class="headerlink" title="Database Tutorial"></a>Database Tutorial</h1><h2 id="Install-MYSQL-as-a-Docker-Container"><a href="#Install-MYSQL-as-a-Docker-Container" class="headerlink" title="Install MYSQL as a Docker Container"></a>Install MYSQL as a Docker Container</h2><p>First, we need to install Docker to our system. After that we just run the following code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name ECE141MySQL -e MYSQL_ROOT_PASS</span><br><span class="line">WORD=root -e MYSQL_DATABASE=testing -d mysql</span><br></pre></td></tr></table></figure><p>This creates a mysql container(ECE141MySQL) in docker, a database called “testing”, and a root user (root) with a passward of “root”.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it ECE141MySQL bash</span><br><span class="line">mysql -p // use &quot;root&quot; when asked for password</span><br></pre></td></tr></table></figure><p>Now, we can use mysql!</p><h2 id="Create-the-first-database"><a href="#Create-the-first-database" class="headerlink" title="Create the first database"></a>Create the first database</h2><h3 id="Create-database"><a href="#Create-database" class="headerlink" title="Create database"></a>Create database</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create databsed &lt;dbname&gt;; // &lt;dbname&gt; can be test...</span><br></pre></td></tr></table></figure><h3 id="Show-databases"><a href="#Show-databases" class="headerlink" title="Show databases"></a>Show databases</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;</span><br></pre></td></tr></table></figure><h3 id="Select-a-database"><a href="#Select-a-database" class="headerlink" title="Select a database"></a>Select a database</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> testing;</span><br></pre></td></tr></table></figure><h3 id="Create-a-table"><a href="#Create-a-table" class="headerlink" title="Create a table"></a>Create a table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">Authors</span> ( </span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> auto_increment PRIMARY <span class="keyword">KEY</span>, </span><br><span class="line">  firstname <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, </span><br><span class="line">  lastname <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> </span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Describe-the-table"><a href="#Describe-the-table" class="headerlink" title="Describe the table"></a>Describe the table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">describe</span> <span class="keyword">authors</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">| Field     | Type        | Null | Key | Default | Extra          |</span><br><span class="line">+<span class="comment">-----------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">| id        | int         | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| firstname | varchar(50) | NO   |     | NULL    |                |</span><br><span class="line">| lastname  | varchar(50) | NO   |     | NULL    |                |</span><br><span class="line">+<span class="comment">-----------+-------------+------+-----+---------+----------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="Insert-data-into-a-table"><a href="#Insert-data-into-a-table" class="headerlink" title="Insert data into a table"></a>Insert data into a table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">Authors</span> (firstname, lastname) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'Elon'</span>, <span class="string">'Must'</span>), (<span class="string">'Bill'</span>, <span class="string">'Gates'</span>), (<span class="string">'Bill'</span>, <span class="string">'Chen'</span>);</span><br></pre></td></tr></table></figure><h3 id="Show-rows-in-a-table"><a href="#Show-rows-in-a-table" class="headerlink" title="Show rows in a table"></a>Show rows in a table</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="keyword">Authors</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+-----------+----------+</span></span><br><span class="line">| id | firstname | lastname |</span><br><span class="line">+<span class="comment">----+-----------+----------+</span></span><br><span class="line">|  1 | Elon      | Must     |</span><br><span class="line">|  2 | Bill      | Gates    |</span><br><span class="line">|  3 | Bill      | Chen     |</span><br><span class="line">+<span class="comment">----+-----------+----------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> <span class="keyword">Authors</span> <span class="keyword">WHERE</span> firstname=<span class="string">'Bill'</span> <span class="keyword">order</span> <span class="keyword">by</span> lastname;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">----+-----------+----------+</span></span><br><span class="line">| id | firstname | lastname |</span><br><span class="line">+<span class="comment">----+-----------+----------+</span></span><br><span class="line">|  3 | Bill      | Chen     |</span><br><span class="line">|  2 | Bill      | Gates    |</span><br><span class="line">+<span class="comment">----+-----------+----------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="keyword">id</span>), firstname <span class="keyword">from</span> <span class="keyword">Authors</span> <span class="keyword">group</span> <span class="keyword">by</span> firstname;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------+-----------+</span></span><br><span class="line">| count(id) | firstname |</span><br><span class="line">+<span class="comment">-----------+-----------+</span></span><br><span class="line">|         1 | Elon      |</span><br><span class="line">|         2 | Bill      |</span><br><span class="line">+<span class="comment">-----------+-----------+</span></span><br><span class="line">2 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h3 id="Update-and-delete-rows"><a href="#Update-and-delete-rows" class="headerlink" title="Update and delete rows"></a>Update and delete rows</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Authors set lastname=&quot;Musk&quot; where lastname=&quot;Must&quot;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE from Authors where firstname=&quot;Bill&quot;;</span><br></pre></td></tr></table></figure><h3 id="Join-data-from-tables"><a href="#Join-data-from-tables" class="headerlink" title="Join data from tables"></a>Join data from tables</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Books (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">integer</span> auto_increment PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">  title <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  author_id <span class="built_in">int</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Books (title, author_id)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">"Of Earth and Mars"</span>, <span class="number">1</span>), </span><br><span class="line">(<span class="string">"The Road Ahead"</span>, <span class="number">2</span>), </span><br><span class="line">(<span class="string">"Business at the Speed of Thought"</span>, <span class="number">2</span>), </span><br><span class="line">(<span class="string">"THe Mathematics of Poker"</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> firstname, lastname, title</span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">Authors</span> <span class="keyword">left</span> <span class="keyword">join</span> Books <span class="keyword">on</span> Authors.id=Books.author_id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+<span class="comment">-----------+----------+-------------------+</span></span><br><span class="line">| firstname | lastname | title             |</span><br><span class="line">+<span class="comment">-----------+----------+-------------------+</span></span><br><span class="line">| Elon      | Musk     | Of Earth and Mars |</span><br><span class="line">| Bill      | Gates    | NULL              |</span><br><span class="line">| Bill      | Chen     | NULL              |</span><br><span class="line">+<span class="comment">-----------+----------+-------------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Database-Tutorial&quot;&gt;&lt;a href=&quot;#Database-Tutorial&quot; class=&quot;headerlink&quot; title=&quot;Database Tutorial&quot;&gt;&lt;/a&gt;Database Tutorial&lt;/h1&gt;&lt;h2 id=&quot;Insta
      
    
    </summary>
    
      <category term="Database" scheme="https://www.qianhongbo.com/categories/Database/"/>
    
    
  </entry>
  
  <entry>
    <title>hashmap</title>
    <link href="https://www.qianhongbo.com/LeetCode/hashmap.html"/>
    <id>https://www.qianhongbo.com/LeetCode/hashmap.html</id>
    <published>2022-03-08T01:02:07.000Z</published>
    <updated>2022-03-08T17:06:39.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Two-sum"><a href="#Two-sum" class="headerlink" title="Two sum"></a>Two sum</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>You may assume that each input would have <strong><em>exactly\</em> one solution</strong>, and you may not use the <em>same</em> element twice. You can return the answer in any order.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,7,11,15], target = 9</span><br><span class="line">Output: [0,1]</span><br><span class="line">Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Brute-force"><a href="#Brute-force" class="headerlink" title="Brute force"></a>Brute force</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Double loop</span></span><br><span class="line"><span class="comment"># O(n^2) time | O(1) square</span></span><br></pre></td></tr></table></figure><h4 id="Two-pass-hash-table"><a href="#Two-pass-hash-table" class="headerlink" title="Two-pass hash table"></a>Two-pass hash table</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) square</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            hashmap[nums[i]] = i</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            complement = target - nums[i]</span><br><span class="line">            <span class="keyword">if</span> complement <span class="keyword">in</span> hashmap <span class="keyword">and</span> hashmap[complement] != i:</span><br><span class="line">                <span class="keyword">return</span> [i, hashmap[complement]]</span><br></pre></td></tr></table></figure><h4 id="One-pass-hash-table"><a href="#One-pass-hash-table" class="headerlink" title="One-pass hash table"></a>One-pass hash table</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) square</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        hashmap = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            hashmap[nums[i]] = i</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">            complement = target - nums[i]</span><br><span class="line">            <span class="keyword">if</span> complement <span class="keyword">in</span> hashmap <span class="keyword">and</span> hashmap[complement] != i:</span><br><span class="line">                <span class="keyword">return</span> [i, hashmap[complement]]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Two-sum&quot;&gt;&lt;a href=&quot;#Two-sum&quot; class=&quot;headerlink&quot; title=&quot;Two sum&quot;&gt;&lt;/a&gt;Two sum&lt;/h2&gt;&lt;h3 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
</feed>
