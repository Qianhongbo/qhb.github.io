<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog | Qian Homeberg</title>
  
  <subtitle>Look! Who is here! Welcome~~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.qianhongbo.com/"/>
  <updated>2022-02-01T04:45:07.416Z</updated>
  <id>https://www.qianhongbo.com/</id>
  
  <author>
    <name>Qian Hongbo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linked list</title>
    <link href="https://www.qianhongbo.com/LeetCode/Linked-list.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Linked-list.html</id>
    <published>2022-01-31T12:43:02.000Z</published>
    <updated>2022-02-01T04:45:07.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Merge-Tow-Sorted-Lists"><a href="#Merge-Tow-Sorted-Lists" class="headerlink" title="Merge Tow Sorted Lists"></a>Merge Tow Sorted Lists</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: list1 = [1,2,4], list2 = [1,3,4]</span><br><span class="line">Output: [1,1,2,3,4,4]</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time complexity: O(n + m)</span></span><br><span class="line"><span class="comment"># Space complexity: O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, list1: Optional[ListNode], list2: Optional[ListNode])</span> -&gt; Optional[ListNode]:</span></span><br><span class="line">        prehead = ListNode(<span class="number">-1</span>)</span><br><span class="line">        result = prehead</span><br><span class="line">        <span class="keyword">while</span> list1 <span class="keyword">and</span> list2:</span><br><span class="line">            <span class="keyword">if</span> list1.val &lt;= list2.val:</span><br><span class="line">                result.next = list1</span><br><span class="line">                list1 = list1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.next = list2</span><br><span class="line">                list2 = list2.next</span><br><span class="line">            result = result.next</span><br><span class="line">        result.next = list1 <span class="keyword">if</span> list1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> list2</span><br><span class="line">        <span class="keyword">return</span> prehead.next</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Merge-Tow-Sorted-Lists&quot;&gt;&lt;a href=&quot;#Merge-Tow-Sorted-Lists&quot; class=&quot;headerlink&quot; title=&quot;Merge Tow Sorted Lists&quot;&gt;&lt;/a&gt;Merge Tow Sorted Lis
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Longest Common Prefix</title>
    <link href="https://www.qianhongbo.com/LeetCode/Longest-Common-Prefix.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Longest-Common-Prefix.html</id>
    <published>2022-01-30T01:34:42.000Z</published>
    <updated>2022-01-30T19:53:14.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Longest-Common-Prefix"><a href="#Longest-Common-Prefix" class="headerlink" title="Longest Common Prefix"></a>Longest Common Prefix</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Horizontal-scanning"><a href="#Horizontal-scanning" class="headerlink" title="Horizontal scanning"></a>Horizontal scanning</h4><p><img src="https://leetcode.com/media/original_images/14_basic.png" alt="Horizontal scanning"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time Complexity: O(S), where S is the sum of all characters in all strings</span></span><br><span class="line"><span class="comment"># Space Complexity: O(1)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        prefix = strs[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">            <span class="keyword">while</span> s.find(prefix) != <span class="number">0</span>:</span><br><span class="line">                prefix = prefix[<span class="number">0</span>:<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">if</span> prefix <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> prefix</span><br></pre></td></tr></table></figure><h4 id="Vertical-scanning"><a href="#Vertical-scanning" class="headerlink" title="Vertical scanning"></a>Vertical scanning</h4><p>Imagine a very short string is the common prefix at the end of the array. The above approach will still do S<em>S</em> comparisons. One way to optimize this case is to do vertical scanning. We compare characters from top to bottom on the same column (same character index of the strings) before moving on to the next column.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time Complexity: O(S), where S is the sum of all characters in all strings</span></span><br><span class="line"><span class="comment"># Even though the worst case is still the same as Approach 1, </span></span><br><span class="line"><span class="comment"># in the best case there are at most n minLen comparisons </span></span><br><span class="line"><span class="comment"># where minLen is the length of the shortest string in the array.</span></span><br><span class="line"><span class="comment"># Space Complexity: O(1)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> strs <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> len(strs) == <span class="number">0</span>: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(strs[<span class="number">0</span>])):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(strs)):</span><br><span class="line">                <span class="keyword">if</span> i == len(strs[j]) <span class="keyword">or</span> strs[j][i] != strs[<span class="number">0</span>][i]:</span><br><span class="line">                    <span class="keyword">return</span> strs[<span class="number">0</span>][<span class="number">0</span>:i]</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="Divide-and-conquer"><a href="#Divide-and-conquer" class="headerlink" title="Divide and conquer"></a>Divide and conquer</h4><p><img src="https://leetcode.com/media/original_images/14_lcp_diviso_et_lmpera.png" alt="Divide and conquer"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> self.longestCommonPrefixHelper(strs, <span class="number">0</span>, len(strs) - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefixHelper</span><span class="params">(self, strs: List[str], l: int , r: int)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> l == r:</span><br><span class="line">            <span class="keyword">return</span> strs[l]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mid = (l + r) // <span class="number">2</span></span><br><span class="line">            lcpLeft = self.longestCommonPrefixHelper(strs, l, mid)</span><br><span class="line">            lcpRight = self.longestCommonPrefixHelper(strs, mid + <span class="number">1</span>, r)</span><br><span class="line">            <span class="keyword">return</span> self.commonPrefix(lcpLeft, lcpRight)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">commonPrefix</span><span class="params">(self, left: str, right: str)</span>:</span></span><br><span class="line">        minLen = min(len(left), len(right))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(minLen):</span><br><span class="line">            <span class="keyword">if</span> left[i] != right[i]:</span><br><span class="line">                <span class="keyword">return</span> left[<span class="number">0</span>:i]</span><br><span class="line">        <span class="keyword">return</span> left[<span class="number">0</span>:minLen]</span><br></pre></td></tr></table></figure><h4 id="Binary-search"><a href="#Binary-search" class="headerlink" title="Binary search"></a>Binary search</h4><p><img src="https://leetcode.com/media/original_images/14_lcp_binary_search.png" alt="Binary search"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> strs <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> len(strs) == <span class="number">0</span>: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        minLen = len(strs[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">            minLen = min(minLen, len(s))</span><br><span class="line">        low = <span class="number">1</span></span><br><span class="line">        high = minLen</span><br><span class="line">        <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">            middle = (low + high) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> self.isCommonPrefix(strs, middle):</span><br><span class="line">                low = middle + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = middle - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>][<span class="number">0</span>:(low + high) // <span class="number">2</span>]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isCommonPrefix</span><span class="params">(self, strs: List[str], middle: int)</span>:</span></span><br><span class="line">        str1 = strs[<span class="number">0</span>][<span class="number">0</span>:middle]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(strs)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> strs[i].startswith(str1): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Longest-Common-Prefix&quot;&gt;&lt;a href=&quot;#Longest-Common-Prefix&quot; class=&quot;headerlink&quot; title=&quot;Longest Common Prefix&quot;&gt;&lt;/a&gt;Longest Common Prefix&lt;/
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Integer to Roman</title>
    <link href="https://www.qianhongbo.com/LeetCode/Integer-to-Roman.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Integer-to-Roman.html</id>
    <published>2022-01-29T13:16:39.000Z</published>
    <updated>2022-01-30T06:02:51.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Roman-To-Integer"><a href="#Roman-To-Integer" class="headerlink" title="Roman To Integer"></a>Roman To Integer</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;III&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: III = 3.</span><br></pre></td></tr></table></figure><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;LVIII&quot;</span><br><span class="line">Output: 58</span><br><span class="line">Explanation: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure><h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3:"></a>Example 3:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;MCMXCIV&quot;</span><br><span class="line">Output: 1994</span><br><span class="line">Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Left-to-Right-Pass"><a href="#Left-to-Right-Pass" class="headerlink" title="Left-to-Right Pass"></a>Left-to-Right Pass</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(1)</span></span><br><span class="line"><span class="comment"># Space O(1)</span></span><br><span class="line">values = &#123;</span><br><span class="line">    <span class="string">"I"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"V"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"X"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"L"</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">"C"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">"D"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">"M"</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(s):</span><br><span class="line">            <span class="comment"># If this is the subtractive case.</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(s) <span class="keyword">and</span> values[s[i]] &lt; values[s[i + <span class="number">1</span>]]:</span><br><span class="line">                total += values[s[i + <span class="number">1</span>]] - values[s[i]]</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            <span class="comment"># Else this is NOT the subtractive case.</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total += values[s[i]]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h4 id="Left-to-Right-Pass-Improved"><a href="#Left-to-Right-Pass-Improved" class="headerlink" title="Left-to-Right Pass Improved"></a>Left-to-Right Pass Improved</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(1)</span></span><br><span class="line"><span class="comment"># Space O(1)</span></span><br><span class="line">values = &#123;</span><br><span class="line">    <span class="string">"I"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"V"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"X"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"L"</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">"C"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">"D"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">"M"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">"IV"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"IX"</span>: <span class="number">9</span>,</span><br><span class="line">    <span class="string">"XL"</span>: <span class="number">40</span>, </span><br><span class="line">    <span class="string">"XC"</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="string">"CD"</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="string">"CM"</span>: <span class="number">900</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(s):</span><br><span class="line">            <span class="comment"># This is the subtractive case.</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; len(s) - <span class="number">1</span> <span class="keyword">and</span> s[i:i+<span class="number">2</span>] <span class="keyword">in</span> values:</span><br><span class="line">                total += values[s[i:i+<span class="number">2</span>]] </span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total += values[s[i]]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h4 id="Right-to-Left-Pass"><a href="#Right-to-Left-Pass" class="headerlink" title="Right-to-Left Pass"></a>Right-to-Left Pass</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(1)</span></span><br><span class="line"><span class="comment"># Space O(1)</span></span><br><span class="line">values = &#123;</span><br><span class="line">    <span class="string">"I"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"V"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"X"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"L"</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">"C"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">"D"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">"M"</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        total = values.get(s[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len(s) - <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> values[s[i]] &lt; values[s[i + <span class="number">1</span>]]:</span><br><span class="line">                total -= values[s[i]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total += values[s[i]]</span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h2 id="Integer-to-Roman"><a href="#Integer-to-Roman" class="headerlink" title="Integer to Roman"></a>Integer to Roman</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><h4 id="Example-1-1"><a href="#Example-1-1" class="headerlink" title="Example 1:"></a>Example 1:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: num = <span class="number">3</span></span><br><span class="line">Output: <span class="string">"III"</span></span><br><span class="line">Explanation: <span class="number">3</span> is represented as <span class="number">3</span> ones.</span><br></pre></td></tr></table></figure><h4 id="Example-2-1"><a href="#Example-2-1" class="headerlink" title="Example 2:"></a>Example 2:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: num = <span class="number">58</span></span><br><span class="line">Output: <span class="string">"LVIII"</span></span><br><span class="line">Explanation: L = <span class="number">50</span>, V = <span class="number">5</span>, III = <span class="number">3</span>.</span><br></pre></td></tr></table></figure><h4 id="Example-3-1"><a href="#Example-3-1" class="headerlink" title="Example 3:"></a>Example 3:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: num = <span class="number">1994</span></span><br><span class="line">Output: <span class="string">"MCMXCIV"</span></span><br><span class="line">Explanation: M = <span class="number">1000</span>, CM = <span class="number">900</span>, XC = <span class="number">90</span> and IV = <span class="number">4</span>.</span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(1)</span></span><br><span class="line"><span class="comment"># Space O(1)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span><span class="params">(self, num: int)</span> -&gt; str:</span></span><br><span class="line">        digits = [(<span class="number">1000</span>, <span class="string">"M"</span>), (<span class="number">900</span>, <span class="string">"CM"</span>), (<span class="number">500</span>, <span class="string">"D"</span>), (<span class="number">400</span>, <span class="string">"CD"</span>), (<span class="number">100</span>, <span class="string">"C"</span>), </span><br><span class="line">                  (<span class="number">90</span>, <span class="string">"XC"</span>), (<span class="number">50</span>, <span class="string">"L"</span>), (<span class="number">40</span>, <span class="string">"XL"</span>), (<span class="number">10</span>, <span class="string">"X"</span>), (<span class="number">9</span>, <span class="string">"IX"</span>), </span><br><span class="line">                  (<span class="number">5</span>, <span class="string">"V"</span>), (<span class="number">4</span>, <span class="string">"IV"</span>), (<span class="number">1</span>, <span class="string">"I"</span>)]</span><br><span class="line">        roman_digits = []</span><br><span class="line">        <span class="keyword">for</span> value, symbol <span class="keyword">in</span> digits:</span><br><span class="line">            <span class="keyword">if</span> num == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">            count, num = divmod(num, value) <span class="comment"># divmod(7, 2) ----&gt; (3, 1)</span></span><br><span class="line">            roman_digits.append(symbol * count)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(roman_digits)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Roman-To-Integer&quot;&gt;&lt;a href=&quot;#Roman-To-Integer&quot; class=&quot;headerlink&quot; title=&quot;Roman To Integer&quot;&gt;&lt;/a&gt;Roman To Integer&lt;/h2&gt;&lt;h3 id=&quot;Question&quot;
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Java Notes 3</title>
    <link href="https://www.qianhongbo.com/Backend/Java/Java-Notes-3.html"/>
    <id>https://www.qianhongbo.com/Backend/Java/Java-Notes-3.html</id>
    <published>2022-01-29T04:06:44.000Z</published>
    <updated>2022-01-30T23:41:40.361Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h2><h3 id="Imperative-Code"><a href="#Imperative-Code" class="headerlink" title="Imperative Code"></a>Imperative Code</h3><p>Early Java programs were usually programmed in the imperative style. Imperative code usually focuses on how a task is performed. Each line of code gives a specific procedure or operation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTopScore</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> topScore = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (Student s : students) &#123;</span><br><span class="line">   <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">   topScore = Math.max(topScore, s.getScore());</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> topScore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Focuses on <strong>how</strong> a task is performed.</li><li>Each line of code gives a specific procedure or operation.</li></ul><h3 id="Functional-Code"><a href="#Functional-Code" class="headerlink" title="Functional Code"></a>Functional Code</h3><p>Starting with version 8, Java added language features to support a more functional style of programming. You might also hear some people call it <strong>declarative</strong> programming.</p><p>Functional code focuses on what happens to inputs in order to produce outputs. You can think of it as describing how to get from the input to the output:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTopScore</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> students.stream()</span><br><span class="line">     .filter(Objects::nonNull)</span><br><span class="line">     .mapToInt(Student::getScore)</span><br><span class="line">     .max()</span><br><span class="line">     .orElse(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code does the exact same thing as the last code example, but it uses a more functional programming style, because it:</p><ul><li>Focuses on what happens to inputs in order to produce outputs..</li><li>Describes how to transform the input into the output.</li></ul><h3 id="Lambda-Expressions"><a href="#Lambda-Expressions" class="headerlink" title="Lambda Expressions"></a>Lambda Expressions</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BinaryOperator&lt;Integer&gt; add =</span><br><span class="line">   (Integer a, Integer b) -&gt; &#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(add.apply(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h3 id="Functional-Interface"><a href="#Functional-Interface" class="headerlink" title="Functional Interface"></a>Functional Interface</h3><p>A <strong>functional interface</strong> is a Java interface with exactly one abstract method, called the <strong>functional method</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (t) -&gt; !test(t); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Other methods left out of this example</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Predicate</code>‘s one abstract method is <code>test()</code>. <code>test()</code> is known as the <strong>functional method</strong>. “Abstract” means the method is not implemented, so in order to be a functional method, it cannot have a default implementation. However, functional interfaces <em>can</em> have other default methods. In this case, the <code>Predicate</code> interface has a default method called <code>negate()</code> that returns another <code>Predicate</code>.</p><h3 id="Anonymous-Class"><a href="#Anonymous-Class" class="headerlink" title="Anonymous Class"></a>Anonymous Class</h3><p>An <strong>anonymous class</strong> is a class that is defined “in-line” and <strong>has no name</strong>, and so it is called “anonymous”.</p><h4 id="Anonymous-Class-vs-Lambda"><a href="#Anonymous-Class-vs-Lambda" class="headerlink" title="Anonymous Class vs. Lambda"></a>Anonymous Class vs. Lambda</h4><p>This anonymous class…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; anonymousSubclass =</span><br><span class="line">   <span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> s.trim().isEmpty();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>… does the same thing as this lambda expresssion:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; lambdaInstead = s -&gt; s.trim().isEmpty();</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"><strong>Anonymous Class</strong></th><th align="left"><strong>Lambdas</strong></th></tr></thead><tbody><tr><td align="left">Class generated at compile-time</td><td align="left">Class generated at runtime</td></tr><tr><td align="left">Can override <strong><code>equals()</code>/<code>hashCode()</code></strong></td><td align="left">Cannot override them; has no identity</td></tr><tr><td align="left"><strong><code>this</code></strong> refers to the anonymous class</td><td align="left"><strong><code>this</code></strong> refers to the enclosing class</td></tr></tbody></table><h4 id="What’s-this-all-about"><a href="#What’s-this-all-about" class="headerlink" title="What’s this all about?"></a>What’s <code>this</code> all about?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Runnable withLambda =</span><br><span class="line">      () -&gt; System.out.println(<span class="string">"From lambda: "</span> + <span class="keyword">this</span>.getClass());</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Runnable withSubclass = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"From subclass: "</span> + <span class="keyword">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ThisExample thisExample = <span class="keyword">new</span> ThisExample();</span><br><span class="line">    thisExample.withLambda.run();</span><br><span class="line">    thisExample.withSubclass.run();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">From lambda: <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">udacitydemo</span>.<span class="title">lambdas</span>.<span class="title">ThisExample</span></span></span><br><span class="line">From subclass: class com.udacitydemo.lambdas.ThisExample$1</span><br></pre></td></tr></table></figure><p>Inside the lambda, <code>this.getClass()</code> returns the class object representing <code>ThisExample</code>. We’ll cover class objects in more detail in the lesson on reflection, but for now the important part is that the <code>this</code> keyword inside the lambda references the <em>enclosing class</em>, which is <code>com.udacitydemo.lambdas.ThisExample</code>.</p><p>For the <code>Runnable</code> subclass, on the other hand, the program printed <code>com.udacitydemo.lambdas.ThisExample$1</code>. You can see that the Java compiler generated a class called <code>com.udacitydemo.lambdas.ThisExample$1</code> for the anonymous lambda (yes, the class name contains a dollar sign), and the <code>this</code> keyword refers to <em>that</em> generated class! If you compile this program yourself, you’ll even notice the Java compiler produces a file called <code>ThisExample$1.class</code>, which contains the compiled byte code for the anonymous class.</p><h3 id="Shortcomings-of-Lambdas"><a href="#Shortcomings-of-Lambdas" class="headerlink" title="Shortcomings of Lambdas"></a>Shortcomings of Lambdas</h3><p>Lambdas are very useful, but they do have some shortcomings:</p><ul><li>They can only be used to implement <strong>functional interfaces</strong>, not classes.</li><li>Lambdas cannot implement any interface that has multiple abstract methods.</li><li>Lambdas cannot throw checked exceptions (any subclass of <code>Exception</code>, such as <code>IOException</code>).</li></ul><h3 id="Two-Examples"><a href="#Two-Examples" class="headerlink" title="Two Examples"></a>Two Examples</h3><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><h5 id="BinaryOperation-java"><a href="#BinaryOperation-java" class="headerlink" title="BinaryOperation.java"></a>BinaryOperation.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BinaryOperation</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">apply</span><span class="params">(T a, T b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BinaryOperator&lt;Integer&gt; add = (a, b) -&gt; a + b;</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> == add.apply(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><h5 id="Calculator-java"><a href="#Calculator-java" class="headerlink" title="Calculator.java"></a>Calculator.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BinaryOperator; <span class="comment">// a functional interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BinaryOperator&lt;Integer&gt;&gt; operators = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerOperation</span><span class="params">(String symbol, BinaryOperator&lt;Integer&gt; operator)</span> </span>&#123;</span><br><span class="line">    operators.put(symbol.strip(), operator);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, String operator, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> operators.get(operator).apply(a, b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Calculate-java"><a href="#Calculate-java" class="headerlink" title="Calculate.java"></a>Calculate.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">3</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Usage: Calculate [int] [operator] [int]"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">    calculator.registerOperation(<span class="string">"+"</span>, (a, b) -&gt; a + b);</span><br><span class="line">    calculator.registerOperation(<span class="string">"-"</span>, (a, b) -&gt; a - b);</span><br><span class="line">    calculator.registerOperation(<span class="string">"/"</span>, (a, b) -&gt; a / b);</span><br><span class="line">    calculator.registerOperation(<span class="string">"*"</span>, (a, b) -&gt; a * b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">    String operator = args[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> b = Integer.parseInt(args[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    System.out.println(calculator.calculate(a, operator, b));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capturing-variables"><a href="#Capturing-variables" class="headerlink" title="Capturing variables"></a>Capturing variables</h3><h4 id="Captured-variables"><a href="#Captured-variables" class="headerlink" title="Captured variables"></a>Captured variables</h4><p>Lambdas can <strong>capture</strong> variables from the surrounding code. If a lambda uses any variables from the surrounding code, those variables are <strong>captured</strong>. Variables can only be captured if they are <strong>effectively final</strong>.</p><p>An <strong>effectively final</strong> variable is a variable whose value does not change after it is initialized.</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Map&lt;Year, Integer&gt; <span class="title">getClassSizes</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Map&lt;Year, Integer&gt; classSizes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  students.stream().forEach(s -&gt;</span><br><span class="line">      classSizes.compute(</span><br><span class="line">          s.getGraduationYear(),</span><br><span class="line">          (k, v) -&gt; (v == <span class="keyword">null</span>) ? <span class="number">1</span> : <span class="number">1</span> + v));</span><br><span class="line">  <span class="keyword">return</span> classSizes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A good test to figure out if a variable is effectively final is to add the <code>final</code> keyword to it. If the code still compiles, that variable is effectively final!</p><p>In the example, the <code>classSizes</code> variable is effectively final because the value of the variable itself does not change after it’s initialized. Remember that in Java, objects are passed by reference. Even though the <code>HashMap</code> changes, the variable’s value is the <code>HashMap</code>‘s location in memory, and that location never changes.</p><h3 id="Method-Reference"><a href="#Method-Reference" class="headerlink" title="Method Reference"></a>Method Reference</h3><p>A <strong>method reference</strong> is a short lambda expression that refers to a method that is already named.</p><p>Generally speaking, if a method is already defined that you can use, you should use a method reference instead of writing a brand new lambda. It’s usually a good idea in software development to not write new code if there’s already existing code that does the same thing you’re trying to do!</p><p>Method references cannot capture surrounding variables, though. If you find yourself in this situation, you should use a custom lambda instead.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdasMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the number of strings that match a given condition.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> input the strings that should be tested.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> condition the condition that strings should be tested against.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the number of strings in the input that match the condition.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">countMatchingStrings</span><span class="params">(List&lt;String&gt; input, Predicate&lt;String&gt; condition)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input.stream().filter(condition).count();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; input = List.of(<span class="string">"hello"</span>, <span class="string">"\t   "</span>, <span class="string">"world"</span>, <span class="string">""</span>, <span class="string">"\t"</span>, <span class="string">" "</span>, <span class="string">"goodbye"</span>, <span class="string">"  "</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Using lambda expression:</span></span><br><span class="line">    <span class="keyword">long</span> numberOfWhitespaceStrings =</span><br><span class="line">            countMatchingStrings(input, s -&gt; s.trim().isEmpty());</span><br><span class="line">    <span class="comment">// Using method reference:</span></span><br><span class="line">    <span class="keyword">long</span> numberOfWhitespaceStrings = countMatchingStrings(input, String::isBlank);</span><br><span class="line"></span><br><span class="line">    System.out.println(numberOfWhitespaceStrings + <span class="string">" whitespace strings"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h3><p>A <strong>stream</strong> is a sequence of elements.</p><p>Streams are useful because they allow us to process collection, one element at a time. They can process elements in many ways, such as (but not limited to) filtering or transforming elements, sorting elements, or computing statistics such as the sum or average.</p><p>A stream pipeline consists of creating a stream, calling intermediate operations on the stream, and then terminating the stream using a terminal operation.</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printScores</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> students.stream()</span><br><span class="line">     .filter(Objects::nonNull)</span><br><span class="line">     .mapToInt(Student::getScore)</span><br><span class="line">     .max()</span><br><span class="line">     .orElse(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First, the <code>stream()</code> method creates a stream from the students list.</p><p>This stream pipeline has two intermediate methods: the <code>filter()</code> method removes the elements of the stream that are <code>null</code>, and <code>mapToInt()</code> transforms each student into an <code>int</code>. Notice that each of these methods returns another <code>Stream</code>: <code>filter()</code> returns a <code>Stream&lt;Student&gt;</code>, and <code>mapToInt()</code> returns an <code>IntStream</code>.</p><p>Finally, the terminal operation <code>max()</code> computes the maximum value in the <code>IntStream</code>. This terminal method actually returns an <code>OptionalInt</code> instead of an <code>int</code>. If the <code>students</code> parameter is empty or contains only <code>null</code> elements, it’s possible the final stream will be empty. In this case, we need to tell the program to return a default value of <code>0</code>.</p><blockquote><p>If <code>max()</code> returns an <code>OptionalInt</code> with a value, that value will be used. However, if <code>max()</code> returns <code>OptionalInt.empty()</code>, the call to <code>orElse()</code> makes sure that a default value of <code>0</code> will be returned.</p></blockquote><h4 id="Collector"><a href="#Collector" class="headerlink" title="Collector"></a>Collector</h4><p>A <code>Collector</code> is a terminal stream operation that accumulates stream elements into a container.</p><p>The <code>collect()</code> method is a terminal operation that aggregates streams of elements. Collectors can be passed to <code>collect()</code> to determine what kind of collection is created.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; s = stringList.stream().collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><p>Collectors can be used to perform reduction operations such as adding or counting.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Year, Long&gt; graduatingClassSizes = studentList.stream()</span><br><span class="line">    .collect(Collectors.groupingBy(</span><br><span class="line">        Student::getGraduationYear, Collectors.counting());</span><br></pre></td></tr></table></figure><p>Here, <code>groupingBy()</code> is used to collect elements into a <code>Map</code>. <code>Collectors.counting()</code> counts the number of values for each key, so, in this example, it will count how many students there are for each graduation year.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Functional-Programming&quot;&gt;&lt;a href=&quot;#Functional-Programming&quot; class=&quot;headerlink&quot; title=&quot;Functional Programming&quot;&gt;&lt;/a&gt;Functional Programmi
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="Java" scheme="https://www.qianhongbo.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Add Binary</title>
    <link href="https://www.qianhongbo.com/LeetCode/Add-Binary.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Add-Binary.html</id>
    <published>2022-01-28T02:15:06.000Z</published>
    <updated>2022-01-30T05:47:00.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = &quot;11&quot;, b = &quot;1&quot;</span><br><span class="line">Output: &quot;100&quot;</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = &quot;1010&quot;, b = &quot;1011&quot;</span><br><span class="line">Output: &quot;10101&quot;</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(M+N)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;0:b&#125;'</span>.format(int(a, <span class="number">2</span>) + int(b, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二进制字符串转十进制</span></span><br><span class="line">int(“<span class="number">11</span>”, <span class="number">2</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把十进制数12转为对应的二进制数的字符串形式</span></span><br><span class="line"><span class="string">'&#123;0:b&#125;'</span>.format(<span class="number">12</span>)  </span><br><span class="line"><span class="string">'1100'</span></span><br></pre></td></tr></table></figure><p>1 . In Java this approach is limited by the length of the input strings a and b. Once the string is long enough, the result of conversion into integers will not fit into Integer, Long or BigInteger.</p><p>2 . This method has quite low performance in the case of large input numbers.</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(max(M,N))</span></span><br><span class="line"><span class="comment"># Space O(max(N,M))</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span> -&gt; str:</span></span><br><span class="line">        n = max(len(a), len(b))</span><br><span class="line">        <span class="comment"># zfill() 方法返回指定长度的字符串，原字符串右对齐，前面填充0</span></span><br><span class="line">        a, b = a.zfill(n), b.zfill(n)</span><br><span class="line">        </span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        answer = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> a[i] == <span class="string">'1'</span>:</span><br><span class="line">                carry += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> b[i] == <span class="string">'1'</span>:</span><br><span class="line">                carry += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> carry % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                answer.append(<span class="string">'1'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                answer.append(<span class="string">'0'</span>)</span><br><span class="line">            carry //= <span class="number">2</span></span><br><span class="line">        <span class="comment"># 最后一位的进位</span></span><br><span class="line">        <span class="keyword">if</span> carry == <span class="number">1</span>:</span><br><span class="line">            answer.append(<span class="string">'1'</span>)</span><br><span class="line">        <span class="comment"># append 方法获得的数据结果需要反向，并将字符串连接到一起</span></span><br><span class="line">        answer.reverse()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(answer)</span><br></pre></td></tr></table></figure><h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution 3"></a>Solution 3</h4><p>Here the input is more adapted to push towards Approach 1, but there is popular Facebook variation of this problem when interviewer provides you two numbers and asks to sum them up <code>without using addition operation</code>.</p><p>How to start? There is an interview tip for bit manipulation problems: if you don’t know how to start, start from computing XOR for your input data. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span> -&gt; str:</span></span><br><span class="line">        x, y = int(a, <span class="number">2</span>), int(b, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">while</span> y:</span><br><span class="line">            answer = x ^ y</span><br><span class="line">            carry = (x &amp; y) &lt;&lt; <span class="number">1</span></span><br><span class="line">            x, y = answer, carry</span><br><span class="line">        <span class="keyword">return</span> bin(x)[<span class="number">2</span>:] <span class="comment"># bin()将十进制转二进制</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结果的前两位需要去掉</span></span><br><span class="line">&gt;&gt;&gt;bin(<span class="number">10</span>)</span><br><span class="line"><span class="string">'0b1010'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h2&gt;&lt;p&gt;Given two binary strings &lt;code&gt;a&lt;/code&gt; and &lt;c
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Design Pattern</title>
    <link href="https://www.qianhongbo.com/Backend/Design-Pattern.html"/>
    <id>https://www.qianhongbo.com/Backend/Design-Pattern.html</id>
    <published>2022-01-27T06:16:54.000Z</published>
    <updated>2022-02-01T05:09:06.478Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">一个设计模式非常好的网站</a></p></blockquote><h2 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h2><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p><h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><p>总共有 23 种设计模式。这些模式可以分为三大类：</p><ol><li>创建型模式（Creational Patterns）</li><li>结构型模式（Structural Patterns）</li><li>行为型模式（Behavioral Patterns）</li></ol><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p><ul><li>工厂模式（Factory Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>单例模式（Singleton Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ul><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p><ul><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>过滤器模式（Filter、Criteria Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p>这些设计模式特别关注对象之间的通信。</p><ul><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>空对象模式（Null Object Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板模式（Template Pattern）</li><li>访问者模式（Visitor Pattern）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/design-pattern-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一个设计模式非常好的网站&lt;/a&gt;
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
  </entry>
  
  <entry>
    <title>Java Notes 2</title>
    <link href="https://www.qianhongbo.com/Backend/Java/Java-Notes-2.html"/>
    <id>https://www.qianhongbo.com/Backend/Java/Java-Notes-2.html</id>
    <published>2022-01-23T04:25:39.000Z</published>
    <updated>2022-01-28T04:33:00.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Common-Types"><a href="#Common-Types" class="headerlink" title="Common Types"></a>Common Types</h2><h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><h4 id="The-Error-Class-and-the-Exception-Class"><a href="#The-Error-Class-and-the-Exception-Class" class="headerlink" title="The Error Class and the Exception Class"></a>The Error Class and the Exception Class</h4><p>The Java error-handling framework uses two different classes to identify abnormal software events:</p><ul><li>The <strong>Error</strong> class is used to indicate a serious problem that the application should <em>not</em> try to handle.</li><li>The <strong>Exception</strong> class is used when there is a less catastrophic event that the application <em>should</em> try to handle.</li></ul><h4 id="The-Throwable-Class"><a href="#The-Throwable-Class" class="headerlink" title="The Throwable Class"></a>The Throwable Class</h4><p>Both <em>Error</em> and <em>Exception</em> classes inherit from the abstract class <strong>throwable</strong>. This means that both errors and exceptions will contain:</p><ul><li><strong>The type of problem</strong> – the class type, either <em>Exception</em> or <em>Error</em></li><li><strong>The problem message</strong> – whatever description you’ve provided within the class, such as “out of memory”</li><li><strong>The stack trace where the exception occurred</strong> – the order in which things ran and the place in that sequence where the problem occurred (this information is used by developers to track down issues and resolve problems in the code)</li></ul><h4 id="Throwing-an-Exception"><a href="#Throwing-an-Exception" class="headerlink" title="Throwing an Exception"></a>Throwing an Exception</h4><p>What does it mean to throw an exception?</p><ul><li>When an error occurs within a method, that method creates an <em>Exception</em> object.</li><li>Next, the method hands the Exception off to the JVM runtime system. And that’s what we mean when we say that we are throwing an exception. We simply mean that a method hands off an exception to the runtime.</li></ul><h4 id="Checked-vs-Unchecked"><a href="#Checked-vs-Unchecked" class="headerlink" title="Checked vs Unchecked"></a>Checked vs Unchecked</h4><p>In Java there are two different types of exceptions:</p><h5 id="Unchecked-Exceptions"><a href="#Unchecked-Exceptions" class="headerlink" title="Unchecked Exceptions"></a>Unchecked Exceptions</h5><ul><li><strong>Unchecked</strong> exceptions are exceptions that are unknown to the compiler.</li><li>Because these exceptions are only known at runtime, they are also referred to as <em>runtime exceptions</em>.</li><li>They are a result of a programming error, typically arithmetic errors (such as division by 0).</li><li>Unchecked exceptions are used when when we expect that the caller of the method cannot recover from the exception.</li></ul><h5 id="Checked-Exceptions"><a href="#Checked-Exceptions" class="headerlink" title="Checked Exceptions"></a>Checked Exceptions</h5><ul><li><strong>Checked</strong> exceptions are known to the compiler.</li><li>If we are calling a method that potentially throws a checked exception, it <em>must</em> be handled (or we will get an error from the compiler).</li><li>Checked exceptions are used when we expect that the caller of the method <em>can</em> recover from the exception.</li></ul><h4 id="Handling-Exceptions"><a href="#Handling-Exceptions" class="headerlink" title="Handling Exceptions"></a>Handling Exceptions</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    read();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (FileNotFoundException ex)&#123;</span><br><span class="line">    ex.getLocalizedMessage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h3><p>In Java, the declaration of an Enum defines a class. This class can exist <strong>within another class</strong> or as a <strong>standalone class</strong>.</p><p>In some cases, we might only need to use the Enum type within a single class (as would probably be the case with the stoplight example). In that case it would be acceptable to define it within another class rather than as a standalone. However, if other classes are expected to use the enum type, it should be defined as a separate, standalone class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">enum</span> StopLight &#123;</span><br><span class="line">    RED,</span><br><span class="line">    YELLOW,</span><br><span class="line">    GREEN</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StopLight myStoplight = Stoplight.RED; </span><br><span class="line">    System.out.println(myStoplight);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><p>The <code>Scanner</code> class can read and parse simple text. Here are some key points to keep in mind:</p><ul><li>It parses primitive types and String types into tokens.</li><li>By default it uses whitespaces to delimitate each word. However, it can also use regular expressions.</li><li>The Scanner class can read from several different types of sources, like strings, files and <code>System.in</code> (to get input from the command line).</li></ul><h4 id="Scanner-Syntax"><a href="#Scanner-Syntax" class="headerlink" title="Scanner Syntax"></a>Scanner Syntax</h4><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><p>We can use the <code>Scanner</code> class to get input from the command line. To do so, we instantiate a scanner object, passing in <code>System.in</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><p>In this example we are using the <code>nextLine</code> method to return the full line of the input:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(<span class="string">"This is a line"</span>);</span><br><span class="line">System.out.println(scanner.nextLine());</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a line</span><br></pre></td></tr></table></figure><h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h5><p>In this next example, we are using the <code>next</code> method to read the first token. The <code>next</code> method finds and returns the next complete token.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(<span class="string">"This is a line"</span>);</span><br><span class="line">System.out.println(scanner.next());</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This</span><br></pre></td></tr></table></figure><h5 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h5><p>In the final example, we are using the <code>hasNext()</code> method in a <code>while</code> loop to determine if it is safe to call the next method. We only want to call the next method when we know there is a token available.</p><blockquote><p><strong>Note:</strong> By default the Scanner tokenizes input by whitespaces. Let’s say we have a string with the following text <code>&quot;One Two Three&quot;</code>. The text will be tokenized into three separate tokens, <code>&quot;One&quot;</code>, <code>&quot;Two&quot;</code> and <code>&quot;Three&quot;</code>.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(<span class="string">"This is a line"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">    System.out.println(scanner.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This</span><br><span class="line">is</span><br><span class="line">a</span><br><span class="line">line</span><br></pre></td></tr></table></figure><h4 id="Scanner-Example"><a href="#Scanner-Example" class="headerlink" title="Scanner Example"></a>Scanner Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInputTester</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Enter a String"</span>);</span><br><span class="line">            String userInput = scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"User Input: "</span> + userInput);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.getLocalizedMessage();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            scanner.close(); <span class="comment">// we have to close the scanner</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RegEx"><a href="#RegEx" class="headerlink" title="RegEx"></a>RegEx</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegExTester</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      String emailRegex = <span class="string">"^(.+)@(.+).(.+)$"</span>;</span><br><span class="line">      Pattern pattern = Pattern.compile(emailRegex);</span><br><span class="line">      String email = <span class="string">"jeff@gmail.com"</span>;</span><br><span class="line"></span><br><span class="line">      System.out.println(pattern.matcher(email).matches());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>Java provides advanced memory management for String objects by using a <em>String pool</em>. A <strong>String pool</strong> is a way of storing only one copy of a String.</p><p>To understand this, we have to look at what is happening in memory when we create Strings and assign them to variables. Strings in Java are <em>immutable</em>, meaning they cannot be changed after they are created. When we “change” the String in a variable, what actually happens is that, behind the scenes, Java creates a new String in the String pool—and changes the variable’s reference value to point to this new String. The old String object may remain in place, unchanged.</p><p>Also note that multiple variables may use the same String reference. This means that if we have two variables with exactly the same String (e.g., <code>&quot;Hello&quot;</code>) they will all reference the same String object.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gyofi80gpej31h70u0who.jpg" alt="image-20220123155351170"></p><h2 id="Generics-and-Collections"><a href="#Generics-and-Collections" class="headerlink" title="Generics and Collections"></a>Generics and Collections</h2><h3 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h3><p>With generics, we can identify what types are stored in the list. The syntax for a generic is very simple—it’s just bracket with the type inside, <code>&lt; type &gt;</code>. So in this example, we can add <code>&lt;String&gt;</code> right next to <code>List</code> to identify what types are stored in the list:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; myList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">myList.add(<span class="string">"one"</span>);</span><br><span class="line">myList.add(<span class="string">"two"</span>);</span><br><span class="line">myList.add(<span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// We could also remove the element "one" </span></span><br><span class="line"><span class="comment">// by using the index 0 instead of the value "one".</span></span><br><span class="line">myList.remove(<span class="string">"one"</span>);</span><br></pre></td></tr></table></figure><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><h4 id="Use-iterator-with-collections"><a href="#Use-iterator-with-collections" class="headerlink" title="Use iterator with collections"></a>Use iterator with collections</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">names.add(<span class="string">"Mike"</span>);</span><br><span class="line">names.add(<span class="string">"Bob"</span>);</span><br><span class="line">names.add(<span class="string">"Alice"</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iterator = names.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">  System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for-each-loop"><a href="#for-each-loop" class="headerlink" title="for each loop"></a>for each loop</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsExercise</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; listOfItems = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        listOfItems.add(<span class="string">"Mike"</span>);</span><br><span class="line">        listOfItems.add(<span class="string">"Bob"</span>);</span><br><span class="line">        listOfItems.add(<span class="string">"Alice"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String name : listOfItems) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sorting-collections"><a href="#Sorting-collections" class="headerlink" title="Sorting collections"></a>Sorting collections</h3><h4 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h4><p>A list of Strings can be sorted by simply passing the list to the <code>Collections.sort()</code> method. In the example bellow, the names will be sorted in ascending order.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">names.add(<span class="string">"Mike"</span>);</span><br><span class="line">names.add(<span class="string">"Bob"</span>);</span><br><span class="line">names.add(<span class="string">"Alice"</span>);</span><br><span class="line"></span><br><span class="line">Collections.sort(names);</span><br></pre></td></tr></table></figure><h4 id="Wrapper-Objects"><a href="#Wrapper-Objects" class="headerlink" title="Wrapper Objects"></a>Wrapper Objects</h4><p>Wrapper objects were introduced in Java to wrap primitive variable types into objects. In the example below, the primitive <code>int</code> values are being converted to <code>Integer</code> objects and then sorted.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">numbers.add(<span class="number">201</span>);</span><br><span class="line">numbers.add(<span class="number">100</span>);</span><br><span class="line">numbers.add(<span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">Collections.sort(numbers);</span><br></pre></td></tr></table></figure><h4 id="User-Defined-Classes"><a href="#User-Defined-Classes" class="headerlink" title="User-Defined Classes"></a>User-Defined Classes</h4><p>User-defined classes will need to implement the <strong>Comparable</strong> Interface in order to use the <code>Collections.sort()</code> method. The <em>Comparable</em> Interface provides a method, <code>compareTo</code>, which is used to compare two objects of the same type. In the example below we are using the Person object’s <code>name</code> field to compare Person objects. This line of code, <code>name.compareTo(person.name)</code>, handles all of the hard work.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>&#123;  </span><br><span class="line">  <span class="keyword">public</span> String name;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.name = name;  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// implement compareTo function</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person person)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> name.compareTo(person.name);  </span><br><span class="line"></span><br><span class="line">  &#125;   </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonSort</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Person&gt; people = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">    people.add(<span class="keyword">new</span> Person(<span class="string">"Same"</span>));</span><br><span class="line">    people.add(<span class="keyword">new</span> Person(<span class="string">"Mike"</span>));</span><br><span class="line">    people.add(<span class="keyword">new</span> Person(<span class="string">"Apple"</span>));</span><br><span class="line"></span><br><span class="line">    Collections.sort(people);</span><br><span class="line">    <span class="keyword">for</span> (Person person : people) &#123;</span><br><span class="line">      System.out.println(person.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Advanced-Collections"><a href="#Advanced-Collections" class="headerlink" title="Advanced Collections"></a>Advanced Collections</h2><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="Creating-a-Map-Object"><a href="#Creating-a-Map-Object" class="headerlink" title="Creating a Map Object"></a>Creating a Map Object</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Person&gt; mapOfPeople = <span class="keyword">new</span> HashMap&lt;String, Person&gt;();</span><br></pre></td></tr></table></figure><h4 id="Adding-to-a-Map"><a href="#Adding-to-a-Map" class="headerlink" title="Adding to a Map"></a>Adding to a Map</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person mike = <span class="keyword">new</span> Person(<span class="string">"Mike"</span>, <span class="string">"mike@email.com"</span>);</span><br><span class="line">Person shaun = <span class="keyword">new</span> Person(<span class="string">"Shaun"</span>, <span class="string">"shaun@email.com"</span>);</span><br><span class="line">Person sally = <span class="keyword">new</span> Person(<span class="string">"Sally"</span>, <span class="string">"sally@email.com"</span>);</span><br><span class="line">Person cesar = <span class="keyword">new</span> Person(<span class="string">"Cesar"</span>, <span class="string">"cesar@email.com"</span>);</span><br><span class="line"></span><br><span class="line">mapOfPeople.put(mike.getEmail(), mike);</span><br><span class="line">mapOfPeople.put(shaun.getEmail(), shaun);</span><br><span class="line">mapOfPeople.put(sally.getEmail(), sally);</span><br><span class="line">mapOfPeople.put(cesar.getEmail(), cesar);</span><br></pre></td></tr></table></figure><h4 id="Retrieving-an-object-from-a-Map"><a href="#Retrieving-an-object-from-a-Map" class="headerlink" title="Retrieving an object from a Map"></a>Retrieving an object from a Map</h4><p>In this example, we will be looking at the syntax to retrieve a Person object from the Map using an email as the key.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapOfPeople.get(<span class="string">"mike@email.com"</span>);</span><br></pre></td></tr></table></figure><h4 id="Iterating-over-a-Map"><a href="#Iterating-over-a-Map" class="headerlink" title="Iterating over a Map"></a>Iterating over a Map</h4><p>We can iterate over our Map using a <code>for-each</code> loop. Remember that each Map has three distinct views for seeing the data. We can get the keys, the values, or key-value mapping. In the example below we are displaying all of the keys for our Map.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String email : mapOfPeople.keySet()) &#123;</span><br><span class="line">    System.out.println(email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapExcercise</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; mapOfPeople = <span class="keyword">new</span> HashMap&lt;String, Person&gt;();</span><br><span class="line">        Person mike = <span class="keyword">new</span> Person(<span class="string">"Mike"</span>, <span class="string">"mike@email.com"</span>);</span><br><span class="line">        Person shaun = <span class="keyword">new</span> Person(<span class="string">"Shaun"</span>, <span class="string">"shaun@email.com"</span>);</span><br><span class="line">        Person sally = <span class="keyword">new</span> Person(<span class="string">"Sally"</span>, <span class="string">"sally@email.com"</span>);</span><br><span class="line">        Person cesar = <span class="keyword">new</span> Person(<span class="string">"Cesar"</span>, <span class="string">"cesar@email.com"</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Person&gt; people = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        people.add(mike);</span><br><span class="line">        people.add(shaun);</span><br><span class="line">        people.add(sally);</span><br><span class="line">        people.add(cesar);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Person person : people) &#123;</span><br><span class="line">            MapExcercise.addToMap(mapOfPeople, person);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String email : mapOfPeople.keySet()) &#123;</span><br><span class="line">            System.out.println(email);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Person person : mapOfPeople.values()) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Get Mike: "</span> + mapOfPeople.get(<span class="string">"mike@email.com"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Get Jeff: "</span> + mapOfPeople.get(<span class="string">"jeff@email.com"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Contains Mike: "</span> + mapOfPeople.containsKey(<span class="string">"mike@email.com"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Contains Jeff: "</span> + mapOfPeople.containsKey(<span class="string">"jeff@email.com"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addToMap</span><span class="params">(Map&lt;String, Person&gt; map, Person person)</span> </span>&#123;</span><br><span class="line">        map.put(person.getEmail(), person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">" "</span> + email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><h4 id="Concrete-Implementations"><a href="#Concrete-Implementations" class="headerlink" title="Concrete Implementations"></a>Concrete Implementations</h4><p>There are three concrete implementations for the Set interface:</p><ul><li>HashSet</li><li>TreeSet</li><li>LinkedHashSet</li></ul><p>Each of these implementations vary, but all of them enforce the no-duplicate-values requirement of the Set interface.</p><h4 id="Creating-a-Set-Object"><a href="#Creating-a-Set-Object" class="headerlink" title="Creating a Set Object"></a>Creating a Set Object</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; mySet = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br></pre></td></tr></table></figure><h4 id="Adding-to-a-Set"><a href="#Adding-to-a-Set" class="headerlink" title="Adding to a Set"></a>Adding to a Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mySet.add(<span class="string">"Hello"</span>);</span><br><span class="line">mySet.add(<span class="string">"Hello"</span>);</span><br><span class="line">mySet.add(<span class="string">"Hellos"</span>);</span><br></pre></td></tr></table></figure><p>Even though we used <code>add</code> three times, this will actually only add two items, since one of the items is a duplicate.</p><h4 id="Retrieving-an-Object-From-a-Set"><a href="#Retrieving-an-Object-From-a-Set" class="headerlink" title="Retrieving an Object From a Set"></a>Retrieving an Object From a Set</h4><p>Using for each loop to retrieve an object.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String foundObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String text : mySet) &#123;</span><br><span class="line">   <span class="keyword">if</span>(text.equals(<span class="string">"Hello"</span>)&#123;</span><br><span class="line">      foundObject  = text;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetExcercise</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; numbers = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We have a list of numbers and some are duplicates</span></span><br><span class="line">        numbers.add(<span class="string">"123-222-3333"</span>);</span><br><span class="line">        numbers.add(<span class="string">"123-222-3333"</span>);</span><br><span class="line">        numbers.add(<span class="string">"555-222-3333"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add them to a Set to get a unique list</span></span><br><span class="line">        Set&lt;String&gt; uniqueNumbers = <span class="keyword">new</span> HashSet&lt;String&gt;(numbers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String number : uniqueNumbers) &#123;</span><br><span class="line">            System.out.println(number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Queues"><a href="#Queues" class="headerlink" title="Queues"></a>Queues</h3><p><strong>Queues</strong> are data structures that allow us to process items in a <strong>First-In, First-Out</strong> (<strong>FIFO</strong>) order. The first item placed in a queue is also the first one removed from the queue.</p><p>Some key points about Queues in Java:</p><ul><li>Queue is an <em>interface</em> that implements the <em>Collection</em> interface</li><li>We <em>put</em> newly added elements at the <em>end</em> of the queue</li><li>We <em>pop</em> elements off the <em>front</em> of the queue</li></ul><h4 id="Creating-a-Queue-object"><a href="#Creating-a-Queue-object" class="headerlink" title="Creating a Queue object"></a>Creating a Queue object</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;String&gt; myQueue = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br></pre></td></tr></table></figure><h4 id="Adding-to-a-Queue"><a href="#Adding-to-a-Queue" class="headerlink" title="Adding to a Queue"></a>Adding to a Queue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myQueue.add(<span class="string">"Hi"</span>);</span><br><span class="line">myQueue.add(<span class="string">"There"</span>);</span><br></pre></td></tr></table></figure><h4 id="Retrieving-an-Object-From-a-Queue"><a href="#Retrieving-an-Object-From-a-Queue" class="headerlink" title="Retrieving an Object From a Queue"></a>Retrieving an Object From a Queue</h4><p>This method both <em>retrieves</em> the first element from the Queue and <em>removes</em> it from the Queue.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myQueue.poll()</span><br></pre></td></tr></table></figure><h4 id="Iterating-Over-a-Queue"><a href="#Iterating-Over-a-Queue" class="headerlink" title="Iterating Over a Queue"></a>Iterating Over a Queue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!myQueue.isEmpty()) &#123;</span><br><span class="line">    System.out.println(myQueue.poll());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Supplementary-Knowledge"><a href="#Supplementary-Knowledge" class="headerlink" title="Supplementary Knowledge"></a>Supplementary Knowledge</h2><h3 id="Super"><a href="#Super" class="headerlink" title="Super()"></a>Super()</h3><p>We can use super() to call the direct parent constructor.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeDecorator</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Shape decoratedShape;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShapeDecorator</span><span class="params">(Shape decoratedShape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.decoratedShape = decoratedShape;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        decoratedShape.draw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedShapeDecorator</span> <span class="keyword">extends</span> <span class="title">ShapeDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedShapeDecorator</span><span class="params">(Shape decoratedShape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(decoratedShape); <span class="comment">// use super() to call the parent constructor</span></span><br><span class="line">        <span class="comment">// inheritate the decoratedShape </span></span><br><span class="line">        <span class="comment">// this.decoratedShape = decoratedShape;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.draw();</span><br><span class="line">        setRedBorder(<span class="keyword">this</span>.decoratedShape); <span class="comment">// use the decoratedShape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add a new function(decorate)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRedBorder</span><span class="params">(Shape decoratedShape)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Border Color: Red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Common-Types&quot;&gt;&lt;a href=&quot;#Common-Types&quot; class=&quot;headerlink&quot; title=&quot;Common Types&quot;&gt;&lt;/a&gt;Common Types&lt;/h2&gt;&lt;h3 id=&quot;Exceptions&quot;&gt;&lt;a href=&quot;#Exc
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="Java" scheme="https://www.qianhongbo.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>GCD</title>
    <link href="https://www.qianhongbo.com/iOS/GCD.html"/>
    <id>https://www.qianhongbo.com/iOS/GCD.html</id>
    <published>2022-01-22T13:51:58.000Z</published>
    <updated>2022-01-23T05:53:19.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-GCD"><a href="#What-is-GCD" class="headerlink" title="What is GCD"></a>What is GCD</h2><p>GCD - ==Grand Central Dispatch==</p><p>UIKit can only be used on main queue.</p><p>Core data can be used both on main queue and background queue. But the core data can only be used in the same queue it was created.</p><p>Or we will meet ==concurrency bugs==. 并发错误</p><h2 id="async-and-sync"><a href="#async-and-sync" class="headerlink" title="async and sync"></a>async and sync</h2><ul><li>Dispatch_async(): doesn’t wait for the closure to finish, and moves on.</li><li>Dispatch_sync(): waits until the closure is done. Could easily get stalled.</li></ul><h2 id="UserDefaults"><a href="#UserDefaults" class="headerlink" title="UserDefaults"></a>UserDefaults</h2><p><strong><code>UserDefaults</code></strong>: a Dictionary that periodically saves its contents to your device’s permanent storage (SSD).</p><ul><li>Great for storing user preferences and other simple things.</li><li>Saves data in a plist file (property list file).</li><li>Can only store the following data types: <code>Data</code>, <code>String</code>, <code>Number</code>, <code>Date</code>, <code>Array</code>, and <code>Dictionary</code>.</li><li>When storing (writing) the file or accessing (reading) the file, <code>UserDefaults</code> does it all at once, possibly creating long/unnecessary I/O time.</li><li>It’s a good idea to keep <code>UserDefaults</code> under 1MB.</li></ul><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>The difference between Swift optionals and Core Data optional attributes is subtle. Swift optionals can be nil during runtime, and Core Data optional attributes can be nil at save time.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;What-is-GCD&quot;&gt;&lt;a href=&quot;#What-is-GCD&quot; class=&quot;headerlink&quot; title=&quot;What is GCD&quot;&gt;&lt;/a&gt;What is GCD&lt;/h2&gt;&lt;p&gt;GCD - ==Grand Central Dispatch==&lt;/
      
    
    </summary>
    
      <category term="iOS" scheme="https://www.qianhongbo.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Java Notes</title>
    <link href="https://www.qianhongbo.com/Backend/Java/Java%20Notes.html"/>
    <id>https://www.qianhongbo.com/Backend/Java/Java Notes.html</id>
    <published>2022-01-22T13:48:53.000Z</published>
    <updated>2022-01-25T03:45:40.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-Programing-Basics"><a href="#Java-Programing-Basics" class="headerlink" title="Java Programing Basics"></a>Java Programing Basics</h2><h3 id="Java-is-static-typing"><a href="#Java-is-static-typing" class="headerlink" title="Java is static typing"></a>Java is static typing</h3><p>Notice that, in Java, we must specify the data type (e.g., <code>int</code>). This is becouse Java is a <em>statically typed</em> language. Here are the key points to remember about <strong>static typing</strong>:</p><ul><li>The data type is bound to the variable when the variable is first declared.</li><li>The data type is checked when the code is compiled.</li><li>The data type for a variable cannot later be changed.</li></ul><p>In contrast, some languages, such as Python, are dynamically typed. In <strong>dynamic typing</strong>:</p><ul><li>The data type is bound to the <em>value</em> itself, but not to the variable.</li><li>The type is checked during runtime.</li><li>The data type of a variable can be changed after it is declared; since the type is associated with the <em>value</em>, assigning a new value may mean changing the data type.</li></ul><h3 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world!"></a>Hello world!</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GettingStarted</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Add your code here:</span></span><br><span class="line">        System.out.println(<span class="string">"Hello world!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use commond line to compile and run</span></span><br><span class="line">javac GettingStarted.java</span><br><span class="line">java GettingStarted.java</span><br></pre></td></tr></table></figure><h3 id="Type-casting"><a href="#Type-casting" class="headerlink" title="Type casting"></a>Type casting</h3><h4 id="Automatic-Type-Casting"><a href="#Automatic-Type-Casting" class="headerlink" title="Automatic Type Casting"></a>Automatic Type Casting</h4><p><strong>Automatic</strong> type casting converts a smaller type into a larger type. For example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intNumber = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">double</span> doubleNumber = intNumber;</span><br><span class="line">System.out.println(doubleNumber);</span><br></pre></td></tr></table></figure><p>When we print <code>doubleNumber</code>, the value will be <code>3.0</code>. Notice that there is no precision lost going from a smaller type into a larger type. We started with <code>3</code> and ended up with <code>3.0</code>.</p><h4 id="Manual-Type-Casting"><a href="#Manual-Type-Casting" class="headerlink" title="Manual Type Casting"></a>Manual Type Casting</h4><p><strong>Manual</strong> type casting is necessary when we want to do either of these things:</p><ul><li>Convert a larger type into a smaller type</li><li>Convert one object type into another</li></ul><p>For example, here we are converting from a larger type (double) to a smaller type (int):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">double doubleNumber = 3.5;</span><br><span class="line">int intNumber = (int)doubleNumber;</span><br><span class="line">System.out.println(intNumber);</span><br></pre></td></tr></table></figure><p>The resulting value will be <code>3</code>, not <code>3.5</code>. When we go from a larger type into a smaller type, precision is lost. Java cuts off additional data that will not fit in the casted type. So when we go from a double to an int, any values that are not integers will be removed. This is called <em>truncation</em>.</p><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><h4 id="Method-syntax"><a href="#Method-syntax" class="headerlink" title="Method syntax"></a>Method syntax</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findTheArea</span><span class="params">(<span class="keyword">double</span> length, <span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> area = length * width;</span><br><span class="line">    <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Methods-vs-Functions"><a href="#Methods-vs-Functions" class="headerlink" title="Methods vs Functions"></a>Methods vs Functions</h4><p>You’ll often see the words <strong>function</strong> and <strong>method</strong> used interchangeably. Although the terms are sometimes used loosely, here’s the distinction:</p><ul><li>A <em>function</em> is any block of reusable/callable code.</li><li>A <em>method</em> is a block of reusable/callable code that is attached to a class or object.</li></ul><p>So a method is a type of function, but it’s one that is associated with a class or object, whereas other functions can be executed from anywhere.</p><h3 id="Stack-and-Heap"><a href="#Stack-and-Heap" class="headerlink" title="Stack and Heap"></a>Stack and Heap</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gynk6gr9opj31fl0u0wiv.jpg" alt="image-20220122102441454"></p><h3 id="Types-of-Access-Modifiers"><a href="#Types-of-Access-Modifiers" class="headerlink" title="Types of Access Modifiers"></a>Types of Access Modifiers</h3><p>There are four types of access modifiers in Java:</p><ul><li><strong>Public</strong> means the class can be accessed from everywhere. If you have a method on a class that you want to expose to all other classes, then use this access modifier.</li><li><strong>Private</strong> means only the defining class can access the data. This provides security, by not allowing other classes to change the data directly. Instead, they must make changes to the data via the provided methods only.</li><li><strong>Protected</strong> means that access is restricted to the defining class, package, or subclass. This will be useful when we get into subclasses and inheritance in a later lesson, as it will allow our subclasses to use variables and methods from the parent class.</li><li><strong>Default</strong> means access is restricted to the defining class or the package. This can be used when we have classes inside the same package that we may want to expose data and methods too.</li></ul><table><thead><tr><th align="left">Access</th><th align="left">Inside class</th><th align="left">Inside package</th><th align="left">Outside package by subclass</th><th align="left">Outside package</th></tr></thead><tbody><tr><td align="left"><strong>Private</strong></td><td align="left">Yes</td><td align="left">No</td><td align="left">No</td><td align="left">No</td></tr><tr><td align="left"><strong>Default</strong></td><td align="left">Yes</td><td align="left">Yes</td><td align="left">No</td><td align="left">No</td></tr><tr><td align="left"><strong>Protected</strong></td><td align="left">Yes</td><td align="left">Yes</td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><strong>Public</strong></td><td align="left">Yes</td><td align="left">Yes</td><td align="left">Yes</td><td align="left">Yes</td></tr></tbody></table><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="Creating-an-Array"><a href="#Creating-an-Array" class="headerlink" title="Creating an Array"></a>Creating an Array</h4><p>Here’s an example of some code that creates an array of size four, containing four integer values:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [] numbers  = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><p>Notice that creating an array involves three steps:</p><ol><li>Declare the type of the array, using brackets (as in <code>int []</code>).</li><li>Name the array (in this example, the name is <code>numbers</code>).</li><li>Add values to the array.</li></ol><h4 id="Another-Way-to-Create-an-Array"><a href="#Another-Way-to-Create-an-Array" class="headerlink" title="Another Way to Create an Array"></a>Another Way to Create an Array</h4><p>Here’s another way we can create an array and add values to it:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">numbers[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">numbers[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">numbers[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">numbers[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br></pre></td></tr></table></figure><p>This approach uses the <code>new</code> keyword to create a new array object of size 4, and then we assign values to the four spaces created in the array.</p><h3 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopExercise</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add for Loop Here</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.println(numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add while Loop Here</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; numbers.length) &#123;</span><br><span class="line">            System.out.println(numbers[index]);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add Do while Loop Here</span></span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(numbers[counter]);</span><br><span class="line">            counter++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (counter &lt; numbers.length);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h3><h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><p>JavaDoc comments use a simple syntax that supports multi-line HTML format documentation. Here’s what the syntax looks like:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** documentation */</span></span><br></pre></td></tr></table></figure><p>And here’s an example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** This program HelloWorld produces a standard output</span></span><br><span class="line"><span class="comment"> *  displaying "Hello World"</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> The author of the class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> A reference to another class</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="Parts-of-a-JavaDoc-Comment"><a href="#Parts-of-a-JavaDoc-Comment" class="headerlink" title="Parts of a JavaDoc Comment"></a>Parts of a JavaDoc Comment</h4><p>Notice that JavaDoc comments are broken down into two parts:</p><ol><li>The description</li><li>Block tags</li></ol><p>In the above example, the description is the first part of the comment, and the block tags are the last part (<code>@author</code> and <code>@see</code>).</p><p>In this example, we have a doc comment for a method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method displays a simple text output to a provided name</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name The name of the person we want to say “Hi” too</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> results Returns true if the name was printed or</span></span><br><span class="line"><span class="comment"> * false if it failed </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Objecte-Oriented-Programming"><a href="#Objecte-Oriented-Programming" class="headerlink" title="Objecte-Oriented Programming"></a>Objecte-Oriented Programming</h2><h3 id="Define-a-class"><a href="#Define-a-class" class="headerlink" title="Define a class"></a>Define a class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> +<span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Garbage-Collection"><a href="#Garbage-Collection" class="headerlink" title="Garbage Collection"></a>Garbage Collection</h3><p>Every new object that we instantiate is added to the heap and consumes memory. In programming languages like C or C++, developers are responsible for creating and destroying objects. In contrast, Java has a background process called <strong>Garbage Collection (GC)</strong> that checks all instantiated objects, and destroys them if they do not have any references—thus freeing up memory, even without any active management on the part of the developer.</p><h3 id="Abstract-Classes"><a href="#Abstract-Classes" class="headerlink" title="Abstract Classes"></a>Abstract Classes</h3><p>An <strong>abstract class</strong> has the following key characteristics:</p><ul><li>It defines the behavior for each of the subclasses, but we cannot directly instantiate the abstract class itself.</li><li>It allows us to create abstract methods<ul><li>An abstract method is a method that does not contain an implementation body. Instead, it simply provides a header for the method.</li><li>Subclasses that extend an abstract class are required to override all abstract methods and provide a specific implementation.</li></ul></li></ul><h4 id="Example-Abstract-Vehicle-Class"><a href="#Example-Abstract-Vehicle-Class" class="headerlink" title="Example: Abstract Vehicle Class"></a>Example: Abstract <code>Vehicle</code> Class</h4><p>Here’s the example we looked at in the video. To ensure that we will <em>not</em> be able to directly instantiate <code>Vehicle</code> objects from this class, we define it using the <code>abstract</code> keyword:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String start;</span><br><span class="line">    <span class="keyword">protected</span> String stop;</span><br><span class="line">    <span class="keyword">protected</span> String direction;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vehicle</span><span class="params">(String start, String stop, String direction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.stop = stop;</span><br><span class="line">        <span class="keyword">this</span>.direction = direction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span></span>;    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, we use the <code>Extends</code> keyword to have our <code>Car</code> class extend the <code>Vehicle</code> class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Car start"</span>, <span class="string">"Car stop"</span>, <span class="string">"Car direction"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"55"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><p><strong>Interfaces</strong> allow us to avoid hardcoding features in an application. We can move specific implementation details into subclasses, and then use an interface to communicate between the application and the subclasses.</p><blockquote><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260456790454816" target="_blank" rel="noopener">A website about interface.</a></p></blockquote><h3 id="Interfaces-vs-Abstract-Classes"><a href="#Interfaces-vs-Abstract-Classes" class="headerlink" title="Interfaces vs Abstract Classes"></a>Interfaces vs Abstract Classes</h3><p>Here are some of the similarities and differences between abstract classes and interfaces:</p><p><strong>Abstract class</strong></p><ul><li>Can have class variables.</li><li>Can have both <strong>abstract</strong> methods and <strong>concrete</strong> methods that are shared with the subclasses.</li><li><strong>Can have instance variables</strong>, i.e. variables that are specific to individual subclasses.</li><li>Subclasses can only extend one class.</li></ul><p><strong>Interfaces</strong></p><ul><li>Can have class variables.</li><li>Every method in an interface is <strong>abstract</strong>.</li><li><strong>Cannot have instance variables</strong>. Variables in an interface must be the same for every class implementing the interface.</li><li>Classes can implement more than one interface and <strong>have multiple inheritance</strong>.</li></ul><p>One other thing to note is that that Interfaces are types just like classes are types!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSpeed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String speed;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String type, String speed, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.speed = speed;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> speed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-Programing-Basics&quot;&gt;&lt;a href=&quot;#Java-Programing-Basics&quot; class=&quot;headerlink&quot; title=&quot;Java Programing Basics&quot;&gt;&lt;/a&gt;Java Programing Basi
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="Java" scheme="https://www.qianhongbo.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://www.qianhongbo.com/OtherTechnique/Git.html"/>
    <id>https://www.qianhongbo.com/OtherTechnique/Git.html</id>
    <published>2022-01-05T02:03:41.000Z</published>
    <updated>2022-01-05T18:10:22.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="How-to-use-Git"><a href="#How-to-use-Git" class="headerlink" title="How to use Git"></a>How to use Git</h1><p>Here are some commonds to use git.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;&apos;</span><br><span class="line">git push</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="comment"># show the local branch </span></span><br><span class="line">git branch -a <span class="comment"># show all the branch including the remote branch</span></span><br><span class="line">git checkout branchName <span class="comment"># change to the local branch</span></span><br><span class="line">git checkout -b localBranchName origin/remoteBranchName </span><br><span class="line"><span class="comment"># create a new local branch the same as the remote branch</span></span><br><span class="line">git merge branchName <span class="comment"># merge the current branch with another branch</span></span><br><span class="line">git branch -d branchName <span class="comment"># delete the local branch</span></span><br><span class="line">git push origin --delete remoteBranchName <span class="comment"># delete the remote branch</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;How-to-use-Git&quot;&gt;&lt;a href=&quot;#How-to-use-Git&quot; class=&quot;headerlink&quot; title=&quot;How to use Git&quot;&gt;&lt;/a&gt;How to use Git&lt;/h1&gt;&lt;p&gt;Here are some commonds
      
    
    </summary>
    
    
      <category term="Git" scheme="https://www.qianhongbo.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Network Foundations HTTP</title>
    <link href="https://www.qianhongbo.com/iOS/Network-Foundations-HTTP.html"/>
    <id>https://www.qianhongbo.com/iOS/Network-Foundations-HTTP.html</id>
    <published>2021-12-30T11:13:37.000Z</published>
    <updated>2022-01-23T06:31:09.136Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Networking-Terms"><a href="#Networking-Terms" class="headerlink" title="Networking Terms"></a>Networking Terms</h1><ul><li><strong>Data:</strong> (Usually in the raw form) anything that is sent over the network.</li><li><strong>Client:</strong></li><li><strong>Server:</strong></li><li><strong>URL:</strong> <strong>U</strong>niform <strong>R</strong>esource <strong>L</strong>ocator</li><li><strong>HTTP:</strong> <strong>H</strong>yper<strong>t</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol</li><li><strong>HTTPS:</strong> HTTP <strong>S</strong>ecure,</li></ul><h1 id="Anatomy-of-a-URL"><a href="#Anatomy-of-a-URL" class="headerlink" title="Anatomy of a URL"></a>Anatomy of a URL</h1><table><thead><tr><th>Component</th><th>Name</th></tr></thead><tbody><tr><td>https://</td><td>scheme</td></tr><tr><td>swift.org</td><td>host</td></tr><tr><td>/about/</td><td>path</td></tr></tbody></table><table><thead><tr><th>Order</th><th>Component</th></tr></thead><tbody><tr><td>1st</td><td>scheme</td></tr><tr><td>2nd</td><td>host</td></tr><tr><td>3rd</td><td>port</td></tr><tr><td>4th</td><td>path</td></tr><tr><td>5th</td><td>query</td></tr><tr><td>6th</td><td>fragment</td></tr></tbody></table><h1 id="Status-codes"><a href="#Status-codes" class="headerlink" title="Status codes"></a>Status codes</h1><p>HTTP status codes fall into 5 ranges based on the type of response.</p><ul><li><strong>100:</strong> Informational response (request has been received by the server but is not finished yet)</li><li><strong>200:</strong> Successful response (request has been processed and completed by the server)</li><li><strong>300:</strong> Redirection (client needs to do something to complete the request)</li><li><strong>400:</strong> Unsuccessful (problem with the client’s request)</li><li><strong>500:</strong> Unsuccessful (problem with the server)</li></ul><p>A complete list of status codes can be found <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes" target="_blank" rel="noopener">here</a>.</p><table><thead><tr><th align="left"><strong>Status Code</strong></th><th align="left"><strong>Short Description</strong></th><th align="left"><strong>Category</strong></th></tr></thead><tbody><tr><td align="left">100</td><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/100" target="_blank" rel="noopener">Continue</a></td><td align="left">Information</td></tr><tr><td align="left">200</td><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200" target="_blank" rel="noopener">OK</a></td><td align="left">Success</td></tr><tr><td align="left">301</td><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301" target="_blank" rel="noopener">Moved Permanently</a></td><td align="left">Redirection</td></tr><tr><td align="left">403</td><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403" target="_blank" rel="noopener">Forbidden</a></td><td align="left">Client Error</td></tr><tr><td align="left">404</td><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404" target="_blank" rel="noopener">Not Found</a></td><td align="left">Client Error</td></tr><tr><td align="left">418</td><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/418" target="_blank" rel="noopener">I’m a teapot</a></td><td align="left">Client Error</td></tr><tr><td align="left">500</td><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500" target="_blank" rel="noopener">Internal Server Error</a></td><td align="left">Server Error</td></tr></tbody></table><h1 id="HTTP-Verbs"><a href="#HTTP-Verbs" class="headerlink" title="HTTP Verbs"></a>HTTP Verbs</h1><p>CRUD:</p><ul><li>Create</li><li>Read</li><li>Update</li><li>Delete</li></ul><table><thead><tr><th>Verb</th><th>CRUD Operation</th></tr></thead><tbody><tr><td>GET</td><td>Read</td></tr><tr><td>POST</td><td>Create</td></tr><tr><td>PUT</td><td>Update(Replace)</td></tr><tr><td>PATCH</td><td>Update(Modify)</td></tr><tr><td>DELETE</td><td>Delete</td></tr></tbody></table><ul><li><strong>GET</strong>: Retrieves data from the server, such as getting a list of search results.</li><li><strong>POST</strong>: Submits data to be stored in the server, such as when submitting a form.</li><li><strong>PUT</strong>: Updates data on the server, replacing the old data with the new data.</li><li><strong>PATCH</strong>: Updates data on the server, by changing specific values.</li><li><strong>DELETE</strong>: Used when removing data from the server.</li></ul><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Task 1: create a valid URL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> website = <span class="string">"http://udacity.com"</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="type">URL</span>(string: website)</span><br><span class="line"><span class="built_in">print</span>(url!)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Task 2: append an "ios" path component to the URL</span></span><br><span class="line"></span><br><span class="line">url?.appendPathComponent(<span class="string">"ios"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> url = url &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"URL: \(url)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>We can’t add query and fragment.</p></blockquote><h2 id="URLComponents"><a href="#URLComponents" class="headerlink" title="URLComponents"></a>URLComponents</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a new URLComponents</span></span><br><span class="line"><span class="keyword">var</span> components = <span class="type">URLComponents</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// set the scheme</span></span><br><span class="line">components.scheme = <span class="string">"https"</span></span><br><span class="line"><span class="comment">// set the host</span></span><br><span class="line">components.host = <span class="string">"google.com"</span></span><br><span class="line"><span class="comment">// set the path</span></span><br><span class="line">components.path = <span class="string">"/search"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set the query, you'll need to create a new URLQueryItem</span></span><br><span class="line">components.queryItems = [<span class="type">URLQueryItem</span>(name: <span class="string">"query"</span>, value: <span class="string">"udacity"</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(components.url ?? <span class="string">""</span>)</span><br></pre></td></tr></table></figure><h2 id="Use-struct-to-store-URLComponents"><a href="#Use-struct-to-store-URLComponents" class="headerlink" title="Use struct to store URLComponents"></a>Use struct to store URLComponents</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> urlString = <span class="string">"https://itunes.apple.com/us/app/udacity/id819700933?mt=8"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> urlComponents = <span class="type">URLComponents</span>(string: urlString)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> urlComponents = urlComponents &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"scheme:\t\t\(String(reflecting: urlComponents.scheme))"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"user:\t\t\(String(reflecting: urlComponents.user))"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"password:\t\(String(reflecting: urlComponents.password))"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"host:\t\t\(String(reflecting: urlComponents.host))"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"port:\t\t\(String(reflecting: urlComponents.port))"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"path:\t\t\(String(reflecting: urlComponents.path))"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"query:\t\t\(String(reflecting: urlComponents.query))"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"fragment:\t\(String(reflecting: urlComponents.fragment))"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AppStore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> scheme = <span class="string">"https"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> host = <span class="string">"itunes.apple.com"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> udacityPath = <span class="string">"/us/app/udacity/id819700933"</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ParameterKey</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> mediaType = <span class="string">"mt"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">MediaType</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> music = <span class="string">"1"</span>,</span><br><span class="line">        podcasts = <span class="string">"2"</span>,</span><br><span class="line">        audiobooks = <span class="string">"3"</span>,</span><br><span class="line">        tvShows = <span class="string">"4"</span>,</span><br><span class="line">        musicVideos = <span class="string">"5"</span>,</span><br><span class="line">        movies = <span class="string">"6"</span>,</span><br><span class="line">        iPodGames = <span class="string">"7"</span>,</span><br><span class="line">        mobileApps = <span class="string">"8"</span>,</span><br><span class="line">        ringTones = <span class="string">"9"</span>,</span><br><span class="line">        iTunesU = <span class="string">"10"</span>,</span><br><span class="line">        ebooks = <span class="string">"11"</span>,</span><br><span class="line">        desktopApps = <span class="string">"12"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> udacityAppURL = <span class="type">URLComponents</span>()</span><br><span class="line">udacityAppURL.scheme = <span class="type">AppStore</span>.scheme</span><br><span class="line">udacityAppURL.host = <span class="type">AppStore</span>.host</span><br><span class="line">udacityAppURL.path = <span class="type">AppStore</span>.udacityPath</span><br><span class="line"></span><br><span class="line">udacityAppURL.queryItems = [<span class="type">URLQueryItem</span>(name: <span class="type">AppStore</span>.<span class="type">ParameterKey</span>.mediaType.rawValue, value: <span class="type">AppStore</span>.<span class="type">MediaType</span>.mobileApps.rawValue)]</span><br><span class="line"><span class="built_in">print</span>(udacityAppURL)</span><br></pre></td></tr></table></figure><h2 id="URLSession"><a href="#URLSession" class="headerlink" title="URLSession"></a>URLSession</h2><p>“Tasks” are what <code>URLSession</code> calls network requests.</p><ul><li><code>URLSessionDataTask</code>: Used for perfuming an HTTP request (GET, POST, etc.).</li><li><code>URLSessionDownloadTask</code>: Downloading a file from a server.</li><li><code>URLSessionUploadTask</code>: Uploading a file to a server</li><li><code>URLSessionStreamTask</code>: Getting a continuous stream of data from a server.</li></ul><blockquote><p>After you create the task, you must start it by calling its <a href="https://developer.apple.com/documentation/foundation/urlsessiontask/1411121-resume" target="_blank" rel="noopener"><code>resume()</code></a> method.</p><p>Newly-initialized tasks begin in a suspended state, so you need to call this method to start the task.</p></blockquote><p>###URLSession.shared.dataTask </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">loadImage</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="keyword">self</span>.imageLocation) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Cannot create url!"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: url) &#123;</span><br><span class="line">            (data, response, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> data = data <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"no data"</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> downLoadedImage = <span class="type">UIImage</span>(data: data)</span><br><span class="line">          <span class="comment">// the code of network request is working on the background</span></span><br><span class="line">          <span class="comment">// have to move this line of code to the main thread</span></span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                <span class="keyword">self</span>.imageView.image = downLoadedImage</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">// have to use resume() to start the task </span></span><br><span class="line">        task.resume()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Trailing-closure-syntax"><a href="#Trailing-closure-syntax" class="headerlink" title="Trailing closure syntax"></a>Trailing closure syntax</h4><p>Many functions in iOS accept multiple parameters where the final parameter is a closure.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: url, completionHandler: &#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// trailing closure syntax</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: url) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URLSession-shared-downloadTask"><a href="#URLSession-shared-downloadTask" class="headerlink" title="URLSession.shared.downloadTask"></a>URLSession.shared.downloadTask</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">loadImage</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="keyword">self</span>.imageLocation) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Cannot create url!"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.downloadTask(with: url) &#123;</span><br><span class="line">            (location, response, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> location = location <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"location is nil!"</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> downLoadedImage = <span class="keyword">try</span>! <span class="type">Data</span>(contentsOf: location)</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                <span class="keyword">self</span>.imageView.image = <span class="type">UIImage</span>(data: downLoadedImage)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        task.resume()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="API-amp-Web-Service"><a href="#API-amp-Web-Service" class="headerlink" title="API &amp; Web Service"></a>API &amp; Web Service</h2><p>There you have it: an API is an interface that allows you to build on the data and functionality of another application, while a web service is a network-based resource that fulfills a specific task. Yes, there’s overlap between the two: all web services are APIs, but not all APIs are web services.</p><h2 id="DogAPI"><a href="#DogAPI" class="headerlink" title="DogAPI"></a>DogAPI</h2><h3 id="JSONSerialization"><a href="#JSONSerialization" class="headerlink" title="JSONSerialization"></a>JSONSerialization</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogAPI</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">endpoint</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> randomImageFromAllDogsCollection = <span class="string">"https://dog.ceo/api/breeds/image/random"</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> url: <span class="type">URL</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">URL</span>(string: <span class="keyword">self</span>.rawValue)!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> randomImageEndpoint = <span class="type">DogAPI</span>.endpoint.randomImageFromAllDogsCollection.url</span><br><span class="line">        </span><br><span class="line"><span class="keyword">let</span> tast = <span class="type">URLSession</span>.shared.dataTask(with: randomImageEndpoint) &#123; </span><br><span class="line">  data, response, error <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> data = data <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> json = <span class="keyword">try</span> <span class="type">JSONSerialization</span>.jsonObject(with: data, options: []) <span class="keyword">as</span>! [<span class="type">String</span>: <span class="type">Any</span>]</span><br><span class="line">    <span class="keyword">let</span> url = json[<span class="string">"message"</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">tast.resume()</span><br></pre></td></tr></table></figure><h2 id="Codable"><a href="#Codable" class="headerlink" title="Codable"></a>Codable</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DogImage</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> status: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> message: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">let</span> imageData = <span class="keyword">try</span>! decoder.decode(<span class="type">DogImage</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line"><span class="built_in">print</span>(imageData) <span class="comment">// a struct</span></span><br></pre></td></tr></table></figure><h2 id="JSON-parsing-scenarios"><a href="#JSON-parsing-scenarios" class="headerlink" title="JSON parsing scenarios"></a>JSON parsing scenarios</h2><ul><li><strong>Coding Keys</strong> (a way to map differently named JSON keys to Swift property names)</li><li><strong>Parsing JSON Arrays</strong></li><li><strong>Nested</strong> JSON objects</li><li><strong>Accessing keys and values</strong> (treating a JSON object like a dictionary when we don’t know what the keys and values will be)</li></ul><h3 id="Coding-Keys"><a href="#Coding-Keys" class="headerlink" title="Coding Keys"></a>Coding Keys</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "food_name": "Lemon",</span></span><br><span class="line"><span class="string">    "taste": "sour",</span></span><br><span class="line"><span class="string">    "number of calories": 17</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span>.data(using: .utf8)!</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Food</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> taste: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> calories: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> name = <span class="string">"food_name"</span></span><br><span class="line">        <span class="keyword">case</span> taste</span><br><span class="line">        <span class="keyword">case</span> calories = <span class="string">"number of calories"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">let</span> food: <span class="type">Food</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    food = <span class="keyword">try</span> decoder.decode(<span class="type">Food</span>.<span class="keyword">self</span>, from: json)</span><br><span class="line">    <span class="built_in">print</span>(food)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Parsing-JSON-Arrays"><a href="#Parsing-JSON-Arrays" class="headerlink" title="Parsing JSON Arrays"></a>Parsing JSON Arrays</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">"""</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        "title": "Groundhog Day",</span></span><br><span class="line"><span class="string">        "released": 1993,</span></span><br><span class="line"><span class="string">        "starring": ["Bill Murray", "Andie MacDowell", "Chris Elliot"]</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        "title": "Home Alone",</span></span><br><span class="line"><span class="string">        "released": 1990,</span></span><br><span class="line"><span class="string">        "starring": ["Macaulay Culkin", "Joe Pesci", "Daniel Stern", "John Heard", "Catherine O'Hara"]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">"""</span>.data(using: .utf8)!</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Movie</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> released: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> starring: [<span class="type">String</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">let</span> comedies: [<span class="type">Movie</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    comedies = <span class="keyword">try</span> decoder.decode([<span class="type">Movie</span>].<span class="keyword">self</span>, from: json)</span><br><span class="line">    <span class="built_in">print</span>(comedies)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nested-JSON-objects"><a href="#Nested-JSON-objects" class="headerlink" title="Nested JSON objects"></a>Nested JSON objects</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "name": "",</span></span><br><span class="line"><span class="string">    "studentId: 326156,</span></span><br><span class="line"><span class="string">    "academics": &#123;</span></span><br><span class="line"><span class="string">        "field": "iOS",</span></span><br><span class="line"><span class="string">        "grade": "A"</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span>.data(using: .utf8)!</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Academics</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> field: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> grade: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> studentId: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> academics: <span class="type">Academics</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">let</span> student: <span class="type">Student</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    student = <span class="keyword">try</span> decoder.decode(<span class="type">Student</span>.<span class="keyword">self</span>, from: json)</span><br><span class="line">    <span class="built_in">print</span>(student)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Accessing-keys-and-values"><a href="#Accessing-keys-and-values" class="headerlink" title="Accessing keys and values"></a>Accessing keys and values</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = <span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "100": &#123;</span></span><br><span class="line"><span class="string">        "type": "colonial",</span></span><br><span class="line"><span class="string">        "location": "Plainville, MA",</span></span><br><span class="line"><span class="string">        "bedrooms": 3,</span></span><br><span class="line"><span class="string">        "bathrooms": 2.5,</span></span><br><span class="line"><span class="string">        "has air conditioning": false,</span></span><br><span class="line"><span class="string">        "amenities": ["basement", "garden"],</span></span><br><span class="line"><span class="string">        "listing": &#123;</span></span><br><span class="line"><span class="string">            "price": 430000,</span></span><br><span class="line"><span class="string">            "date": "May 2018"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "101": &#123;</span></span><br><span class="line"><span class="string">        "type": "condo",</span></span><br><span class="line"><span class="string">        "location": "San Francisco, CA",</span></span><br><span class="line"><span class="string">        "bedrooms": 1,</span></span><br><span class="line"><span class="string">        "bathrooms": 1,</span></span><br><span class="line"><span class="string">        "has air conditioning": true,</span></span><br><span class="line"><span class="string">        "amenities": [],</span></span><br><span class="line"><span class="string">        "listing": &#123;</span></span><br><span class="line"><span class="string">            "price": 765000,</span></span><br><span class="line"><span class="string">            "date": "September 2018"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span>.data(using: .utf8)!</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Listing</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> price: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> date: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">House</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> houseType: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> location: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> beds: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> baths: <span class="type">Float</span></span><br><span class="line">    <span class="keyword">let</span> hasAirConditioning: <span class="type">Bool</span></span><br><span class="line">    <span class="keyword">let</span> amenities: [<span class="type">String</span>]</span><br><span class="line">    <span class="keyword">let</span> listing: <span class="type">Listing</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> houseType = <span class="string">"type"</span></span><br><span class="line">        <span class="keyword">case</span> location = <span class="string">"location"</span></span><br><span class="line">        <span class="keyword">case</span> beds = <span class="string">"bedrooms"</span></span><br><span class="line">        <span class="keyword">case</span> baths = <span class="string">"bathrooms"</span></span><br><span class="line">        <span class="keyword">case</span> hasAirConditioning = <span class="string">"has air conditioning"</span></span><br><span class="line">        <span class="keyword">case</span> amenities</span><br><span class="line">        <span class="keyword">case</span> listing</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> houseDict = <span class="keyword">try</span> decoder.decode([<span class="type">String</span>: <span class="type">House</span>].<span class="keyword">self</span>, from: json)</span><br><span class="line">    <span class="built_in">print</span>(houseDict)</span><br><span class="line">    <span class="keyword">let</span> houses = houseDict.values.<span class="built_in">map</span>(&#123;$<span class="number">0</span>&#125;)</span><br><span class="line">    <span class="keyword">let</span> houseIds = houseDict.keys.<span class="built_in">map</span>(&#123;$<span class="number">0</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(houses)</span><br><span class="line">    <span class="built_in">print</span>(houseIds)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>We have to use <a href="https://developer.apple.com/documentation/swift/array/3017522-map" target="_blank" rel="noopener">map</a> to transform the data from keys <code>type</code> to <code>array</code> type.</p></blockquote><h2 id="Post-request-in-Swift"><a href="#Post-request-in-Swift" class="headerlink" title="Post request in Swift"></a>Post request in Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> CoreFoundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a Codable struct called "POST" with the correct properties</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Post</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> userId: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> body: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create an instance of the Post struct with your own values</span></span><br><span class="line"><span class="keyword">let</span> post = <span class="type">Post</span>(userId: <span class="number">1</span>, title: <span class="string">"udacity"</span>, body: <span class="string">"udacious"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a URLRequest by passing in the URL</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="type">URLRequest</span>(url: <span class="type">URL</span>(string: <span class="string">"https://jsonplaceholder.typicode.com/posts"</span>)!)</span><br><span class="line"><span class="comment">// set the HTTP method to POST</span></span><br><span class="line">request.httpMethod = <span class="string">"POST"</span></span><br><span class="line"><span class="comment">// set the HTTP body to the encoded "Post" struct</span></span><br><span class="line">request.httpBody = <span class="keyword">try</span>! <span class="type">JSONEncoder</span>().encode(post)</span><br><span class="line"><span class="comment">// set the appropriate HTTP header fields</span></span><br><span class="line">request.addValue(<span class="string">"application/json"</span>, forHTTPHeaderField: <span class="string">"Content-Type"</span>)</span><br><span class="line"><span class="comment">// HACK: this line allows the workspace or an Xcode playground to execute the request, but is not needed in a real app</span></span><br><span class="line"><span class="keyword">let</span> runLoop = <span class="type">CFRunLoopGetCurrent</span>()</span><br><span class="line"><span class="comment">// task for making the request</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: request) &#123;data, response, error <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="type">String</span>(data: data!, encoding: .utf8))</span><br><span class="line">    <span class="comment">// also not necessary in a real app</span></span><br><span class="line">    <span class="type">CFRunLoopStop</span>(runLoop)</span><br><span class="line">&#125;</span><br><span class="line">task.resume()</span><br><span class="line"><span class="comment">// not necessary</span></span><br><span class="line"><span class="type">CFRunLoopRun</span>()s</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Networking-Terms&quot;&gt;&lt;a href=&quot;#Networking-Terms&quot; class=&quot;headerlink&quot; title=&quot;Networking Terms&quot;&gt;&lt;/a&gt;Networking Terms&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;
      
    
    </summary>
    
      <category term="iOS" scheme="https://www.qianhongbo.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Binary Search Tree</title>
    <link href="https://www.qianhongbo.com/LeetCode/Binary-Search-Tree.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Binary-Search-Tree.html</id>
    <published>2021-12-28T09:24:37.000Z</published>
    <updated>2022-01-30T05:21:32.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BST-Construction"><a href="#BST-Construction" class="headerlink" title="BST Construction"></a>BST Construction</h1><p>Write a BST class for a Binary Search Tree. The class should support:</p><ol><li>Inserting values</li><li>Removing values</li><li>Searching for values/ Contain</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Average: O(log(n)) time | O(1) space</span></span><br><span class="line">    <span class="comment"># Worst: O(n) time | O(1) space</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        currentNode = self</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> value &lt; currentNode.value:</span><br><span class="line">                <span class="keyword">if</span> currentNode.left <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    currentNode.left = BST(value)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    currentNode = currentNode.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> currentNode.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    currentNode.right = BST(value)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    currentNode = currentNode.right</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Average: O(log(n)) time | O(1) space</span></span><br><span class="line">    <span class="comment"># Worst: O(n) time | O(1) space</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">contains</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        currentNode = self</span><br><span class="line">        <span class="keyword">while</span> currentNode <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> value &lt; currentNode.value:</span><br><span class="line">                currentNode = currentNode.left</span><br><span class="line">            <span class="keyword">elif</span> value &gt; currentNode.value:</span><br><span class="line">                currentNode = currentNode.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Average: O(log(n)) time | O(1) space</span></span><br><span class="line">    <span class="comment"># Worst: O(n) time | O(1) space</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, value, parrentNode=None)</span>:</span></span><br><span class="line">        currentNode = self</span><br><span class="line">        <span class="keyword">while</span> currentNode <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> value &lt; currentNode.value:</span><br><span class="line">                parrentNode = currentNode</span><br><span class="line">                currentNode = currentNode.left</span><br><span class="line">            <span class="keyword">elif</span> value &gt; currentNode.value:</span><br><span class="line">                parrentNode = currentNode</span><br><span class="line">                currentNode = currentNode.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">              <span class="comment"># Circumstance 1</span></span><br><span class="line">                <span class="keyword">if</span> currentNode.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> currentNode.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    currentNode.value = currentNode.right.getMinValue()</span><br><span class="line">                    currentNode.right.remove(currentNode.value, currentNode)</span><br><span class="line">                <span class="comment"># Circumstance 2.2</span></span><br><span class="line">                <span class="keyword">elif</span> parrentNode <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">if</span> currentNode.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                        currentNode.value = currentNode.left.value</span><br><span class="line">                        currentNode.right = currentNode.left.right</span><br><span class="line">                        currentNode.left = currentNode.left.left</span><br><span class="line">                    <span class="keyword">elif</span> currentNode.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                        currentNode.value = currentNode.right.value</span><br><span class="line">                        currentNode.left = currentNode.right.left</span><br><span class="line">                        currentNode.right = currentNode.right.right</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">                <span class="comment"># Circumstance 2.1</span></span><br><span class="line">                <span class="keyword">elif</span> currentNode == parrentNode.left:</span><br><span class="line">                    parrentNode.left = currentNode.left <span class="keyword">if</span> currentNode.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> currentNode.right</span><br><span class="line">                <span class="comment"># Circumstance 2.1</span></span><br><span class="line">                <span class="keyword">elif</span> currentNode == parrentNode.right:</span><br><span class="line">                    parrentNode.right = currentNode.left <span class="keyword">if</span> currentNode.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> currentNode.right</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMinValue</span><span class="params">(self)</span>:</span></span><br><span class="line">    currentNode = self</span><br><span class="line">    <span class="keyword">while</span> currentNode.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        currentNode = currentNode.left</span><br><span class="line">    <span class="keyword">return</span> currentNode.value</span><br></pre></td></tr></table></figure><blockquote><p>There are three circumstances for remove </p><ol><li>have both left child and right child</li><li>only have left child or right child or no child<ul><li>have parent node</li><li>don’t have parent node</li></ul></li></ol></blockquote><h1 id="Validate-BST"><a href="#Validate-BST" class="headerlink" title="Validate BST"></a>Validate BST</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(d) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validateBst</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> validateBstHelper(tree, float(<span class="string">"-inf"</span>), float(<span class="string">"inf"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validateBstHelper</span><span class="params">(tree, minValue, maxValue)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> tree.value &lt; minValue <span class="keyword">or</span> tree.value &gt;= maxValue:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    leftIsValid = validateBstHelper(tree.left, minValue, tree.value)</span><br><span class="line">    rightIsValid = validateBstHelper(tree.right, tree.value, maxValue)</span><br><span class="line">    <span class="keyword">return</span> leftIsValid <span class="keyword">and</span> rightIsValid</span><br></pre></td></tr></table></figure><h1 id="BST-Traversal"><a href="#BST-Traversal" class="headerlink" title="BST Traversal"></a>BST Traversal</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tree = 10</span><br><span class="line">       / \ </span><br><span class="line">      5   15</span><br><span class="line">     / \    \</span><br><span class="line">    2   5    22</span><br><span class="line">  /</span><br><span class="line"> 1</span><br><span class="line"> </span><br><span class="line"> inOrderTraverse: [1, 2, 5, 5, 10, 15, 22]</span><br><span class="line"> preOrderTraverse: [10, 5, 2, 1, 5, 15, 22]</span><br><span class="line"> postOrderTraverse: [1, 2, 5, 5, 22, 15, 10]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inOrderTraverse</span><span class="params">(tree, array)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        inOrderTraverse(tree.left, array)</span><br><span class="line">        array.append(tree.value)</span><br><span class="line">        inOrderTraverse(tree.right, array)</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preOrderTraverse</span><span class="params">(tree, array)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        array.append(tree.value)</span><br><span class="line">        preOrderTraverse(tree.left, array)</span><br><span class="line">        preOrderTraverse(tree.right, array)</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postOrderTraverse</span><span class="params">(tree, array)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        postOrderTraverse(tree.left, array)</span><br><span class="line">        postOrderTraverse(tree.right, array)</span><br><span class="line">        array.append(tree.value)</span><br><span class="line">    <span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><h1 id="Min-Height-BST"><a href="#Min-Height-BST" class="headerlink" title="Min Height BST"></a>Min Height BST</h1><p>Write a function that takes in a sorted array of distince integers. Construct a BST from the integers, and return the root of the BST.</p><p>Recursive!</p><ol><li>Use the insert function of Class BST</li><li>Write the insert function by ourselves</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(nlogn) time | O(n) space</span></span><br><span class="line"><span class="comment"># insert O(logn) time * n elements</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minHeightBst</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> constructMinHeightBst(array, <span class="literal">None</span>, <span class="number">0</span>, len(array) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constructMinHeightBst</span><span class="params">(array, bst, startIdx, endIdx)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> startIdx &gt; endIdx:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    midIdx = (startIdx + endIdx) // <span class="number">2</span></span><br><span class="line">    midValue = array[midIdx]</span><br><span class="line">    <span class="keyword">if</span> bst <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        bst = BST(midValue)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bst.insert(midValue)</span><br><span class="line"></span><br><span class="line">    constructMinHeightBst(array, bst, startIdx, midIdx - <span class="number">1</span>)</span><br><span class="line">    constructMinHeightBst(array, bst, midIdx + <span class="number">1</span>, endIdx)</span><br><span class="line">    <span class="keyword">return</span> bst</span><br></pre></td></tr></table></figure><p>In order to optimize the program, the built-in insert function is not practical, and there is no need to start from the root node. Directly compare and insert.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minHeightBst</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> constructMinHeightBst(array, <span class="literal">None</span>, <span class="number">0</span>, len(array) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constructMinHeightBst</span><span class="params">(array, bst, startIdx, endIdx)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> startIdx &gt; endIdx:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    midIdx = (startIdx + endIdx) // <span class="number">2</span></span><br><span class="line">    newBstNode = BST(array[midIdx])</span><br><span class="line">    <span class="keyword">if</span> bst <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        bst = newBstNode</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="comment"># Don't need to traverse elements from the root node.</span></span><br><span class="line">        <span class="keyword">if</span> bst.value &gt; array[midIdx]:</span><br><span class="line">            bst.left = newBstNode</span><br><span class="line">            bst = bst.left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            bst.right = newBstNode</span><br><span class="line">            bst = bst.right</span><br><span class="line"></span><br><span class="line">    constructMinHeightBst(array, bst, startIdx, midIdx - <span class="number">1</span>)</span><br><span class="line">    constructMinHeightBst(array, bst, midIdx + <span class="number">1</span>, endIdx)</span><br><span class="line">    <span class="keyword">return</span> bst</span><br></pre></td></tr></table></figure><p>Make a few changes to the above code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constructMinHeightBst</span><span class="params">(array, startIdx, endIdx)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> startIdx &gt; endIdx:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    midIdx = (startIdx + endIdx) // <span class="number">2</span></span><br><span class="line">    bst = BST(array[midIdx])</span><br><span class="line">    bst.left = constructMinHeightBst(array, startIdx, midIdx - <span class="number">1</span>)</span><br><span class="line">    bst.right = constructMinHeightBst(array, midIdx + <span class="number">1</span>, endIdx)</span><br><span class="line">    <span class="keyword">return</span> bst</span><br></pre></td></tr></table></figure><h1 id="Find-Kth-Largest-Value-in-BST"><a href="#Find-Kth-Largest-Value-in-BST" class="headerlink" title="Find Kth Largest Value in BST"></a>Find Kth Largest Value in BST</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value, left=None, right=None)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(N) time, O(N) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findKthLargestValueInBst</span><span class="params">(tree, k)</span>:</span></span><br><span class="line">    array = []</span><br><span class="line">    array = reverseInorderTraverse(tree, array)</span><br><span class="line">    <span class="keyword">return</span> array[k - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseInorderTraverse</span><span class="params">(tree, array)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        reverseInorderTraverse(tree.right, array)</span><br><span class="line">        array.append(tree.value)</span><br><span class="line">        reverseInorderTraverse(tree.left, array)</span><br><span class="line">    <span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeInfo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, numberOfNodesVisited, latestVisitedNodeValue)</span>:</span></span><br><span class="line">        self.numberOfNodesVisited = numberOfNodesVisited</span><br><span class="line">        self.latestVisitedNodeValue = latestVisitedNodeValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># O(h + k) time, O(h) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findKthLargestValueInBst</span><span class="params">(tree, k)</span>:</span></span><br><span class="line">    treeInfo = TreeInfo(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">    reverseInorderTraverse(tree, k, treeInfo)</span><br><span class="line">    <span class="keyword">return</span> treeInfo.latestVisitedNodeValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseInorderTraverse</span><span class="params">(node, k, treeInfo)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> treeInfo.numberOfNodesVisited &gt;= k:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    reverseInorderTraverse(node.right, k, treeInfo)</span><br><span class="line">    <span class="keyword">if</span> treeInfo.numberOfNodesVisited &lt; k:</span><br><span class="line">        treeInfo.latestVisitedNodeValue = node.value</span><br><span class="line">        treeInfo.numberOfNodesVisited += <span class="number">1</span></span><br><span class="line">        reverseInorderTraverse(node.left, k, treeInfo)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;BST-Construction&quot;&gt;&lt;a href=&quot;#BST-Construction&quot; class=&quot;headerlink&quot; title=&quot;BST Construction&quot;&gt;&lt;/a&gt;BST Construction&lt;/h1&gt;&lt;p&gt;Write a BST cl
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift knowledge supplement</title>
    <link href="https://www.qianhongbo.com/iOS/Swift-knowledge-supplement.html"/>
    <id>https://www.qianhongbo.com/iOS/Swift-knowledge-supplement.html</id>
    <published>2021-12-28T06:27:30.000Z</published>
    <updated>2021-12-31T01:40:10.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Associated-Value"><a href="#Associated-Value" class="headerlink" title="Associated Value"></a>Associated Value</h1><p>Enums can have raw values and associated values. A raw value is a string, character, or number (integer or floating-point) that can represent an enum case.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Position</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> first = <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> second = <span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> third = <span class="number">3</span></span><br><span class="line">    <span class="keyword">case</span> fourth = <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The example above defines a <code>Position</code> enum and uses type annotation to specify that all cases must have a raw integer value.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ": Int" is the type annotation</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Position</span>: <span class="title">Int</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>Then, for each case, a raw integer value is explicitly defined after the case name.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> first = <span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> second = <span class="number">2</span></span><br><span class="line"><span class="keyword">case</span> third = <span class="number">3</span></span><br><span class="line"><span class="keyword">case</span> fourth = <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="Raw-Value-to-Enum"><a href="#Raw-Value-to-Enum" class="headerlink" title="Raw Value to Enum"></a>Raw Value to Enum</h2><p>Raw values enable developers to convert values into enum cases, and vice versa. Let’s keep working with the <code>Position</code> enum.</p><p>To convert an enum case into its raw value, use its <code>rawValue</code> property:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// convert a Position into a raw integer value</span></span><br><span class="line"><span class="keyword">let</span> myPosition = <span class="type">Position</span>.first</span><br><span class="line"><span class="keyword">let</span> myPositionNumber = myPosition.rawValue</span><br><span class="line"><span class="built_in">print</span>(myPositionNumber) <span class="comment">// prints "1"</span></span><br></pre></td></tr></table></figure><p>To convert a raw value to its respective enum case, use the initializer that takes a <code>rawValue</code> argument.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// convert an integer into a Position</span></span><br><span class="line"><span class="keyword">let</span> rivalPositionNumber = <span class="number">4</span></span><br><span class="line"><span class="keyword">let</span> rivalPosition = <span class="type">Position</span>(rawValue: rivalPositionNumber)</span><br><span class="line"><span class="built_in">print</span>(rivalPosition == .fourth) <span class="comment">// prints "true"</span></span><br></pre></td></tr></table></figure><p>Since there is no guarantee that a raw value has a corresponding case, any attempt to create an enum from a raw value will return an optional. To be safe, use <code>if let</code> to create enums from raw values.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> randomNumber = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// safely create enums from raw values</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> newPosition = <span class="type">Position</span>(rawValue: randomNumber) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"created \(newPosition) from raw value"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"cannot create position from raw value"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Implicit-Raw-Values"><a href="#Implicit-Raw-Values" class="headerlink" title="Implicit Raw Values"></a>Implicit Raw Values</h2><p>In certain situations, the Swift compiler can infer raw values for enum cases.</p><p>If an enum uses raw string values, then each case is implicitly assigned a raw string value equal to the case’s name.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AudioRate</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> slow, normal, fast, custom</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">AudioRate</span>.slow.rawValue) <span class="comment">// prints "slow"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">AudioRate</span>.custom.rawValue) <span class="comment">// prints "custom"</span></span><br></pre></td></tr></table></figure><p>If an enum uses raw integer values, then the compiler assigns zero to the first case, and increases the raw value for subsequent cases by one.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Endurance</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> worst, abysmal, poor, medium, strong</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Endurance</span>.poor.rawValue) <span class="comment">// prints "2"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Endurance</span>.strong.rawValue) <span class="comment">// prints "4"</span></span><br></pre></td></tr></table></figure><p>It is also possible to define an enum with implicitly and explicitly defined raw values; all implicitly defined raw integer values will be one greater than the previous raw integer value. If no previous raw integer value exists, then the compiler will assign zero to the enum case.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SkewedEndurance</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> worst, abysmal = <span class="number">10</span>, poor, medium, strong = <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">SkewedEndurance</span>.worst.rawValue) <span class="comment">// prints "0"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">SkewedEndurance</span>.poor.rawValue) <span class="comment">// prints "11"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">SkewedEndurance</span>.medium.rawValue) <span class="comment">// prints "12"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">SkewedEndurance</span>.strong.rawValue) <span class="comment">// prints "30"</span></span><br></pre></td></tr></table></figure><p>You can mix and match implicit and explicit raw string values too:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Axis</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> x</span><br><span class="line">    <span class="keyword">case</span> y</span><br><span class="line">    <span class="keyword">case</span> z = <span class="string">"zed"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Axis</span>.y.rawValue) <span class="comment">// prints "y"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Axis</span>.z.rawValue) <span class="comment">// prints "zed"</span></span><br></pre></td></tr></table></figure><h2 id="Associated-values"><a href="#Associated-values" class="headerlink" title="Associated values"></a>Associated values</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: Associated values are defined alongside enum cases. Associated values are not required; some enum cases may have an associated value while others do not. In the example below, `LibraryFee` has three cases with associated values and a case without an associated value.</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">LibraryFee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> overdueBook(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> lostBook(<span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">case</span> lostLibraryCard(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> annualDues</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fee = <span class="type">LibraryFee</span>.overdueBook(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//: It can be very helpful to name associated values so that their intent is easily understood.</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DescriptiveLibraryFee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> overdueBook(days: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> lostBook(price: <span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">case</span> lostLibraryCard(timesLost: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> annualDues</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> weekLateFee = <span class="type">DescriptiveLibraryFee</span>.overdueBook(days: <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//: Associated values are actually tuples. Therefore, an associated value can contain mutliple values.</span></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ImageFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> sepia</span><br><span class="line">    <span class="keyword">case</span> verticalGradient(from: <span class="type">UIColor</span>, to: <span class="type">UIColor</span>)</span><br><span class="line">    <span class="keyword">case</span> horizontalGradient(from: <span class="type">UIColor</span>, to: <span class="type">UIColor</span>)</span><br><span class="line">    <span class="keyword">case</span> sketch(penThickness: <span class="type">Double?</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fadeToBlack = <span class="type">ImageFilter</span>.horizontalGradient(from: .gray, to: .black)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: - Callout(Watch Out!):</span></span><br><span class="line"><span class="comment">//: If all enum cases have an associated value of the same type, and it is static, then you might consider using a raw value instead.</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AudioRateAssociated</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> slow(value: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> normal(value: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> fast(value: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> custom(value: <span class="type">Int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the associated values for `AudioRateAssociated` should be raw values</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AudioRateRaw</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> slow, normal, fast, custom</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Extract-the-associated-value-with-switch"><a href="#Extract-the-associated-value-with-switch" class="headerlink" title="Extract the associated value with switch"></a>Extract the associated value with switch</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ImageFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> sepia</span><br><span class="line">    <span class="keyword">case</span> verticalGradient(from: <span class="type">UIColor</span>, to: <span class="type">UIColor</span>)</span><br><span class="line">    <span class="keyword">case</span> horizontalGradient(from: <span class="type">UIColor</span>, to: <span class="type">UIColor</span>)</span><br><span class="line">    <span class="keyword">case</span> sketch(penThickness: <span class="type">Double?</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filter1 = <span class="type">ImageFilter</span>.horizontalGradient(from: .gray, to: .black)</span><br><span class="line"><span class="keyword">let</span> filter2 = <span class="type">ImageFilter</span>.horizontalGradient(from: .white, to: .black)</span><br></pre></td></tr></table></figure><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: Most often, associated values are extracted in a switch block. For cases that have an associated value, the `let` keyword followed by a name will extract each  value from an associated value.</span></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> .sepia:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"sepia"</span>)</span><br><span class="line"><span class="keyword">case</span> .verticalGradient(<span class="keyword">let</span> color1, <span class="keyword">let</span> color2):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"vertical gradient with \(color1) and \(color2)"</span>)</span><br><span class="line"><span class="keyword">case</span> .horizontalGradient(<span class="keyword">let</span> color1, <span class="keyword">let</span> color2):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"horizontal gradient with \(color1) and \(color2)"</span>)</span><br><span class="line"><span class="keyword">case</span> .sketch(<span class="keyword">let</span> penThickness):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> thickness = penThickness &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"sketch using \(thickness) thickness"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"sketch using default thickness"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: Associated values can also be extracted as variables using the `var` keyword. Values extracted as variables are only available in the case where they are declared.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> .horizontalGradient(<span class="keyword">var</span> color1, <span class="keyword">let</span> color2):</span><br><span class="line">    color1 = .blue</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"horizontal gradient with \(color1) and \(color2)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//: To extract all values from an associated value as constants, use the `case let` syntax.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .horizontalGradient(color1, color2):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"horizontal gradient with \(color1) and \(color2)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//: To extract all values from an associated value as variables, use the `case var` syntax.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">var</span> .horizontalGradient(color1, color2):</span><br><span class="line">    color1 = .red</span><br><span class="line">    color2 = .blue</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"horizontal gradient with \(color1) and \(color2)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Watch-out"><a href="#Watch-out" class="headerlink" title="Watch out!"></a>Watch out!</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: - Callout(Watch Out!):</span></span><br><span class="line"><span class="comment">//: Remember, switch statements must be exhaustive or Xcode will complain.</span></span><br><span class="line"><span class="comment">// uncomment the switch statement below to see Xcode complain about a non-exhaustive switch statement.</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> switch filter1 &#123;</span></span><br><span class="line"><span class="comment"> case .horizontalGradient(var color1, let color2):</span></span><br><span class="line"><span class="comment"> color1 = .blue</span></span><br><span class="line"><span class="comment"> print("horizontal gradient with \(color1) and \(color2)")</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//: If it is possible to treat two cases exactly the same, even when they have associated values, then you can combine cases. Note, the associated values must be the same type.</span></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> .verticalGradient(<span class="keyword">let</span> color1, <span class="keyword">let</span> color2), .horizontalGradient(<span class="keyword">let</span> color1, <span class="keyword">let</span> color2):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a gradient from \(color1) to \(color2)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: - Callout(Watch Out!):</span></span><br><span class="line"><span class="comment">//: If two cases are specified with a single case statement, then the tuple element names must match.</span></span><br><span class="line"> <span class="keyword">switch</span> filter1 &#123;</span><br><span class="line">    <span class="comment">// uncomment the case statement below to see Xcode complain that `color2` and `color3` must be used in every pattern (i.e. the tuple element names don't match)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    case .verticalGradient(let color1, let color3), .horizontalGradient(let color1, let color2):</span></span><br><span class="line"><span class="comment">        print("a gradient from \(color1) to \(color2)")</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: If associated values are not needed for computation, then they can be ignored. The example below ignores the associated value for the horizontal gradient.</span></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> .horizontalGradient:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the filter is a horizontal gradient!"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: It is also possible to partially ignore values in an associated value, while extracting others.</span></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> .horizontalGradient(<span class="keyword">let</span> color1, <span class="number">_</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the horizontal gradient's first color is \(color1)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="“where”-keyword"><a href="#“where”-keyword" class="headerlink" title="“where” keyword"></a>“where” keyword</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: Associated values may also be extracted based on conditions specified using the `where` keyword. If all conditions are held, then the values are extracted and the case statement is executed.</span></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> .horizontalGradient(<span class="keyword">let</span> color1, <span class="number">_</span>) <span class="keyword">where</span> color1 == .white:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the horizontal gradient's first color is white"</span>)</span><br><span class="line"><span class="keyword">case</span> .horizontalGradient(<span class="number">_</span>, <span class="keyword">let</span> color2) <span class="keyword">where</span> color2 == .black:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the horizontal gradient's second color is black"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Computed-properties"><a href="#Computed-properties" class="headerlink" title="Computed properties"></a>Computed properties</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: Associated values can be extracted using computed properties. By using a computed property, you may avoid duplicate switch statements.</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ImageFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> colors: (from: <span class="type">UIColor</span>, to: <span class="type">UIColor</span>)? &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .verticalGradient(<span class="keyword">let</span> from, <span class="keyword">let</span> to),</span><br><span class="line">             .horizontalGradient(<span class="keyword">let</span> from, <span class="keyword">let</span> to):</span><br><span class="line">            <span class="keyword">return</span> (from, to)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> penThickness: <span class="type">Double?</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .sketch(<span class="keyword">let</span> penThickness):</span><br><span class="line">            <span class="keyword">return</span> penThickness</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filter3 = <span class="type">ImageFilter</span>.sketch(penThickness: <span class="number">4.0</span>)</span><br><span class="line"></span><br><span class="line">filter1.colors</span><br><span class="line">filter1.colors?.from</span><br><span class="line">filter1.colors?.to</span><br><span class="line">filter3.colors <span class="comment">// nil </span></span><br><span class="line"></span><br><span class="line">filter1.penThickness <span class="comment">// nil</span></span><br><span class="line">filter3.penThickness <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="Extract-with-if"><a href="#Extract-with-if" class="headerlink" title="Extract with if"></a>Extract with if</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ImageFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> sepia</span><br><span class="line">    <span class="keyword">case</span> verticalGradient(from: <span class="type">UIColor</span>, to: <span class="type">UIColor</span>)</span><br><span class="line">    <span class="keyword">case</span> horizontalGradient(from: <span class="type">UIColor</span>, to: <span class="type">UIColor</span>)</span><br><span class="line">    <span class="keyword">case</span> sketch(penThickness: <span class="type">Double?</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filter1 = <span class="type">ImageFilter</span>.horizontalGradient(from: .gray, to: .black)</span><br><span class="line"><span class="keyword">let</span> filter2 = <span class="type">ImageFilter</span>.horizontalGradient(from: .white, to: .black)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: `if case` works alongside the equals operator (=) to check and extract an associated value from an enum. While the syntax may look strange, the equals operator still behaves in an intuitive way; that is, the associated value on the left-hand side (containing `color1` and `color2`) is set equal to the associated value for the enum on the right-hand side (`filter1`).</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="type">ImageFilter</span>.horizontalGradient(<span class="keyword">let</span> color1, <span class="keyword">var</span> color2) = filter1 &#123;</span><br><span class="line">    color2 = .red</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"horizontal gradient with \(color1) and \(color2)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: To extract all values as constants use `if case let`.</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="keyword">let</span> <span class="type">ImageFilter</span>.horizontalGradient(color1, color2) = filter1 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"horizontal gradient with \(color1) and \(color2)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: Complex conditionals can be formed using `if case` and conditional statements separated by commas. If the conditional statements are held true, then the values are extracted and usable from within the `if case` block.</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="keyword">let</span> <span class="type">ImageFilter</span>.horizontalGradient(<span class="number">_</span>, color2) = filter1, color2 == .black &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the horizontal gradient's second color is \(color2)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: A single associated value can also be extracted as a computed property. By using a computed property, you may avoid duplicate `if case` statements.</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ImageFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hasHeavyPenThickness: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">case</span> <span class="keyword">let</span> <span class="type">ImageFilter</span>.sketch(penThickness) = <span class="keyword">self</span>, <span class="keyword">let</span> thickness = penThickness, thickness &gt; <span class="number">5.0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter1.hasHeavyPenThickness</span><br></pre></td></tr></table></figure><h2 id="Enums-with-Enums"><a href="#Enums-with-Enums" class="headerlink" title="Enums with Enums"></a>Enums with Enums</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ShirtSize</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> extraSmall</span><br><span class="line">    <span class="keyword">case</span> small</span><br><span class="line">    <span class="keyword">case</span> medium</span><br><span class="line">    <span class="keyword">case</span> large</span><br><span class="line">    <span class="keyword">case</span> extraLarge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Search</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> forShirts(sizes: [<span class="type">ShirtSize</span>])</span><br><span class="line">    <span class="keyword">case</span> forName(name: <span class="type">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> searchForBigShirts = <span class="type">Search</span>.forShirts(sizes: [.large, .extraLarge])</span><br><span class="line"><span class="keyword">let</span> searchForHenleys = <span class="type">Search</span>.forName(name: <span class="string">"henley"</span>)</span><br></pre></td></tr></table></figure><h1 id="Guard"><a href="#Guard" class="headerlink" title="Guard"></a>Guard</h1><h2 id="Guard-statement"><a href="#Guard-statement" class="headerlink" title="Guard statement"></a>Guard statement</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">takeOff</span><span class="params">(passengersSeated: Bool, crewReady: Bool, runwayClear: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> passengersSeated <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">guard</span> crewReady <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">guard</span> runwayClear <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"✈️ Lifts off runway"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the runway isn't clear, the airplane cannot take off</span></span><br><span class="line">takeOff(passengersSeated: <span class="literal">true</span>, crewReady: <span class="literal">true</span>, runwayClear: <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The same</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">takeOffCombineGuards</span><span class="params">(passengersSeated: Bool, crewReady: Bool, runwayClear: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> passengersSeated, crewReady, runwayClear <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"✈️ Lifts off runway"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add sth</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">takeOffGuardWithCode</span><span class="params">(passengersSeated: Bool, crewReady: Bool, runwayClear: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> passengersSeated, crewReady, runwayClear <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"tell passengers there will be a delay"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"✈️ Lifts off runway"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Guard-versus-If"><a href="#Guard-versus-If" class="headerlink" title="Guard versus If"></a>Guard versus If</h2><p>The <code>guard</code> and <code>if</code> keywords can serve similar purposes in Swift, but they should not be used interchangeably. Instead, use the following guidelines to decide when to use guard versus if:</p><ul><li><code>guard</code> should be used to check for preconditions and early exit</li><li><code>if</code> should be used to change execution path based on some condition(s)</li></ul><blockquote><p>Guard: whether the credit card is validate and whether the order is scheduled</p><p>If: wether the user enter a discount code</p></blockquote><h2 id="Guard-with-Optionals"><a href="#Guard-with-Optionals" class="headerlink" title="Guard with Optionals"></a>Guard with Optionals</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">takeOffGuardVar</span><span class="params">(passengersSeated: Bool, crewReady: Bool, runwayClear: Bool, crewLeader: String?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> passengersSeated, crewReady, runwayClear <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">var</span> crewLeaderVariable = crewLeader <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// modify the crew leader</span></span><br><span class="line">    crewLeaderVariable = crewLeaderVariable.uppercased()</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(crewLeaderVariable): \"Takeoff checks complete!\""</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"✈️ Lifts off runway"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">takeOffGuardVar(passengersSeated: <span class="literal">true</span>, crewReady: <span class="literal">true</span>, runwayClear: <span class="literal">true</span>, crewLeader: <span class="string">"👩🏻‍✈️ Natalie"</span>)</span><br></pre></td></tr></table></figure><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> grades: [<span class="type">Double</span>]</span><br><span class="line">    <span class="keyword">var</span> average: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> grades.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; <span class="keyword">return</span> $<span class="number">0</span> + $<span class="number">1</span> &#125; / <span class="type">Double</span>(grades.<span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">passStudent</span><span class="params">(<span class="number">_</span> student: Student?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> student = student, student.average &gt;= <span class="number">75</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(student.name) passed!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">passStudent(<span class="type">Student</span>(name: <span class="string">"Sam"</span>, grades: [<span class="number">70</span>, <span class="number">90</span>, <span class="number">84</span>, <span class="number">62</span>, <span class="number">88</span>]))</span><br></pre></td></tr></table></figure><h4 id="The-reduce-funtion"><a href="#The-reduce-funtion" class="headerlink" title="The reduce funtion"></a>The reduce funtion</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> numberSum = numbers.<span class="built_in">reduce</span>(<span class="number">0</span>, &#123; x, y <span class="keyword">in</span></span><br><span class="line">x + y</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// numberSum == 10</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.apple.com/documentation/swift/array/2298686-reduce" target="_blank" rel="noopener">One website.</a>.</p><p> <a href="https://stackoverflow.com/questions/56034602/what-does-the-reduce-function-do-in-swift" target="_blank" rel="noopener">Another website</a>.</p><h4 id="Swift-in-keyword"><a href="#Swift-in-keyword" class="headerlink" title="Swift in keyword."></a>Swift <code>in</code> keyword.</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; /parameters and type/ <span class="keyword">in</span> /function body/ &#125;</span><br></pre></td></tr></table></figure><h4 id="0-and-1"><a href="#0-and-1" class="headerlink" title="$0 and $1"></a><code>$0</code> and <code>$1</code></h4><p><code>$0</code> is the first parameter passed into the closure. <code>$1</code> is the second parameter, etc. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">add = &#123; arg1, arg2 <span class="keyword">in</span></span><br><span class="line">arg1 + arg2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add = &#123;</span><br><span class="line">$<span class="number">0</span> + $<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">20</span>, <span class="number">20</span>) <span class="comment">// 40</span></span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> grades: [<span class="type">Double</span>]</span><br><span class="line">    <span class="keyword">var</span> topPassingGrade: <span class="type">Double?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> passingGrades = grades.<span class="built_in">filter</span> &#123; <span class="keyword">return</span> $<span class="number">0</span> &gt;= <span class="number">75</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> passingGrades.<span class="built_in">max</span>() <span class="comment">// It can be "nil".</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">notifyUser</span><span class="params">(<span class="number">_</span> student: Student)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="number">_</span> = student.topPassingGrade <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"you've passed!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">notifyUser(<span class="type">Student</span>(name: <span class="string">"Ulysses"</span>, grades: [<span class="number">70</span>, <span class="number">60</span>, <span class="number">74</span>, <span class="number">76</span>, <span class="number">63</span>]))</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.apple.com/documentation/swift/sequence/3018365-filter" target="_blank" rel="noopener">The filter function</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">let</span> cast = [<span class="string">"Vivien"</span>, <span class="string">"Marlon"</span>, <span class="string">"Kim"</span>, <span class="string">"Karl"</span>]</span><br><span class="line">&gt; <span class="keyword">let</span> shortNames = cast.<span class="built_in">filter</span> &#123; $<span class="number">0</span>.<span class="built_in">count</span> &lt; <span class="number">5</span> &#125;</span><br><span class="line">&gt; <span class="built_in">print</span>(shortNames)</span><br><span class="line">&gt; <span class="comment">// Prints "["Kim", "Karl"]"</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="Guard-let-Versus-If-let"><a href="#Guard-let-Versus-If-let" class="headerlink" title="Guard let Versus If let"></a>Guard let Versus If let</h2><ul><li>When optional values are used with <code>guard let</code> (or <code>guard var</code>) they are bound as non-optional values and available in the rest of the scope where the guard statement appears.</li><li>This differs from how optionals work with <code>if let</code>. With <code>if let</code>, optionals are bound as non-optional constants, and they are only available in the body of the <code>if let</code> statement.</li></ul><blockquote><p>After the ‘guard let’ judgement, the optional is transformed to a variable or constant.</p></blockquote><h1 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h1><p>The errors referred to by “error handling” are not like warnings or issues raised by Xcode and the compiler. They are also not software bugs. Instead, these errors are either intentionally caused or generated in situations where correct behavior cannot be fully guaranteed.</p><ul><li><p>a compile-time error (or warning) can be generated by the compiler, before code is run</p></li><li><p>a run-time error (sometimes called a logic error) is caused by code that is syntactically correct, but logically incorrect or causes a crash when code is running</p></li></ul><p>These kinds of errors can be fixed.</p><p>The errors in “error handling” can happen even when code is syntactically correct.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// When a catch block is executed, it automatically defines a constant called "error". </span></span><br><span class="line"><span class="comment">// This constant is of type `Error` and it has a localized description property with helpful information about the cause of the problem.</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"swift"</span>, withExtension: <span class="string">"png"</span>) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">try</span> <span class="type">String</span>(contentsOf: fileURL, encoding: .utf8)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(error) <span class="comment">// notice, error is implicitly defined</span></span><br><span class="line">        <span class="built_in">print</span>(error.localizedDescription)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: For readability, the "error" constant can be explicitly defined using `catch let error`.</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"swift"</span>, withExtension: <span class="string">"png"</span>) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">try</span> <span class="type">String</span>(contentsOf: fileURL, encoding: .utf8)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">        <span class="built_in">print</span>(error) <span class="comment">// error is defined and available for use in the catch block</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Types-of-error"><a href="#Types-of-error" class="headerlink" title="Types of error"></a>Types of error</h2><p>We can use <code>do catch</code> to handle different type of the error. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"swift"</span>, withExtension: <span class="string">"png"</span>) &#123;</span><br><span class="line">    <span class="comment">// create a url that does not exist</span></span><br><span class="line">    <span class="keyword">let</span> erroneousURL = fileURL.appendingPathComponent(<span class="string">"unknown-path"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">try</span> <span class="type">String</span>(contentsOf: erroneousURL, encoding: .utf8)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="type">CocoaError</span>.fileReadInapplicableStringEncoding &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"cannot read file into a string"</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="type">CocoaError</span>.fileReadUnknown &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"file unknown, cannot read"</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\(error)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>How can we get the error type?</p><p>Use the <a href="https://osstatus.com/" target="_blank" rel="noopener">website</a> to search the error code.</p></blockquote><h3 id="Catch-is"><a href="#Catch-is" class="headerlink" title="Catch is"></a>Catch is</h3><p>Alternatively, errors can be caught by type using the <code>catch is</code> syntax. As seen before, all errors implement the <code>Error</code> protocol. Additionally, all errors extend from <code>NSError</code> which provides more information for troubleshooting like a string property called “domain” that classifies the origin of an error. An error’s domain may also suggest if the error can be casted into a more specific type like <code>CocoaError</code>, <code>POSIXError</code>, or <code>MachError</code>. See <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ErrorHandlingCocoa/ErrorObjectsDomains/ErrorObjectsDomains.html" target="_blank" rel="noopener">Apple’s documentation on error objects, domains, and codes</a> to learn more.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"swift"</span>, withExtension: <span class="string">"png"</span>) &#123;</span><br><span class="line">    <span class="comment">// create a url that does not exist</span></span><br><span class="line">    <span class="keyword">let</span> erroneousURL = fileURL.appendingPathComponent(<span class="string">"unknown-path"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">try</span> <span class="type">String</span>(contentsOf: erroneousURL, encoding: .utf8)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">is</span> <span class="type">CocoaError</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"this error is a CocoaError"</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\(error)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Catch-let-…-as-…"><a href="#Catch-let-…-as-…" class="headerlink" title="Catch let … as …"></a>Catch let … as …</h3><p>To catch and cast an error by type, combine <code>catch let error</code> with a type cast. In the example below, an error is casted into <code>CocoaError</code> which exposes common error codes generated by core Apple frameworks.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"swift"</span>, withExtension: <span class="string">"png"</span>) &#123;</span><br><span class="line">    <span class="comment">// create a url that does not exist</span></span><br><span class="line">    <span class="keyword">let</span> erroneousURL = fileURL.appendingPathComponent(<span class="string">"unknown-path"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">try</span> <span class="type">String</span>(contentsOf: erroneousURL, encoding: .utf8)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">CocoaError</span> &#123; <span class="comment">/* handle if error can be casted into a `CocoaError` */</span></span><br><span class="line">        <span class="keyword">switch</span> error.errorCode &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">CocoaError</span>.fileReadInapplicableStringEncoding.rawValue:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"cannot read file into a string"</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">CocoaError</span>.fileReadUnknown.rawValue:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"file unknown, cannot read"</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"cocoa error with code: \(error.errorCode)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\(error)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Propogate-error"><a href="#Propogate-error" class="headerlink" title="Propogate error"></a>Propogate error</h2><p>To propagate all possible errors to the calling site, start by removing the <code>do</code>-<code>catch</code> statement and adding <code>throws</code> to the signature of the function which calls the error-prone code.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add "trows" to the function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFileIntoStringWithThrows</span><span class="params">(fileName: String, fileExtension: String)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: fileName, withExtension: fileExtension) &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">try</span> <span class="type">String</span>(contentsOf: fileURL, encoding: .utf8)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now, any code that calls `readFileIntoStringWithThrows` is responsible for handling any errors it generates.</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> readFileIntoStringWithThrows(fileName: <span class="string">"swift"</span>, fileExtension: <span class="string">"png"</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the error was propagated to me, and I handled it!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sometimes it is appropriate to handle some errors immediately while propagating others for further processing. To propagate a specific error, use the <code>throw</code> keyword.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFileIntoStringHandleAndThrow</span><span class="params">(fileName: String, fileExtension: String)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: fileName, withExtension: fileExtension) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> content = <span class="keyword">try</span> <span class="type">String</span>(contentsOf: fileURL, encoding: .utf8)</span><br><span class="line">            <span class="built_in">print</span>(content)</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="type">CocoaError</span>.fileReadUnknown &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"file unknown, cannot read"</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">            <span class="keyword">throw</span> error <span class="comment">/* throw (propagate) this error to the call site */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> readFileIntoStringHandleAndThrow(fileName: <span class="string">"swift"</span>, fileExtension: <span class="string">"png"</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"handling error: \(error.localizedDescription)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="try-and-try"><a href="#try-and-try" class="headerlink" title="try? and try!"></a><code>try?</code> and <code>try!</code></h2><p>Try comes in two other forms: <code>try?</code> and <code>try!</code>. <code>try?</code> executes error-prone code, and if any error is generated, then it is converted into an optional where the underlying value has the same type as the error-prone function or intializer’s return type. This can simplify code, but the ability to analyze errors is lost.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printFileContentsTry</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"swift"</span>, withExtension: <span class="string">"png"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">try</span>? <span class="type">String</span>(contentsOf: fileURL, encoding: .utf8)</span><br><span class="line">        <span class="built_in">print</span>(content ?? <span class="string">"content is nil"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// preferably, combine `if let` with `try?`; it's easier to read</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> content = <span class="keyword">try</span>? <span class="type">String</span>(contentsOf: fileURL, encoding: .utf8) &#123;</span><br><span class="line">            <span class="built_in">print</span>(content)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"could not read contents of file into string"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>try!</code> executes error-prone code while foregoing any opportunity to safely handle an error. If an error-prone function is called using <code>try!</code> and it fails, then the entire app or playground crashes.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// try! should only be used if there is no risk of error; generally, this is not advised</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"swift"</span>, withExtension: <span class="string">"txt"</span>) &#123;</span><br><span class="line">     <span class="keyword">let</span> content = <span class="keyword">try</span>! <span class="type">String</span>(contentsOf: fileURL, encoding: .utf8)</span><br><span class="line">     <span class="built_in">print</span>(content)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Error-handle-summary"><a href="#Error-handle-summary" class="headerlink" title="Error handle summary"></a>Error handle summary</h2><p>There are four ways to handle the error.</p><ol><li>Handle Error with <code>Do</code>-<code>Catch</code></li><li>Convert Error to Optional with <code>try?</code></li><li>Ignore Error with <code>try!</code></li><li>Propagate Error</li></ol><h2 id="Create-custom-error"><a href="#Create-custom-error" class="headerlink" title="Create custom error"></a>Create custom error</h2><p>To create a custom error, define a type that inherits from the <code>Error</code> protocol. Often, enums are used for this purpose.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SimplePurchaseError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> invalidAddress</span><br><span class="line">    <span class="keyword">case</span> cardRejected</span><br><span class="line">    <span class="keyword">case</span> cartWeightLimitExceeded</span><br><span class="line">    <span class="keyword">case</span> insufficientStock</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeBadPurchase</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="type">SimplePurchaseError</span>.cardRejected <span class="comment">// throw a custom error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> makeBadPurchase()</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error) <span class="comment">// Result: cardRejected</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When using an enum to define a custom error, use associated values to add helpful debugging information.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ComplexPurchaseError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> invalidAddress</span><br><span class="line">    <span class="keyword">case</span> cardRejected</span><br><span class="line">    <span class="keyword">case</span> cartWeightLimitExceeded(<span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">case</span> insufficientStock(<span class="type">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">attemptPurchase</span><span class="params">(withWeight weight: Double)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> weight &gt; <span class="number">100</span> &#123;</span><br><span class="line">        <span class="comment">// throw a custom error with an associated value</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="type">ComplexPurchaseError</span>.cartWeightLimitExceeded(-<span class="number">1</span> * (<span class="number">100</span> - weight))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"purchase succeeded!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> attemptPurchase(withWeight: <span class="number">125.6</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">ComplexPurchaseError</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> error &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .cartWeightLimitExceeded(weight): <span class="comment">/* extract the associated value */</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"purchase failed. weight exceeds limit by: \(weight)"</span>)</span><br><span class="line">      <span class="comment">// Result: purchase failed. weight exceeds limit by: 25.599</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(error)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Describe-custom-error"><a href="#Describe-custom-error" class="headerlink" title="Describe custom error"></a>Describe custom error</h2><p>You can add extra debugging information to a custom error by also implementing the <code>LocalizedError</code> and <code>CustomNSError</code> protocols.</p><h3 id="LocalizedError"><a href="#LocalizedError" class="headerlink" title="LocalizedError"></a><code>LocalizedError</code></h3><p><code>LocalizedError</code> includes properties which should be used to provide localized information about an error.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Describes an error that provides localized messages describing why</span></span><br><span class="line"><span class="comment">/// an error occurred and provides more information about the error.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">LocalizedError</span> : <span class="title">Error</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A localized message describing what error occurred.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> errorDescription: <span class="type">String?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A localized message describing the reason for the failure.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> failureReason: <span class="type">String?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A localized message describing how one might recover from the failure.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> recoverySuggestion: <span class="type">String?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A localized message providing "help" text if the user requests help.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> helpAnchor: <span class="type">String?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The following example describes the <code>failureReason</code> for a <code>PurchaseError</code>. For brevity, the other properties have been excluded.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PurchaseError</span>: <span class="title">LocalizedError</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> failureReason: <span class="type">String?</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .invalidAddress:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NSLocalizedString</span>(<span class="string">"address contained invalid or empty fields"</span>, comment: <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">case</span> .cardRejected:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NSLocalizedString</span>(<span class="string">"card number or csv code is invalid"</span>, comment: <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .cartWeightLimitExceeded(amount):</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NSLocalizedString</span>(<span class="string">"weight limit was by exceeded \(amount)"</span>, comment: <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">case</span> .insufficientStock:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NSLocalizedString</span>(<span class="string">"insufficient stock"</span>, comment: <span class="string">""</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> makeBadPurchase() <span class="comment">// a fictitious function that might throw an error</span></span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">LocalizedError</span> &#123; <span class="comment">// cast error to `LocalizedError`</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> description = error.errorDescription &#123; <span class="built_in">print</span>(description) &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> failureReason = error.failureReason &#123; <span class="built_in">print</span>(failureReason) &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> recoverySuggestion = error.recoverySuggestion &#123; <span class="built_in">print</span>(recoverySuggestion) &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> helpAnchor = error.helpAnchor &#123; <span class="built_in">print</span>(helpAnchor) &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note</strong>: Comment is left blank for each <code>NSLocalizedString</code>. Again, this is for brevity. In practice, you should use comments that provide sufficient context about a localized string so that translators can produce more accurate translations. Failure to do so may result in vastly different translations.</p></blockquote><h3 id="CustomNSError"><a href="#CustomNSError" class="headerlink" title="CustomNSError"></a><code>CustomNSError</code></h3><p>Recall, all errors extend from <code>NSError</code>. By default, the properties of <code>NSError</code>, like domain, have inferred values. To provide more accurate values for <code>NSError</code> properties, implement <code>CustomNSError</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Describes an error type that specifically provides a domain, code,</span></span><br><span class="line"><span class="comment">/// and user-info dictionary.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">CustomNSError</span> : <span class="title">Error</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The domain of the error.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> errorDomain: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The error code within the given domain.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> errorCode: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The user-info dictionary.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> errorUserInfo: [<span class="type">String</span> : <span class="type">Any</span>] &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If an error implements <code>CustomNSError</code>, then when casted to an <code>NSError</code>, it will contain the values provided by the protocol implementation.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PurchaseError</span>: <span class="title">CustomNSError</span> </span>&#123;</span><br><span class="line">    <span class="comment">// domain and error code...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The user-info dictionary.</span></span><br><span class="line">    <span class="keyword">var</span> errorUserInfo: [<span class="type">String</span>: <span class="type">Any</span>] &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .cartWeightLimitExceeded(amount):</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">"weightLimit"</span>: <span class="number">100.0</span>,</span><br><span class="line">                <span class="string">"weightExceeded"</span>: amount</span><br><span class="line">            ]</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .insufficientStock(items):</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">"itemsOutOfStock"</span>: items</span><br><span class="line">            ]</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> [:]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> attemptPurchase(withWeight: <span class="number">125.6</span>) <span class="comment">// a fictitious function that might throw an error</span></span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123; <span class="comment">// cast error to `NSError`</span></span><br><span class="line">    <span class="built_in">print</span>(error.domain)</span><br><span class="line">    <span class="built_in">print</span>(error.code)</span><br><span class="line">    <span class="built_in">print</span>(error.userInfo) <span class="comment">// prints "["weightExceeded": 25.599999999999994, "weightLimit": 100.0]"</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a><code>defer</code></h2><p>The last topic related to errors is the <code>defer</code> keyword. While uncommon, you may find it coupled with error handling because it can be used to execute a block of code before an error-generating scope is exited.</p><p>Typically, a defer block is provided near the top of a function. It cannot contain any code that changes the flow of control, like a break or return statement, or throwing an error. Also, multiple defer blocks may be defined, but they are executed in reverse order of when they appear.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">attemptPurchaseWithMultipleDefers</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// before this function exits, execute this defer block</span></span><br><span class="line">    <span class="keyword">defer</span> &#123; <span class="built_in">print</span>(<span class="string">"then, close the secure purchase session"</span>) &#125;</span><br><span class="line">    <span class="keyword">defer</span> &#123; <span class="built_in">print</span>(<span class="string">"first, clear order"</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> processOrder()</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\(error)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attemptPurchaseWithMultipleDefers()</span><br><span class="line"></span><br><span class="line"><span class="comment">// before `attemptPurchaseWithMultipleDefers` exits, it prints…</span></span><br><span class="line"><span class="comment">// "first, clear order"</span></span><br><span class="line"><span class="comment">// "then, close the secure purchase session"</span></span><br></pre></td></tr></table></figure><h1 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h1><h2 id="Array-are-Generic"><a href="#Array-are-Generic" class="headerlink" title="Array are Generic"></a>Array are Generic</h2><p>Upon first glance, many do not realize that Swift arrays use generics. Specifically, the type that a Swift array stores is generic — it can be anything. When declaring an array using its more longhand syntax, this becomes apparent.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intArray = <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> stringArray: <span class="type">Array</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>]</span><br></pre></td></tr></table></figure><p>The type specified in the brackets (ex. “<string>“) is called a “concrete type”. When specified, the concrete type takes the place of a generic type. Because Swift arrays use generics, they behave the same, regardless of the concrete type.</string></p><h2 id="Generic-Function"><a href="#Generic-Function" class="headerlink" title="Generic Function"></a>Generic Function</h2><p>Generics can be applied to functions and types. To write a generic function, specify a generic type after the function name using the bracket notation (ex. <code>func myFunction&lt;Type&gt;</code>). Then, for any arguments that should be generic, use the generic type instead of a concrete type. Below, the generic type is called <code>Type</code>; <code>Type</code> can represent any type.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printTypeWithNamedGenericType</span>&lt;Type&gt;<span class="params">(<span class="number">_</span> argument: <span class="keyword">Type</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(type(of: argument))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printTypeWithNamedGenericType(<span class="number">4</span>) <span class="comment">// Int </span></span><br><span class="line">printTypeWithNamedGenericType(<span class="string">"udacity"</span>) <span class="comment">// String</span></span><br></pre></td></tr></table></figure><blockquote><p>Now, the type is for any type. We can’t implement some functions for this value.</p><p>For example, we can’t use “Plus” function, so we should specify a type for it.</p></blockquote><p>A generic type can be bound or constrained such that it can only represent concrete types which adhere to some protocol or inherit from a certain class. In the example below, the generic type is constrained such that it can only represent types which implement the <code>UnsignedInteger</code> protocol — essentially, non-negative integers.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printUIntTypes</span>&lt;Type: UnsignedInteger&gt;<span class="params">(<span class="number">_</span> argument: <span class="keyword">Type</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(type(of: argument))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> unsignedInt: <span class="type">UInt</span> = <span class="number">4</span></span><br><span class="line"><span class="keyword">let</span> unsignedInt8: <span class="type">UInt8</span> = <span class="number">4</span></span><br><span class="line"><span class="keyword">let</span> unsignedInt16: <span class="type">UInt16</span> = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">printUIntTypes(unsignedInt)</span><br><span class="line">printUIntTypes(unsignedInt8)</span><br><span class="line">printUIntTypes(unsignedInt16)</span><br><span class="line"><span class="comment">// When a generic type is constrained, any concrete types that do not adhere to the constraint will cause Xcode to complain.</span></span><br><span class="line"><span class="comment">//printUIntTypes(4) /* `Int` is not unsigned because it can store negative values */</span></span><br><span class="line"><span class="comment">//printUIntTypes(-4)</span></span><br><span class="line"><span class="comment">//printUIntTypes("abc")</span></span><br></pre></td></tr></table></figure><h2 id="Multiple-generic-function"><a href="#Multiple-generic-function" class="headerlink" title="Multiple generic function"></a>Multiple generic function</h2><p>Generic functions and types can specify multiple generic types, simply use a comma to separate them.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combineUInt</span>&lt;Type1: UnsignedInteger, Type2&gt;<span class="params">(<span class="number">_</span> int: Type1, withString string: Type2)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"\(int) \(string)"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> unsignedInt: <span class="type">UInt</span> = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(combineUInt(unsignedInt, withString: <span class="string">"zebras"</span>))</span><br></pre></td></tr></table></figure><h2 id="Generic-Type"><a href="#Generic-Type" class="headerlink" title="Generic Type"></a>Generic Type</h2><p>Generics can be applied to an object’s properties to create what is known as a generic type. Similar to generic functions, a generic type is created by specifying the object’s name followed by a generic type using the bracket notation (ex. <code>struct MyType&lt;Type&gt;</code>). Then, for any properties that should be generic, use the generic type instead of a concrete type.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TypeAnalyzer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value: <span class="type">T</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// represents the sub-structure of the generic type</span></span><br><span class="line">    <span class="keyword">var</span> mirror: <span class="type">Mirror</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Mirror</span>(reflecting: value)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// print information about the type</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">analyze</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Type: \(type(of: value))"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Value: \(value)"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> superClassMirror = mirror.superclassMirror &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Superclass: \(superClassMirror.subjectType)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="type">TypeAnalyzer</span>(value: <span class="number">2</span>)</span><br><span class="line">x.analyze()</span><br><span class="line"><span class="comment">// Type: Int</span></span><br><span class="line"><span class="comment">// Value: 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> view = <span class="type">TypeAnalyzer</span>&lt;<span class="type">UIView</span>&gt;(value: <span class="type">UIView</span>(frame: <span class="type">CGRect</span>.zero))</span><br><span class="line">view.analyze()</span><br><span class="line"><span class="comment">// Type: UIView</span></span><br><span class="line"><span class="comment">// Value: &lt;UIView: 0x7f82c0a0dfc0; frame = (0 0; 0 0); layer = &lt;CALayer: 0x6000035e6140&gt;&gt;</span></span><br><span class="line"><span class="comment">// Superclass: UIResponder</span></span><br></pre></td></tr></table></figure><p>Like generic functions, the generic type can be named and constained. In the example below, <code>ZooExhibit</code> is defined where its animals property is generic and constrained to any type that implements the <code>Animal</code> protocol.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> commonName: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> emoji: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Whale</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> commonName = <span class="string">"Whale"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> emoji = <span class="string">"🐳"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dolphin</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> commonName = <span class="string">"Dolphin"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> emoji = <span class="string">"🐬"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ZooExhibit</span>&lt;<span class="title">AnimalType</span>: <span class="title">Animal</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> animals: [<span class="type">AnimalType</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tourTheExhibit</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Welcome to the \(AnimalType.commonName) Exhibit \(AnimalType.emoji)!"</span>)</span><br><span class="line">        <span class="keyword">for</span> animal <span class="keyword">in</span> animals &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Say hello to \(animal.name) \(AnimalType.emoji)."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> exhibit1 = <span class="type">ZooExhibit</span>(animals: [<span class="type">Whale</span>(name: <span class="string">"Wendy"</span>), <span class="type">Whale</span>(name: <span class="string">"Wu"</span>)])</span><br><span class="line">exhibit1.tourTheExhibit()</span><br><span class="line"><span class="comment">// Welcome to the Whale Exhibit 🐳!</span></span><br><span class="line"><span class="comment">// Say hello to Wendy 🐳.</span></span><br><span class="line"><span class="comment">// Say hello to Wu 🐳.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the longhand syntax can be used to specify the concrete type</span></span><br><span class="line"><span class="keyword">let</span> exhibit2 = <span class="type">ZooExhibit</span>&lt;<span class="type">Dolphin</span>&gt;(animals: [<span class="type">Dolphin</span>(name: <span class="string">"Dilbert"</span>), <span class="type">Dolphin</span>(name: <span class="string">"Dezeri"</span>)])</span><br><span class="line">exhibit2.tourTheExhibit()</span><br><span class="line"><span class="comment">// Welcome to the Dolphin Exhibit 🐬!</span></span><br><span class="line"><span class="comment">// Say hello to Dilbert 🐬.</span></span><br><span class="line"><span class="comment">// Say hello to Dezeri 🐬.</span></span><br></pre></td></tr></table></figure><p>A single generic type can only be substituted with one concrete type. If Xcode is unable to determine the concrete type that should be substituted for a generic type, it will complain.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let exhibit3 = ZooExhibit(animals: [Whale(name: "Wilber"), Dolphin(name: "Daphnie")])</span></span><br></pre></td></tr></table></figure><p>Extensions can be combined with generics for truly powerful effects. With an extension, it is possible to specify functionality that should only apply to a generic type when the concrete type meets inherits from a specific protocol.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Feedable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> favoriteFood: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dolphin</span>: <span class="title">Feedable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> favoriteFood = <span class="string">"🐟"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ZooExhibit</span> <span class="title">where</span> <span class="title">AnimalType</span>: <span class="title">Feedable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">feedTheAnimals</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> animal <span class="keyword">in</span> animals &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"You feed \(animal.name) \(AnimalType.emoji) some \(AnimalType.favoriteFood)."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exhibit2.feedTheAnimals()</span><br><span class="line"></span><br><span class="line"><span class="comment">// because `Whale` is not `Feedable`, the `feedTheAnimals()` function doesn't exist for the whale exhibit</span></span><br><span class="line"><span class="comment">//exhibit1.feedTheAnimals()</span></span><br></pre></td></tr></table></figure><h2 id="Subclass-a-Generic-Type"><a href="#Subclass-a-Generic-Type" class="headerlink" title="Subclass a Generic Type"></a>Subclass a Generic Type</h2><p>A generic type can be subclassed, assuming it is a class and not a struct. To demonstrate an example of subclassing a generic type, the <code>Animal</code>, <code>Whale</code>, and <code>ZooExhibit</code> types are defined:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> commonName: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Whale</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> commonName = <span class="string">"Whale"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZooExhibit</span>&lt;<span class="title">AnimalType</span>: <span class="title">Animal</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> animals: [<span class="type">AnimalType</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(animals: [<span class="type">AnimalType</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.animals = animals</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tourTheExhibit</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Welcome to the \(AnimalType.commonName) Exhibit!"</span>)</span><br><span class="line">        <span class="keyword">for</span> animal <span class="keyword">in</span> animals &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Say hello to \(animal.name)."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To subclass the generic type <code>ZooExhibit</code>, one must define a new class with a generic type that can be substituted for <code>AnimalType</code> (any type that implements the <code>Animal</code> protocol). In the subclass below, the generic type <code>A</code> is constrained such that it must implement the <code>Animal</code> protocol. Hence, when <code>ZooExhibit</code> is specified as the superclass, the type <code>A</code> can be used without error.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TravelingExhibit</span>&lt;<span class="title">A</span>: <span class="title">Animal</span>&gt;: <span class="title">ZooExhibit</span>&lt;<span class="title">A</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> location: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(location: <span class="type">String</span>, animals: [<span class="type">A</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.location = location</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(animals: animals)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tourTheExhibit</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Welcome to the \(A.commonName) Exhibit at \(location)!"</span>)</span><br><span class="line">        <span class="keyword">for</span> animal <span class="keyword">in</span> animals &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Say hello to \(animal.name)."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But, if a subclass tries to specify a generic type that does not satisfy the constraints from the parent class, then Xcode will generate an error.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this generates an error because `B` does not conform to `Animal` protocol</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TankExhibit</span>&lt;<span class="title">B</span>&gt;: <span class="title">ZooExhibit</span>&lt;<span class="title">B</span>&gt; </span>&#123; </span><br><span class="line">    <span class="keyword">let</span> volume: <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(volume: <span class="type">Double</span>, animals: [<span class="type">B</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.volume = volume</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(animals: animals)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once a generic type is subclassed, it can be created and used in a manner similar to the base class.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// exhibit is of type `TravelingExhibit&lt;Whale&gt;`</span></span><br><span class="line"><span class="keyword">let</span> exhibit = <span class="type">TravelingExhibit</span>(location: <span class="string">"Oakland Zoo"</span>, animals: [<span class="type">Whale</span>(name: <span class="string">"Watson"</span>), <span class="type">Whale</span>(name: <span class="string">"Wren"</span>)])</span><br><span class="line">exhibit.tourTheExhibit()</span><br><span class="line"></span><br><span class="line"><span class="comment">// change exhibit location</span></span><br><span class="line">exhibit.location = <span class="string">"San Francisco Zoo"</span></span><br><span class="line">exhibit.tourTheExhibit()</span><br></pre></td></tr></table></figure><h1 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h1><h2 id="Create-a-closure"><a href="#Create-a-closure" class="headerlink" title="Create a closure"></a>Create a closure</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> closures = [f,</span><br><span class="line">               &#123; (x:<span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span> <span class="keyword">return</span> x * <span class="number">2</span> &#125;,</span><br><span class="line">               &#123; x <span class="keyword">in</span> <span class="keyword">return</span> x - <span class="number">8</span> &#125;,</span><br><span class="line">               &#123; x <span class="keyword">in</span> x * x &#125;,</span><br><span class="line">               &#123; $<span class="number">0</span> * <span class="number">42</span> &#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fn <span class="keyword">in</span> closures &#123;</span><br><span class="line">  fn(<span class="number">42</span>) <span class="comment">// 5 results</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Closure-and-Function"><a href="#Closure-and-Function" class="headerlink" title="Closure and Function"></a>Closure and Function</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = &#123;(x: <span class="type">Int</span>) -&gt; <span class="type">Int</span></span><br><span class="line">        <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">42</span>&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">9</span>) <span class="comment">// 51</span></span><br><span class="line">f(<span class="string">"99"</span>) <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this function is the same as the closure</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(x: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">42</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Integer</span> = <span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> z: <span class="type">Integer</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">let</span> zz: <span class="type">Int</span> = <span class="number">42</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (Int) -&gt; Int</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">IntToInt</span> = (<span class="type">Int</span>) -&gt; <span class="type">Int</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">IntMaker</span> = (<span class="type">Void</span>) -&gt; <span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the function returns another function/closure</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeCounter</span><span class="params">()</span></span> -&gt; <span class="type">IntMaker</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> adder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter1 = makeCounter() <span class="comment">// counter 1 is equal to the adder function</span></span><br><span class="line"><span class="keyword">let</span> counter2 = makeCounter()</span><br><span class="line"></span><br><span class="line">counter1() <span class="comment">// 1</span></span><br><span class="line">counter1() <span class="comment">// 2</span></span><br><span class="line">counter1() <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the "n" is not the same for difference instance</span></span><br><span class="line">counter2() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Associated-Value&quot;&gt;&lt;a href=&quot;#Associated-Value&quot; class=&quot;headerlink&quot; title=&quot;Associated Value&quot;&gt;&lt;/a&gt;Associated Value&lt;/h1&gt;&lt;p&gt;Enums can have
      
    
    </summary>
    
      <category term="iOS" scheme="https://www.qianhongbo.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>UITableView and Navigation</title>
    <link href="https://www.qianhongbo.com/iOS/UITableView.html"/>
    <id>https://www.qianhongbo.com/iOS/UITableView.html</id>
    <published>2021-12-26T02:38:48.000Z</published>
    <updated>2021-12-26T19:40:25.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Create-UITabelView"><a href="#Create-UITabelView" class="headerlink" title="Create UITabelView"></a>Create UITabelView</h2><blockquote><p>We need to link two delegates(datasource &amp; delegate) from the tabelview in the storyboard to the ViewController.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDataSource</span>, <span class="title">UITableViewDelegate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: Properties</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Get ahold of some villains, for the table</span></span><br><span class="line">    <span class="comment">// This is an array of Villain instances</span></span><br><span class="line">    <span class="keyword">let</span> allVillains = <span class="type">Villain</span>.allVillains</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: Table View Data Source</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// The number of rows</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.allVillains.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// The text of every row</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"VillainCell"</span>)!</span><br><span class="line">        <span class="keyword">let</span> villain = <span class="keyword">self</span>.allVillains[(indexPath <span class="keyword">as</span> <span class="type">NSIndexPath</span>).row]</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Set the name and image</span></span><br><span class="line">        cell.textLabel?.text = villain.name</span><br><span class="line">        cell.imageView?.image = <span class="type">UIImage</span>(named: villain.imageName)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// If the cell has a detail label, we will put the evil scheme in.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> detailTextLabel = cell.detailTextLabel &#123;</span><br><span class="line">            detailTextLabel.text = <span class="string">"Scheme: \(villain.evilScheme)"</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, canEditRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// Use navigationController to show the corresponding page of each row </span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> detailController = storyboard?.instantiateViewController(withIdentifier: <span class="string">"VillainDetailViewController"</span>) <span class="keyword">as</span>! <span class="type">VillainDetailViewController</span></span><br><span class="line">        detailController.villain = <span class="keyword">self</span>.allVillains[indexPath.row]</span><br><span class="line">        navigationController?.pushViewController(detailController, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="Creating-and-preparing-the-DetailViewController"><a href="#Creating-and-preparing-the-DetailViewController" class="headerlink" title="Creating and preparing the DetailViewController"></a>Creating and preparing the DetailViewController</h3><ul><li>Create a <code>VillainDetailViewController</code> with a 100x80 image view, and a label</li><li>Give the <code>VillainDetailViewController</code> a Storyboard ID</li><li>Give the <code>VillainDetailViewController</code> a villain property</li><li>Write the <code>viewWillAppear</code> method in the <code>VillainDetailViewController</code> so that it sets the image and label</li></ul></blockquote><h2 id="Create-the-Villain-struct"><a href="#Create-the-Villain-struct" class="headerlink" title="Create the Villain struct"></a>Create the Villain struct</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Villain</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: Properties</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> evilScheme: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> imageName: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">NameKey</span> = <span class="string">"NameKey"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">EvilSchemeKey</span> = <span class="string">"EvilScheme"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">ImageNameKey</span> = <span class="string">"ImageNameKey"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: Initializer</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Generate a Villain from a three entry dictionary</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(dictionary: [<span class="type">String</span> : <span class="type">String</span>]) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">self</span>.name = dictionary[<span class="type">Villain</span>.<span class="type">NameKey</span>]!</span><br><span class="line">        <span class="keyword">self</span>.evilScheme = dictionary[<span class="type">Villain</span>.<span class="type">EvilSchemeKey</span>]!</span><br><span class="line">        <span class="keyword">self</span>.imageName = dictionary[<span class="type">Villain</span>.<span class="type">ImageNameKey</span>]!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - Villain (All Villians)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* This extension adds static variable allVillains. An array of Villain objects</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Villain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate an array full of all of the villains in</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> allVillains: [<span class="type">Villain</span>] &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> villainArray = [<span class="type">Villain</span>]()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> <span class="type">Villain</span>.localVillainData() &#123;</span><br><span class="line">            villainArray.append(<span class="type">Villain</span>(dictionary: d))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> villainArray</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">localVillainData</span><span class="params">()</span></span> -&gt; [[<span class="type">String</span> : <span class="type">String</span>]] &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Mr. Big"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Smuggle herion."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Big"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Ernest Blofeld"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Many, many, schemes."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Blofeld"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Sir Hugo Drax"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Nerve gass Earth, from the Moon."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Drax"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Jaws"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Kill Bond with huge metal teeth."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Jaws"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Rosa Klebb"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Humiliate MI6"</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Klebb"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Emilio Largo"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Steal nuclear weapons"</span>, <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"EmilioLargo"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Le Chiffre"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Beat bond at poker."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Lechiffre"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Odd Job"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Kill Bond with razor hat."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"OddJob"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Francisco Scaramanga"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Kill Bond after assembling a golden gun."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Scaramanga"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Raoul Silva"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Kill M."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Silva"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Alec Trevelyan"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Nuke London, after killing Bond."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Trevelyan"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Auric Goldfinger"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Nuke Fort Knox."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Goldfinger"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Max Zorin"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Destroy Silicon Valley with an earthquake and flood."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Zorin"</span>]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="How-to-create-a-Navigation-ViewController"><a href="#How-to-create-a-Navigation-ViewController" class="headerlink" title="How to create a Navigation ViewController"></a>How to create a Navigation ViewController</h2><p><strong>Step 1:</strong> Create a new single view application</p><p><strong>Step 2:</strong> Delete the single view controller (You can delete this view controller by selecting the yellow icon and then tapping the delete button)</p><p><strong>Step 3:</strong> Drag a <code>UINavigationController</code> into the storyboard from the object library.</p><p><strong>Step 4:</strong> Delete the automatically generated root view controller and drag in a new view controller. To reset the Navigation Controller’s Root View Controller property control click on the Navigation Controller’s round yellow icon and drag a line from the root view controller triggered segue to your new view controller.</p><h2 id="Implement-the-StartOver-button"><a href="#Implement-the-StartOver-button" class="headerlink" title="Implement the StartOver button"></a>Implement the StartOver button</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MYOAViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        navigationItem.rightBarButtonItem = <span class="type">UIBarButtonItem</span>(</span><br><span class="line">          title: <span class="string">"Start Over"</span>, </span><br><span class="line">          style: .plain, </span><br><span class="line">          target: <span class="keyword">self</span>, </span><br><span class="line">          action: #selector(startOver))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startOver</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> navigationController = navigationController &#123;</span><br><span class="line">            navigationController.popToRootViewController(animated: <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The Navigation Controller is a stack data structure.</p></blockquote><h2 id="How-to-Update-the-Rock-Paper-Scissors-App-with-Navigation"><a href="#How-to-Update-the-Rock-Paper-Scissors-App-with-Navigation" class="headerlink" title="How to Update the Rock Paper Scissors App with Navigation"></a>How to Update the Rock Paper Scissors App with Navigation</h2><p><strong>Step 1.</strong> Drag a navigation controller into the storyboard and set its root view controller property to the <code>RockPaperScissorsViewController</code>.</p><p><strong>Step 2.</strong> Change each of the three segues one at a time.</p><ul><li>Scissors is easiest: Just change the type to “show” instead of “modal”. Note the invocation of <code>prepare(for:sender:)</code>.</li><li>Paper is essentially the same, but follow the invocation in the view controller and note the invocations of an IBAction, and the <code>performSegue(withIdentifier:sender:)</code> method.</li><li>Rock is always the hard way. Read the documentation for <code>UINavigationController</code> to see how to programmatically push the results controller onto the navigation controller. Remember that the <code>RockPaperScissorsViewController</code> will have a navigation controller property that you can use in the action.</li></ul><p><strong>Step 3.</strong> Edit the <code>playAgainButtonPressed</code> method so that the “Play Again” button behaves similarly to the “Start Over” button in Make Your Own Adventure.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Create-UITabelView&quot;&gt;&lt;a href=&quot;#Create-UITabelView&quot; class=&quot;headerlink&quot; title=&quot;Create UITabelView&quot;&gt;&lt;/a&gt;Create UITabelView&lt;/h2&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="iOS" scheme="https://www.qianhongbo.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>MVC Pattern</title>
    <link href="https://www.qianhongbo.com/iOS/MVC-Pattern.html"/>
    <id>https://www.qianhongbo.com/iOS/MVC-Pattern.html</id>
    <published>2021-12-24T03:57:49.000Z</published>
    <updated>2021-12-24T22:18:37.327Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://tva1.sinaimg.cn/large/006gJ2jvgy1gxpk2581unj32ta1fc7jw.jpg" alt="MVC Pattern"></p><h2 id="Model-Objects"><a href="#Model-Objects" class="headerlink" title="Model Objects"></a>Model Objects</h2><p>Model objects encapsulate the data specific to an application and define the logic and computation that manipulate and process that data. For example, a model object might represent a character in a game or a contact in an address book. A model object can have to-one and to-many relationships with other model objects, and so sometimes the model layer of an application effectively is one or more object graphs. Much of the data that is part of the persistent state of the application (whether that persistent state is stored in files or databases) should reside in the model objects after the data is loaded into the application. Because model objects represent knowledge and expertise related to a specific problem domain, they can be reused in similar problem domains. Ideally, a model object should have no explicit connection to the view objects that present its data and allow users to edit that data—it should not be concerned with user-interface and presentation issues.</p><p><strong>Communication</strong>: User actions in the view layer that create or modify data are communicated through a controller object and result in the creation or updating of a model object. When a model object changes (for example, new data is received over a network connection), it notifies a controller object, which updates the appropriate view objects.</p><h2 id="View-Objects"><a href="#View-Objects" class="headerlink" title="View Objects"></a>View Objects</h2><p>A view object is an object in an application that users can see. A view object knows how to draw itself and can respond to user actions. A major purpose of view objects is to display data from the application’s model objects and to enable the editing of that data. Despite this, view objects are typically decoupled from model objects in an MVC application.</p><p>Because you typically reuse and reconfigure them, view objects provide consistency between applications. Both the UIKit and AppKit frameworks provide collections of view classes, and Interface Builder offers dozens of view objects in its Library.</p><p><strong>Communication</strong>: View objects learn about changes in model data through the application’s controller objects and communicate user-initiated changes—for example, text entered in a text field—through controller objects to an application’s model objects.</p><h2 id="Controller-Objects"><a href="#Controller-Objects" class="headerlink" title="Controller Objects"></a>Controller Objects</h2><p>A controller object acts as an intermediary between one or more of an application’s view objects and one or more of its model objects. Controller objects are thus a conduit through which view objects learn about changes in model objects and vice versa. Controller objects can also perform setup and coordinating tasks for an application and manage the life cycles of other objects.</p><p><strong>Communication</strong>: A controller object interprets user actions made in view objects and communicates new or changed data to the model layer. When model objects change, a controller object communicates that new model data to the view objects so that they can display it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://tva1.sinaimg.cn/large/006gJ2jvgy1gxpk2581unj32ta1fc7jw.jpg&quot; alt=&quot;MVC Pattern&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Model-Objects&quot;&gt;&lt;a href=&quot;#Mode
      
    
    </summary>
    
      <category term="iOS" scheme="https://www.qianhongbo.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Delegate</title>
    <link href="https://www.qianhongbo.com/iOS/Delegate.html"/>
    <id>https://www.qianhongbo.com/iOS/Delegate.html</id>
    <published>2021-12-20T09:37:39.000Z</published>
    <updated>2021-12-28T22:27:56.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Defination"><a href="#Defination" class="headerlink" title="Defination"></a>Defination</h2><p>The delegate is an object(Control Object) that executes a group of methods on behalf of another object.</p><blockquote><p>Control object is designed to pass user input to a data model.</p></blockquote><p>We want view classes to be used as is, and then we want control and model classes to have the freedom to customize those views. The delegate pattern allows for this.</p><p>The key to the delegate pattern, is that the view establishes the questions that it needs answered and encodes them in a protocol.</p><blockquote><p>A protocol is a list of methods that a delegate must implement.</p><p>Any object that fulfills the protocol can become a delegate.</p></blockquote><h2 id="UITextFieldDelegate-protocol"><a href="#UITextFieldDelegate-protocol" class="headerlink" title="UITextFieldDelegate protocol"></a><code>UITextFieldDelegate</code> protocol</h2><p>Let’s take a closer look at the protocol we’ll implement next, the <code>UITextFieldDelegate</code> protocol. We’ve listed its methods below. For each of the seven methods, consult the documentation and provide an example implementation. Post one or two of your examples to the discussion forum.</p><p><em>Editing lifecycle methods:</em><br><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619601-textfieldshouldbeginediting" target="_blank" rel="noopener"><code>textFieldShouldBeginEditing(_:)</code></a><br><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619590-textfielddidbeginediting" target="_blank" rel="noopener"><code>textFieldDidBeginEditing(_:)</code></a><br><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619592-textfieldshouldendediting" target="_blank" rel="noopener"><code>textFieldShouldEndEditing(_:)</code></a><br><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619591-textfielddidendediting" target="_blank" rel="noopener"><code>textFieldDidEndEditing(_:)</code></a></p><blockquote><p><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619601-textfieldshouldbeginediting" target="_blank" rel="noopener"><code>textFieldShouldBeginEditing(_:)</code></a></p><p>You could use this method to prevent the user from editing the text field’s contents more than once.</p></blockquote><blockquote><p><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619590-textfielddidbeginediting" target="_blank" rel="noopener"><code>textFieldDidBeginEditing(_:)</code></a></p><p>You might use this method to show overlay views that are visible only while editing.</p></blockquote><blockquote><p><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619592-textfieldshouldendediting" target="_blank" rel="noopener"><code>textFieldShouldEndEditing(_:)</code></a></p><p>The text field calls this method when it is asked to resign the first responder status. This can happen when the user selects another control or when you call the text field’s <a href="https://developer.apple.com/documentation/uikit/uiresponder/1621097-resignfirstresponder" target="_blank" rel="noopener"><code>resignFirstResponder()</code></a> method. Before the focus change occurs, however, the text field calls this method and gives you a chance to prevent the change from happening. </p><p>Normally, you would return <code>true</code> from this method to allow the text field to resign the first responder status. You might return <code>false</code>, however, in cases where your delegate detects invalid contents in the text field. Returning <code>false</code> prevents the user from switching to another control until the text field contains a valid value. </p><p>If you use this method to validate the contents of the text field, you might also want to use an overlay view to provide feedback to that effect. For example, you might display a small icon indicating the text is invalid.</p></blockquote><blockquote><p><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619591-textfielddidendediting" target="_blank" rel="noopener"><code>textFieldDidEndEditing(_:)</code></a></p><p>This method is called after the text field resigns its first responder status. You can use this method to update your delegate’s state information. For example, you might use this method to hide overlay views that should be visible only while editing.</p></blockquote><p><em>The primary method for controlling text:</em><br><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619599-textfield" target="_blank" rel="noopener"><code>textField(_:shouldChangeCharactersIn:replacementString:)</code></a></p><blockquote><ul><li><code>textField</code></li></ul><p>The text field containing the text.</p><ul><li><code>range</code></li></ul><p>The range of characters to be replaced.</p><ul><li><code>string</code></li></ul><p>The replacement string for the specified range. During typing, this parameter normally contains only the single new character that was typed, but it may contain more characters if the user is pasting text. When the user deletes one or more characters, the replacement string is empty.</p><ul><li>The text field calls this method whenever user actions cause its text to change. Use this method to validate text as it is typed by the user. For example, you could use this method to prevent the user from entering anything but numerical values.</li></ul></blockquote><p><em>The clear button (the ‘x’ on the right side of some text fields):</em><br><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619594-textfieldshouldclear" target="_blank" rel="noopener"><code>textFieldShouldClear(_:)</code></a></p><blockquote><p>The text field calls this method in response to the user pressing the built-in clear button. (This button is not shown by default but can be enabled by changing the value in the <a href="https://developer.apple.com/documentation/uikit/uitextfield/1619622-clearbuttonmode" target="_blank" rel="noopener"><code>clearButtonMode</code></a> property of the text field.) This method is also called when editing begins and the <a href="https://developer.apple.com/documentation/uikit/uitextfield/1619639-clearsonbeginediting" target="_blank" rel="noopener"><code>clearsOnBeginEditing</code></a> property of the text field is set to <code>true</code>.</p><p>If you do not implement this method, the text field clears the text as if the method had returned <code>true</code>.</p></blockquote><p><em>The return key in the keyboard:</em><br><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619603-textfieldshouldreturn" target="_blank" rel="noopener"><code>textFieldShouldReturn(_:)</code></a></p><blockquote><p>The default implementation returns <code>true</code>, resigning first responder status. You can override this method in your custom responders to update your object’s state or perform other actions, such as removing the highlight from a selection. You can also return <code>false</code>, refusing to relinquish first responder status. If you override this method, you must call <code>super</code> (the superclass implementation) at some point in your code.</p></blockquote><h2 id="Control-Flow-Walk-trough"><a href="#Control-Flow-Walk-trough" class="headerlink" title="Control Flow Walk-trough"></a>Control Flow Walk-trough</h2><ol><li><p>User taps keyboard</p></li><li><p>Textfield realizes text will change</p></li><li><p>Textfield invokes …</p><blockquote><p><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619599-textfield" target="_blank" rel="noopener"><code>textField(_:shouldChangeCharactersIn:replacementString:)</code></a></p></blockquote></li><li><p>VC receives invocation</p></li><li><p>VC assembles the new text</p></li><li><p>VC updates the label</p></li><li><p>VC returns “true” to allow change</p></li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: Text Field Delegate Methods</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 4</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">textField</span><span class="params">(<span class="number">_</span> textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 5 </span></span><br><span class="line">    <span class="comment">// Figure out what the new text will be, if we return true</span></span><br><span class="line">    <span class="keyword">var</span> newText = textField.text! <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line">    newText = newText.replacingCharacters(<span class="keyword">in</span>: range, with: string) <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// hide the label if the newText will be an empty string</span></span><br><span class="line">    <span class="keyword">self</span>.characterCountLabel.isHidden = (newText.length == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 6</span></span><br><span class="line">    <span class="comment">// Write the length of newText into the label</span></span><br><span class="line">    <span class="keyword">self</span>.characterCountLabel.text = <span class="type">String</span>(newText.length)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 7</span></span><br><span class="line">    <span class="comment">// returning true gives the text field permission to change its text</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>We can’t see the first three steps.</p></blockquote><h2 id="Emoji-Textfield"><a href="#Emoji-Textfield" class="headerlink" title="Emoji Textfield"></a>Emoji Textfield</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">textField</span><span class="params">(<span class="number">_</span> textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> replacedAnEmoji = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">var</span> emojiStringRange: <span class="type">NSRange</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Construct the text that will be in the field if this change is accepted</span></span><br><span class="line">        <span class="keyword">var</span> newText = textField.text! <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line">        newText = newText.replacingCharacters(<span class="keyword">in</span>: range, with: string) <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// For each dictionary entry in translations, pull out a string to </span></span><br><span class="line">        <span class="comment">// search for an emoji to replace it with</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (emojiString, emoji) <span class="keyword">in</span> translations &#123;</span><br><span class="line">          </span><br><span class="line">            <span class="comment">// Search for all occurances of key (ie. "dog"), </span></span><br><span class="line">            <span class="comment">// and replace with emoji (ie. 🐶)</span></span><br><span class="line">            <span class="comment">// repeat-while loop</span></span><br><span class="line">            <span class="keyword">repeat</span> &#123;</span><br><span class="line">                emojiStringRange = newText.range(of: emojiString, options: .caseInsensitive)</span><br><span class="line">            </span><br><span class="line">                <span class="comment">// found one</span></span><br><span class="line">                <span class="keyword">if</span> emojiStringRange.location != <span class="type">NSNotFound</span> &#123;</span><br><span class="line">                    newText = newText.replacingCharacters(<span class="keyword">in</span>: emojiStringRange, with: emoji) <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line">                    replacedAnEmoji = <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">while</span> emojiStringRange.location != <span class="type">NSNotFound</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we have replaced an emoji, then we directly edit the text field</span></span><br><span class="line">        <span class="comment">// Otherwise we allow the proposed edit.</span></span><br><span class="line">        <span class="keyword">if</span> replacedAnEmoji &#123;</span><br><span class="line">            textField.text = newText <span class="keyword">as</span> <span class="type">String</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Defination&quot;&gt;&lt;a href=&quot;#Defination&quot; class=&quot;headerlink&quot; title=&quot;Defination&quot;&gt;&lt;/a&gt;Defination&lt;/h2&gt;&lt;p&gt;The delegate is an object(Control Obje
      
    
    </summary>
    
      <category term="iOS" scheme="https://www.qianhongbo.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Swift进阶</title>
    <link href="https://www.qianhongbo.com/iOS/Swift%E8%BF%9B%E9%98%B6.html"/>
    <id>https://www.qianhongbo.com/iOS/Swift进阶.html</id>
    <published>2021-12-11T12:09:37.000Z</published>
    <updated>2021-12-30T00:03:36.535Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h1><h2 id="Nil-value"><a href="#Nil-value" class="headerlink" title="Nil value"></a>Nil value</h2><p>The Nil value is the same as null in some other languages.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> z: <span class="type">Int?</span></span><br><span class="line"><span class="keyword">var</span> s: <span class="type">String</span></span><br><span class="line">s = <span class="string">"123"</span></span><br><span class="line">z = <span class="type">Int</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zee: <span class="type">Int?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> string: <span class="type">String</span></span><br><span class="line"><span class="keyword">let</span> randomNumber = <span class="type">Int</span>(arc4random() % <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> randomNumber == <span class="number">1</span> &#123;</span><br><span class="line">    string = <span class="string">"123"</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// always 0</span></span><br><span class="line">    string = <span class="string">"ABC"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">zee = <span class="type">Int</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> intValue = zee &#123;</span><br><span class="line">  intValue * <span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="string">"No value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Another-Example-With-Nested-Structures"><a href="#Another-Example-With-Nested-Structures" class="headerlink" title="Another Example With Nested Structures"></a>Another Example With Nested Structures</h2><p>Safely unwrapping optionals is a fundamental Swift skill and one can’t have too much practice. Let’s walk through another example using the following enum and structures.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Genre</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> country, blues, folk</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Artist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> primaryGenre: <span class="type">Genre?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> released: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> artist: <span class="type">Artist?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>Song</code> struct contains a property <code>artist</code> of optional type <code>Artist?</code>. Then, the <code>Artist</code> struct as a <code>primaryGenre</code> property of optional type <code>Genre?</code>. <code>Genre</code> is a simple enumeration with only three cases for simplicity.</p><p>Now imagine we have the following instances of the <code>Artist</code> and <code>Song</code> structs. Here, <code>johnny</code> is assigned to the <code>Artist</code> property of <code>walkTheLine</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> johnny = <span class="type">Artist</span>(name: <span class="string">"Johnny Cash"</span>, primaryGenre: <span class="type">Genre</span>.country)</span><br><span class="line"><span class="keyword">var</span> walkTheLine = <span class="type">Song</span>(title: <span class="string">"I Walk the Line"</span>, released: <span class="number">1956</span>, artist: johnny)</span><br></pre></td></tr></table></figure><p>If we only had access to the the <code>Song</code> instance <code>walkTheLine</code> and we wanted to determine the <code>primaryGenre</code> of the song’s artist, we’d need some <code>if let</code>s.</p><p>First, we’d need to get the artist.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> artist = walkTheLine.artist &#123;</span><br><span class="line">  <span class="built_in">print</span>(artist.name)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Artist unknown"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And within the first <code>if let</code>, we’d use another to get the <code>primaryGenre</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> artist = walkTheLine.artist &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> genre = artist.primaryGenre &#123;</span><br><span class="line">      <span class="comment">// If there is no value for enum, it wll be "country"</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Primary genre: \(genre.rawValue)"</span>) </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Primary genre unknown"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Artist unknown"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the <code>genre</code> property of <code>artist</code> is not <code>nil</code>, we know it has a value and can safely print out the genre.</p><h2 id="Example-Animals-With-and-Without-Tails"><a href="#Example-Animals-With-and-Without-Tails" class="headerlink" title="Example: Animals With and Without Tails"></a>Example: Animals With and Without Tails</h2><p>Here’s another example: let’s say we have a struct called Animal. The Animal struct has a tail property and the tail property is an optional — not all animals have tails.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tail</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(length: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.length = <span class="string">"\(length)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> species: <span class="type">String</span> = <span class="string">"homo sapiens"</span></span><br><span class="line">    <span class="keyword">var</span> tail: <span class="type">Tail?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, species: <span class="type">String</span>, tailLength:<span class="type">Int?</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.species = species</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> tailLength = tailLength &#123;</span><br><span class="line">            <span class="keyword">self</span>.tail = <span class="type">Tail</span>(length: tailLength)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.tail = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = <span class="type">Animal</span>(name: <span class="string">"Lenny"</span>, species: <span class="string">"lemur"</span>, tailLength: <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> tailLength = animal.tail?.length&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(animal.name)'s tail is \(tailLength) cm long"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(animal.name) doesn't have a tail."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "Lenny's tail is 12 cm long\n"</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = <span class="type">Animal</span>(name: <span class="string">"Gilbert"</span>, species: <span class="string">"Gorilla"</span>, tailLength: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> tailLength = animal.tail?.length&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(animal.name)'s tail is \(tailLength) cm long"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(animal.name) doesn't have a tail."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "Gilbert doesn't have a tail.\n"</span></span><br></pre></td></tr></table></figure><h2 id="Nil-Coalescing-Operator"><a href="#Nil-Coalescing-Operator" class="headerlink" title="Nil Coalescing Operator"></a>Nil Coalescing Operator</h2><p>We already used optional chaining to avoid nesting <code>if let</code>s, but what if all we want to do is provide <code>tailLength</code> with a default value if the optional chaining fails? Swift provides a useful operator, for situations like these, the <strong>nil coalescing operator</strong>, <code>??</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">optional</span> expression&gt; ?? &lt;<span class="keyword">default</span> <span class="keyword">case</span>&gt;</span><br></pre></td></tr></table></figure><p>To use the operator, simply place <code>??</code> after the optional chaining expression, and then put a default value after the <code>??</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tailLength = animal.tail?.length ?? <span class="string">"0"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"tail length: \(tailLength)"</span>)</span><br><span class="line"><span class="comment">// tail length: 0</span></span><br></pre></td></tr></table></figure><h2 id="Your-Turn"><a href="#Your-Turn" class="headerlink" title="Your Turn"></a>Your Turn</h2><p>Assume the following structs and enum are defined.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Genre</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> country, blues, folk</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Artist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> primaryGenre: <span class="type">Genre?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> released: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> artist: <span class="type">Artist?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using the enums and structures, implement the <code>getArtistGenre()</code> function. Given a <code>Song</code> as input, return the raw value of the artist’s primary genre. If either the <code>artist</code> is <code>nil</code> or the <code>primaryGenre</code> is <code>nil</code>, then return an empty string. You must use optional chaining and the nil coalescing operator (<code>??</code>).</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Genre</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> country, blues, folk</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Artist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> primaryGenre: <span class="type">Genre?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> released: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> artist: <span class="type">Artist?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getArtistGenre</span><span class="params">(song: Song)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> songGenre = song.artist?.primaryGenre &#123;</span><br><span class="line">        <span class="keyword">return</span> songGenre.rawValue</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> songGenre = song.artist?.primaryGenre?.rawValue ?? <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> songGenre</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> artisTest = <span class="type">Artist</span>(name: <span class="string">"name"</span>, primaryGenre: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="type">Song</span>(title: <span class="string">"title"</span>, released: <span class="number">2021</span>, artist: artisTest)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(getArtistGenre(song: test))</span><br></pre></td></tr></table></figure><h2 id="Example-Revisiting-the-Int-Initializer-Method"><a href="#Example-Revisiting-the-Int-Initializer-Method" class="headerlink" title="Example: Revisiting the Int() Initializer Method"></a>Example: Revisiting the <code>Int()</code> Initializer Method</h2><p>Let’s say we’re using the <code>Int()</code> initializer method and invoking it on a variable that we are confident can be converted to an Int.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> w = <span class="type">Int</span>(<span class="string">"123"</span>)</span><br></pre></td></tr></table></figure><p>We know this method is going to return the Int, 123, so in this case, unwrapping with the exclamation point is appropriate. We know there is little risk of a fatal error being thrown. We can place the exclamation point after w, like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w! * <span class="number">2</span></span><br></pre></td></tr></table></figure><p>Or we could unwrap the return value directly, like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> w = <span class="type">Int</span>(<span class="string">"123"</span>)!</span><br><span class="line">w * <span class="number">2</span></span><br></pre></td></tr></table></figure><p>In this second case the value assigned to w will be a plain old Int.</p><h2 id="Implicitly-Unwrapped-Optionals-Revisiting-the-Villain-struct"><a href="#Implicitly-Unwrapped-Optionals-Revisiting-the-Villain-struct" class="headerlink" title="Implicitly Unwrapped Optionals: Revisiting the Villain struct"></a>Implicitly Unwrapped Optionals: Revisiting the Villain struct</h2><p>What about declaring implicitly unwrapped optionals? When is an appropriate time to be so bold? Well, remember the <code>evilScheme</code> property of the <code>Villain</code> struct? We wanted the ability to create instances of <code>Villain</code> with the option of not providing an <code>evilScheme</code> at first. However, once we know that the <code>evilScheme</code> has been set, we can access the property as if it were a regular non-optional type.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Villain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="comment">// exclamation point means implicitly unwrapped</span></span><br><span class="line">    <span class="keyword">var</span> evilScheme: <span class="type">String!</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">performScheme</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// no unwrapping necessary</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"And now, I will \(evilScheme!)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> villain = <span class="type">Villain</span>(name: <span class="string">"Billy"</span>, evilScheme: <span class="literal">nil</span>)</span><br><span class="line">villain.evilScheme = <span class="string">"steal from the cookie jar"</span></span><br><span class="line"><span class="comment">// we know for sure the scheme has been set</span></span><br><span class="line">villain.performScheme()</span><br></pre></td></tr></table></figure><p>There are a few things to note in the example above.</p><ul><li>The <code>evilScheme</code> property is now declared as an <strong>implicitly unwrapped optional</strong>. It’s type is written as <code>String!</code> instead of <code>String?</code>.</li><li>In the <code>performScheme()</code> method, we reference <code>evilScheme</code> as any other property, without unwrapping.</li><li>We call <code>performScheme()</code> once we know for a fact that <code>evilScheme</code> was set. The function assumes that <code>evilScheme</code> is not <code>nil</code>. If we treat an implicitly unwrapped optional that contains nil as if it contained a value, bad things can happen - including crashes!</li></ul><h2 id="Difference-between-upwrapping-an-with-with-and-with-implicit-unwrapping"><a href="#Difference-between-upwrapping-an-with-with-and-with-implicit-unwrapping" class="headerlink" title="Difference between upwrapping an with ?, with ! and with implicit unwrapping?"></a>Difference between upwrapping an with <code>?</code>, with <code>!</code> and with implicit unwrapping?</h2><p>Unwrapping with <code>?</code> is useful if you’re accessing nested properties or want some default behavior to occur if a value is nil.</p><p>Using <code>!</code> does not require providing a default value and is useful if you know that a value won’t be <code>nil</code>. However, if it is <code>nil</code>, the program will crash.</p><p>Implicitly unwrapping optionals is also useful when you know a value won’t be <code>nil</code>, but you can use the same syntax as a normal property. However, unintended behavior and crashes can occur if it is <code>nil</code>.</p><h1 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h1><h2 id="A-String-is-a-Struct"><a href="#A-String-is-a-Struct" class="headerlink" title="A String is a Struct"></a>A String is a Struct</h2><p>You just saw how a string can be initialized without a string literal.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringWithPotential = <span class="type">String</span>()</span><br></pre></td></tr></table></figure><h2 id="Counting-Characters"><a href="#Counting-Characters" class="headerlink" title="Counting Characters"></a>Counting Characters</h2><p>Let’s start with something straightforward. If you want to know how many characters are in a string, you use the count property.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Meet me in St. Louis!"</span></span><br><span class="line"><span class="string">"The string is \(str.count) characters long"</span></span><br></pre></td></tr></table></figure><p>Many real apps rely on counting characters - for example, a Twitter client that ensures a user is restricted to typing 140 or fewer characters.</p><h2 id="Accessing-specific-characters"><a href="#Accessing-specific-characters" class="headerlink" title="Accessing specific characters"></a>Accessing specific characters</h2><p>We can also conveniently access the characters at the beginning and end of a string.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstLetter = str.first</span><br><span class="line"><span class="keyword">let</span> isExcited = str.last == <span class="string">"!"</span></span><br></pre></td></tr></table></figure><h2 id="Checking-for-Substrings"><a href="#Checking-for-Substrings" class="headerlink" title="Checking for Substrings"></a>Checking for Substrings</h2><p>A <strong>substring</strong> is the term programmers use for any string that occurs within another string. We can check for the presence of a substring in different cases as shown below.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="built_in">contains</span>(<span class="string">"Lou"</span>)</span><br><span class="line">str.hasPrefix(<span class="string">"Me"</span>)</span><br><span class="line">str.hasSuffix(<span class="string">"in"</span>)</span><br></pre></td></tr></table></figure><p><code>contains()</code> simply checks if the substring occurs anywhere in <code>str</code>. <code>hasPrefix()</code> and <code>hasSuffix()</code> are more specialized and check if the substring occurs at the beginning and end of the string respectively.</p><h2 id="Creating-Variations-of-Strings"><a href="#Creating-Variations-of-Strings" class="headerlink" title="Creating Variations of Strings"></a>Creating Variations of Strings</h2><p>We can also use some string methods to generate different strings.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str.lowercased()</span><br><span class="line">str.uppercased()</span><br><span class="line"><span class="type">String</span>(str.reversed())</span><br></pre></td></tr></table></figure><p>Converting strings to all-lowercase or all-uppercase is great when you want user input to be case-insensitive. And reversing a string is useful if you want to see if two strings are <a href="https://en.wikipedia.org/wiki/Palindrome" target="_blank" rel="noopener">palindromes</a>.</p><p>Note in the last example, we need to use <code>str.reversed()</code> with a <code>String</code> initializer. If you look closely at the <a href="https://developer.apple.com/documentation/swift/string/2893808-reversed" target="_blank" rel="noopener">documentation for reversed()</a>, you’ll see that it actually returns a <code>ReversedCollection</code> instead of a <code>String</code>. You won’t need to use this type directly, but just know that Swift uses it “under the hood” for efficiency. You can simply use the <code>String()</code> initializer to convert the result into a usable string.</p><h2 id="Appending-Two-Strings"><a href="#Appending-Two-Strings" class="headerlink" title="Appending Two Strings"></a>Appending Two Strings</h2><p>Similar to concatenation, <code>String</code> also has an <code>append()</code> method that takes a string as an argument and attaches it to the string you’re mutating.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="string">"hello "</span></span><br><span class="line"><span class="keyword">let</span> world = <span class="string">"world!"</span></span><br><span class="line">hello.append(world)</span><br></pre></td></tr></table></figure><p>Is the equivalent of</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello = hello + world</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello += world</span><br></pre></td></tr></table></figure><p>With <code>append()</code> you don’t need to reassign <code>hello</code> a new value, and you’ll find the code is much more readable.</p><h2 id="Trimming-characters"><a href="#Trimming-characters" class="headerlink" title="Trimming characters"></a>Trimming characters</h2><p>In addition to <code>append()</code>, we can also remove characters from the end of a string. For example, you may want to remove all whitespace characters from the end of a user’s input.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">"   Be back later!        "</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> message.last == <span class="string">" "</span> &#123;</span><br><span class="line">    message.removeLast()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And the same can be done at the beginning.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> message.first == <span class="string">" "</span> &#123;</span><br><span class="line">    message.removeFirst()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Replacing-Substrings"><a href="#Replacing-Substrings" class="headerlink" title="Replacing Substrings"></a>Replacing Substrings</h2><p>We can also modify the middle of strings. A common manipulation method is <code>replacingOccurrences(of: String, with: String)</code>, which allows us to swap out one substring with another.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> verbose = <span class="string">"We hope you are very excited to learn Swift. It's a very fun and very useful skill. Soon enough, you'll be writing your very own app!"</span></span><br><span class="line"><span class="keyword">let</span> better = verbose.replacingOccurrences(of: <span class="string">"very "</span>, with: <span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>This method might come in handy for implementing a Find and Replace feature, a profanity filter, and many other cases, and is great to have in your string manipulation bag of tricks.</p><p><strong>Note:</strong> To use the <code>replaceOccurrences()</code> method, you will need to add <code>import Foundation</code> to the top of your file. <code>Foundation</code> is a <strong>framework</strong>, which is just a name for a collection of commonly used code. Apple provides frameworks like Foundation so that developers, like you, don’t need to reinvent the wheel for common tasks like string manipulation. We’ve already imported Foundation in the playground, so you can just follow along with the examples.</p><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="Initialize"><a href="#Initialize" class="headerlink" title="Initialize"></a>Initialize</h2> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: ## Initializing Arrays</span></span><br><span class="line"><span class="comment">//: The verbose way</span></span><br><span class="line"><span class="keyword">var</span> numbers = <span class="type">Array</span>&lt;<span class="type">Double</span>&gt;()</span><br><span class="line"><span class="comment">//: More often you will see ...</span></span><br><span class="line"><span class="keyword">var</span> moreNumbers = [<span class="type">Double</span>]()</span><br><span class="line">moreNumbers = [<span class="number">85.0</span>, <span class="number">90.0</span>, <span class="number">95.0</span>]</span><br><span class="line"><span class="comment">//: Array literal syntax</span></span><br><span class="line"><span class="keyword">let</span> differentNumbers = [<span class="number">97.5</span>, <span class="number">98.5</span>, <span class="number">99.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//: Array concatenation is super convenient in Swift</span></span><br><span class="line">moreNumbers += differentNumbers</span><br><span class="line"></span><br><span class="line"><span class="comment">//: ## Swift Arrays have types</span></span><br><span class="line"><span class="comment">//: An array can hold any type of object</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LightSwitch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> on: <span class="type">Bool</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> circuit = [<span class="type">LightSwitch</span>]()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> livingRoomSwitch = <span class="type">LightSwitch</span>()</span><br><span class="line"><span class="keyword">var</span> kitchenSwitch = <span class="type">LightSwitch</span>()</span><br><span class="line"><span class="keyword">var</span> bathroomSwitch = <span class="type">LightSwitch</span>()</span><br><span class="line"></span><br><span class="line">circuit = [livingRoomSwitch, kitchenSwitch, bathroomSwitch]</span><br></pre></td></tr></table></figure><p><strong>Append</strong></p><p>Here is an array of type <code>String</code>, listing musicians we want to play in the car on our upcoming road trip. To add an item to the end of an array we can use the append method, like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> musicians = [<span class="string">"Neil Young"</span>, <span class="string">"Kendrick Lamar"</span>, <span class="string">"Flo Rida"</span>, <span class="string">"Fetty Wap"</span>]</span><br><span class="line">musicians.append(<span class="string">"Rae Sremmurd"</span>)</span><br></pre></td></tr></table></figure><p>The array now looks like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"Neil Young"</span>, <span class="string">"Kendrick Lamar"</span>, <span class="string">"Flo Rida"</span>, <span class="string">"Fetty Wap"</span>, <span class="string">"Rae Sremmurd"</span>]</span><br></pre></td></tr></table></figure><p><strong>Insert</strong></p><p>To add an item to a specific place in an array we can use the method, <em>insert(at:)</em>. So, to add in “Dej Loaf” at index 2 we would write the following:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">musicians.insert(<span class="string">"Dej Loaf"</span>, at: <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>The array now looks like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"Neil Young"</span>, <span class="string">"Kendrick Lamar"</span>, <span class="string">"Dej Loaf"</span>, <span class="string">"Flo Rida"</span>, <span class="string">"Fetty Wap"</span>, <span class="string">"Rae Sremmurd"</span>]</span><br></pre></td></tr></table></figure><p><strong>Remove</strong></p><p>We can use a method called <code>remove(at:)</code> to remove an item at a particular index. If we remove the item at index 3, you can see that “Flo Rida” is removed:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">musicians.remove(at: <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>Subscripting</strong></p><p>Finally, if you want to retrieve an item at a particular index, you can use subscript syntax. Simply put the index in-between brackets after the array name, like so:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> musician = musician[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h1 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h1><h2 id="Initialize-1"><a href="#Initialize-1" class="headerlink" title="Initialize"></a>Initialize</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initializer syntax</span></span><br><span class="line"><span class="keyword">var</span> groupDict = [<span class="type">String</span>:<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dictionary literal</span></span><br><span class="line"><span class="keyword">var</span> animalGroupDict = [<span class="string">"whales"</span>:<span class="string">"pod"</span>, <span class="string">"geese"</span>:<span class="string">"flock"</span>, <span class="string">"lions"</span>: <span class="string">"pride"</span>]</span><br></pre></td></tr></table></figure>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: ## Dictionary operations</span></span><br><span class="line"><span class="comment">//: insert, count, remove, update, retrieve</span></span><br><span class="line"><span class="keyword">var</span> animalGroupsDict = [<span class="string">"whales"</span>:<span class="string">"pod"</span>, <span class="string">"geese"</span>:<span class="string">"flock"</span>, <span class="string">"lions"</span>: <span class="string">"pride"</span>]</span><br><span class="line"><span class="comment">//: Adding items to a dictionary</span></span><br><span class="line">animalGroupsDict[<span class="string">"crows"</span>] = <span class="string">"murder"</span></span><br><span class="line">animalGroupsDict[<span class="string">"monkeys"</span>] = <span class="string">"troop"</span></span><br><span class="line"><span class="comment">//: The count method is available to all collections.</span></span><br><span class="line">animalGroupsDict.<span class="built_in">count</span> <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">print</span>(animalGroupsDict)</span><br><span class="line"><span class="comment">//: Removing items from a dictionary</span></span><br><span class="line">animalGroupsDict[<span class="string">"crows"</span>] = <span class="literal">nil</span></span><br><span class="line">animalGroupsDict</span><br><span class="line"><span class="comment">//: Updating a value</span></span><br><span class="line">animalGroupsDict[<span class="string">"monkeys"</span>] = <span class="string">"barrel"</span></span><br><span class="line"><span class="keyword">var</span> group = animalGroupsDict.updateValue(<span class="string">"gaggle"</span>, forKey: <span class="string">"geese"</span>)</span><br><span class="line">type(of: group)</span><br><span class="line"></span><br><span class="line">animalGroupsDict.updateValue(<span class="string">"crash"</span>, forKey: <span class="string">"rhinoceroses"</span>)</span><br><span class="line"><span class="built_in">print</span>(animalGroupsDict)</span><br><span class="line"><span class="comment">//: ## Example</span></span><br><span class="line"><span class="comment">//: Retrieving the value for a particular key</span></span><br><span class="line"><span class="keyword">let</span> groupOfWhales = animalGroupsDict[<span class="string">"whales"</span>]</span><br><span class="line"><span class="comment">//: Why would the code below return an optional?</span></span><br><span class="line"><span class="comment">//:</span></span><br><span class="line"><span class="comment">//:     animalGroupsDict["whales"]</span></span><br><span class="line"><span class="comment">//: We unwrap a value returned from a dictionary just like we would unwrap any other optional.</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> groupOfWhales = animalGroupsDict[<span class="string">"whales"</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"We saw a \(groupOfWhales) of whales from the boat."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No value found for that key."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//: What happens if the key isn't found?</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> groupOfSasquatches = animalGroupsDict[<span class="string">"Sasquatches"</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"We saw a \(groupOfSasquatches) of Sasquatches on our hike."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No value found for that key."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we use the <code>removeValueForKey()</code> method to remove the value for the string, “George Bush”. Since <code>removeValueForKey()</code> returns the value removed, we can reset the value of the new key, “George H. W. Bush” to be the previously returned value, “Miss Beazley.”</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldValue = presidentialPetsDict.removeValueForKey(<span class="string">"George Bush"</span>)</span><br><span class="line">presidentialPetsDict[<span class="string">"George W. Bush"</span>] = oldValue</span><br></pre></td></tr></table></figure><p>We unwrap the retrieved value using <code>if let</code> and then use string interpolation to insert “Bo” into the string. The string is printed out as a part of the if block.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> dog = presidentialDogs[<span class="string">"Barack Obama"</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Michele Obama walks \(dog) evey morning."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No value found."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: ## Sets</span></span><br><span class="line"><span class="comment">//: Literal syntax</span></span><br><span class="line"><span class="keyword">var</span> cutlery: <span class="type">Set</span> = [<span class="string">"fork"</span>, <span class="string">"knife"</span>, <span class="string">"spoon"</span>]</span><br><span class="line"><span class="keyword">var</span> flowers:<span class="type">Set</span>&lt;<span class="type">Character</span>&gt; = [<span class="string">"🌷"</span>,<span class="string">"🌹"</span>,<span class="string">"🌸"</span>]</span><br><span class="line"><span class="comment">//: Initializer syntax</span></span><br><span class="line"><span class="keyword">var</span> utensils = <span class="type">Set</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> trees = <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;()</span><br><span class="line"><span class="comment">//: ## Set operations</span></span><br><span class="line"><span class="comment">//: Insert, Remove, Count</span></span><br><span class="line">trees.insert(<span class="string">"🌲"</span>)</span><br><span class="line">trees.insert(<span class="string">"🌳"</span>)</span><br><span class="line">trees.insert(<span class="string">"🌵"</span>)</span><br><span class="line"></span><br><span class="line">trees.remove(<span class="string">"🌵"</span>)</span><br><span class="line">trees.<span class="built_in">count</span></span><br></pre></td></tr></table></figure><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> director: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> releaseYear: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(title: <span class="type">String</span>, director: <span class="type">String</span>, releaseYear: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.title = title</span><br><span class="line">        <span class="keyword">self</span>.director = director</span><br><span class="line">        <span class="keyword">self</span>.releaseYear = releaseYear</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieArchive</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> movies: [<span class="type">Movie</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">filterByYear</span><span class="params">(year: Int)</span></span> -&gt; [<span class="type">Movie</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> filteredArray = [<span class="type">Movie</span>]()</span><br><span class="line">        <span class="keyword">for</span> movie <span class="keyword">in</span> <span class="keyword">self</span>.movies &#123;</span><br><span class="line">            <span class="keyword">if</span> movie.releaseYear == year &#123;</span><br><span class="line">                filteredArray.append(movie)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filteredArray</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(movies: [<span class="type">Movie</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.movies = movies</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> movie1 = <span class="type">Movie</span>(title: <span class="string">"Bride of Frankenstein"</span>, director: <span class="string">"James Whale"</span>, releaseYear: <span class="number">1935</span>)</span><br><span class="line"><span class="keyword">let</span> movie2 = <span class="type">Movie</span>(title: <span class="string">"The Night Walker"</span>, director: <span class="string">"William Castle"</span>, releaseYear: <span class="number">1964</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> archive = <span class="type">MovieArchive</span>(movies: [movie1, movie2])</span><br><span class="line">archive.filterByYear(year: <span class="number">1935</span>)</span><br><span class="line">archive.movies</span><br></pre></td></tr></table></figure><h2 id="The-difference-between-class-and-struct"><a href="#The-difference-between-class-and-struct" class="headerlink" title="The difference between class and struct"></a>The difference between class and struct</h2><p>One important difference between structs and classes in Swift is how they’re handled in the computer or phone’s memory. Structs are <strong>passed by value</strong> while classes are <strong>passed by reference</strong>. </p><blockquote><p>引用类型：将一个对象赋值给另一个对象时，系统不会对此对象进行拷贝，而会将指向这个对象的指针赋值给另一个对象，当修改其中一个对象的值时，另一个对象的值会随之改变。</p><p>值类型：将一个对象赋值给另一个对象时，会对此对象进行拷贝，复制出一份副本给另一个对象，在修改其中一个对象的值时，不影响另外一个对象。</p></blockquote><blockquote><p>Array is a type of Struct. Use array as an example.</p></blockquote><p>Each array has an independent value that includes the values of all of its elements. For simple types such as integers and other structures, this means that when you change a value in one array, the value of that element does not change in any copies of the array. For example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> numbersCopy = numbers</span><br><span class="line">numbers[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br><span class="line"><span class="comment">// Prints "[100, 2, 3, 4, 5]"</span></span><br><span class="line"><span class="built_in">print</span>(numbersCopy)</span><br><span class="line"><span class="comment">// Prints "[1, 2, 3, 4, 5]"</span></span><br></pre></td></tr></table></figure><p>If the elements in an array are instances of a class, the semantics are the same, though they might appear different at first. In this case, the values stored in the array are references to objects that live outside the array. If you change a reference to an object in one array, only that array has a reference to the new object. However, if two arrays contain references to the same object, you can observe changes to that object’s properties from both arrays. For example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// An integer type with reference semantics</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerReference</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> firstIntegers = [<span class="type">IntegerReference</span>(), <span class="type">IntegerReference</span>()]</span><br><span class="line"><span class="keyword">var</span> secondIntegers = firstIntegers</span><br><span class="line"></span><br><span class="line"><span class="comment">// Modifications to an instance are visible from either array</span></span><br><span class="line">firstIntegers[<span class="number">0</span>].value = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(secondIntegers[<span class="number">0</span>].value)</span><br><span class="line"><span class="comment">// Prints "100"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Replacements, additions, and removals are still visible</span></span><br><span class="line"><span class="comment">// only in the modified array</span></span><br><span class="line">firstIntegers[<span class="number">0</span>] = <span class="type">IntegerReference</span>()</span><br><span class="line"><span class="built_in">print</span>(firstIntegers[<span class="number">0</span>].value)</span><br><span class="line"><span class="comment">// Prints "10"</span></span><br><span class="line"><span class="built_in">print</span>(secondIntegers[<span class="number">0</span>].value)</span><br><span class="line"><span class="comment">// Prints "100"</span></span><br></pre></td></tr></table></figure><h2 id="Class-Inheritance"><a href="#Class-Inheritance" class="headerlink" title="Class Inheritance"></a>Class Inheritance</h2><p>One powerful feature of classes not available to structs is inheritance. Inheritance allows one class to take on the properties and methods of another class, as well as add its own functionality.</p><p>To start, let’s say we have a <code>Guitar</code> class defined as the following.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Guitar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> strings: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> frets: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(strings: <span class="type">Int</span>, frets: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.strings = strings</span><br><span class="line">        <span class="keyword">self</span>.frets = frets</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pluckString</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"twang"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is a great start, but what if we then wanted to model an electric guitar. The electric guitar is a “kind of” guitar, but with a few differences. For example, the electric guitar has electronics for modifying the volume and tone of its output (check out the knobs on the lower body). We could define a new <code>ElectricGuitar</code> class by copy-pasting the <code>GuitarClass</code> and adding these different properties, but we can do much better. Instead, if we place a colon after the the class name and then specify the class we want to inherit from, the <code>ElectricGuitar</code> automatically has all the properties and methods of a guitar.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricGuitar</span>: <span class="title">Guitar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> volumeLevel: <span class="type">Float</span> = <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">var</span> toneLevel: <span class="type">Float</span> = <span class="number">1.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we have a new class, <code>ElectricGuitar</code> that has all the properties of <code>Guitar</code> with the additional properties for volume and tone.</p><table><thead><tr><th align="left">Class</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">superclass</td><td align="left">A class that is inherited from</td></tr><tr><td align="left">subclass</td><td align="left">A class that inherits from another class (the superclass)</td></tr><tr><td align="left">parent class</td><td align="left">A class’s superclass</td></tr><tr><td align="left">child class</td><td align="left">A class that descended (inherited directly) from a parent class.</td></tr><tr><td align="left">descendant</td><td align="left">A class that inherited from an ancestor</td></tr><tr><td align="left">ancestor</td><td align="left">A class that has child or descendent classes</td></tr><tr><td align="left">root class</td><td align="left">A class with no superclass</td></tr><tr><td align="left">leaf class</td><td align="left">A class with no subclasses</td></tr><tr><td align="left">hierarchy</td><td align="left">A tree of inheritance relationships</td></tr></tbody></table><h2 id="Overriding-Methods"><a href="#Overriding-Methods" class="headerlink" title="Overriding Methods"></a>Overriding Methods</h2><p>Inheritance doesn’t just let you add to a class - you can also override its behavior. For example, since an electric guitar’s volume affects its sound, we can provide some custom functionality to the <code>pluck()</code> method.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">pluckString</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> volumeLevel &gt; <span class="number">0.7</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"🎸🎸🎸 DRAOWWW"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> volumeLevel &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"🎸 twang"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// volumeLevel is 0</span></span><br><span class="line">        <span class="comment">// Guitar's implementation of pluckString()</span></span><br><span class="line">        <span class="keyword">super</span>.pluckString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Overriding a method is as simple as redeclaring it and adding the <code>override</code> keyword before <code>func</code>. And if you ever need to fall back to the original functionality, as we do in the case when the volume is 0, the old implementation can be called <code>super</code> keyword. <code>super</code> just refers to the superclass (the <code>Guitar</code> class we’re inheriting from) so <code>super.pluck()</code> will call the <code>pluck() method of the</code>Guitar` class which will print “twang”.</p><h2 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h2><p>Inheritance, or the ability of one class to take on the properties and methods of a superclass, leads us to the next topic - <strong>polymorphism</strong>.</p><p>Polymorphism means “many forms.” It is a programming language feature by which a type can be substituted for another type. For example, since it inherits from a <code>Guitar</code>, an <code>ElectricGuitar</code> can be substituted anywhere that a <code>Guitar</code> would be used. In other words, an <code>ElectricGuitar</code> is a form of <code>Guitar</code>.</p><p>Polymorphism allows for simpler code that avoids unnecessary specificity, and code that is flexible and expandable because it’s applicable to more than one type. If we were to add additional subclasses of <code>Guitar</code>, we could still use any of these types where a <code>Guitar</code> is used.</p><p><code>override</code> is used to indicate that a subclass’s method implementation will be substituted for a superclass’s method implementation. This is an aspect of polymorphism through inheritance.</p><p>We saw an example of polymorphism previously when we used <code>override</code> to refer to a single <code>Guitar</code> type, and produced different behavior by substituting in an <code>ElectricGuitar</code> instead of a <code>Guitar</code>.</p><p>We can see an example of polymorphism in action below. Because <code>anyGuitar</code>‘s type is <code>Guitar</code> we can assign any subclass of <code>Guitar</code>, including an <code>ElectricGuitar</code> to that variable.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anyGuitar: <span class="type">Guitar</span> = <span class="type">Guitar</span>(strings: <span class="number">6</span>, frets: <span class="number">20</span>)</span><br><span class="line">anyGuitar.pluckString()</span><br><span class="line"></span><br><span class="line">anyGuitar = <span class="type">ElectricGuitar</span>(strings: <span class="number">6</span>, frets: <span class="number">20</span>)</span><br><span class="line">anyGuitar.pluckString()</span><br></pre></td></tr></table></figure><p>Even though <code>anyGuitar()</code>‘s type is still <code>Guitar</code>, calling <code>pluckString()</code> will call the custom method we defined for <code>ElectricGuitar</code>. As a result, we can keep our code involving <code>Guitar</code> instances reusable, without sacrificing the functionality of any subclasses that happen to override a method.</p><h2 id="Type-Casting"><a href="#Type-Casting" class="headerlink" title="Type Casting"></a>Type Casting</h2><p>Finally, if we know that <code>anyGuitar</code> is assigned an <code>ElectricGuitar</code> and we want to access the <code>toneLevel</code> property, we can convert the types with a special keyword: <code>as</code>. When using the <code>as</code> keyword the variable you want to convert goes on the left and the type you’re converting to goes on the right.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">result = variableToConvert as NewType</span><br><span class="line">// forcibly convert the types with &quot;as!&quot;</span><br><span class="line">let electricGuitar = anyGuitar as! ElectricGuitar</span><br><span class="line">electricGuitar.toneLevel</span><br><span class="line">// or safely convert with &quot;if let&quot; with &quot;as?&quot;</span><br><span class="line">if let electricGuitar = anyGuitar as? ElectricGuitar &#123;</span><br><span class="line">    electricGuitar.toneLevel</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You’ll also notice the use of <code>as!</code> and <code>as?</code> in this example. This may seem complicated but it’s really the same concept you learned about unwrapping optionals. Since there’s no guarantee that <code>anyGuitar</code> will actually be an <code>ElectricGuitar</code>, casting to an <code>ElectricGuitar</code> returns an optional of type <code>Guitar?</code>. To forcibly unwrap the result, we use <code>as!</code> and to conditionally unwrap with <code>if let</code>, we use <code>as?</code>.</p><h2 id="Defining-Terms"><a href="#Defining-Terms" class="headerlink" title="Defining Terms"></a>Defining Terms</h2><p>There’s some terminology to cover, and then we’ll describe what happens when a method is called on a type that is defined as a <code>class</code>.</p><table><thead><tr><th align="left">Term</th><th align="left">Example</th><th align="left">Definition</th></tr></thead><tbody><tr><td align="left">instance</td><td align="left">Guitar()</td><td align="left">A class or type that we have initialized. Can be referred to with a constant or variable, and refers to its own instance with <code>self</code></td></tr><tr><td align="left">override</td><td align="left">override func pluckString() { }</td><td align="left">Used to indicate that this method implementation should supersede the superclass’s method implementation</td></tr><tr><td align="left">super</td><td align="left">super.someMethod()</td><td align="left">Used to retrieve and invoke a method implementation that has been overridden</td></tr></tbody></table><h1 id="Protocols"><a href="#Protocols" class="headerlink" title="Protocols"></a>Protocols</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Init</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Souschef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chop</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rinse</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Roommate</span>: <span class="title">Souschef</span>, <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hungry = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(hungry: <span class="type">Bool</span>, name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.hungry = hungry</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chop</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"She's choppin' \(vegetable)!"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rinse</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The \(vegetable) is so fresh and so clean"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implete the function outside the class</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> ==<span class="params">(lhs: Roommate, rhs: Roommate)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.name == rhs.name &amp;&amp; lhs.hungry == rhs.hungry</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> roomie = <span class="type">Roommate</span>(hungry: <span class="literal">true</span>, name: <span class="string">"Jennifer"</span>)</span><br><span class="line"><span class="keyword">var</span> theBestRoomie = <span class="type">Roommate</span>(hungry: <span class="literal">true</span>, name: <span class="string">"Jennifer"</span>)</span><br><span class="line"></span><br><span class="line">roomie == theBestRoomie</span><br><span class="line"><span class="comment">//: ## A protocol is also a type, any class that adopts this protocol</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DinnerCrew</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> members: [<span class="type">Souschef</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(members: [<span class="type">Souschef</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.members = members</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomPasserby</span>: <span class="title">Souschef</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chop</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"She's choppin' \(vegetable)!"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rinse</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The \(vegetable) is so fresh and so clean"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newFriend = <span class="type">RandomPasserby</span>(name: <span class="string">"Dave"</span>)</span><br><span class="line"><span class="keyword">var</span> motleyDinnerCrew = <span class="type">DinnerCrew</span>(members: [newFriend, roomie])</span><br></pre></td></tr></table></figure><h2 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h2><p>One more powerful feature of Swift types is the ability to add new methods and properties through <strong>extensions</strong>. You’ll see extensions in action as you start building the Pitch Perfect app, so let’s take a look at an example before wrapping up with object oriented programming.</p><p>To extend a class, simply use the <code>extension</code> keyword, followed by the type name.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SomeClass</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>Additionally, you can also add a colon after the type name followed by any number of protocols you’d like the type to conform to. Let’s rewrite the <code>Roommate</code> example so that it uses an extension to conform to <code>Souschef</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Roommate</span>: <span class="title">Souschef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chop</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"She's choppin' \(vegetable)!"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rinse</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The \(vegetable) is so fresh and so clean"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Isn’t this the same as the previous example? It is, but with extensions, you don’t even need access to the original class definition for <code>Roommate</code>. As you begin your journey into iOS development, you’ll be working with many classes provided by Apple in which you do not have direct access to the code. However, with extensions you can add functionality to these types without ever modifying the original class definition.</p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>Something that is passed by value such as an instance of a struct is copied when it’s assigned to a variable or passed to a function. Changing a property on the instance will only apply to the copy, and the original instance will remain unchanged.</p><p>Values that are passed by reference, such as instances of classes, are not copied. Changing a value on a copy will also modify the original instance, since the copy is simply referencing the original.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Optionals&quot;&gt;&lt;a href=&quot;#Optionals&quot; class=&quot;headerlink&quot; title=&quot;Optionals&quot;&gt;&lt;/a&gt;Optionals&lt;/h1&gt;&lt;h2 id=&quot;Nil-value&quot;&gt;&lt;a href=&quot;#Nil-value&quot; class
      
    
    </summary>
    
      <category term="iOS" scheme="https://www.qianhongbo.com/categories/iOS/"/>
    
    
      <category term="Swift" scheme="https://www.qianhongbo.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift初探</title>
    <link href="https://www.qianhongbo.com/iOS/Swift%E5%88%9D%E6%8E%A2.html"/>
    <id>https://www.qianhongbo.com/iOS/Swift初探.html</id>
    <published>2021-12-10T12:12:53.000Z</published>
    <updated>2021-12-22T06:20:41.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Variables-and-Types"><a href="#Variables-and-Types" class="headerlink" title="Variables and Types"></a>Variables and Types</h1><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world!"></a>Hello world!</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> question = <span class="string">"Hello world!"</span></span><br><span class="line"><span class="built_in">print</span>(question)</span><br></pre></td></tr></table></figure><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this is a comment</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* this is a </span></span><br><span class="line"><span class="comment">   multiline comment */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">print("neither will this")</span></span><br><span class="line"><span class="comment">print("or this")</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Data-types"><a href="#Data-types" class="headerlink" title="Data types"></a>Data types</h2><table><thead><tr><th>Type</th><th align="left">Description</th><th>Example Values</th></tr></thead><tbody><tr><td>Int</td><td align="left">whole number values</td><td>0, 2, -2, 100, …</td></tr><tr><td>Float</td><td align="left">floating-point (decimal) numbers that require no more than 6 decimal digits (32-bit)</td><td>3.14, 5.693, -12.321, …</td></tr><tr><td>Double</td><td align="left">floating-point (decimal) numbers that require more precision—guaranteed 15 decimal digits (64-bit)</td><td>3.14, 5.693, -12.321, …</td></tr><tr><td>Bool</td><td align="left">a Boolean truth value</td><td>true, false</td></tr><tr><td>Character</td><td align="left">a single letter, digit, symbol, or code</td><td>“a”, “+”, “q”, …</td></tr><tr><td>String</td><td align="left">combinations of characters</td><td>“swift”, “I Love Swift”, “ “, “:)”, …</td></tr></tbody></table><h2 id="Creating-variables"><a href="#Creating-variables" class="headerlink" title="Creating variables"></a>Creating variables</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberOfWheels: <span class="type">Int</span> = <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> centimetersOfRainfall: <span class="type">Float</span> = <span class="number">5.5</span></span><br><span class="line"><span class="keyword">var</span> pi: <span class="type">Double</span> = <span class="number">3.14159265359</span></span><br><span class="line"><span class="keyword">var</span> letterOfTheDay: <span class="type">Character</span> = <span class="string">"z"</span></span><br><span class="line"><span class="keyword">var</span> myFavoriteAnimal: <span class="type">String</span>  = <span class="string">"octopus"</span></span><br><span class="line"><span class="keyword">var</span> rainingOutside: <span class="type">Bool</span>  = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>The code below is also okay, because Siwft can infer what is the type of the variable.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName = <span class="string">"Aisha"</span></span><br></pre></td></tr></table></figure><p>Change the value of the variable, but we can’t change the type of the vcariable.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// initial declaration of petsAge</span></span><br><span class="line"><span class="keyword">var</span> petsAge = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">petsAge = <span class="number">13</span></span><br></pre></td></tr></table></figure><p>Constant.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> encouragement = <span class="string">"You can do it!"</span></span><br><span class="line"><span class="keyword">var</span> customizedEncouragement = <span class="string">"You can do it, Stephanie!"</span></span><br><span class="line">customizedEncouragement = <span class="string">"You can do it, Ryder!"</span></span><br></pre></td></tr></table></figure><p>String.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> emailSignature = <span class="string">"Aliyah Smith\nVP, Sales\n(555) - 555 - 5555"</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"><strong>Character</strong></th><th align="left"><strong>Usage</strong></th></tr></thead><tbody><tr><td align="left">\n</td><td align="left">Newline / line feed</td></tr><tr><td align="left">\t</td><td align="left">Horizontal tab</td></tr><tr><td align="left">&quot;</td><td align="left">Double quotation mark, using <code>&quot;</code> alone signifies the end of a string</td></tr><tr><td align="left">&#39;</td><td align="left">Single quotation mark</td></tr><tr><td align="left">\</td><td align="left">Backslash, using “&quot; alone escapes the next character</td></tr></tbody></table><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"Happy birthday, \("</span><span class="type">Maverick</span><span class="string">")!"</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h1 id="Operators-and-Expressions"><a href="#Operators-and-Expressions" class="headerlink" title="Operators and Expressions"></a>Operators and Expressions</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> / <span class="number">3</span> <span class="comment">// The result is 1</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> / <span class="number">3.0</span> <span class="comment">// The result is 1.66666667</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hello = <span class="string">"Hello"</span></span><br><span class="line"><span class="keyword">var</span> world = <span class="string">"world!"</span></span><br><span class="line"><span class="keyword">let</span> greeting = hello + <span class="string">" "</span> + world</span><br></pre></td></tr></table></figure><h1 id="Ternary-Operators"><a href="#Ternary-Operators" class="headerlink" title="Ternary Operators"></a>Ternary Operators</h1><p><strong>Ternary operator</strong> : an operator that is applied to three operands</p><p>Ternary operators are much less common than binary operators, but one of the most common ternary operators is the <strong>ternary conditional operator</strong>. It is used to choose between two values based on a truth (Boolean) value, and it uses the following syntax:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trueOrFalseValue ? useThisIfTrue : useThisIfFalse</span><br></pre></td></tr></table></figure><h1 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> onGuestList &amp;&amp; age &gt;= <span class="number">21</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(name), come party with us!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !onGuestList || age &lt; <span class="number">21</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Sorry, \(name), maybe you can go play Bingo with the Android team."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> breakfast &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Good morning!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> lunch &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Good afternoon!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> dinner &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Good evening!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> month &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">print</span>(“<span class="type">January</span>”)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">print</span>(“<span class="type">February</span>”)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> meal = <span class="string">"breakfast"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> meal</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"breakfast"</span>: <span class="built_in">print</span>(<span class="string">"Good morning!"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"lunch"</span>: <span class="built_in">print</span>(<span class="string">"Good afternoon!"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"dinner"</span>: <span class="built_in">print</span>(<span class="string">"Good evening!"</span>)</span><br><span class="line">    <span class="keyword">default</span>: <span class="built_in">print</span>(<span class="string">"none"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>...<span class="number">10</span> <span class="comment">// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.</span></span><br><span class="line"><span class="number">1</span>..&lt;<span class="number">10</span> <span class="comment">// 1, 2, 3, 4, 5, 6, 7, 8, 9.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">10</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i&lt;<span class="number">1001</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span>) == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// repeat-while loop</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello, world!"</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">while</span> i &lt; <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printLove</span><span class="params">(s: String)</span></span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I love \(s)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printLove(s: <span class="string">"Swift"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printLove</span><span class="params">(s: String)</span></span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I love"</span> + s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printLove(s: <span class="string">"Swift"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">areaOfRectangle</span><span class="params">(length: Int, width: Int)</span></span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(length * width)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">areaOfRectangle(length: <span class="number">2</span>, width: <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculateTip</span><span class="params">(priceOfMeal: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> priceOfMeal * <span class="number">0.15</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPastBedtime</span><span class="params">(hour: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> hour &gt; <span class="number">9</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addValues</span><span class="params">(value1 x: Int, value2 y: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="comment">// internally, use `x` and `y`</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// externally, use `value1` and `value2`</span></span><br><span class="line">addValues(value1: <span class="number">5</span>, value2: <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addExcitementToString</span><span class="params">(<span class="number">_</span> string: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> string + <span class="string">"!"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addExcitementToString(<span class="string">"Swift"</span>)</span><br></pre></td></tr></table></figure><h1 id="Structures-and-Enums"><a href="#Structures-and-Enums" class="headerlink" title="Structures and Enums"></a>Structures and Enums</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> school: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ayush = <span class="type">Student</span>(name: <span class="string">"Ayush Saraswat"</span>, age: <span class="number">19</span>, school: <span class="string">"Udacity"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Beaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> volumeMilliliters: <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canContainContents</span><span class="params">(otherBeaker: Beaker)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> volumeMilliliters &gt;= otherBeaker.volumeMilliliters</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> beaker1 = <span class="type">Beaker</span>(volumeMilliliters: <span class="number">500</span>)</span><br><span class="line"><span class="keyword">let</span> beaker2 = <span class="type">Beaker</span>(volumeMilliliters: <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">let</span> canContainContents: <span class="type">Bool</span> = beaker1.canContainContents(otherBeaker: beaker2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// If, however, a method tries to modify (or mutate) one of the struct's properties, then the mutating keyword must be added before func. For example</span></span><br><span class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">increaseCapacity</span><span class="params">()</span></span> &#123;</span><br><span class="line">    volumeMilliliters += <span class="number">500</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Beaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> volumeMilliliters: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> madeIn = <span class="string">"China"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// These are US ounces</span></span><br><span class="line">    <span class="keyword">var</span> volumeOunces: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> volumeMilliliters * <span class="number">0.033814</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canContainContents</span><span class="params">(otherBeaker: Beaker)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> volumeMilliliters &gt;= otherBeaker.volumeMilliliters</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// In fact, when we change the value of a static property with dot notation, we reference the type name and not a specific instance (Beaker.madeIn).</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">PrimaryColor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> red</span><br><span class="line">    <span class="keyword">case</span> blue</span><br><span class="line">    <span class="keyword">case</span> yellow</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Aunties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> aime, billie, diane, gail, janie, pam</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DrinkSize</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> small = <span class="number">12</span></span><br><span class="line">    <span class="keyword">case</span> medium = <span class="number">16</span></span><br><span class="line">    <span class="keyword">case</span> large = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rawValue</span></span><br><span class="line"><span class="type">Var</span> sugar = <span class="string">"A \(DrinkSize.small.rawValue) oz Coke has 33 g of sugar"</span></span><br><span class="line"><span class="comment">// "A 12 oz Coke has 33 g of sugar"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Using 'enum' with 'switch'</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Finger</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> thumb = <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> index = <span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> middle = <span class="number">3</span></span><br><span class="line">    <span class="keyword">case</span> ring = <span class="number">4</span></span><br><span class="line">    <span class="keyword">case</span> pinky = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> destination = <span class="type">Finger</span>.thumb</span><br><span class="line"><span class="keyword">var</span> test = <span class="type">Finger</span>(rawValue: <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch destination</span></span><br><span class="line"><span class="keyword">switch</span> test &#123;</span><br><span class="line">    <span class="keyword">case</span> .thumb:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"thumb"</span>)</span><br><span class="line">    <span class="keyword">case</span> .index:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"index"</span>)</span><br><span class="line">    <span class="keyword">case</span> .middle:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"middle"</span>)</span><br><span class="line">    <span class="keyword">case</span> .ring:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"ring"</span>)</span><br><span class="line">    <span class="keyword">case</span> .pinky:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"pinky"</span>)</span><br><span class="line">  <span class="comment">// We need to use none for 'test'</span></span><br><span class="line">    <span class="keyword">case</span> .<span class="keyword">none</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"None!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Variables-and-Types&quot;&gt;&lt;a href=&quot;#Variables-and-Types&quot; class=&quot;headerlink&quot; title=&quot;Variables and Types&quot;&gt;&lt;/a&gt;Variables and Types&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="iOS" scheme="https://www.qianhongbo.com/categories/iOS/"/>
    
    
      <category term="Swift" scheme="https://www.qianhongbo.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>UCSD EC80 选课</title>
    <link href="https://www.qianhongbo.com/OtherArticle/%E5%9B%9B%E5%AD%A6%E6%9C%9F%E8%AF%BE%E7%A8%8B%E5%AE%89%E6%8E%92.html"/>
    <id>https://www.qianhongbo.com/OtherArticle/四学期课程安排.html</id>
    <published>2021-09-27T15:41:25.000Z</published>
    <updated>2021-12-11T03:59:40.980Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>SEASON</th><th>CLASS_1</th><th>CLASS_2</th><th>CLASS_3</th></tr></thead><tbody><tr><td>FALL</td><td>ECE269</td><td>CSE252A</td><td>CSE258</td></tr><tr><td>WINTER</td><td>ECE276A</td><td>ECE141A</td><td>ECE143</td></tr><tr><td>SPRING</td><td>ECE272A</td><td>ECE141B</td><td>CSE240</td></tr><tr><td>FALL</td><td>ECE271A</td><td>CSE250</td><td>ECE250</td></tr></tbody></table><h1 id="FALL-2021"><a href="#FALL-2021" class="headerlink" title="FALL 2021:"></a>FALL 2021:</h1><h2 id="ECE-269-Linear-Algebra-and-Application-Piya-Pal"><a href="#ECE-269-Linear-Algebra-and-Application-Piya-Pal" class="headerlink" title="ECE 269: Linear Algebra and Application (Piya Pal)"></a>ECE 269: Linear Algebra and Application (Piya Pal)</h2><p>Class GPA:  ( students)<br>Stats: A+ (0%), A (5.9%, 11), A- (7.5%, 14), B+ (23.7%,44), B (16.1%, 30), B- (30.6%, 57), C+ (9.7%, 18) …<br>Weights: Quiz (20%), Final (35%), Assignments (45%)<br>Comments:<br>由于EC80的专业特性，毕业要求四门核心课，所以如果想要在一学期之内毕业，就必须要每学期选一门。根据往届的信息，ECE269这门课是所有四门课程中相对简单的，毕竟本科都有点线性代数的基础（对于我来说等于没学）。<br>作为第一学期的核心课，我自认为还是比较认真的，上课次次不落，discussion也每次都去，课后也会复习笔记，因为有些内容真的没有完全听懂。作业的话由于自己马虎，加上有些题目确实不会，导致分数也不理想，都在medium附近徘徊。两个quiz，第一个quiz难度还算可以，第二个quiz难度飙升，三道题目就对了一个。到了期末就更惨了，6道题只会两个半道，到现在我还不知道能打多少分。毕竟这门课是个comprehensive的课程，要达到一定标准才能毕业，再加上GPA 3.0才能达到毕业要求，让这个等待出分的我非常的慌张。</p><h2 id="CSE252A-Computer-Vision-I-Ben-Ochoa"><a href="#CSE252A-Computer-Vision-I-Ben-Ochoa" class="headerlink" title="CSE252A: Computer Vision I (Ben Ochoa)"></a>CSE252A: Computer Vision I (Ben Ochoa)</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SEASON&lt;/th&gt;
&lt;th&gt;CLASS_1&lt;/th&gt;
&lt;th&gt;CLASS_2&lt;/th&gt;
&lt;th&gt;CLASS_3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;FALL&lt;/td&gt;
&lt;td&gt;ECE269&lt;
      
    
    </summary>
    
      <category term="UCSD" scheme="https://www.qianhongbo.com/categories/UCSD/"/>
    
    
  </entry>
  
  <entry>
    <title>LAIOFEER公开课</title>
    <link href="https://www.qianhongbo.com/OtherArticle/LAIOFEER%E5%85%AC%E5%BC%80%E8%AF%BE.html"/>
    <id>https://www.qianhongbo.com/OtherArticle/LAIOFEER公开课.html</id>
    <published>2020-12-22T01:57:40.000Z</published>
    <updated>2021-04-12T13:21:12.646Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Always put yourself in other people’s shoes. 换位思考</p><p>Critical thinking 任何事情并不是非黑即白</p></blockquote><h2 id="BQ-question-1"><a href="#BQ-question-1" class="headerlink" title="BQ question 1"></a>BQ question 1</h2><p>Tell me about yourself:</p><ol><li>Name, Education, Background</li><li>Skills: Primary programming language, Projects experience, intern experience</li><li>Thank you</li></ol><p>Variants:</p><ol><li>Tell me your weakness(e.g. 多任务同时处理，优先级问题) 承认自己的问题，尽量真实</li><li>Key points: How to avoid/address the same problems in the future.</li></ol><h2 id="BQ-question-2"><a href="#BQ-question-2" class="headerlink" title="BQ question 2"></a>BQ question 2</h2><p>When you have different opinions from your colleagues</p><ol><li>Scenarios</li><li>Communication: 1 on 1 不在公共场合批评别人; How/When/Where</li></ol><h2 id="BQ-question-3"><a href="#BQ-question-3" class="headerlink" title="BQ question 3"></a>BQ question 3</h2><p>When you have limited time available to finish your project. Quality vs Speed</p><p>分情况讨论，用项目举例</p><p>Variant 1:Provide an example scenario in which you made a quick decision under pressure</p><p>Variant 2: Write an email to your manager on how to explain why you missed the deadline</p><h2 id="BQ-question-4"><a href="#BQ-question-4" class="headerlink" title="BQ question 4"></a>BQ question 4</h2><p>What is your career plan for the next 5 years?</p><p>现在有什么，未来期待什么，怎么做？</p><p>concrete example</p><h2 id="BQ-question-5"><a href="#BQ-question-5" class="headerlink" title="BQ question 5"></a>BQ question 5</h2><p>How do you define a good manager? Or what do you expect from your manager?</p><p>grow path</p><h2 id="BQ-question-6"><a href="#BQ-question-6" class="headerlink" title="BQ question 6"></a>BQ question 6</h2><p>Please tell me one of the most challenging projects you have accomplished.</p><p>Why is it challenging？</p><ol><li>Technical </li><li>Human resource </li><li>Operational complexity/ cost</li><li>Novelty</li><li>Time constraints</li></ol><p>How did you solve it?</p><p>How did you evaluate the results? Scope/Impact</p><blockquote><p>择高处立，就平处坐，向宽处行；立上等志，行中等事，享下等福。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Always put yourself in other people’s shoes. 换位思考&lt;/p&gt;
&lt;p&gt;Critical thinking 任何事情并不是非黑即白&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;BQ-question
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.qianhongbo.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="找工作" scheme="https://www.qianhongbo.com/tags/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
</feed>
