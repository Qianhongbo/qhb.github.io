<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog | Qian Homeberg</title>
  
  <subtitle>Look! Who is here! Welcome~~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.qianhongbo.com/"/>
  <updated>2022-03-08T06:35:00.467Z</updated>
  <id>https://www.qianhongbo.com/</id>
  
  <author>
    <name>Qian Hongbo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js</title>
    <link href="https://www.qianhongbo.com/Fullstack/Node-js.html"/>
    <id>https://www.qianhongbo.com/Fullstack/Node-js.html</id>
    <published>2022-03-07T14:08:58.000Z</published>
    <updated>2022-03-08T06:35:00.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="History-of-Backend-Development"><a href="#History-of-Backend-Development" class="headerlink" title="History of Backend Development"></a>History of Backend Development</h2><p><img src="https://video.udacity-data.com/topher/2021/February/60351af5_screen-shot-2021-02-23-at-9.04.16-am/screen-shot-2021-02-23-at-9.04.16-am.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;History-of-Backend-Development&quot;&gt;&lt;a href=&quot;#History-of-Backend-Development&quot; class=&quot;headerlink&quot; title=&quot;History of Backend Development&quot;&gt;
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
      <category term="Node.js" scheme="https://www.qianhongbo.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Notes</title>
    <link href="https://www.qianhongbo.com/Fullstack/JavaScript-Notes.html"/>
    <id>https://www.qianhongbo.com/Fullstack/JavaScript-Notes.html</id>
    <published>2022-03-07T14:08:43.000Z</published>
    <updated>2022-03-08T07:23:58.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Null-Undefined-and-NaN"><a href="#Null-Undefined-and-NaN" class="headerlink" title="Null, Undefined and NaN"></a>Null, Undefined and NaN</h2><h3 id="null-means-“value-of-nothing”"><a href="#null-means-“value-of-nothing”" class="headerlink" title="null means “value of nothing”"></a>null means “value of nothing”</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="undefined-means-“absence-of-value”"><a href="#undefined-means-“absence-of-value”" class="headerlink" title="undefined means “absence of value”"></a>undefined means “absence of value”</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><h3 id="NaN-means-“not-a-number”"><a href="#NaN-means-“not-a-number”" class="headerlink" title="NaN means “not a number”"></a>NaN means “not a number”</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// calculating the square root of a negative number will return NaN</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">-10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// trying to divide a string by 5 will return NaN</span></span><br><span class="line"><span class="string">"hello"</span>/<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="Equality"><a href="#Equality" class="headerlink" title="Equality"></a>Equality</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"1"</span> == <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Returns:</strong> true</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"1"</span> === <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Returns:</strong> false</p></blockquote><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = x + y;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sum = add(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><blockquote><p>If you don’t explicitly define a return value, the function will return <code>undefined</code> by default.</p></blockquote><h2 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sayHi(<span class="string">"Julia"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(greeting + <span class="string">" "</span> + name);</span><br><span class="line">  <span class="keyword">var</span> greeting;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// undefined Julia</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sayHi(<span class="string">"Julia"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(greeting + <span class="string">" "</span> + name);</span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="string">"Hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// undefined Julia</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The about function is equal to the following function...</span></span><br><span class="line"><span class="comment">function sayHi(name) &#123;</span></span><br><span class="line"><span class="comment">  var greeting;</span></span><br><span class="line"><span class="comment">  console.log(greeting + " " + name);</span></span><br><span class="line"><span class="comment">  greeting = "Hello";</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Function-Expressions"><a href="#Function-Expressions" class="headerlink" title="Function Expressions"></a>Function Expressions</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> catSays = <span class="function"><span class="keyword">function</span>(<span class="params">max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> catMessage = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">    catMessage += <span class="string">"meow "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> catMessage;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Notice how the <code>function</code> keyword no longer has a name.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> catSays = <span class="function"><span class="keyword">function</span>(<span class="params">max</span>) </span>&#123; </span><br><span class="line">  <span class="comment">// code here </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>It’s an <strong>anonymous function</strong>, a function with no name, and you’ve stored it in a variable called <code>catSays</code>.</p><h3 id="Use-function-expressions-as-parameters"><a href="#Use-function-expressions-as-parameters" class="headerlink" title="Use function expressions as parameters"></a>Use function expressions as parameters</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function expression catSays</span></span><br><span class="line"><span class="keyword">var</span> catSays = <span class="function"><span class="keyword">function</span>(<span class="params">max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> catMessage = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">    catMessage += <span class="string">"meow "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> catMessage;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function declaration helloCat accepting a callback</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloCat</span>(<span class="params">callbackFunc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Hello "</span> + callbackFunc(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pass in catSays as a callback function</span></span><br><span class="line">helloCat(catSays);</span><br></pre></td></tr></table></figure><h3 id="Inline-function-expressions"><a href="#Inline-function-expressions" class="headerlink" title="Inline function expressions"></a>Inline function expressions</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> favoriteMovie = <span class="function"><span class="keyword">function</span> <span class="title">displayFavorite</span>(<span class="params">movieName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"My favorite movie is "</span> + movieName);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">movies</span>(<span class="params">messageFunction, name</span>) </span>&#123;</span><br><span class="line">  messageFunction(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">movies(favoriteMovie, <span class="string">"Finding Nemo"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">movies</span>(<span class="params">messageFunction, name</span>) </span>&#123;</span><br><span class="line">  messageFunction(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">movies(<span class="function"><span class="keyword">function</span> <span class="title">displayFavorite</span>(<span class="params">movieName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"My favorite movie is "</span> + movieName);</span><br><span class="line">&#125;, <span class="string">"Finding Nemo"</span>);</span><br></pre></td></tr></table></figure><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// creates a `donuts` array with three strings</span></span><br><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"powdered"</span>, <span class="string">"jelly"</span>];</span><br></pre></td></tr></table></figure><p>But strings aren’t the only type of data you can store in an array. You can also store numbers, booleans… and really anything!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// creates a `mixedData` array with mixed data types</span></span><br><span class="line"><span class="keyword">var</span> mixedData = [<span class="string">"abcd"</span>, <span class="number">1</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">null</span>, <span class="string">"all the things"</span>];</span><br></pre></td></tr></table></figure><p>You can even store an array in an array to create a <strong>nested array</strong>!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arraysInArrays = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">  [<span class="string">"Julia"</span>, <span class="string">"James"</span>], </span><br><span class="line">  [<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="Indexing"><a href="#Indexing" class="headerlink" title="Indexing"></a>Indexing</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"powdered"</span>, <span class="string">"sprinkled"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(donuts[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h3 id="Length"><a href="#Length" class="headerlink" title="Length"></a>Length</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"powdered"</span>, <span class="string">"sprinkled"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(donuts.length);</span><br></pre></td></tr></table></figure><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"chocolate frosted"</span>, <span class="string">"Boston creme"</span>, <span class="string">"glazed cruller"</span>, <span class="string">"cinnamon sugar"</span>, <span class="string">"sprinkled"</span>];</span><br><span class="line">donuts.push(<span class="string">"powdered"</span>); <span class="comment">// the `push()` method returns 7 because the `donuts` array now has 7 elements</span></span><br></pre></td></tr></table></figure><h3 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"chocolate frosted"</span>, <span class="string">"Boston creme"</span>, <span class="string">"glazed cruller"</span>, <span class="string">"cinnamon sugar"</span>, <span class="string">"sprinkled"</span>, <span class="string">"powdered"</span>];</span><br><span class="line">donuts.pop();</span><br></pre></td></tr></table></figure><h3 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"jelly donut"</span>, <span class="string">"chocolate donut"</span>, <span class="string">"glazed donut"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; donuts.length; i++) &#123;</span><br><span class="line">    donuts[i] += <span class="string">" hole"</span>;</span><br><span class="line">    donuts[i] = donuts[i].toUpperCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="forEach-loop"><a href="#forEach-loop" class="headerlink" title="forEach loop"></a>forEach loop</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"jelly donut"</span>, <span class="string">"chocolate donut"</span>, <span class="string">"glazed donut"</span>];</span><br><span class="line"></span><br><span class="line">donuts.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">donut</span>) </span>&#123;</span><br><span class="line">  donut += <span class="string">" hole"</span>;</span><br><span class="line">  donut = donut.toUpperCase();</span><br><span class="line">  <span class="built_in">console</span>.log(donut);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The function that you pass to the <code>forEach()</code> method can take up to three parameters. In the video, these are called <code>element</code>, <code>index</code>, and <code>array</code>, but you can call them whatever you like.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">"cat"</span>, <span class="string">"in"</span>, <span class="string">"hat"</span>];</span><br><span class="line">words.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">word, num, all</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Word "</span> + num + <span class="string">" in "</span> + all.toString() + <span class="string">" is "</span> + word);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>With the <code>map()</code> method, you can take an array, perform some operation on each element of the array, and return a new array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"jelly donut"</span>, <span class="string">"chocolate donut"</span>, <span class="string">"glazed donut"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> improvedDonuts = donuts.map(<span class="function"><span class="keyword">function</span>(<span class="params">donut</span>) </span>&#123;</span><br><span class="line">  donut += <span class="string">" hole"</span>;</span><br><span class="line">  donut = donut.toUpperCase();</span><br><span class="line">  <span class="keyword">return</span> donut;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>donuts array:</strong> [“jelly donut”, “chocolate donut”, “glazed donut”]<br><strong>improvedDonuts array:</strong> [“JELLY DONUT HOLE”, “CHOCOLATE DONUT HOLE”, “GLAZED DONUT HOLE”]</p></blockquote><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sister = &#123;</span><br><span class="line">  name: <span class="string">"Sarah"</span>,</span><br><span class="line">  age: <span class="number">23</span>,</span><br><span class="line">  parents: [ <span class="string">"alice"</span>, <span class="string">"andy"</span> ],</span><br><span class="line">  siblings: [<span class="string">"julia"</span>],</span><br><span class="line">  favoriteColor: <span class="string">"purple"</span>,</span><br><span class="line">  pets: <span class="literal">true</span>,</span><br><span class="line">  paintPicture: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"Sarah paints!"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sister.paintPicture();</span><br></pre></td></tr></table></figure><blockquote><p><strong>Returns</strong>: “Sarah paints!”</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Null-Undefined-and-NaN&quot;&gt;&lt;a href=&quot;#Null-Undefined-and-NaN&quot; class=&quot;headerlink&quot; title=&quot;Null, Undefined and NaN&quot;&gt;&lt;/a&gt;Null, Undefined and
      
    
    </summary>
    
      <category term="Fullstack" scheme="https://www.qianhongbo.com/categories/Fullstack/"/>
    
    
      <category term="JavaScript" scheme="https://www.qianhongbo.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>lambda expression in C++</title>
    <link href="https://www.qianhongbo.com/Backend/c++/lambda-expression-in-C.html"/>
    <id>https://www.qianhongbo.com/Backend/c++/lambda-expression-in-C.html</id>
    <published>2022-02-26T08:22:27.000Z</published>
    <updated>2022-02-27T00:46:41.895Z</updated>
    
    <content type="html"><![CDATA[<p>There are three ways to call the function.</p><ul><li>Just call</li><li>Function pointer</li><li>Lambda expression</li></ul><h2 id="Just-call"><a href="#Just-call" class="headerlink" title="Just call"></a>Just call</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> foo(<span class="keyword">size_t</span> aValue) &#123;</span><br><span class="line">    <span class="keyword">return</span> rand() % <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Container</span> &#123;</span></span><br><span class="line">    Container() &#123;</span><br><span class="line">        values.push_back(<span class="number">10</span>);</span><br><span class="line">        values.push_back(<span class="number">20</span>);</span><br><span class="line">        values.push_back(<span class="number">30</span>);</span><br><span class="line">        values.push_back(<span class="number">40</span>);</span><br><span class="line">        values.push_back(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eachFrom</span><span class="params">(<span class="keyword">size_t</span> anIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> ((anIndex = foo(values[anIndex]))) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; values[anIndex] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    Container theContainer;</span><br><span class="line">    theContainer.eachFrom(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Function-pointer"><a href="#Function-pointer" class="headerlink" title="Function pointer"></a>Function pointer</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Container</span> &#123;</span></span><br><span class="line">    Container() &#123;</span><br><span class="line">        values.push_back(<span class="number">10</span>);</span><br><span class="line">        values.push_back(<span class="number">20</span>);</span><br><span class="line">        values.push_back(<span class="number">30</span>);</span><br><span class="line">        values.push_back(<span class="number">40</span>);</span><br><span class="line">        values.push_back(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> EachVisitor = <span class="built_in">std</span>::function&lt;<span class="keyword">size_t</span>(<span class="keyword">size_t</span>)&gt;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eachFrom</span><span class="params">(<span class="keyword">size_t</span> anIndex, EachVisitor aVisitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> ((anIndex = aVisitor(values[anIndex]))) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; values[anIndex] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> foo(<span class="keyword">size_t</span> aValue) &#123;</span><br><span class="line">    <span class="keyword">return</span> rand() % <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    Container theContainer;</span><br><span class="line">    theContainer.eachFrom(<span class="number">1</span>, foo);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lambda-expression"><a href="#Lambda-expression" class="headerlink" title="Lambda expression"></a>Lambda expression</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Container</span> &#123;</span></span><br><span class="line">    Container() &#123;</span><br><span class="line">        values.push_back(<span class="number">10</span>);</span><br><span class="line">        values.push_back(<span class="number">20</span>);</span><br><span class="line">        values.push_back(<span class="number">30</span>);</span><br><span class="line">        values.push_back(<span class="number">40</span>);</span><br><span class="line">        values.push_back(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> EachVisitor = <span class="built_in">std</span>::function&lt;<span class="keyword">size_t</span>(<span class="keyword">size_t</span>)&gt;;</span><br><span class="line">    <span class="keyword">size_t</span> eachFrom(<span class="keyword">size_t</span> anIndex, EachVisitor aVisitor) &#123;</span><br><span class="line">        <span class="keyword">while</span>((anIndex = aVisitor(values[anIndex]))) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"value"</span> &lt;&lt; values[anIndex] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>)); </span><br><span class="line">    Container theContainer;</span><br><span class="line">    theContainer.eachFrom(<span class="number">1</span>, [&amp;](<span class="keyword">size_t</span> aValue) &#123;<span class="keyword">return</span> rand() % <span class="number">5</span>;&#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;There are three ways to call the function.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Just call&lt;/li&gt;
&lt;li&gt;Function pointer&lt;/li&gt;
&lt;li&gt;Lambda expression&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="c++" scheme="https://www.qianhongbo.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Two pointers</title>
    <link href="https://www.qianhongbo.com/LeetCode/Two-pointers.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Two-pointers.html</id>
    <published>2022-02-26T07:29:37.000Z</published>
    <updated>2022-02-27T00:18:25.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Trap-Rain-Water-LeetCode-42"><a href="#Trap-Rain-Water-LeetCode-42" class="headerlink" title="Trap Rain Water(LeetCode 42)"></a>Trap Rain Water(LeetCode 42)</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining. </p><p><img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Brute-force"><a href="#Brute-force" class="headerlink" title="Brute force"></a>Brute force</h4><p>For every position, find <code>left_max</code> and <code>right_max</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(1) space</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">      <span class="keyword">if</span> height <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(height)):</span><br><span class="line">            left_max, right_max = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                left_max = max(left_max, height[j])</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(i, len(height)):</span><br><span class="line">                right_max = max(right_max, height[k])</span><br><span class="line">            ans += min(left_max, right_max) - height[i]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h4 id="Dynamic-programming"><a href="#Dynamic-programming" class="headerlink" title="Dynamic programming"></a>Dynamic programming</h4><p>We can find that we don’t need to find <code>left_max</code> and <code>right_max</code> at every position. We can traverse the list and store them. Although we improved the time complexity, we use more space than brute force. This is also not a good way.</p><p><img src="https://leetcode.com/problems/trapping-rain-water/Figures/42/trapping_rain_water.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> height <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        theSize = len(height)</span><br><span class="line">        left_max, right_max = [height[<span class="number">0</span>]] * theSize, [height[theSize - <span class="number">1</span>]] * theSize</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, theSize):</span><br><span class="line">            left_max[i] = max(height[i], left_max[i - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(theSize - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            right_max[j] = max(height[j], right_max[j + <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, theSize - <span class="number">1</span>):</span><br><span class="line">            ans += min(left_max[k], right_max[k]) - height[k]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h4 id="Two-pointers"><a href="#Two-pointers" class="headerlink" title="Two pointers"></a>Two pointers</h4><p>The best way for this question is using two pointers, which is also a good way for some array questions. If we don’t want to preserve the data like in dynamic programming way, we can find a way to get the <code>left_max</code> and <code>right_max</code> during the for loop.</p><p>Firstly, set the <code>leftId</code> and <code>rightId</code> as 0, and size. Then, set the <code>left_max</code> and <code>right_max</code> as leftmost value and rightmost value. We should know that we only use the minimum of <code>left_max</code> and <code>right_max</code>, so we should start with smaller side. When we found that the current <code>left_max</code> or <code>right_max</code> is larger than another one. We should change to another side. This ensures that we always use the minimun of <code>left_max</code> and <code>right_max</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> height:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left, right = <span class="number">0</span>, len(height) - <span class="number">1</span></span><br><span class="line">        left_max, right_max = height[left], height[right]</span><br><span class="line">        water = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            <span class="keyword">if</span> left_max &lt; right_max:</span><br><span class="line">                left_max = max(left_max, height[left])</span><br><span class="line">                water += left_max - height[left]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right_max = max(right_max, height[right])</span><br><span class="line">                water += right_max - height[right]</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> water</span><br></pre></td></tr></table></figure><h4 id="Using-stacks"><a href="#Using-stacks" class="headerlink" title="Using stacks"></a>Using stacks</h4><p>This way is not the best and also not easy to understand. The main idea is to track and compute the <code>V</code> shape, because it is only possible to trap vater in <code>V</code> shape.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, heights: List[int])</span> -&gt; int:</span></span><br><span class="line">        stack, trapped_water = [], <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> hi_index, height <span class="keyword">in</span> enumerate(heights):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> height &gt;= heights[stack[<span class="number">-1</span>]]:</span><br><span class="line">                ground_height = heights[stack.pop()]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                     <span class="keyword">continue</span></span><br><span class="line">                lo_index = stack[<span class="number">-1</span>]</span><br><span class="line">                water_line = min(heights[lo_index], height)</span><br><span class="line">                trapped_water += (water_line - ground_height) * (hi_index - lo_index - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            stack.append(hi_index)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> trapped_water</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Trap-Rain-Water-LeetCode-42&quot;&gt;&lt;a href=&quot;#Trap-Rain-Water-LeetCode-42&quot; class=&quot;headerlink&quot; title=&quot;Trap Rain Water(LeetCode 42)&quot;&gt;&lt;/a&gt;Trap
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Java Notes 4</title>
    <link href="https://www.qianhongbo.com/Backend/Java/Java-Notes-4.html"/>
    <id>https://www.qianhongbo.com/Backend/Java/Java-Notes-4.html</id>
    <published>2022-02-24T13:03:49.000Z</published>
    <updated>2022-02-25T06:18:01.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><h3 id="What-is-Reflection"><a href="#What-is-Reflection" class="headerlink" title="What is Reflection?"></a>What is Reflection?</h3><p><strong>Reflection</strong>, which is sometimes called <strong>introspection</strong>, is the ability of a program to examine its own structure at runtime.</p><h3 id="Static-vs-Dynamic-Code"><a href="#Static-vs-Dynamic-Code" class="headerlink" title="Static vs Dynamic Code"></a>Static vs Dynamic Code</h3><h4 id="Static-Code"><a href="#Static-Code" class="headerlink" title="Static Code"></a>Static Code</h4><p>Normally, when you write a program, all the class names, method names, and variable names are known <em>statically</em>, when the code is being written and compiled:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Foo myObject = <span class="keyword">new</span> Foo();</span><br></pre></td></tr></table></figure><p>Static code gives you the benefit of <strong>static analysis</strong>, which includes compile-type checking of static symbols like class and method names, and useful IDE features like auto-completion.</p><p>The Java compiler will return an error if you used an invalid class or method name.</p><h4 id="Dynamic-Code"><a href="#Dynamic-Code" class="headerlink" title="Dynamic Code"></a>Dynamic Code</h4><p>You can also create a <code>Foo</code> object <em>without</em> static symbol names. This is sometimes called <em>dynamic</em> coding:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object myObject = Class.forName(<span class="string">"Foo"</span>).getConstructor().newInstance();</span><br></pre></td></tr></table></figure><p>Writing this kind of code, you won’t get any static or compile-time checks to make sure you got the class name correct. If you run this code and there is no class named “Foo”, a <code>ClassNotFoundException</code> will be thrown.</p><h3 id="What-are-Annotations"><a href="#What-are-Annotations" class="headerlink" title="What are Annotations?"></a>What are Annotations?</h3><p><strong>Annotations</strong> are a way to provide extra metadata about your program. Annotations only provide metadata — they have no other effect on execution of the annotated code.</p><h4 id="Common-built-in-annotations"><a href="#Common-built-in-annotations" class="headerlink" title="Common built-in annotations"></a>Common built-in annotations</h4><table><thead><tr><th>Annotations</th><th>Description</th></tr></thead><tbody><tr><td><code>@Override</code></td><td>Tells the compuler that a method is inteded to iverride a superclass method.</td></tr><tr><td><code>@Deprecated</code></td><td>Indicated that a method is deprecated an should not be used. Using it will result in a compiler warning.</td></tr><tr><td><code>@FunctionalInterface</code></td><td>Tells the compuler that the annotated interface is intended to be a functional interface.</td></tr><tr><td><code>@SuppressWarnings</code></td><td>Stops the compuler from generating warnings such as for type casting or deprecation warnings.</td></tr></tbody></table><h3 id="Defining-custom-annotations"><a href="#Defining-custom-annotations" class="headerlink" title="Defining custom annotations"></a>Defining custom annotations</h3><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)  <span class="comment">// Applies to class, interface, or enum</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConvertsTo &#123;</span><br><span class="line">  Class&lt;?&gt; targetClass();</span><br><span class="line">  <span class="function">String <span class="title">setterPrefix</span><span class="params">()</span> <span class="keyword">default</span> "set"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Test &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Retention-Policies"><a href="#Retention-Policies" class="headerlink" title="Retention Policies"></a>Retention Policies</h4><p>Here are the possible retention policies for an annotation:</p><table><thead><tr><th align="left"><strong>Retention Policy</strong></th><th align="left"><strong>Description</strong></th></tr></thead><tbody><tr><td align="left"><code>SOURCE</code></td><td align="left">Annotation only exists in the source code.</td></tr><tr><td align="left"><code>RUNTIME</code></td><td align="left">Annotation exists in the .class bytecode file and is available at runtime to be used with reflection.</td></tr><tr><td align="left"><code>CLASS</code></td><td align="left">Annotation exists in the <code>.class</code> bytecode file but not exist while the program is running.</td></tr></tbody></table><h4 id="Annotation-Targets"><a href="#Annotation-Targets" class="headerlink" title="Annotation Targets"></a>Annotation Targets</h4><p>The target types determine which parts of the program can be given a particular annotation. Here are the possible target types:</p><table><thead><tr><th align="left"><strong>Element Type</strong></th><th align="left"><strong>Description</strong></th></tr></thead><tbody><tr><td align="left"><code>ANNOTATION_TYPE</code></td><td align="left">Annotation type declarations (for annotations that apply to other annotations).</td></tr><tr><td align="left"><code>CONSTRUCTOR</code></td><td align="left">Constructor declarations</td></tr><tr><td align="left"><code>FIELD</code></td><td align="left">Field declarations, including enum constants.</td></tr><tr><td align="left"><code>LOCAL_VARIABLE</code></td><td align="left">Local variable declarations.</td></tr><tr><td align="left"><code>METHOD</code></td><td align="left">Method declarations.</td></tr><tr><td align="left"><code>PACKAGE</code></td><td align="left">Package declarations.</td></tr><tr><td align="left"><code>PARAMETER</code></td><td align="left">Method parameter declarations.</td></tr><tr><td align="left"><code>TYPE</code></td><td align="left">Type declarations, such as classes, interfaces, annotation types, and enum declarations.</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Test &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reflection-API"><a href="#Reflection-API" class="headerlink" title="Reflection API"></a>Reflection API</h3><p>Every class, interface, and type (including primitive types) has a corresponding <code>Class</code> object that accesses metadata about that type.</p><p><code>Class</code> objects are the main entry point into Java’s <strong>Reflection API</strong>.</p><h4 id="Obtaining-Class-Objects"><a href="#Obtaining-Class-Objects" class="headerlink" title="Obtaining Class Objects"></a>Obtaining <code>Class</code> Objects</h4><p>There are many ways to get <code>Class</code> objects:</p><ul><li><p>Call <code>getClass()</code> on an object:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;String&gt; c = <span class="string">"Hello world!"</span>.getClass();</span><br></pre></td></tr></table></figure></li><li><p>Use <code>.class</code> to create a class literal:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;String&gt; c = String.class;</span><br><span class="line">Class&lt;<span class="keyword">int</span>[]&gt;  c = <span class="keyword">int</span>[].class;</span><br></pre></td></tr></table></figure></li><li><p>Create classes dynamically using <code>Class.forName()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;String&gt; c = Class.forName(<span class="string">"java.lang.String"</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="Working-with-Methods"><a href="#Working-with-Methods" class="headerlink" title="Working with Methods"></a>Working with Methods</h4><p>Using the <code>Class</code> API, you can also obtain <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/reflect/Method.html" target="_blank" rel="noopener"><code>Method</code></a> objects.</p><p><code>Method</code>s have some smiliar functionality as <code>Class</code>es, such as finding annotations and listing qualifiers, but methods can also be invoked by calling <code>Method.invoke()</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Method m = String.class.getMethod(<span class="string">"equals"</span>, Object.class);</span><br><span class="line">m.invoke(<span class="string">"foo"</span>, <span class="string">"bar"</span>);</span><br><span class="line"><span class="comment">// This is the same as `"foo".equals("bar")` return false</span></span><br></pre></td></tr></table></figure><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;?&gt;&gt; TESTS = List.of(CalculatorTest.class);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; passed = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; failed = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; klass : TESTS) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!UnitTest.class.isAssignableFrom(klass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Class "</span> + klass.toString() + <span class="string">" must implement UnitTest"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (Method method : klass.getDeclaredMethods()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getAnnotation(Test.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            UnitTest test = (UnitTest) klass.getConstructor().newInstance();</span><br><span class="line">            test.beforeEachTest();</span><br><span class="line">            method.invoke(test);</span><br><span class="line">            test.afterEachTest();</span><br><span class="line">            passed.add(getTestName(klass, method));</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            failed.add(getTestName(klass, method));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"Passed tests: "</span> + passed);</span><br><span class="line">    System.out.println(<span class="string">"FAILED tests: "</span> + failed);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getTestName</span><span class="params">(Class&lt;?&gt; klass, Method method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> klass.getName() + <span class="string">"#"</span> + method.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reflection&quot;&gt;&lt;a href=&quot;#Reflection&quot; class=&quot;headerlink&quot; title=&quot;Reflection&quot;&gt;&lt;/a&gt;Reflection&lt;/h2&gt;&lt;h3 id=&quot;What-is-Reflection&quot;&gt;&lt;a href=&quot;#Wha
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="Java" scheme="https://www.qianhongbo.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Kadane&#39;s Algorithm</title>
    <link href="https://www.qianhongbo.com/LeetCode/Kadane&#39;s%20Algorithm.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Kadane&#39;s Algorithm.html</id>
    <published>2022-02-23T02:42:03.000Z</published>
    <updated>2022-02-23T18:56:29.132Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Write a function that takes in a non-empty array of integers an returns the maximum sum that can be obtained by summing up all of the integers in a non empty sunarray of the input array. A subarray must only contain adjacent numbers.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">-9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">-2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">-9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span> // [<span class="number">1</span>, <span class="number">3</span>, <span class="number">-2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">-9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The reason why this question is not that straightforward is that there exists negative number in the array. If the negative number is small enough, we need to discard all preceding numbers and it.</p><p>Compare the sum ending here with the number here. Save the bigger number as <code>maxEndingHere</code>. If the number here is negative and small enough, we just save the next number. </p><p>Compare all the <code>maxEndingHere</code>, the maximum <code>maxSoFar</code> will be the final result.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kadanesAlgorithm</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Find the maximum sum that can be obtained by </span></span><br><span class="line"><span class="string">    all of the integers of the subarray of input array.</span></span><br><span class="line"><span class="string">    :param array: an array</span></span><br><span class="line"><span class="string">    :return: the maximum sum</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> isinstance(array, list)</span><br><span class="line"></span><br><span class="line">    maxEndingHere = array[<span class="number">0</span>]</span><br><span class="line">    maxSoFar = array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(array)):</span><br><span class="line">        num = array[i]</span><br><span class="line">        maxEndingHere = max(maxEndingHere + num, num)</span><br><span class="line">        maxSoFar = max(maxSoFar, maxEndingHere)</span><br><span class="line">    <span class="keyword">return</span> maxSoFar</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h2&gt;&lt;p&gt;Write a function that takes in a non-empty arr
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Connect different classes in C++</title>
    <link href="https://www.qianhongbo.com/Backend/c++/Connect-different-classes-in-C.html"/>
    <id>https://www.qianhongbo.com/Backend/c++/Connect-different-classes-in-C.html</id>
    <published>2022-02-19T10:04:57.000Z</published>
    <updated>2022-02-20T02:19:20.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description"></a>Problem description</h2><p>How to connect different classes, but they don’t know each other?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="IMessenger-Interface"><a href="#IMessenger-Interface" class="headerlink" title="IMessenger Interface"></a>IMessenger Interface</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IMessenger</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setOther</span><span class="params">(IMessenger *anOther)</span> </span>&#123;other=anOther;&#125;</span><br><span class="line">    </span><br><span class="line">    IMessenger* other;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Two-class"><a href="#Two-class" class="headerlink" title="Two class"></a>Two class</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> :</span> <span class="keyword">public</span> IMessenger &#123;</span><br><span class="line">    A() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tell</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> override </span>&#123;</span><br><span class="line">        other-&gt;receive(aMsg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A got "</span> &lt;&lt; aMsg &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> :</span> <span class="keyword">public</span> IMessenger &#123;</span><br><span class="line">    B() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tell</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> override </span>&#123;</span><br><span class="line">        other-&gt;receive(aMsg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B got "</span> &lt;&lt; aMsg &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    A theA;</span><br><span class="line">    B theB;</span><br><span class="line">    theA.setOther(&amp;theB);</span><br><span class="line">    theB.setOther(&amp;theA);</span><br><span class="line">    theA.tell(<span class="string">"Hello world!"</span>);</span><br><span class="line">    theB.tell(<span class="string">"Happy everyday!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// B got Hello world!</span></span><br><span class="line"><span class="comment">// A got Happy everyday!</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem-description&quot;&gt;&lt;a href=&quot;#Problem-description&quot; class=&quot;headerlink&quot; title=&quot;Problem description&quot;&gt;&lt;/a&gt;Problem description&lt;/h2&gt;&lt;p&gt;Ho
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="c++" scheme="https://www.qianhongbo.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Sorting</title>
    <link href="https://www.qianhongbo.com/LeetCode/Sorting.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Sorting.html</id>
    <published>2022-02-12T07:00:18.000Z</published>
    <updated>2022-02-17T17:48:13.442Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Three-Number-Sort"><a href="#Three-Number-Sort" class="headerlink" title="Three Number Sort"></a>Three Number Sort</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>The order is an array of three distinct integers. The first array is guaranteed to only contain integers that are in the second array, and the second array represents a desired order for the integers in the first array.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sample input</span></span><br><span class="line">array = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">order = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample output</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Bucket-sort"><a href="#Bucket-sort" class="headerlink" title="Bucket sort"></a>Bucket sort</h4><p>Traverse the array two times. Get the number of each elements in the order in the  first time. Set the number in the array in the second time.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeNumberSort</span><span class="params">(array, order)</span>:</span></span><br><span class="line">    buckets = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">buckets[order.index(i)] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line"><span class="keyword">if</span> i &lt; buckets[<span class="number">0</span>]: </span><br><span class="line">array[i] = order[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">elif</span> i &lt; buckets[<span class="number">0</span>] + buckets[<span class="number">1</span>]:</span><br><span class="line">array[i] = order[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">array[i] = order[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><h4 id="Two-pointers"><a href="#Two-pointers" class="headerlink" title="Two pointers"></a>Two pointers</h4><p>Still traverse two times using two pointers.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"> ^  ^      </span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ^  ^ </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ^          ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">               ^        ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">           ^         ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">          ^         ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line"> ^              ^</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeNumberSort</span><span class="params">(array, order)</span>:</span></span><br><span class="line">    Idx = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line"><span class="keyword">if</span> array[i] == order[<span class="number">0</span>]:</span><br><span class="line">array[Idx], array[i] = array[i], array[Idx]</span><br><span class="line">Idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Idy = len(array) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len(array))):</span><br><span class="line"><span class="keyword">if</span> array[i] == order[<span class="number">-1</span>]:</span><br><span class="line">array[Idy], array[i] = array[i], array[Idy]</span><br><span class="line">Idy -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><h4 id="Three-pointers"><a href="#Three-pointers" class="headerlink" title="Three pointers"></a>Three pointers</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"> ^  ^                   ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ^  ^                ^      </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">       ^   ^            ^   </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^  ^         ^  </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^      ^     ^  </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^     ^  ^  </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^        ^ </span><br><span class="line">                ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^        ^   ^</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeNumberSort</span><span class="params">(array, order)</span>:</span></span><br><span class="line">    Idx0, Idx1, Idx2 = <span class="number">0</span>, <span class="number">0</span>, len(array) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> Idx1 &lt;= Idx2:</span><br><span class="line">value = array[Idx1]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value == order[<span class="number">0</span>]:</span><br><span class="line">array[Idx0], array[Idx1] = array[Idx1], array[Idx0]</span><br><span class="line">Idx0 += <span class="number">1</span></span><br><span class="line">Idx1 += <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> value == order[<span class="number">1</span>]:</span><br><span class="line">Idx1 += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">array[Idx1], array[Idx2] = array[Idx2], array[Idx1]</span><br><span class="line">Idx2 -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><h2 id="Search-in-Sorted-Matrix"><a href="#Search-in-Sorted-Matrix" class="headerlink" title="Search in Sorted Matrix"></a>Search in Sorted Matrix</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">matrix = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">1000</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">5</span>, <span class="number">19</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1001</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">33</span>, <span class="number">35</span>, <span class="number">1002</span>],</span><br><span class="line">  [<span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">1003</span>],</span><br><span class="line">  [<span class="number">99</span>, <span class="number">100</span>, <span class="number">103</span>, <span class="number">106</span>, <span class="number">128</span>, <span class="number">1004</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">target = <span class="number">44</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># output = [3, 3]</span></span><br></pre></td></tr></table></figure><p>If the matrix does not contain the integer, return [-1, -1].</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchInSortedMatrix</span><span class="params">(matrix, target)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    search the target  number in a sorted matrix</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param matrix: a two dimensional array of distinct integers. each row is sorted; each column is sorted</span></span><br><span class="line"><span class="string">    :param target: a target integer</span></span><br><span class="line"><span class="string">    :return: an array of the row and column indices of the target integer</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> isinstance(matrix, list)</span><br><span class="line">    <span class="keyword">assert</span> isinstance(target, int)</span><br><span class="line"></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    column = len(matrix[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> row &lt; len(matrix) <span class="keyword">and</span> column &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> matrix[row][column] &gt; target:</span><br><span class="line">            column -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> matrix[row][column] &lt; target:</span><br><span class="line">            row += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> [row, column]</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Three-Number-Sort&quot;&gt;&lt;a href=&quot;#Three-Number-Sort&quot; class=&quot;headerlink&quot; title=&quot;Three Number Sort&quot;&gt;&lt;/a&gt;Three Number Sort&lt;/h2&gt;&lt;h3 id=&quot;Quest
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>c++多层Switch简化</title>
    <link href="https://www.qianhongbo.com/Backend/c++/c-%E5%A4%9A%E5%B1%82Switch%E7%AE%80%E5%8C%96.html"/>
    <id>https://www.qianhongbo.com/Backend/c++/c-多层Switch简化.html</id>
    <published>2022-02-10T10:07:40.000Z</published>
    <updated>2022-02-17T17:45:58.120Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何简化多层switch条件判断"><a href="#如何简化多层switch条件判断" class="headerlink" title="如何简化多层switch条件判断"></a>如何简化多层switch条件判断</h2><h3 id="Logic-before"><a href="#Logic-before" class="headerlink" title="Logic before"></a>Logic before</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">      <span class="keyword">case</span>(Bird):</span><br><span class="line">      <span class="keyword">switch</span>(color) &#123;</span><br><span class="line">        <span class="keyword">case</span> Red: ...</span><br><span class="line">          <span class="keyword">case</span> Blue ...</span><br><span class="line">      <span class="keyword">case</span> Fox ...</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Simplify"><a href="#Simplify" class="headerlink" title="Simplify"></a>Simplify</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span>  &#123;</span>Red, Blue, End_&#125;;</span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span>Bird, Fox, Lizard, End_&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Enum&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_t <span class="title">enumValue</span><span class="params">(Enum aValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(aValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Enum&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_t <span class="title">param</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> enumValue(Enum::End_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Just like a hash map</span></span><br><span class="line"><span class="comment">// Map every situation to an int</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Enum1, <span class="keyword">typename</span> Enum2&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_t <span class="title">combineEnums</span><span class="params">(Enum1 e1, Enum2 e2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> enumValue(e1) + param&lt;Enum1&gt;() * enumValue(e2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> theC1 = combineEnums(Color::Red, Animal::Lizard);</span><br><span class="line">    <span class="keyword">switch</span>(theC1) &#123;</span><br><span class="line">        case combineEnums(Color::Red, Animal::Bird):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Red Bird\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Red, Animal::Fox):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Red Fox\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Red, Animal::Lizard):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Red Lizard\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Blue, Animal::Bird):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Blue Bird\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Blue, Animal::Fox):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Blue Fox\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Blue, Animal::Lizard):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Blue Lizard\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何简化多层switch条件判断&quot;&gt;&lt;a href=&quot;#如何简化多层switch条件判断&quot; class=&quot;headerlink&quot; title=&quot;如何简化多层switch条件判断&quot;&gt;&lt;/a&gt;如何简化多层switch条件判断&lt;/h2&gt;&lt;h3 id=&quot;Logic-bef
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="c++" scheme="https://www.qianhongbo.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Data Structure</title>
    <link href="https://www.qianhongbo.com/Data%20Structure/Data-Structure.html"/>
    <id>https://www.qianhongbo.com/Data Structure/Data-Structure.html</id>
    <published>2022-02-02T02:50:06.000Z</published>
    <updated>2022-02-10T04:13:11.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gyrm73geuxj319q0u041v.jpg" alt="image-20220126100207323"></p><h3 id="Bit"><a href="#Bit" class="headerlink" title="Bit"></a>Bit</h3><p>Short for binary digit. It represents <code>0</code> and <code>1</code>.</p><h3 id="Byte"><a href="#Byte" class="headerlink" title="Byte"></a>Byte</h3><p>A group of <code>8</code> bits. For example, <code>01101000</code> is a byte.</p><p>A single byte can represent up to <code>256</code> data values($2^8$).</p><h3 id="Fixed-width-integer"><a href="#Fixed-width-integer" class="headerlink" title="Fixed-width integer"></a>Fixed-width integer</h3><p>An integer represented by a fixed amount of bits. For example, a 32-bit integer is an an integer represented by <code>32</code> bits(<code>4</code> bytes), and a 64-bit integer is an integer represented by <code>64</code> bits(<code>8</code> bytes).</p><h3 id="Memory-1"><a href="#Memory-1" class="headerlink" title="Memory"></a>Memory</h3><ul><li>Data stored in memory is stored in bytes and, by extension, bits.</li><li>Bytes in memory can point to other bytes in memory, so as to store references to other data.</li><li>The amount of memory that a machine has is bounded, making it valuable to limit how much memory an algorithm takes up.</li><li>Accessing a byte or a fixed number of bytesis an elementary operation.</li></ul><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>The following are an array’s standard operations and their corresponding time complexities:</p><ol><li>Accessing a value at a given index: <code>O(1)</code></li><li>Updating a value at a given index: <code>O(1)</code></li><li>Inserting a value at the beginning: <code>O(n)</code></li><li>Inserting a value in the middle: <code>O(n)</code></li><li>Inserting a value at the end: <code>O(1)</code> for dynamic array; <code>O(n)</code> for static array</li><li>Removing a value at the beginning: <code>O(n)</code></li><li>Removing a value in the middle: <code>O(n)</code></li><li>Removing a value at the end: <code>O(1)</code></li><li>Copying the array: <code>O(n)</code></li></ol><blockquote><p>A static array is an implementation of an array that allocates a fixed amount of memory to be used for storing the array’s values. Appending values to the array therefor involves copying the entire array and allocating new memory for it. This is a linear time operation.</p><p>A lot of popular programming languages like JavaScript and Python implement arrays as dynamic arrays.</p></blockquote><h2 id="Linked-Lists"><a href="#Linked-Lists" class="headerlink" title="Linked Lists"></a>Linked Lists</h2><h3 id="Singly-Linked-Lists"><a href="#Singly-Linked-Lists" class="headerlink" title="Singly Linked Lists"></a>Singly Linked Lists</h3><p>A linked list node’s value and next node are typically stored in <code>value</code> and <code>next</code> properties.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; null</span><br></pre></td></tr></table></figure><p>A singly linked list typically exposes its head to its user for easy access. While finding a node in a singly linked list involves traversing through all of the nodes leading up to the node in question (as opposed to instant access with an array).</p><ol><li>Accessing the head: <code>O(1)</code></li><li>Accessing the tail: <code>O(n)</code></li><li>Accessing the middle node: <code>O(n)</code></li><li>Inserting/Removing the head: <code>O(1)</code></li><li>Inserting/Removing the tail: <code>O(n)</code> + <code>O(1)</code></li><li>Inserting/Removing a middle node: <code>O(n)</code> + <code>O(1)</code></li><li>Searching for a value: <code>O(n)</code></li></ol><h3 id="Doubly-Linked-List"><a href="#Doubly-Linked-List" class="headerlink" title="Doubly Linked List"></a>Doubly Linked List</h3><p>A doubly linked list also has a pointer to the previous node in the linked list. THe previous node is typically stored in a <code>prev</code> property.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null &lt;- 0 &lt;-&gt; 1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; 4 &lt;-&gt; 5 &lt;-&gt; 6 &lt;-&gt; 7 -&gt; null</span><br></pre></td></tr></table></figure><p>The doubly linked list typically exposes both its head an tail to its user.</p><ol><li>Accessing the head: <code>O(1)</code></li><li>Accessing the tail: <code>O(1)</code></li><li>Accessing the middle node: <code>O(n)</code></li><li>Inserting/Removing the head: <code>O(1)</code></li><li>Inserting/Removing the tail:  <code>O(1)</code></li><li>Inserting/Removing a middle node: <code>O(n)</code> + <code>O(1)</code></li><li>Searching for a value: <code>O(n)</code></li></ol><h2 id="Hash-Tables"><a href="#Hash-Tables" class="headerlink" title="Hash Tables"></a>Hash Tables</h2><p>Under the hood, a hash table uses a dynamic array of linked lists to efficiently store key/value pairs. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0: (value1, key1) -&gt; null</span><br><span class="line">1: (value2, key2) -&gt; (value3, key3) -&gt; (value4, key4)</span><br><span class="line">2: (value5, key5) -&gt; null</span><br><span class="line">3: (value6, key6) -&gt; null</span><br><span class="line">4: null</span><br><span class="line">5: (value7, key7) -&gt; (value8, key8)</span><br><span class="line">6: (value9, key9) -&gt; null</span><br></pre></td></tr></table></figure><p>Hash table rely on highly optimized hash functions to minimize the number of <code>collisions</code> than occur when storing values: cases where two keys map to the same index.</p><ol><li>Inserting a key/value pair: <code>O(1)</code> on average; <code>O(n)</code> in the worse case</li><li>Removing a key/value pair: <code>O(1)</code> on average; <code>O(n)</code> in the worse case</li><li>Looking up a key: <code>O(1)</code> on average; <code>O(n)</code> in the worse case</li></ol><p>The worst-case linear time operations occur when a hash table experiences a lot of collisions, leading to long linked lists internally, which take <code>O(n)</code> time to traverse.</p><p>However, in practice and especially in coding interviews, we typically assume that the hash functions employed by hash tables are so optimized that collisions are extremely rare and constant-time operations are all but guaranteed.</p><h2 id="Stacks-and-Queues"><a href="#Stacks-and-Queues" class="headerlink" title="Stacks and Queues"></a>Stacks and Queues</h2><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>An array-like data structure whose elements follow the <code>LIFO</code> rule: Last In, First Out.</p><p>A stack is typically implemented with a <code>dynamic array</code>.</p><ol><li>Push an element onto the stack: <code>O(1)</code></li><li>Hoping an element onto the stack: <code>O(1)</code></li><li>Peeking at the element on the top of the stack: <code>O(1)</code></li><li>Searching for an element in the stack: <code>O(n)</code></li></ol><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>An array-like data structure whose elements follow the <code>FIFO</code> rule: First In, First Out.</p><p>A queue is typically implemented with a doubly linked list.</p><ol><li>Enqueuing an element into the queue: <code>O(1)</code></li><li>Dequeuing an element out of the queue: <code>O(1)</code></li><li>Peeking at the element ar the front of the queue: <code>O(1)</code></li><li>Searching for an lement in the queue: <code>O(n)</code></li></ol><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>Strings are stored in memory as arrays of integers, where each character in a given string is mapped to an integer via some characer encoding standard like <code>ASCII</code>.</p><p>If the character is encoded in ASCII, it requires one byte. 1 byte(256) can cover all of the English characters. </p><p>Stri ngs behave much like normal arrays. In most programming languages(<code>C++</code> is a notable exception), strings are immutable, meaning that they can’t be edited after creation. This also means that simple operations like appending a chracter to a string are more expensive than they might appear.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"this is a string"</span></span><br><span class="line">newString = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> character <span class="keyword">in</span> string:</span><br><span class="line">newString += character</span><br></pre></td></tr></table></figure><p>The operation above has a time complexity of <code>O(n2)</code> where n is the length of string, because each addition of a character to newString creates an entirely new string and is itself an <code>O(n)</code> operation. </p><h2 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h2><p>A collection of nodes or values called vertices that might be related; relations between vertices are called edges.</p><h3 id="Graph-cycle"><a href="#Graph-cycle" class="headerlink" title="Graph cycle"></a>Graph cycle</h3><p>A cycle occurs in a graph when three or more vertices in the graph are connected so as to form a closed loop</p><ul><li>Acyclic graph: A graph that has no cycles.</li><li>Cyclic graph: A graph that has at least one cycle.</li></ul><h3 id="Directed-and-undirected-graph"><a href="#Directed-and-undirected-graph" class="headerlink" title="Directed and undirected graph"></a>Directed and undirected graph</h3><ul><li>Directed graph: they can only be reversed in one direction, which is specified.</li><li>Undirected graph: they can be traversed in both directions.</li></ul><h3 id="Connected-graph"><a href="#Connected-graph" class="headerlink" title="Connected graph"></a>Connected graph</h3><p>A graph is connected if for every pair of vertices in the graph, there is a path of one or more edges connecting the given vertices.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Memory&quot;&gt;&lt;a href=&quot;#Memory&quot; class=&quot;headerlink&quot; title=&quot;Memory&quot;&gt;&lt;/a&gt;Memory&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://tva1.sinaimg.cn/large/008i3skNgy1gyr
      
    
    </summary>
    
      <category term="Data Structure" scheme="https://www.qianhongbo.com/categories/Data-Structure/"/>
    
    
  </entry>
  
  <entry>
    <title>Reverse Integer</title>
    <link href="https://www.qianhongbo.com/LeetCode/Reverse-Integer.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Reverse-Integer.html</id>
    <published>2022-02-01T02:02:27.000Z</published>
    <updated>2022-02-01T18:16:14.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reverse-Integer"><a href="#Reverse-Integer" class="headerlink" title="Reverse Integer"></a>Reverse Integer</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> <em>with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range $[-2^{31}, 2^{31} - 1]$, then return $0$.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 123</span><br><span class="line">Output: 321</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: x = -123</span><br><span class="line">Output: -321</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 120</span><br><span class="line">Output: 21</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time complexity: O(log10(n))</span></span><br><span class="line"><span class="comment"># Space complexity: O(1)  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        INT_MAX = <span class="number">2</span>**<span class="number">31</span><span class="number">-1</span></span><br><span class="line">        INT_MIN = <span class="number">-2</span>**<span class="number">31</span></span><br><span class="line">        <span class="keyword">while</span> x != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x &gt; <span class="number">0</span>: </span><br><span class="line">                remain = x % <span class="number">10</span></span><br><span class="line">                x //= <span class="number">10</span></span><br><span class="line">            <span class="keyword">else</span>: </span><br><span class="line">                remain = x % <span class="number">-10</span></span><br><span class="line">                x = -(x//<span class="number">-10</span>)</span><br><span class="line">            <span class="keyword">if</span> result &gt; INT_MAX / <span class="number">10</span> <span class="keyword">or</span> (result == INT_MAX // <span class="number">10</span> <span class="keyword">and</span> remain &gt; <span class="number">7</span>): <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> result &lt; INT_MIN / <span class="number">10</span> <span class="keyword">or</span> (result == INT_MIN // <span class="number">10</span> <span class="keyword">and</span> remain &lt; <span class="number">-8</span>): <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            result = result * <span class="number">10</span> + remain</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><blockquote><p>python的取余和java并不一样，<a href="https://zhuanlan.zhihu.com/p/70819721" target="_blank" rel="noopener">一篇很好的解释文章</a></p></blockquote><h2 id="Palindrome-Number"><a href="#Palindrome-Number" class="headerlink" title="Palindrome Number"></a>Palindrome Number</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 121</span><br><span class="line">Output: true</span><br><span class="line">Explanation: 121 reads as 121 from left to right and from right to left.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: x = -121</span><br><span class="line">Output: false</span><br><span class="line">Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time complexity: O(log10(n))</span></span><br><span class="line"><span class="comment"># Space complexity: O(1)  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> (x % <span class="number">10</span> == <span class="number">0</span> <span class="keyword">and</span> x != <span class="number">0</span>): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        reversedNumber = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; reversedNumber:</span><br><span class="line">            reversedNumber = reversedNumber * <span class="number">10</span> + x % <span class="number">10</span></span><br><span class="line">            x = x // <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> reversedNumber == x <span class="keyword">or</span> x == reversedNumber // <span class="number">10</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reverse-Integer&quot;&gt;&lt;a href=&quot;#Reverse-Integer&quot; class=&quot;headerlink&quot; title=&quot;Reverse Integer&quot;&gt;&lt;/a&gt;Reverse Integer&lt;/h2&gt;&lt;h3 id=&quot;Question&quot;&gt;&lt;a 
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Linked list</title>
    <link href="https://www.qianhongbo.com/LeetCode/Linked-list.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Linked-list.html</id>
    <published>2022-01-31T12:43:02.000Z</published>
    <updated>2022-02-10T22:42:30.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Merge-Tow-Sorted-Lists"><a href="#Merge-Tow-Sorted-Lists" class="headerlink" title="Merge Tow Sorted Lists"></a>Merge Tow Sorted Lists</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: list1 = [1,2,4], list2 = [1,3,4]</span><br><span class="line">Output: [1,1,2,3,4,4]</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time complexity: O(n + m)</span></span><br><span class="line"><span class="comment"># Space complexity: O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, list1: Optional[ListNode], list2: Optional[ListNode])</span> -&gt; Optional[ListNode]:</span></span><br><span class="line">        prehead = ListNode(<span class="number">-1</span>)</span><br><span class="line">        result = prehead</span><br><span class="line">        <span class="keyword">while</span> list1 <span class="keyword">and</span> list2:</span><br><span class="line">            <span class="keyword">if</span> list1.val &lt;= list2.val:</span><br><span class="line">                result.next = list1</span><br><span class="line">                list1 = list1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.next = list2</span><br><span class="line">                list2 = list2.next</span><br><span class="line">            result = result.next</span><br><span class="line">        result.next = list1 <span class="keyword">if</span> list1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> list2</span><br><span class="line">        <span class="keyword">return</span> prehead.next</span><br></pre></td></tr></table></figure><h2 id="Sum-of-Linked-Lists"><a href="#Sum-of-Linked-Lists" class="headerlink" title="Sum of Linked Lists"></a>Sum of Linked Lists</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">linkedListOne = 2 -&gt; 4 -&gt; 7 -&gt; 1</span><br><span class="line">linkedListTwo = 9 -&gt; 4 -&gt; 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line">// linkedListOne represents <span class="number">1742</span></span><br><span class="line">// linkedListTwo represents <span class="number">549</span></span><br><span class="line">// <span class="number">1742</span> + <span class="number">549</span> = <span class="number">2291</span></span><br><span class="line">1 -&gt; 9 -&gt; 2 -&gt; 2</span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is an input class. Do not edit.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># O(max(m, n)) time | O(max(m, n)) space</span></span><br><span class="line"><span class="comment"># For time and space, max(m, n) + 1 (1 is for carry).</span></span><br><span class="line"><span class="comment"># We have to store a new linked list for space.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumOfLinkedLists</span><span class="params">(linkedListOne, linkedListTwo)</span>:</span></span><br><span class="line">carry = <span class="number">0</span></span><br><span class="line">resultLinkedList = LinkedList(<span class="number">0</span>)</span><br><span class="line">currentNode = resultLinkedList</span><br><span class="line">NodeOne = linkedListOne</span><br><span class="line">NodeTwo = linkedListTwo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> NodeOne <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> NodeTwo <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> carry != <span class="number">0</span>:</span><br><span class="line">valueOne = NodeOne.value <span class="keyword">if</span> NodeOne <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">valueTwo = NodeTwo.value <span class="keyword">if</span> NodeTwo <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">sumVal = valueOne + valueTwo + carry</span><br><span class="line"></span><br><span class="line">carry = sumVal // <span class="number">10</span></span><br><span class="line">resultVal = sumVal % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">newNode = LinkedList(resultVal)</span><br><span class="line">currentNode.next = newNode</span><br><span class="line">currentNode = currentNode.next</span><br><span class="line"></span><br><span class="line">NodeOne = NodeOne.next <span class="keyword">if</span> NodeOne <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">NodeTwo = NodeTwo.next <span class="keyword">if</span> NodeTwo <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> resultLinkedList.next</span><br></pre></td></tr></table></figure><h2 id="Remove-Kth-Node-From-End"><a href="#Remove-Kth-Node-From-End" class="headerlink" title="Remove Kth Node From End"></a>Remove Kth Node From End</h2><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">head = 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6</span><br><span class="line">k = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line">0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 6</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is an input class. Do not edit.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeKthNodeFromEnd</span><span class="params">(head, k)</span>:</span></span><br><span class="line">    pointerOne = head</span><br><span class="line">pointerTwo = head</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">pointerTwo = pointerTwo.next</span><br><span class="line"></span><br><span class="line">  <span class="comment"># have to check this, because in the while loop</span></span><br><span class="line">  <span class="comment"># we need to use pointerTwo.next</span></span><br><span class="line">  <span class="comment"># we have to check whether pointerTwo is None...</span></span><br><span class="line"><span class="keyword">if</span> pointerTwo <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">pointerOne.value = pointerOne.next.value</span><br><span class="line">pointerOne.next = pointerOne.next.next</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> pointerTwo.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">pointerOne = pointerOne.next</span><br><span class="line">pointerTwo = pointerTwo.next</span><br><span class="line">pointerOne.next = pointerOne.next.next</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Merge-Tow-Sorted-Lists&quot;&gt;&lt;a href=&quot;#Merge-Tow-Sorted-Lists&quot; class=&quot;headerlink&quot; title=&quot;Merge Tow Sorted Lists&quot;&gt;&lt;/a&gt;Merge Tow Sorted Lis
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>String</title>
    <link href="https://www.qianhongbo.com/LeetCode/String.html"/>
    <id>https://www.qianhongbo.com/LeetCode/String.html</id>
    <published>2022-01-30T01:34:42.000Z</published>
    <updated>2022-02-15T17:54:57.688Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Longest-Common-Prefix"><a href="#Longest-Common-Prefix" class="headerlink" title="Longest Common Prefix"></a>Longest Common Prefix</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Horizontal-scanning"><a href="#Horizontal-scanning" class="headerlink" title="Horizontal scanning"></a>Horizontal scanning</h4><p><img src="https://leetcode.com/media/original_images/14_basic.png" alt="Horizontal scanning"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time Complexity: O(S), where S is the sum of all characters in all strings</span></span><br><span class="line"><span class="comment"># Space Complexity: O(1)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        prefix = strs[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">            <span class="keyword">while</span> s.find(prefix) != <span class="number">0</span>:</span><br><span class="line">                prefix = prefix[<span class="number">0</span>:<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">if</span> prefix <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> prefix</span><br></pre></td></tr></table></figure><h4 id="Vertical-scanning"><a href="#Vertical-scanning" class="headerlink" title="Vertical scanning"></a>Vertical scanning</h4><p>Imagine a very short string is the common prefix at the end of the array. The above approach will still do S<em>S</em> comparisons. One way to optimize this case is to do vertical scanning. We compare characters from top to bottom on the same column (same character index of the strings) before moving on to the next column.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time Complexity: O(S), where S is the sum of all characters in all strings</span></span><br><span class="line"><span class="comment"># Even though the worst case is still the same as Approach 1, </span></span><br><span class="line"><span class="comment"># in the best case there are at most n minLen comparisons </span></span><br><span class="line"><span class="comment"># where minLen is the length of the shortest string in the array.</span></span><br><span class="line"><span class="comment"># Space Complexity: O(1)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> strs <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> len(strs) == <span class="number">0</span>: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(strs[<span class="number">0</span>])):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(strs)):</span><br><span class="line">                <span class="keyword">if</span> i == len(strs[j]) <span class="keyword">or</span> strs[j][i] != strs[<span class="number">0</span>][i]:</span><br><span class="line">                    <span class="keyword">return</span> strs[<span class="number">0</span>][<span class="number">0</span>:i]</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="Divide-and-conquer"><a href="#Divide-and-conquer" class="headerlink" title="Divide and conquer"></a>Divide and conquer</h4><p><img src="https://leetcode.com/media/original_images/14_lcp_diviso_et_lmpera.png" alt="Divide and conquer"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> self.longestCommonPrefixHelper(strs, <span class="number">0</span>, len(strs) - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefixHelper</span><span class="params">(self, strs: List[str], l: int , r: int)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> l == r:</span><br><span class="line">            <span class="keyword">return</span> strs[l]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mid = (l + r) // <span class="number">2</span></span><br><span class="line">            lcpLeft = self.longestCommonPrefixHelper(strs, l, mid)</span><br><span class="line">            lcpRight = self.longestCommonPrefixHelper(strs, mid + <span class="number">1</span>, r)</span><br><span class="line">            <span class="keyword">return</span> self.commonPrefix(lcpLeft, lcpRight)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">commonPrefix</span><span class="params">(self, left: str, right: str)</span>:</span></span><br><span class="line">        minLen = min(len(left), len(right))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(minLen):</span><br><span class="line">            <span class="keyword">if</span> left[i] != right[i]:</span><br><span class="line">                <span class="keyword">return</span> left[<span class="number">0</span>:i]</span><br><span class="line">        <span class="keyword">return</span> left[<span class="number">0</span>:minLen]</span><br></pre></td></tr></table></figure><h4 id="Binary-search"><a href="#Binary-search" class="headerlink" title="Binary search"></a>Binary search</h4><p><img src="https://leetcode.com/media/original_images/14_lcp_binary_search.png" alt="Binary search"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> strs <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> len(strs) == <span class="number">0</span>: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        minLen = len(strs[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">            minLen = min(minLen, len(s))</span><br><span class="line">        low = <span class="number">1</span></span><br><span class="line">        high = minLen</span><br><span class="line">        <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">            middle = (low + high) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> self.isCommonPrefix(strs, middle):</span><br><span class="line">                low = middle + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = middle - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>][<span class="number">0</span>:(low + high) // <span class="number">2</span>]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isCommonPrefix</span><span class="params">(self, strs: List[str], middle: int)</span>:</span></span><br><span class="line">        str1 = strs[<span class="number">0</span>][<span class="number">0</span>:middle]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(strs)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> strs[i].startswith(str1): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Longest-Palindromic-Substring"><a href="#Longest-Palindromic-Substring" class="headerlink" title="Longest Palindromic Substring"></a>Longest Palindromic Substring</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sample input </span></span><br><span class="line">string = <span class="string">"abaxyzzyxf"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sample output</span></span><br><span class="line"><span class="string">"xyzzyx"</span></span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Brutal-force"><a href="#Brutal-force" class="headerlink" title="Brutal force"></a>Brutal force</h4><p>判断是否为palindrome string是<code>O(n)</code>, 最简单的方式是获取所有的子串，对每一种子串进行验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n^3) time | O(n) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindromicSubstring</span><span class="params">(string)</span>:</span></span><br><span class="line">    longest = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(string)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i, len(string)):</span><br><span class="line">substring = string[i : j + <span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> len(substring) &gt; len(longest) <span class="keyword">and</span> isPalindrome(substring):</span><br><span class="line">longest = substring</span><br><span class="line"><span class="keyword">return</span> longest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(string)</span>:</span></span><br><span class="line">leftIdx = <span class="number">0</span></span><br><span class="line">rightIdx = len(string) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> leftIdx &lt; rightIdx:</span><br><span class="line"><span class="keyword">if</span> string[leftIdx] != string[rightIdx]:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">leftIdx += <span class="number">1</span></span><br><span class="line">rightIdx -= <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="Better-way"><a href="#Better-way" class="headerlink" title="Better way"></a>Better way</h4><p>为了不判断所有的子串，改变判断是否为palindrome string的方式，从子串的中间开始判断两侧的字符是否相同。这也分两种情况，一种是子串为奇数，一种是子串为偶数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(n) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindromicSubstring</span><span class="params">(string)</span>:</span></span><br><span class="line">    currentLongest = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(string)):</span><br><span class="line">odd = getLongestPalindromeFrom(string, i - <span class="number">1</span>, i + <span class="number">1</span>)</span><br><span class="line">even = getLongestPalindromeFrom(string, i - <span class="number">1</span>, i)</span><br><span class="line">longest = max(odd, even, key = <span class="keyword">lambda</span> x: x[<span class="number">1</span>] - x[<span class="number">0</span>])</span><br><span class="line">currentLongest = max(longest, currentLongest, key = <span class="keyword">lambda</span> x: x[<span class="number">1</span>] - x[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> string[currentLongest[<span class="number">0</span>] : currentLongest[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLongestPalindromeFrom</span><span class="params">(string, leftIdx, rightIdx)</span>:</span></span><br><span class="line"><span class="keyword">while</span> leftIdx &gt;= <span class="number">0</span> <span class="keyword">and</span> rightIdx &lt; len(string):</span><br><span class="line"><span class="keyword">if</span> string[leftIdx] != string[rightIdx]:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">leftIdx -= <span class="number">1</span></span><br><span class="line">rightIdx += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> [leftIdx + <span class="number">1</span>, rightIdx]</span><br></pre></td></tr></table></figure><h2 id="Group-Anagrams"><a href="#Group-Anagrams" class="headerlink" title="Group Anagrams"></a>Group Anagrams</h2><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h3><p>Anagrams are strings made up of exactly the same letters, where order dosen’t matter.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sample Input</span></span><br><span class="line">words = [<span class="string">"yo"</span>, <span class="string">"act"</span>, <span class="string">"flop"</span>, <span class="string">"tac"</span>, <span class="string">"foo"</span>, <span class="string">"cat"</span>, <span class="string">"oy"</span>, <span class="string">"olfp"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sample output</span></span><br><span class="line">[[<span class="string">"yo"</span>, <span class="string">"oy"</span>], [<span class="string">"flop"</span>, <span class="string">"olfp"</span>], [<span class="string">"act"</span>, <span class="string">"tac"</span>, <span class="string">"cat"</span>], [<span class="string">"foo"</span>]]</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><ul><li>sort every word in the list</li><li>use hash code to group the anagrams</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(wnlog(n)) time | O(wn) space</span></span><br><span class="line"><span class="comment"># where w is the number of words and </span></span><br><span class="line"><span class="comment"># n is the length of the longest word</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupAnagrams</span><span class="params">(words)</span>:</span></span><br><span class="line">  anagrams = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">sortedWord = <span class="string">""</span>.join(sorted(word))</span><br><span class="line"><span class="keyword">if</span> sortedWord <span class="keyword">in</span> anagrams:</span><br><span class="line">anagrams[sortedWord].append(word)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">anagrams[sortedWord] = [word]</span><br><span class="line"><span class="keyword">return</span> list(anagrams.values())</span><br></pre></td></tr></table></figure><h2 id="Valid-IP-Addresses"><a href="#Valid-IP-Addresses" class="headerlink" title="Valid IP Addresses"></a>Valid IP Addresses</h2><h3 id="Question-3"><a href="#Question-3" class="headerlink" title="Question"></a>Question</h3><p>Write a function that returns all the possible IP addresses that can be created by inserting <code>.</code>s in the string. </p><p>A valid IP adress should have some properties:</p><ul><li>it consists of four sets of integer</li><li>the individual integer is within the range<code>0 - 255</code>, inclusive</li><li>not contain leading <code>0</code></li></ul><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(1) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validIPAddresses</span><span class="params">(string)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, min(len(string), <span class="number">4</span>)):</span><br><span class="line">currentIPAddressParts = [<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>]</span><br><span class="line"></span><br><span class="line">currentIPAddressParts[<span class="number">0</span>] = string[:i]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isValidPart(currentIPAddressParts[<span class="number">0</span>]):</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, i + min(len(string) - i, <span class="number">4</span>)):</span><br><span class="line">currentIPAddressParts[<span class="number">1</span>] = string[i:j]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isValidPart(currentIPAddressParts[<span class="number">1</span>]):</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(j + <span class="number">1</span>, j + min(len(string) - j, <span class="number">4</span>)):</span><br><span class="line">currentIPAddressParts[<span class="number">2</span>] = string[j:k]</span><br><span class="line">currentIPAddressParts[<span class="number">3</span>] = string[k:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isValidPart(currentIPAddressParts[<span class="number">2</span>]) <span class="keyword">and</span> isValidPart(currentIPAddressParts[<span class="number">3</span>]):</span><br><span class="line">result.append(<span class="string">"."</span>.join(currentIPAddressParts))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValidPart</span><span class="params">(string)</span>:</span></span><br><span class="line">stringAsInt = int(string)</span><br><span class="line"><span class="keyword">if</span> stringAsInt &gt; <span class="number">255</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">return</span> len(string) == len(str(stringAsInt)) <span class="comment"># check for leading 0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Longest-Common-Prefix&quot;&gt;&lt;a href=&quot;#Longest-Common-Prefix&quot; class=&quot;headerlink&quot; title=&quot;Longest Common Prefix&quot;&gt;&lt;/a&gt;Longest Common Prefix&lt;/
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Integer to Roman</title>
    <link href="https://www.qianhongbo.com/LeetCode/Integer-to-Roman.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Integer-to-Roman.html</id>
    <published>2022-01-29T13:16:39.000Z</published>
    <updated>2022-01-30T06:02:51.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Roman-To-Integer"><a href="#Roman-To-Integer" class="headerlink" title="Roman To Integer"></a>Roman To Integer</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;III&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: III = 3.</span><br></pre></td></tr></table></figure><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;LVIII&quot;</span><br><span class="line">Output: 58</span><br><span class="line">Explanation: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure><h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3:"></a>Example 3:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;MCMXCIV&quot;</span><br><span class="line">Output: 1994</span><br><span class="line">Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Left-to-Right-Pass"><a href="#Left-to-Right-Pass" class="headerlink" title="Left-to-Right Pass"></a>Left-to-Right Pass</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(1)</span></span><br><span class="line"><span class="comment"># Space O(1)</span></span><br><span class="line">values = &#123;</span><br><span class="line">    <span class="string">"I"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"V"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"X"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"L"</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">"C"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">"D"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">"M"</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(s):</span><br><span class="line">            <span class="comment"># If this is the subtractive case.</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(s) <span class="keyword">and</span> values[s[i]] &lt; values[s[i + <span class="number">1</span>]]:</span><br><span class="line">                total += values[s[i + <span class="number">1</span>]] - values[s[i]]</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            <span class="comment"># Else this is NOT the subtractive case.</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total += values[s[i]]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h4 id="Left-to-Right-Pass-Improved"><a href="#Left-to-Right-Pass-Improved" class="headerlink" title="Left-to-Right Pass Improved"></a>Left-to-Right Pass Improved</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(1)</span></span><br><span class="line"><span class="comment"># Space O(1)</span></span><br><span class="line">values = &#123;</span><br><span class="line">    <span class="string">"I"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"V"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"X"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"L"</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">"C"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">"D"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">"M"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">"IV"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"IX"</span>: <span class="number">9</span>,</span><br><span class="line">    <span class="string">"XL"</span>: <span class="number">40</span>, </span><br><span class="line">    <span class="string">"XC"</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="string">"CD"</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="string">"CM"</span>: <span class="number">900</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(s):</span><br><span class="line">            <span class="comment"># This is the subtractive case.</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; len(s) - <span class="number">1</span> <span class="keyword">and</span> s[i:i+<span class="number">2</span>] <span class="keyword">in</span> values:</span><br><span class="line">                total += values[s[i:i+<span class="number">2</span>]] </span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total += values[s[i]]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h4 id="Right-to-Left-Pass"><a href="#Right-to-Left-Pass" class="headerlink" title="Right-to-Left Pass"></a>Right-to-Left Pass</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(1)</span></span><br><span class="line"><span class="comment"># Space O(1)</span></span><br><span class="line">values = &#123;</span><br><span class="line">    <span class="string">"I"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"V"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"X"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"L"</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">"C"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">"D"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">"M"</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        total = values.get(s[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len(s) - <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> values[s[i]] &lt; values[s[i + <span class="number">1</span>]]:</span><br><span class="line">                total -= values[s[i]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total += values[s[i]]</span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h2 id="Integer-to-Roman"><a href="#Integer-to-Roman" class="headerlink" title="Integer to Roman"></a>Integer to Roman</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><h4 id="Example-1-1"><a href="#Example-1-1" class="headerlink" title="Example 1:"></a>Example 1:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: num = <span class="number">3</span></span><br><span class="line">Output: <span class="string">"III"</span></span><br><span class="line">Explanation: <span class="number">3</span> is represented as <span class="number">3</span> ones.</span><br></pre></td></tr></table></figure><h4 id="Example-2-1"><a href="#Example-2-1" class="headerlink" title="Example 2:"></a>Example 2:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: num = <span class="number">58</span></span><br><span class="line">Output: <span class="string">"LVIII"</span></span><br><span class="line">Explanation: L = <span class="number">50</span>, V = <span class="number">5</span>, III = <span class="number">3</span>.</span><br></pre></td></tr></table></figure><h4 id="Example-3-1"><a href="#Example-3-1" class="headerlink" title="Example 3:"></a>Example 3:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: num = <span class="number">1994</span></span><br><span class="line">Output: <span class="string">"MCMXCIV"</span></span><br><span class="line">Explanation: M = <span class="number">1000</span>, CM = <span class="number">900</span>, XC = <span class="number">90</span> and IV = <span class="number">4</span>.</span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(1)</span></span><br><span class="line"><span class="comment"># Space O(1)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span><span class="params">(self, num: int)</span> -&gt; str:</span></span><br><span class="line">        digits = [(<span class="number">1000</span>, <span class="string">"M"</span>), (<span class="number">900</span>, <span class="string">"CM"</span>), (<span class="number">500</span>, <span class="string">"D"</span>), (<span class="number">400</span>, <span class="string">"CD"</span>), (<span class="number">100</span>, <span class="string">"C"</span>), </span><br><span class="line">                  (<span class="number">90</span>, <span class="string">"XC"</span>), (<span class="number">50</span>, <span class="string">"L"</span>), (<span class="number">40</span>, <span class="string">"XL"</span>), (<span class="number">10</span>, <span class="string">"X"</span>), (<span class="number">9</span>, <span class="string">"IX"</span>), </span><br><span class="line">                  (<span class="number">5</span>, <span class="string">"V"</span>), (<span class="number">4</span>, <span class="string">"IV"</span>), (<span class="number">1</span>, <span class="string">"I"</span>)]</span><br><span class="line">        roman_digits = []</span><br><span class="line">        <span class="keyword">for</span> value, symbol <span class="keyword">in</span> digits:</span><br><span class="line">            <span class="keyword">if</span> num == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">            count, num = divmod(num, value) <span class="comment"># divmod(7, 2) ----&gt; (3, 1)</span></span><br><span class="line">            roman_digits.append(symbol * count)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(roman_digits)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Roman-To-Integer&quot;&gt;&lt;a href=&quot;#Roman-To-Integer&quot; class=&quot;headerlink&quot; title=&quot;Roman To Integer&quot;&gt;&lt;/a&gt;Roman To Integer&lt;/h2&gt;&lt;h3 id=&quot;Question&quot;
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Java Notes 3</title>
    <link href="https://www.qianhongbo.com/Backend/Java/Java-Notes-3.html"/>
    <id>https://www.qianhongbo.com/Backend/Java/Java-Notes-3.html</id>
    <published>2022-01-29T04:06:44.000Z</published>
    <updated>2022-02-16T04:01:16.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h2><h3 id="Imperative-Code"><a href="#Imperative-Code" class="headerlink" title="Imperative Code"></a>Imperative Code</h3><p>Early Java programs were usually programmed in the imperative style. Imperative code usually focuses on how a task is performed. Each line of code gives a specific procedure or operation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTopScore</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> topScore = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (Student s : students) &#123;</span><br><span class="line">   <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">   topScore = Math.max(topScore, s.getScore());</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> topScore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Focuses on <strong>how</strong> a task is performed.</li><li>Each line of code gives a specific procedure or operation.</li></ul><h3 id="Functional-Code"><a href="#Functional-Code" class="headerlink" title="Functional Code"></a>Functional Code</h3><p>Starting with version 8, Java added language features to support a more functional style of programming. You might also hear some people call it <strong>declarative</strong> programming.</p><p>Functional code focuses on what happens to inputs in order to produce outputs. You can think of it as describing how to get from the input to the output:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTopScore</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> students.stream()</span><br><span class="line">     .filter(Objects::nonNull)</span><br><span class="line">     .mapToInt(Student::getScore)</span><br><span class="line">     .max()</span><br><span class="line">     .orElse(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code does the exact same thing as the last code example, but it uses a more functional programming style, because it:</p><ul><li>Focuses on what happens to inputs in order to produce outputs..</li><li>Describes how to transform the input into the output.</li></ul><h3 id="Lambda-Expressions"><a href="#Lambda-Expressions" class="headerlink" title="Lambda Expressions"></a>Lambda Expressions</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BinaryOperator&lt;Integer&gt; add =</span><br><span class="line">   (Integer a, Integer b) -&gt; &#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(add.apply(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h3 id="Functional-Interface"><a href="#Functional-Interface" class="headerlink" title="Functional Interface"></a>Functional Interface</h3><p>A <strong>functional interface</strong> is a Java interface with exactly one abstract method, called the <strong>functional method</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (t) -&gt; !test(t); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Other methods left out of this example</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Predicate</code>‘s one abstract method is <code>test()</code>. <code>test()</code> is known as the <strong>functional method</strong>. “Abstract” means the method is not implemented, so in order to be a functional method, it cannot have a default implementation. However, functional interfaces <em>can</em> have other default methods. In this case, the <code>Predicate</code> interface has a default method called <code>negate()</code> that returns another <code>Predicate</code>.</p><h3 id="Anonymous-Class"><a href="#Anonymous-Class" class="headerlink" title="Anonymous Class"></a>Anonymous Class</h3><p>An <strong>anonymous class</strong> is a class that is defined “in-line” and <strong>has no name</strong>, and so it is called “anonymous”.</p><h4 id="Anonymous-Class-vs-Lambda"><a href="#Anonymous-Class-vs-Lambda" class="headerlink" title="Anonymous Class vs. Lambda"></a>Anonymous Class vs. Lambda</h4><p>This anonymous class…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; anonymousSubclass =</span><br><span class="line">   <span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> s.trim().isEmpty();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>… does the same thing as this lambda expresssion:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; lambdaInstead = s -&gt; s.trim().isEmpty();</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"><strong>Anonymous Class</strong></th><th align="left"><strong>Lambdas</strong></th></tr></thead><tbody><tr><td align="left">Class generated at compile-time</td><td align="left">Class generated at runtime</td></tr><tr><td align="left">Can override <strong><code>equals()</code>/<code>hashCode()</code></strong></td><td align="left">Cannot override them; has no identity</td></tr><tr><td align="left"><strong><code>this</code></strong> refers to the anonymous class</td><td align="left"><strong><code>this</code></strong> refers to the enclosing class</td></tr></tbody></table><h4 id="What’s-this-all-about"><a href="#What’s-this-all-about" class="headerlink" title="What’s this all about?"></a>What’s <code>this</code> all about?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Runnable withLambda =</span><br><span class="line">      () -&gt; System.out.println(<span class="string">"From lambda: "</span> + <span class="keyword">this</span>.getClass());</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Runnable withSubclass = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"From subclass: "</span> + <span class="keyword">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ThisExample thisExample = <span class="keyword">new</span> ThisExample();</span><br><span class="line">    thisExample.withLambda.run();</span><br><span class="line">    thisExample.withSubclass.run();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">From lambda: <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">udacitydemo</span>.<span class="title">lambdas</span>.<span class="title">ThisExample</span></span></span><br><span class="line">From subclass: class com.udacitydemo.lambdas.ThisExample$1</span><br></pre></td></tr></table></figure><p>Inside the lambda, <code>this.getClass()</code> returns the class object representing <code>ThisExample</code>. We’ll cover class objects in more detail in the lesson on reflection, but for now the important part is that the <code>this</code> keyword inside the lambda references the <em>enclosing class</em>, which is <code>com.udacitydemo.lambdas.ThisExample</code>.</p><p>For the <code>Runnable</code> subclass, on the other hand, the program printed <code>com.udacitydemo.lambdas.ThisExample$1</code>. You can see that the Java compiler generated a class called <code>com.udacitydemo.lambdas.ThisExample$1</code> for the anonymous lambda (yes, the class name contains a dollar sign), and the <code>this</code> keyword refers to <em>that</em> generated class! If you compile this program yourself, you’ll even notice the Java compiler produces a file called <code>ThisExample$1.class</code>, which contains the compiled byte code for the anonymous class.</p><h3 id="Shortcomings-of-Lambdas"><a href="#Shortcomings-of-Lambdas" class="headerlink" title="Shortcomings of Lambdas"></a>Shortcomings of Lambdas</h3><p>Lambdas are very useful, but they do have some shortcomings:</p><ul><li>They can only be used to implement <strong>functional interfaces</strong>, not classes.</li><li>Lambdas cannot implement any interface that has multiple abstract methods.</li><li>Lambdas cannot throw checked exceptions (any subclass of <code>Exception</code>, such as <code>IOException</code>).</li></ul><h3 id="Two-Examples"><a href="#Two-Examples" class="headerlink" title="Two Examples"></a>Two Examples</h3><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><h5 id="BinaryOperation-java"><a href="#BinaryOperation-java" class="headerlink" title="BinaryOperation.java"></a>BinaryOperation.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BinaryOperation</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">apply</span><span class="params">(T a, T b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BinaryOperator&lt;Integer&gt; add = (a, b) -&gt; a + b;</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> == add.apply(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><h5 id="Calculator-java"><a href="#Calculator-java" class="headerlink" title="Calculator.java"></a>Calculator.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BinaryOperator; <span class="comment">// a functional interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BinaryOperator&lt;Integer&gt;&gt; operators = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerOperation</span><span class="params">(String symbol, BinaryOperator&lt;Integer&gt; operator)</span> </span>&#123;</span><br><span class="line">    operators.put(symbol.strip(), operator);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, String operator, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> operators.get(operator).apply(a, b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Calculate-java"><a href="#Calculate-java" class="headerlink" title="Calculate.java"></a>Calculate.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">3</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Usage: Calculate [int] [operator] [int]"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">    calculator.registerOperation(<span class="string">"+"</span>, (a, b) -&gt; a + b);</span><br><span class="line">    calculator.registerOperation(<span class="string">"-"</span>, (a, b) -&gt; a - b);</span><br><span class="line">    calculator.registerOperation(<span class="string">"/"</span>, (a, b) -&gt; a / b);</span><br><span class="line">    calculator.registerOperation(<span class="string">"*"</span>, (a, b) -&gt; a * b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">    String operator = args[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> b = Integer.parseInt(args[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    System.out.println(calculator.calculate(a, operator, b));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capturing-variables"><a href="#Capturing-variables" class="headerlink" title="Capturing variables"></a>Capturing variables</h3><h4 id="Captured-variables"><a href="#Captured-variables" class="headerlink" title="Captured variables"></a>Captured variables</h4><p>Lambdas can <strong>capture</strong> variables from the surrounding code. If a lambda uses any variables from the surrounding code, those variables are <strong>captured</strong>. Variables can only be captured if they are <strong>effectively final</strong>.</p><p>An <strong>effectively final</strong> variable is a variable whose value does not change after it is initialized.</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Map&lt;Year, Integer&gt; <span class="title">getClassSizes</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Map&lt;Year, Integer&gt; classSizes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  students.stream().forEach(s -&gt;</span><br><span class="line">      classSizes.compute(</span><br><span class="line">          s.getGraduationYear(),</span><br><span class="line">          (k, v) -&gt; (v == <span class="keyword">null</span>) ? <span class="number">1</span> : <span class="number">1</span> + v));</span><br><span class="line">  <span class="keyword">return</span> classSizes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A good test to figure out if a variable is effectively final is to add the <code>final</code> keyword to it. If the code still compiles, that variable is effectively final!</p><p>In the example, the <code>classSizes</code> variable is effectively final because the value of the variable itself does not change after it’s initialized. Remember that in Java, objects are passed by reference. Even though the <code>HashMap</code> changes, the variable’s value is the <code>HashMap</code>‘s location in memory, and that location never changes.</p><h3 id="Method-Reference"><a href="#Method-Reference" class="headerlink" title="Method Reference"></a>Method Reference</h3><p>A <strong>method reference</strong> is a short lambda expression that refers to a method that is already named.</p><p>Generally speaking, if a method is already defined that you can use, you should use a method reference instead of writing a brand new lambda. It’s usually a good idea in software development to not write new code if there’s already existing code that does the same thing you’re trying to do!</p><p>Method references cannot capture surrounding variables, though. If you find yourself in this situation, you should use a custom lambda instead.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdasMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the number of strings that match a given condition.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> input the strings that should be tested.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> condition the condition that strings should be tested against.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the number of strings in the input that match the condition.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">countMatchingStrings</span><span class="params">(List&lt;String&gt; input, Predicate&lt;String&gt; condition)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input.stream().filter(condition).count();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; input = List.of(<span class="string">"hello"</span>, <span class="string">"\t   "</span>, <span class="string">"world"</span>, <span class="string">""</span>, <span class="string">"\t"</span>, <span class="string">" "</span>, <span class="string">"goodbye"</span>, <span class="string">"  "</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Using lambda expression:</span></span><br><span class="line">    <span class="keyword">long</span> numberOfWhitespaceStrings =</span><br><span class="line">            countMatchingStrings(input, s -&gt; s.trim().isEmpty());</span><br><span class="line">    <span class="comment">// Using method reference:</span></span><br><span class="line">    <span class="keyword">long</span> numberOfWhitespaceStrings = countMatchingStrings(input, String::isBlank);</span><br><span class="line"></span><br><span class="line">    System.out.println(numberOfWhitespaceStrings + <span class="string">" whitespace strings"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h3><p>A <strong>stream</strong> is a sequence of elements.</p><p>Streams are useful because they allow us to process collection, one element at a time. They can process elements in many ways, such as (but not limited to) filtering or transforming elements, sorting elements, or computing statistics such as the sum or average.</p><p>A stream pipeline consists of creating a stream, calling intermediate operations on the stream, and then terminating the stream using a terminal operation.</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printScores</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> students.stream()</span><br><span class="line">     .filter(Objects::nonNull)</span><br><span class="line">     .mapToInt(Student::getScore)</span><br><span class="line">     .max()</span><br><span class="line">     .orElse(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First, the <code>stream()</code> method creates a stream from the students list.</p><p>This stream pipeline has two intermediate methods: the <code>filter()</code> method removes the elements of the stream that are <code>null</code>, and <code>mapToInt()</code> transforms each student into an <code>int</code>. Notice that each of these methods returns another <code>Stream</code>: <code>filter()</code> returns a <code>Stream&lt;Student&gt;</code>, and <code>mapToInt()</code> returns an <code>IntStream</code>.</p><p>Finally, the terminal operation <code>max()</code> computes the maximum value in the <code>IntStream</code>. This terminal method actually returns an <code>OptionalInt</code> instead of an <code>int</code>. If the <code>students</code> parameter is empty or contains only <code>null</code> elements, it’s possible the final stream will be empty. In this case, we need to tell the program to return a default value of <code>0</code>.</p><blockquote><p>If <code>max()</code> returns an <code>OptionalInt</code> with a value, that value will be used. However, if <code>max()</code> returns <code>OptionalInt.empty()</code>, the call to <code>orElse()</code> makes sure that a default value of <code>0</code> will be returned.</p></blockquote><h4 id="Collector"><a href="#Collector" class="headerlink" title="Collector"></a>Collector</h4><p>A <code>Collector</code> is a terminal stream operation that accumulates stream elements into a container.</p><p>The <code>collect()</code> method is a terminal operation that aggregates streams of elements. Collectors can be passed to <code>collect()</code> to determine what kind of collection is created.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; s = stringList.stream().collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><p>Collectors can be used to perform reduction operations such as adding or counting.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Year, Long&gt; graduatingClassSizes = studentList.stream()</span><br><span class="line">    .collect(Collectors.groupingBy(</span><br><span class="line">        Student::getGraduationYear, Collectors.counting());</span><br></pre></td></tr></table></figure><p>Here, <code>groupingBy()</code> is used to collect elements into a <code>Map</code>. <code>Collectors.counting()</code> counts the number of values for each key, so, in this example, it will count how many students there are for each graduation year.</p><h2 id="Working-with-Files-amp-I-O"><a href="#Working-with-Files-amp-I-O" class="headerlink" title="Working with Files &amp; I/O"></a>Working with Files &amp; I/O</h2><h3 id="I-O-Input-Output"><a href="#I-O-Input-Output" class="headerlink" title="I/O (Input/Output)"></a>I/O (Input/Output)</h3><p><strong>Input</strong> is data the program receives from external processes and systems, such as from the local file system or the Internet.</p><p><strong>Output</strong> is data the program sends to external processes and systems.</p><h3 id="Program-Memory-vs-Persistent-Storage"><a href="#Program-Memory-vs-Persistent-Storage" class="headerlink" title="Program Memory vs. Persistent Storage"></a>Program Memory vs. Persistent Storage</h3><h4 id="Program-Memory"><a href="#Program-Memory" class="headerlink" title="Program Memory"></a>Program Memory</h4><p>In Java programs and other computer programs, short-term storage happens in the program memory.</p><ul><li>Variables, objects and data structures are stored in the heap and stack. * Memory access is fast.</li><li>Memory is erased when the program is done running.</li></ul><h4 id="Persistent-Storage"><a href="#Persistent-Storage" class="headerlink" title="Persistent Storage"></a>Persistent Storage</h4><p>If we want to store data for longer periods of time, we have to use long-term storage, also known as persistent storage.</p><ul><li><em>Files</em>, stored on disk, are one of the most common forms of persistent storage. Your PC, laptop, and phone all have their own file systems that can store different kinds of files.</li><li>Files stick around, or <em>persist</em>, after the program is done executing, so can also be read by humans or other programs.</li><li>Persistent storage access is usually <em>much</em> slower than memory access.</li><li>Databases are another common form of persistent storage.</li></ul><h3 id="File-Open-Options"><a href="#File-Open-Options" class="headerlink" title="File Open Options"></a>File Open Options</h3><p>When you create, read, or write a file, there are standard modes that you can use to do so. Java uses the <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/StandardOpenOption.html" target="_blank" rel="noopener"><code>StandardOpenOptions</code></a> class to encapsulate all these modes.</p><p>Here are some of the common modes:</p><table><thead><tr><th align="left"><strong>Option</strong></th><th align="left"><strong>Description</strong></th></tr></thead><tbody><tr><td align="left"><code>READ</code></td><td align="left">Open a file for reading, fail if it doesn’t exist.</td></tr><tr><td align="left"><code>CREATE</code></td><td align="left">Create a file.</td></tr><tr><td align="left"><code>CREATE_NEW</code></td><td align="left">Same as <code>CREATE</code>, but fail if the file already exists.</td></tr><tr><td align="left"><code>WRITE</code></td><td align="left">Open a file for writing.</td></tr><tr><td align="left"><code>APPEND</code></td><td align="left">Same as <code>WRITE</code>, but write to the end of the file.</td></tr></tbody></table><p>You are allowed to use more than one option at a time.</p><h3 id="Path-API"><a href="#Path-API" class="headerlink" title="Path API"></a>Path API</h3><p>A <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html" target="_blank" rel="noopener"><code>Path</code></a> is Java’s way to refer to a file on a file system:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Path p = Path.of(&quot;your/path/here&quot;);</span><br></pre></td></tr></table></figure><p>All paths either refer to <em>files</em> or <em>directories</em>.</p><ul><li>A <em>file</em> contains stored data or bytes.</li><li>A <em>directory</em> contains zero or more files.</li></ul><p>All paths are either <em>absolute</em> or <em>relative</em>.</p><ul><li><em>Absolute paths</em> start with a forward-slash (<code>/</code>) (known as the <em>root directory</em> on Mac and Linux), or a drive name on Windows.</li><li><em>Relative paths</em> are only meaningful relative to some other starting point. They do not start with a forward slash or drive name.</li></ul><p>Note that the <code>Path</code> object in Java always uses forward-slashes to delimit the parts of the path <code>String</code>, even if the underlying file system uses backslashes (such as the NTFS file system on Windows).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Absolute path to a directory on Mac or Linux</span></span><br><span class="line">Path p = Path.of(<span class="string">"/home/user/Documents/workspaces"</span>);</span><br><span class="line"><span class="comment">// Absolute path to a file on Mac or Linux</span></span><br><span class="line">Path p = Path.of(<span class="string">"/home/user/Documents/workspaces/main.java"</span>);</span><br><span class="line"><span class="comment">// Relatuve path to a directory</span></span><br><span class="line">Path p = Path.of(<span class="string">"user/Documents/workspaces"</span>);</span><br><span class="line"><span class="comment">// Path parts as separate parameters</span></span><br><span class="line">Path p = Path.of(<span class="string">"user"</span>, <span class="string">"Documents"</span>, <span class="string">"workspaces"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathApiDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Path p1 = Path.of(<span class="string">"."</span>);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        <span class="comment">// output: .</span></span><br><span class="line">        Path p2 = Path.of(<span class="string">"."</span>);</span><br><span class="line">        System.out.println(p2.toAbsolutePath());</span><br><span class="line">        <span class="comment">// output: /Users/qianhongbo/Documents/Mycode/JAVA/Java Code/Java Notes 4/.</span></span><br><span class="line">        Path p3 = Path.of(<span class="string">"."</span>);</span><br><span class="line">        System.out.println(p3.toAbsolutePath().normalize());</span><br><span class="line">        <span class="comment">// output: /Users/qianhongbo/Documents/Mycode/JAVA/Java Code/Java Notes 4</span></span><br><span class="line">        Path p4 = Path.of(<span class="string">"."</span>);</span><br><span class="line">        System.out.println(p4.toAbsolutePath().resolve(<span class="string">".."</span>));</span><br><span class="line">        <span class="comment">// output: /Users/qianhongbo/Documents/Mycode/JAVA/Java Code/Java Notes 4/./..</span></span><br><span class="line">        Path p5 = Path.of(<span class="string">"."</span>);</span><br><span class="line">        System.out.println(p5.toAbsolutePath().resolve(<span class="string">".."</span>).normalize());</span><br><span class="line">        <span class="comment">// output: /Users/qianhongbo/Documents/Mycode/JAVA/Java Code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reading-and-Writing-data-in-Java"><a href="#Reading-and-Writing-data-in-Java" class="headerlink" title="Reading and Writing data in Java"></a>Reading and Writing data in Java</h3><p>In Java, the utilities for reading and writing data are built on top of each other. This diagram shows you what that means. When you use a <a href="https://docs.oracle.com/javase/10/docs/api/java/io/BufferedReader.html" target="_blank" rel="noopener"><code>BufferedReader</code></a> to read lines of text, that buffered reader is reading from another underlying <a href="https://docs.oracle.com/javase/10/docs/api/java/io/Reader.html" target="_blank" rel="noopener"><code>Reader</code></a> that provides characters of text. That <code>Reader</code>, in turn, is itself using an <a href="https://docs.oracle.com/javase/10/docs/api/java/io/InputStream.html" target="_blank" rel="noopener"><code>InputStream</code></a> behind the scenes to read the raw data.</p><p><img src="https://video.udacity-data.com/topher/2020/November/5faf3729_screen-shot-2020-11-13-at-5.45.56-pm/screen-shot-2020-11-13-at-5.45.56-pm.png" alt="stream"></p><h4 id="InputStream-and-OutputStream"><a href="#InputStream-and-OutputStream" class="headerlink" title="InputStream and OutputStream"></a><code>InputStream</code> and <code>OutputStream</code></h4><p>Input and output streams are the lowest level utilities Java provides. They give you access to the raw data, in the form of bytes. This data can come from a file, from user input on the command-line, or from a network or other source. These are the lowest level APIs Java offers for reading or writing a stream of bytes.</p><h4 id="InputStream-Example"><a href="#InputStream-Example" class="headerlink" title="InputStream Example"></a><code>InputStream</code> Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">InputStream in =</span><br><span class="line">   Files.newInputStream(Path.of(<span class="string">"test"</span>), StandardOpenOption.READ);</span><br><span class="line"><span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">while</span> (in.read(data) != -<span class="number">1</span>) &#123;  <span class="comment">// Returns the number of bytes read</span></span><br><span class="line">  useData(data);</span><br><span class="line">&#125;</span><br><span class="line">in.close();  <span class="comment">// Close the "test" file</span></span><br></pre></td></tr></table></figure><p>This code creates a file called “test” using <code>newInputStream()</code> method of the Files API. The code calls the <code>read()</code> method, which reads the data into a <code>byte[]</code> and returns the number of bytes that were read. If no bytes were read, it returns <code>-1</code>. This code will read the entire file, 10 bytes at a time, until the loop reaches the end of the file.</p><h4 id="OutputStream-Example"><a href="#OutputStream-Example" class="headerlink" title="OutputStream Example"></a><code>OutputStream</code> Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OutputStream out = Files.newOutputStream(Path.of(<span class="string">"test"</span>));</span><br><span class="line">out.write(<span class="string">"Hello, world!"</span>.getBytes());</span><br><span class="line">out.close();  <span class="comment">// Close the "test" file</span></span><br></pre></td></tr></table></figure><p>The basic <code>write()</code> method only deals with bytes. It’s pretty self-explanatory: you give the <code>write()</code> method a <code>byte[]</code>, and it writes those bytes to the output stream.</p><p>Both code examples call the <code>close()</code> method, which we’ll cover in more detail later in this lesson.</p><h4 id="Demo-Code-Ways-to-Copy-a-File"><a href="#Demo-Code-Ways-to-Copy-a-File" class="headerlink" title="Demo Code: Ways to Copy a File"></a>Demo Code: Ways to Copy a File</h4><h5 id="Reading-and-Writing-the-Data-Directly"><a href="#Reading-and-Writing-the-Data-Directly" class="headerlink" title="Reading and Writing the Data Directly"></a>Reading and Writing the Data Directly</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream in = Files.newInputStream(Path.of(args[<span class="number">0</span>]));</span><br><span class="line">        OutputStream out = Files.newOutputStream(Path.of(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">while</span> (in.read(data) != -<span class="number">1</span>) &#123;</span><br><span class="line">            out.write(data);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Using-InputStream-transferTo-OutputStream"><a href="#Using-InputStream-transferTo-OutputStream" class="headerlink" title="Using InputStream.transferTo(OutputStream)"></a>Using <code>InputStream.transferTo(OutputStream)</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputOutputStreams</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream in = Files.newInputStream(Path.of(args[<span class="number">0</span>]));</span><br><span class="line">        OutputStream out = Files.newOutputStream(Path.of(args[<span class="number">1</span>]));</span><br><span class="line">        in.transferTo(out);</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Using-the-Files-API"><a href="#Using-the-Files-API" class="headerlink" title="Using the Files API"></a>Using the Files API</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Files.copy(Path.of(args[<span class="number">0</span>]), Path.of(args[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Readers-Writers"><a href="#Readers-Writers" class="headerlink" title="Readers / Writers"></a>Readers / Writers</h4><p>Readers and Writers are the next level of abstraction built on top of input and output streams. These interfaces read and write text characters.</p><h5 id="Reader-Example"><a href="#Reader-Example" class="headerlink" title="Reader Example"></a>Reader Example</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">10</span>];</span><br><span class="line">Reader reader =</span><br><span class="line">   Files.newBufferedReader(Path.of(<span class="string">"test"</span>), StandardCharsets.UTF_8);</span><br><span class="line"><span class="keyword">while</span> (reader.read(data) != -<span class="number">1</span>) &#123;</span><br><span class="line"> useData(data);</span><br><span class="line">&#125;</span><br><span class="line">reader.close();</span><br></pre></td></tr></table></figure><p>Just like input streams, <code>Reader</code>s are usually created with the Files API. But instead of reading <code>byte</code>s, we are reading <code>char</code>s. There’s also a <code>StandardCharset</code>, which we’ll cover that in more detail in the next video.</p><h5 id="Writer-Example"><a href="#Writer-Example" class="headerlink" title="Writer Example"></a>Writer Example</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Writer writer =</span><br><span class="line">   Files.newBufferedWriter(Path.of(<span class="string">"test"</span>),</span><br><span class="line">                           StandardCharsets.UTF_8);</span><br><span class="line">writer.write(<span class="string">"hello, world"</span>);</span><br><span class="line">writer.close();  <span class="comment">// Close the "test" file</span></span><br></pre></td></tr></table></figure><p>The <code>Writer</code> is pretty much what you would expect. This time we are writing encoded <code>String</code>s of data instead of raw <code>byte</code>s.</p><h4 id="Buffered-Strams"><a href="#Buffered-Strams" class="headerlink" title="Buffered Strams"></a>Buffered Strams</h4><p>Buffered streams reduce the number of I/O operations performed by your program. This can significantly shrink the amount of time your program spends doing I/O!</p><p>When your code calls <code>BufferedReader.read()</code>, the <code>BufferedReader</code> reads ahead, and fetches more data than you asked for. Whatever it reads is stored in an array, which is also called a <em>buffer</em>.</p><p>The next time you call <code>read()</code>, if the data you requested is already in the buffer, the BufferedReader will give you that cached data, without having to do another read from disk!</p><h5 id="BufferedReader-Example"><a href="#BufferedReader-Example" class="headerlink" title="BufferedReader Example"></a><code>BufferedReader</code> Example</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader reader =</span><br><span class="line">   Files.newBufferedReader(Path.of(<span class="string">"test"</span>), StandardCharsets.UTF_8);</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line"> useString(line);</span><br><span class="line">&#125;</span><br><span class="line">reader.close();</span><br></pre></td></tr></table></figure><p>The main difference between this API and the <code>Reader</code> API is the addition of the <code>readLine()</code> method, which returns a full line of text. Reading lines this way is a lot easier than reading the individual characters one by one!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BufferedWriter writer =</span><br><span class="line">   Files.newBufferedWriter(Path.of(&quot;test&quot;),</span><br><span class="line">                           StandardCharsets.UTF_8);</span><br><span class="line">writer.write(&quot;Hello, &quot;);</span><br><span class="line">writer.write(&quot;world!&quot;);</span><br><span class="line">writer.flush();  // Writes the contents of the buffer</span><br><span class="line">writer.close();  // Flushes the buffer and closes &quot;test&quot;</span><br></pre></td></tr></table></figure><p><code>BufferedWriter</code> also uses an in-memory buffer to store writes, and then periodically writes contents of the buffer in batches.</p><p>In this code, the <code>write()</code> method is called twice, but there is only one actual write to the underlying output stream.</p><h3 id="Java-Object-Serialization"><a href="#Java-Object-Serialization" class="headerlink" title="Java Object Serialization"></a>Java Object Serialization</h3><p><strong>Serialization</strong> is the process of converting an object into a data format that can later be <strong>deserialized</strong> back into the original object.</p><p><img src="https://video.udacity-data.com/topher/2020/November/5faf3bcd_screen-shot-2020-11-13-at-6.06.13-pm/screen-shot-2020-11-13-at-6.06.13-pm.png" alt></p><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h4><p><code>UdacisearchClient.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">UdacisearchClient</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  ... <span class="comment">// Everything else stays the same!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Main.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Usage: Main [file path]"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UdacisearchClient client =</span><br><span class="line">        <span class="keyword">new</span> UdacisearchClient(</span><br><span class="line">            <span class="string">"CatFacts LLC"</span>,</span><br><span class="line">            <span class="number">17</span>,</span><br><span class="line">            <span class="number">8000</span>,</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            Instant.now(),</span><br><span class="line">            Duration.ofDays(<span class="number">180</span>),</span><br><span class="line">            ZoneId.of(<span class="string">"America/Los_Angeles"</span>),</span><br><span class="line">            <span class="string">"555 Meowmers Ln, Riverside, CA 92501"</span>);</span><br><span class="line"></span><br><span class="line">    Path outputPath = Path.of(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">try</span> (ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(Files.newOutputStream(outputPath))) &#123;</span><br><span class="line">      out.writeObject(client);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"Wrote to "</span> + outputPath.toAbsolutePath().toString());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(Files.newInputStream(outputPath))) &#123;</span><br><span class="line">      UdacisearchClient deserialized = (UdacisearchClient) in.readObject();</span><br><span class="line">      System.out.println(<span class="string">"Deserialized "</span> + deserialized);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JSON-and-XML"><a href="#JSON-and-XML" class="headerlink" title="JSON and XML"></a>JSON and XML</h4><p>JSON (<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation) and XML (E<strong>x</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage) are two common text formats for serializing data.</p><h5 id="JSON-Example"><a href="#JSON-Example" class="headerlink" title="JSON Example"></a>JSON Example</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="number">17</span>,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"George Washington"</span>,</span><br><span class="line">  <span class="string">"emails"</span>: [<span class="string">"george.w@gmail.com"</span>, <span class="string">"potus.ftw@yahoo.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="XML-Example"><a href="#XML-Example" class="headerlink" title="XML Example"></a>XML Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;client&gt;</span><br><span class="line">  &lt;id&gt; 17 &lt;/id&gt;</span><br><span class="line">  &lt;name&gt; George Washington &lt;/name&gt;</span><br><span class="line">  &lt;emails&gt;</span><br><span class="line">    &lt;email&gt; george.w@gmail.com &lt;/email&gt;</span><br><span class="line">    &lt;email&gt; potus.ftw@yahoo.com &lt;/email&gt;</span><br><span class="line">  &lt;/emails&gt;</span><br><span class="line">&lt;/client&gt;</span><br></pre></td></tr></table></figure><h5 id="Jackson-example-for-JSON"><a href="#Jackson-example-for-JSON" class="headerlink" title="Jackson example for JSON"></a>Jackson example for JSON</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Usage: Main [file path]"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UdacisearchClient client =</span><br><span class="line">        <span class="keyword">new</span> UdacisearchClient(</span><br><span class="line">            <span class="string">"CatFacts LLC"</span>,</span><br><span class="line">            <span class="number">17</span>,</span><br><span class="line">            <span class="number">8000</span>,</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            Instant.now(),</span><br><span class="line">            Duration.ofDays(<span class="number">180</span>),</span><br><span class="line">            ZoneId.of(<span class="string">"America/Los_Angeles"</span>),</span><br><span class="line">            <span class="string">"555 Meowmers Ln, Riverside, CA 92501"</span>);</span><br><span class="line"></span><br><span class="line">    Path outputPath = Path.of(args[<span class="number">0</span>]);</span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    objectMapper.registerModule(<span class="keyword">new</span> JavaTimeModule());</span><br><span class="line">    objectMapper.writeValue(Files.newBufferedWriter(outputPath), client);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"Wrote to "</span> + outputPath.toAbsolutePath().toString());</span><br><span class="line"></span><br><span class="line">    UdacisearchClient deserialized =</span><br><span class="line">        objectMapper.readValue(Files.newBufferedReader(outputPath), UdacisearchClient.class);</span><br><span class="line">    System.out.println(<span class="string">"Deserialized "</span> + deserialized);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h2><h3 id="What-is-a-Dependency"><a href="#What-is-a-Dependency" class="headerlink" title="What is a Dependency?"></a>What is a Dependency?</h3><p>A <strong>dependency</strong> is anything your code needs to work, such as an external library, an environment variable, a remote website, or a database.</p><p>In the context of dependency injection, a dependency usually refers to an object, class, or interface that your code imports, creates, or uses.</p><h3 id="What-is-Dependency-Injection"><a href="#What-is-Dependency-Injection" class="headerlink" title="What is Dependency Injection?"></a>What is Dependency Injection?</h3><p><strong>D</strong>ependency <strong>I</strong>njection, or DI, is a design pattern that moves the creation of dependencies to outside of your code. Instead of creating objects, you tell the DI framework to create the objects for you, and then you inject those objects into your class.</p><h3 id="Using-Inject-Annotations"><a href="#Using-Inject-Annotations" class="headerlink" title="Using @Inject Annotations"></a>Using <code>@Inject</code> Annotations</h3><p>To inject objects from a DI framework, you can add <code>@Inject</code> annotations to your code. You can add them directly to instance fields:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseRegistrar</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Inject</span> <span class="keyword">private</span> Database db;</span><br><span class="line">  <span class="meta">@Inject</span> <span class="keyword">private</span> Clock clock;</span><br><span class="line">  <span class="meta">@Inject</span> <span class="keyword">private</span> RegistrationFactory factory;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">registerStudentForCourse</span><span class="params">(Student s, <span class="keyword">int</span> courseId)</span> </span>&#123;</span><br><span class="line">    Course c = db.getCourse(courseId);</span><br><span class="line">    <span class="keyword">if</span> (clock.instant().isAfter(c.getRegistrationDeadline())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!s.getPassedCourses().containsAll(c.getPrereqs())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    db.createRegistration(factory.create(courseId, s.getId()));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>… or, you can add <code>@Inject</code> annotations to constructors:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseRegistrar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Database db;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Clock clock;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> RegistrationFactory factory;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  CourseRegistrar(Database db, Clock clock, RegistrationFactory factory) &#123;</span><br><span class="line">    <span class="keyword">this</span>.db = db;</span><br><span class="line">    <span class="keyword">this</span>.clock = clock;</span><br><span class="line">    <span class="keyword">this</span>.factory = factory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">registerStudentForCourse</span><span class="params">(Student s, <span class="keyword">int</span> courseId)</span> </span>&#123;</span><br><span class="line">    Course c = db.getCourse(courseId);</span><br><span class="line">    <span class="keyword">if</span> (clock.instant().isAfter(c.getRegistrationDeadline())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!s.getPassedCourses().containsAll(c.getPrereqs())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    db.createRegistration(factory.create(courseId, s.getId()));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Functional-Programming&quot;&gt;&lt;a href=&quot;#Functional-Programming&quot; class=&quot;headerlink&quot; title=&quot;Functional Programming&quot;&gt;&lt;/a&gt;Functional Programmi
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="Java" scheme="https://www.qianhongbo.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Add Binary</title>
    <link href="https://www.qianhongbo.com/LeetCode/Add-Binary.html"/>
    <id>https://www.qianhongbo.com/LeetCode/Add-Binary.html</id>
    <published>2022-01-28T02:15:06.000Z</published>
    <updated>2022-01-30T05:47:00.281Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = &quot;11&quot;, b = &quot;1&quot;</span><br><span class="line">Output: &quot;100&quot;</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = &quot;1010&quot;, b = &quot;1011&quot;</span><br><span class="line">Output: &quot;10101&quot;</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(M+N)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;0:b&#125;'</span>.format(int(a, <span class="number">2</span>) + int(b, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二进制字符串转十进制</span></span><br><span class="line">int(“<span class="number">11</span>”, <span class="number">2</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把十进制数12转为对应的二进制数的字符串形式</span></span><br><span class="line"><span class="string">'&#123;0:b&#125;'</span>.format(<span class="number">12</span>)  </span><br><span class="line"><span class="string">'1100'</span></span><br></pre></td></tr></table></figure><p>1 . In Java this approach is limited by the length of the input strings a and b. Once the string is long enough, the result of conversion into integers will not fit into Integer, Long or BigInteger.</p><p>2 . This method has quite low performance in the case of large input numbers.</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(max(M,N))</span></span><br><span class="line"><span class="comment"># Space O(max(N,M))</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span> -&gt; str:</span></span><br><span class="line">        n = max(len(a), len(b))</span><br><span class="line">        <span class="comment"># zfill() 方法返回指定长度的字符串，原字符串右对齐，前面填充0</span></span><br><span class="line">        a, b = a.zfill(n), b.zfill(n)</span><br><span class="line">        </span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        answer = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> a[i] == <span class="string">'1'</span>:</span><br><span class="line">                carry += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> b[i] == <span class="string">'1'</span>:</span><br><span class="line">                carry += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> carry % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                answer.append(<span class="string">'1'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                answer.append(<span class="string">'0'</span>)</span><br><span class="line">            carry //= <span class="number">2</span></span><br><span class="line">        <span class="comment"># 最后一位的进位</span></span><br><span class="line">        <span class="keyword">if</span> carry == <span class="number">1</span>:</span><br><span class="line">            answer.append(<span class="string">'1'</span>)</span><br><span class="line">        <span class="comment"># append 方法获得的数据结果需要反向，并将字符串连接到一起</span></span><br><span class="line">        answer.reverse()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(answer)</span><br></pre></td></tr></table></figure><h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution 3"></a>Solution 3</h4><p>Here the input is more adapted to push towards Approach 1, but there is popular Facebook variation of this problem when interviewer provides you two numbers and asks to sum them up <code>without using addition operation</code>.</p><p>How to start? There is an interview tip for bit manipulation problems: if you don’t know how to start, start from computing XOR for your input data. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span> -&gt; str:</span></span><br><span class="line">        x, y = int(a, <span class="number">2</span>), int(b, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">while</span> y:</span><br><span class="line">            answer = x ^ y</span><br><span class="line">            carry = (x &amp; y) &lt;&lt; <span class="number">1</span></span><br><span class="line">            x, y = answer, carry</span><br><span class="line">        <span class="keyword">return</span> bin(x)[<span class="number">2</span>:] <span class="comment"># bin()将十进制转二进制</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结果的前两位需要去掉</span></span><br><span class="line">&gt;&gt;&gt;bin(<span class="number">10</span>)</span><br><span class="line"><span class="string">'0b1010'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h2&gt;&lt;p&gt;Given two binary strings &lt;code&gt;a&lt;/code&gt; and &lt;c
      
    
    </summary>
    
      <category term="Leetcode" scheme="https://www.qianhongbo.com/categories/Leetcode/"/>
    
    
  </entry>
  
  <entry>
    <title>Design Pattern</title>
    <link href="https://www.qianhongbo.com/Backend/Design%20Pattern/Design-Pattern.html"/>
    <id>https://www.qianhongbo.com/Backend/Design Pattern/Design-Pattern.html</id>
    <published>2022-01-27T06:16:54.000Z</published>
    <updated>2022-02-04T00:27:23.536Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">一个设计模式非常好的网站</a></p><p><a href="https://github.com/Qianhongbo/Design-Pattern.git" target="_blank" rel="noopener">Java实例Github仓库</a></p></blockquote><h2 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h2><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p><h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><p>总共有 23 种设计模式。这些模式可以分为三大类：</p><ol><li>创建型模式（Creational Patterns）</li><li>结构型模式（Structural Patterns）</li><li>行为型模式（Behavioral Patterns）</li></ol><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p><ul><li>工厂模式（Factory Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>单例模式（Singleton Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ul><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p><ul><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>过滤器模式（Filter、Criteria Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p>这些设计模式特别关注对象之间的通信。</p><ul><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>空对象模式（Null Object Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板模式（Template Pattern）</li><li>访问者模式（Visitor Pattern）</li></ul><h2 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="Creational-Pattern"><a href="#Creational-Pattern" class="headerlink" title="Creational Pattern"></a>Creational Pattern</h3><h4 id="Singleton-Pattern"><a href="#Singleton-Pattern" class="headerlink" title="Singleton Pattern"></a>Singleton Pattern</h4><p><strong>意图：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>主要解决：</strong>一个全局使用的类频繁地创建与销毁。</p><h4 id="Factory-Pattern"><a href="#Factory-Pattern" class="headerlink" title="Factory Pattern"></a>Factory Pattern</h4><p><strong>意图：</strong>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p><p><strong>主要解决：</strong>主要解决接口选择的问题。</p><h3 id="Structual-Pattern"><a href="#Structual-Pattern" class="headerlink" title="Structual Pattern"></a>Structual Pattern</h3><h4 id="Proxy-Pattern"><a href="#Proxy-Pattern" class="headerlink" title="Proxy Pattern"></a>Proxy Pattern</h4><p><strong>意图：</strong>为其他对象提供一种代理以控制对这个对象的访问。</p><p><strong>主要解决：</strong>在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p><h4 id="Decorator-Pattern"><a href="#Decorator-Pattern" class="headerlink" title="Decorator Pattern"></a>Decorator Pattern</h4><p><strong>意图：</strong>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p><p><strong>主要解决：</strong>一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p><h4 id="Adapter-Pattern"><a href="#Adapter-Pattern" class="headerlink" title="Adapter Pattern"></a>Adapter Pattern</h4><p><strong>意图：</strong>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p><strong>主要解决：</strong>主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。</p><h3 id="Behavioral-Pattern"><a href="#Behavioral-Pattern" class="headerlink" title="Behavioral Pattern"></a>Behavioral Pattern</h3><h4 id="Observer-Pattern"><a href="#Observer-Pattern" class="headerlink" title="Observer Pattern"></a>Observer Pattern</h4><p><strong>意图：</strong>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><p><strong>主要解决：</strong>一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p><h4 id="Command-Pattern"><a href="#Command-Pattern" class="headerlink" title="Command Pattern"></a>Command Pattern</h4><p><strong>意图：</strong>将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。</p><p><strong>主要解决：</strong>在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</p><h4 id="Chain-of-Responsibility-Pattern"><a href="#Chain-of-Responsibility-Pattern" class="headerlink" title="Chain of Responsibility Pattern"></a>Chain of Responsibility Pattern</h4><p><strong>意图：</strong>避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p><p><strong>主要解决：</strong>职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</p><h4 id="Interpreter-Pattern"><a href="#Interpreter-Pattern" class="headerlink" title="Interpreter Pattern"></a>Interpreter Pattern</h4><p><strong>意图：</strong>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p><p><strong>主要解决：</strong>对于一些固定文法构建一个解释句子的解释器。</p><p><strong>何时使用：</strong>如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p><h4 id="Template-Pattern"><a href="#Template-Pattern" class="headerlink" title="Template Pattern"></a>Template Pattern</h4><p><strong>意图：</strong>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p><strong>主要解决：</strong>一些方法通用，却在每一个子类都重新写了这一方法。</p><h4 id="Strategy-Pattern"><a href="#Strategy-Pattern" class="headerlink" title="Strategy Pattern"></a>Strategy Pattern</h4><p><strong>意图：</strong>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p><p><strong>主要解决：</strong>在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p><blockquote><p>策略模式和命令模式二者存在相似之处，区别如下：</p><p>“策略模式可能有不同的算法，但是实际工作中，可能在同一环境下只执行一种算法；命令模式可能有不同的命令，实际工作中，可能各个命令是要先后执行的。”</p></blockquote><h4 id="Visitor-Pattern"><a href="#Visitor-Pattern" class="headerlink" title="Visitor Pattern"></a>Visitor Pattern</h4><p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。</p><p><strong>意图：</strong>主要将数据结构与数据操作分离。</p><p><strong>主要解决：</strong>稳定的数据结构和易变的操作耦合问题。</p><p><strong>何时使用：</strong>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，使用访问者模式将这些封装到类中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;variant&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyVisitor</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">double</span> d)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::variant&lt;<span class="keyword">int</span>, <span class="keyword">double</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; var1(<span class="number">42</span>), var2(<span class="number">3.14</span>), var3(<span class="string">"visit"</span>);</span><br><span class="line"> <span class="comment">// calls operator() for matching int type</span></span><br><span class="line">    <span class="built_in">std</span>::visit(MyVisitor(), var1); </span><br><span class="line"> <span class="comment">// calls operator() for matching double type</span></span><br><span class="line">    <span class="built_in">std</span>::visit(MyVisitor(), var2); </span><br><span class="line"> <span class="comment">// calls operator() for matching std::string type</span></span><br><span class="line">    <span class="built_in">std</span>::visit(MyVisitor(), var3); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/design-pattern-tutorial.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一个设计模式非常好的网站&lt;/a&gt;
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
  </entry>
  
  <entry>
    <title>Java Notes 2</title>
    <link href="https://www.qianhongbo.com/Backend/Java/Java-Notes-2.html"/>
    <id>https://www.qianhongbo.com/Backend/Java/Java-Notes-2.html</id>
    <published>2022-01-23T04:25:39.000Z</published>
    <updated>2022-01-28T04:33:00.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Common-Types"><a href="#Common-Types" class="headerlink" title="Common Types"></a>Common Types</h2><h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><h4 id="The-Error-Class-and-the-Exception-Class"><a href="#The-Error-Class-and-the-Exception-Class" class="headerlink" title="The Error Class and the Exception Class"></a>The Error Class and the Exception Class</h4><p>The Java error-handling framework uses two different classes to identify abnormal software events:</p><ul><li>The <strong>Error</strong> class is used to indicate a serious problem that the application should <em>not</em> try to handle.</li><li>The <strong>Exception</strong> class is used when there is a less catastrophic event that the application <em>should</em> try to handle.</li></ul><h4 id="The-Throwable-Class"><a href="#The-Throwable-Class" class="headerlink" title="The Throwable Class"></a>The Throwable Class</h4><p>Both <em>Error</em> and <em>Exception</em> classes inherit from the abstract class <strong>throwable</strong>. This means that both errors and exceptions will contain:</p><ul><li><strong>The type of problem</strong> – the class type, either <em>Exception</em> or <em>Error</em></li><li><strong>The problem message</strong> – whatever description you’ve provided within the class, such as “out of memory”</li><li><strong>The stack trace where the exception occurred</strong> – the order in which things ran and the place in that sequence where the problem occurred (this information is used by developers to track down issues and resolve problems in the code)</li></ul><h4 id="Throwing-an-Exception"><a href="#Throwing-an-Exception" class="headerlink" title="Throwing an Exception"></a>Throwing an Exception</h4><p>What does it mean to throw an exception?</p><ul><li>When an error occurs within a method, that method creates an <em>Exception</em> object.</li><li>Next, the method hands the Exception off to the JVM runtime system. And that’s what we mean when we say that we are throwing an exception. We simply mean that a method hands off an exception to the runtime.</li></ul><h4 id="Checked-vs-Unchecked"><a href="#Checked-vs-Unchecked" class="headerlink" title="Checked vs Unchecked"></a>Checked vs Unchecked</h4><p>In Java there are two different types of exceptions:</p><h5 id="Unchecked-Exceptions"><a href="#Unchecked-Exceptions" class="headerlink" title="Unchecked Exceptions"></a>Unchecked Exceptions</h5><ul><li><strong>Unchecked</strong> exceptions are exceptions that are unknown to the compiler.</li><li>Because these exceptions are only known at runtime, they are also referred to as <em>runtime exceptions</em>.</li><li>They are a result of a programming error, typically arithmetic errors (such as division by 0).</li><li>Unchecked exceptions are used when when we expect that the caller of the method cannot recover from the exception.</li></ul><h5 id="Checked-Exceptions"><a href="#Checked-Exceptions" class="headerlink" title="Checked Exceptions"></a>Checked Exceptions</h5><ul><li><strong>Checked</strong> exceptions are known to the compiler.</li><li>If we are calling a method that potentially throws a checked exception, it <em>must</em> be handled (or we will get an error from the compiler).</li><li>Checked exceptions are used when we expect that the caller of the method <em>can</em> recover from the exception.</li></ul><h4 id="Handling-Exceptions"><a href="#Handling-Exceptions" class="headerlink" title="Handling Exceptions"></a>Handling Exceptions</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    read();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (FileNotFoundException ex)&#123;</span><br><span class="line">    ex.getLocalizedMessage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h3><p>In Java, the declaration of an Enum defines a class. This class can exist <strong>within another class</strong> or as a <strong>standalone class</strong>.</p><p>In some cases, we might only need to use the Enum type within a single class (as would probably be the case with the stoplight example). In that case it would be acceptable to define it within another class rather than as a standalone. However, if other classes are expected to use the enum type, it should be defined as a separate, standalone class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">enum</span> StopLight &#123;</span><br><span class="line">    RED,</span><br><span class="line">    YELLOW,</span><br><span class="line">    GREEN</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StopLight myStoplight = Stoplight.RED; </span><br><span class="line">    System.out.println(myStoplight);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><p>The <code>Scanner</code> class can read and parse simple text. Here are some key points to keep in mind:</p><ul><li>It parses primitive types and String types into tokens.</li><li>By default it uses whitespaces to delimitate each word. However, it can also use regular expressions.</li><li>The Scanner class can read from several different types of sources, like strings, files and <code>System.in</code> (to get input from the command line).</li></ul><h4 id="Scanner-Syntax"><a href="#Scanner-Syntax" class="headerlink" title="Scanner Syntax"></a>Scanner Syntax</h4><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><p>We can use the <code>Scanner</code> class to get input from the command line. To do so, we instantiate a scanner object, passing in <code>System.in</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><p>In this example we are using the <code>nextLine</code> method to return the full line of the input:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(<span class="string">"This is a line"</span>);</span><br><span class="line">System.out.println(scanner.nextLine());</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a line</span><br></pre></td></tr></table></figure><h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h5><p>In this next example, we are using the <code>next</code> method to read the first token. The <code>next</code> method finds and returns the next complete token.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(<span class="string">"This is a line"</span>);</span><br><span class="line">System.out.println(scanner.next());</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This</span><br></pre></td></tr></table></figure><h5 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h5><p>In the final example, we are using the <code>hasNext()</code> method in a <code>while</code> loop to determine if it is safe to call the next method. We only want to call the next method when we know there is a token available.</p><blockquote><p><strong>Note:</strong> By default the Scanner tokenizes input by whitespaces. Let’s say we have a string with the following text <code>&quot;One Two Three&quot;</code>. The text will be tokenized into three separate tokens, <code>&quot;One&quot;</code>, <code>&quot;Two&quot;</code> and <code>&quot;Three&quot;</code>.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(<span class="string">"This is a line"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">    System.out.println(scanner.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This</span><br><span class="line">is</span><br><span class="line">a</span><br><span class="line">line</span><br></pre></td></tr></table></figure><h4 id="Scanner-Example"><a href="#Scanner-Example" class="headerlink" title="Scanner Example"></a>Scanner Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInputTester</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Enter a String"</span>);</span><br><span class="line">            String userInput = scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"User Input: "</span> + userInput);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.getLocalizedMessage();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            scanner.close(); <span class="comment">// we have to close the scanner</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RegEx"><a href="#RegEx" class="headerlink" title="RegEx"></a>RegEx</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegExTester</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      String emailRegex = <span class="string">"^(.+)@(.+).(.+)$"</span>;</span><br><span class="line">      Pattern pattern = Pattern.compile(emailRegex);</span><br><span class="line">      String email = <span class="string">"jeff@gmail.com"</span>;</span><br><span class="line"></span><br><span class="line">      System.out.println(pattern.matcher(email).matches());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>Java provides advanced memory management for String objects by using a <em>String pool</em>. A <strong>String pool</strong> is a way of storing only one copy of a String.</p><p>To understand this, we have to look at what is happening in memory when we create Strings and assign them to variables. Strings in Java are <em>immutable</em>, meaning they cannot be changed after they are created. When we “change” the String in a variable, what actually happens is that, behind the scenes, Java creates a new String in the String pool—and changes the variable’s reference value to point to this new String. The old String object may remain in place, unchanged.</p><p>Also note that multiple variables may use the same String reference. This means that if we have two variables with exactly the same String (e.g., <code>&quot;Hello&quot;</code>) they will all reference the same String object.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gyofi80gpej31h70u0who.jpg" alt="image-20220123155351170"></p><h2 id="Generics-and-Collections"><a href="#Generics-and-Collections" class="headerlink" title="Generics and Collections"></a>Generics and Collections</h2><h3 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h3><p>With generics, we can identify what types are stored in the list. The syntax for a generic is very simple—it’s just bracket with the type inside, <code>&lt; type &gt;</code>. So in this example, we can add <code>&lt;String&gt;</code> right next to <code>List</code> to identify what types are stored in the list:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; myList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">myList.add(<span class="string">"one"</span>);</span><br><span class="line">myList.add(<span class="string">"two"</span>);</span><br><span class="line">myList.add(<span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// We could also remove the element "one" </span></span><br><span class="line"><span class="comment">// by using the index 0 instead of the value "one".</span></span><br><span class="line">myList.remove(<span class="string">"one"</span>);</span><br></pre></td></tr></table></figure><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><h4 id="Use-iterator-with-collections"><a href="#Use-iterator-with-collections" class="headerlink" title="Use iterator with collections"></a>Use iterator with collections</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">names.add(<span class="string">"Mike"</span>);</span><br><span class="line">names.add(<span class="string">"Bob"</span>);</span><br><span class="line">names.add(<span class="string">"Alice"</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iterator = names.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">  System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for-each-loop"><a href="#for-each-loop" class="headerlink" title="for each loop"></a>for each loop</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsExercise</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; listOfItems = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        listOfItems.add(<span class="string">"Mike"</span>);</span><br><span class="line">        listOfItems.add(<span class="string">"Bob"</span>);</span><br><span class="line">        listOfItems.add(<span class="string">"Alice"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String name : listOfItems) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sorting-collections"><a href="#Sorting-collections" class="headerlink" title="Sorting collections"></a>Sorting collections</h3><h4 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h4><p>A list of Strings can be sorted by simply passing the list to the <code>Collections.sort()</code> method. In the example bellow, the names will be sorted in ascending order.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">names.add(<span class="string">"Mike"</span>);</span><br><span class="line">names.add(<span class="string">"Bob"</span>);</span><br><span class="line">names.add(<span class="string">"Alice"</span>);</span><br><span class="line"></span><br><span class="line">Collections.sort(names);</span><br></pre></td></tr></table></figure><h4 id="Wrapper-Objects"><a href="#Wrapper-Objects" class="headerlink" title="Wrapper Objects"></a>Wrapper Objects</h4><p>Wrapper objects were introduced in Java to wrap primitive variable types into objects. In the example below, the primitive <code>int</code> values are being converted to <code>Integer</code> objects and then sorted.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">numbers.add(<span class="number">201</span>);</span><br><span class="line">numbers.add(<span class="number">100</span>);</span><br><span class="line">numbers.add(<span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">Collections.sort(numbers);</span><br></pre></td></tr></table></figure><h4 id="User-Defined-Classes"><a href="#User-Defined-Classes" class="headerlink" title="User-Defined Classes"></a>User-Defined Classes</h4><p>User-defined classes will need to implement the <strong>Comparable</strong> Interface in order to use the <code>Collections.sort()</code> method. The <em>Comparable</em> Interface provides a method, <code>compareTo</code>, which is used to compare two objects of the same type. In the example below we are using the Person object’s <code>name</code> field to compare Person objects. This line of code, <code>name.compareTo(person.name)</code>, handles all of the hard work.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>&#123;  </span><br><span class="line">  <span class="keyword">public</span> String name;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.name = name;  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// implement compareTo function</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person person)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> name.compareTo(person.name);  </span><br><span class="line"></span><br><span class="line">  &#125;   </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonSort</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Person&gt; people = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">    people.add(<span class="keyword">new</span> Person(<span class="string">"Same"</span>));</span><br><span class="line">    people.add(<span class="keyword">new</span> Person(<span class="string">"Mike"</span>));</span><br><span class="line">    people.add(<span class="keyword">new</span> Person(<span class="string">"Apple"</span>));</span><br><span class="line"></span><br><span class="line">    Collections.sort(people);</span><br><span class="line">    <span class="keyword">for</span> (Person person : people) &#123;</span><br><span class="line">      System.out.println(person.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Advanced-Collections"><a href="#Advanced-Collections" class="headerlink" title="Advanced Collections"></a>Advanced Collections</h2><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="Creating-a-Map-Object"><a href="#Creating-a-Map-Object" class="headerlink" title="Creating a Map Object"></a>Creating a Map Object</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Person&gt; mapOfPeople = <span class="keyword">new</span> HashMap&lt;String, Person&gt;();</span><br></pre></td></tr></table></figure><h4 id="Adding-to-a-Map"><a href="#Adding-to-a-Map" class="headerlink" title="Adding to a Map"></a>Adding to a Map</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person mike = <span class="keyword">new</span> Person(<span class="string">"Mike"</span>, <span class="string">"mike@email.com"</span>);</span><br><span class="line">Person shaun = <span class="keyword">new</span> Person(<span class="string">"Shaun"</span>, <span class="string">"shaun@email.com"</span>);</span><br><span class="line">Person sally = <span class="keyword">new</span> Person(<span class="string">"Sally"</span>, <span class="string">"sally@email.com"</span>);</span><br><span class="line">Person cesar = <span class="keyword">new</span> Person(<span class="string">"Cesar"</span>, <span class="string">"cesar@email.com"</span>);</span><br><span class="line"></span><br><span class="line">mapOfPeople.put(mike.getEmail(), mike);</span><br><span class="line">mapOfPeople.put(shaun.getEmail(), shaun);</span><br><span class="line">mapOfPeople.put(sally.getEmail(), sally);</span><br><span class="line">mapOfPeople.put(cesar.getEmail(), cesar);</span><br></pre></td></tr></table></figure><h4 id="Retrieving-an-object-from-a-Map"><a href="#Retrieving-an-object-from-a-Map" class="headerlink" title="Retrieving an object from a Map"></a>Retrieving an object from a Map</h4><p>In this example, we will be looking at the syntax to retrieve a Person object from the Map using an email as the key.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapOfPeople.get(<span class="string">"mike@email.com"</span>);</span><br></pre></td></tr></table></figure><h4 id="Iterating-over-a-Map"><a href="#Iterating-over-a-Map" class="headerlink" title="Iterating over a Map"></a>Iterating over a Map</h4><p>We can iterate over our Map using a <code>for-each</code> loop. Remember that each Map has three distinct views for seeing the data. We can get the keys, the values, or key-value mapping. In the example below we are displaying all of the keys for our Map.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String email : mapOfPeople.keySet()) &#123;</span><br><span class="line">    System.out.println(email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapExcercise</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; mapOfPeople = <span class="keyword">new</span> HashMap&lt;String, Person&gt;();</span><br><span class="line">        Person mike = <span class="keyword">new</span> Person(<span class="string">"Mike"</span>, <span class="string">"mike@email.com"</span>);</span><br><span class="line">        Person shaun = <span class="keyword">new</span> Person(<span class="string">"Shaun"</span>, <span class="string">"shaun@email.com"</span>);</span><br><span class="line">        Person sally = <span class="keyword">new</span> Person(<span class="string">"Sally"</span>, <span class="string">"sally@email.com"</span>);</span><br><span class="line">        Person cesar = <span class="keyword">new</span> Person(<span class="string">"Cesar"</span>, <span class="string">"cesar@email.com"</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Person&gt; people = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        people.add(mike);</span><br><span class="line">        people.add(shaun);</span><br><span class="line">        people.add(sally);</span><br><span class="line">        people.add(cesar);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Person person : people) &#123;</span><br><span class="line">            MapExcercise.addToMap(mapOfPeople, person);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String email : mapOfPeople.keySet()) &#123;</span><br><span class="line">            System.out.println(email);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Person person : mapOfPeople.values()) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Get Mike: "</span> + mapOfPeople.get(<span class="string">"mike@email.com"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Get Jeff: "</span> + mapOfPeople.get(<span class="string">"jeff@email.com"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Contains Mike: "</span> + mapOfPeople.containsKey(<span class="string">"mike@email.com"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Contains Jeff: "</span> + mapOfPeople.containsKey(<span class="string">"jeff@email.com"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addToMap</span><span class="params">(Map&lt;String, Person&gt; map, Person person)</span> </span>&#123;</span><br><span class="line">        map.put(person.getEmail(), person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">" "</span> + email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><h4 id="Concrete-Implementations"><a href="#Concrete-Implementations" class="headerlink" title="Concrete Implementations"></a>Concrete Implementations</h4><p>There are three concrete implementations for the Set interface:</p><ul><li>HashSet</li><li>TreeSet</li><li>LinkedHashSet</li></ul><p>Each of these implementations vary, but all of them enforce the no-duplicate-values requirement of the Set interface.</p><h4 id="Creating-a-Set-Object"><a href="#Creating-a-Set-Object" class="headerlink" title="Creating a Set Object"></a>Creating a Set Object</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; mySet = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br></pre></td></tr></table></figure><h4 id="Adding-to-a-Set"><a href="#Adding-to-a-Set" class="headerlink" title="Adding to a Set"></a>Adding to a Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mySet.add(<span class="string">"Hello"</span>);</span><br><span class="line">mySet.add(<span class="string">"Hello"</span>);</span><br><span class="line">mySet.add(<span class="string">"Hellos"</span>);</span><br></pre></td></tr></table></figure><p>Even though we used <code>add</code> three times, this will actually only add two items, since one of the items is a duplicate.</p><h4 id="Retrieving-an-Object-From-a-Set"><a href="#Retrieving-an-Object-From-a-Set" class="headerlink" title="Retrieving an Object From a Set"></a>Retrieving an Object From a Set</h4><p>Using for each loop to retrieve an object.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String foundObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String text : mySet) &#123;</span><br><span class="line">   <span class="keyword">if</span>(text.equals(<span class="string">"Hello"</span>)&#123;</span><br><span class="line">      foundObject  = text;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetExcercise</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; numbers = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We have a list of numbers and some are duplicates</span></span><br><span class="line">        numbers.add(<span class="string">"123-222-3333"</span>);</span><br><span class="line">        numbers.add(<span class="string">"123-222-3333"</span>);</span><br><span class="line">        numbers.add(<span class="string">"555-222-3333"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add them to a Set to get a unique list</span></span><br><span class="line">        Set&lt;String&gt; uniqueNumbers = <span class="keyword">new</span> HashSet&lt;String&gt;(numbers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String number : uniqueNumbers) &#123;</span><br><span class="line">            System.out.println(number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Queues"><a href="#Queues" class="headerlink" title="Queues"></a>Queues</h3><p><strong>Queues</strong> are data structures that allow us to process items in a <strong>First-In, First-Out</strong> (<strong>FIFO</strong>) order. The first item placed in a queue is also the first one removed from the queue.</p><p>Some key points about Queues in Java:</p><ul><li>Queue is an <em>interface</em> that implements the <em>Collection</em> interface</li><li>We <em>put</em> newly added elements at the <em>end</em> of the queue</li><li>We <em>pop</em> elements off the <em>front</em> of the queue</li></ul><h4 id="Creating-a-Queue-object"><a href="#Creating-a-Queue-object" class="headerlink" title="Creating a Queue object"></a>Creating a Queue object</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;String&gt; myQueue = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br></pre></td></tr></table></figure><h4 id="Adding-to-a-Queue"><a href="#Adding-to-a-Queue" class="headerlink" title="Adding to a Queue"></a>Adding to a Queue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myQueue.add(<span class="string">"Hi"</span>);</span><br><span class="line">myQueue.add(<span class="string">"There"</span>);</span><br></pre></td></tr></table></figure><h4 id="Retrieving-an-Object-From-a-Queue"><a href="#Retrieving-an-Object-From-a-Queue" class="headerlink" title="Retrieving an Object From a Queue"></a>Retrieving an Object From a Queue</h4><p>This method both <em>retrieves</em> the first element from the Queue and <em>removes</em> it from the Queue.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myQueue.poll()</span><br></pre></td></tr></table></figure><h4 id="Iterating-Over-a-Queue"><a href="#Iterating-Over-a-Queue" class="headerlink" title="Iterating Over a Queue"></a>Iterating Over a Queue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!myQueue.isEmpty()) &#123;</span><br><span class="line">    System.out.println(myQueue.poll());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Supplementary-Knowledge"><a href="#Supplementary-Knowledge" class="headerlink" title="Supplementary Knowledge"></a>Supplementary Knowledge</h2><h3 id="Super"><a href="#Super" class="headerlink" title="Super()"></a>Super()</h3><p>We can use super() to call the direct parent constructor.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeDecorator</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Shape decoratedShape;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShapeDecorator</span><span class="params">(Shape decoratedShape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.decoratedShape = decoratedShape;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        decoratedShape.draw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedShapeDecorator</span> <span class="keyword">extends</span> <span class="title">ShapeDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedShapeDecorator</span><span class="params">(Shape decoratedShape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(decoratedShape); <span class="comment">// use super() to call the parent constructor</span></span><br><span class="line">        <span class="comment">// inheritate the decoratedShape </span></span><br><span class="line">        <span class="comment">// this.decoratedShape = decoratedShape;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.draw();</span><br><span class="line">        setRedBorder(<span class="keyword">this</span>.decoratedShape); <span class="comment">// use the decoratedShape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add a new function(decorate)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRedBorder</span><span class="params">(Shape decoratedShape)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Border Color: Red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Common-Types&quot;&gt;&lt;a href=&quot;#Common-Types&quot; class=&quot;headerlink&quot; title=&quot;Common Types&quot;&gt;&lt;/a&gt;Common Types&lt;/h2&gt;&lt;h3 id=&quot;Exceptions&quot;&gt;&lt;a href=&quot;#Exc
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="Java" scheme="https://www.qianhongbo.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>GCD</title>
    <link href="https://www.qianhongbo.com/iOS/GCD.html"/>
    <id>https://www.qianhongbo.com/iOS/GCD.html</id>
    <published>2022-01-22T13:51:58.000Z</published>
    <updated>2022-01-23T05:53:19.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-GCD"><a href="#What-is-GCD" class="headerlink" title="What is GCD"></a>What is GCD</h2><p>GCD - ==Grand Central Dispatch==</p><p>UIKit can only be used on main queue.</p><p>Core data can be used both on main queue and background queue. But the core data can only be used in the same queue it was created.</p><p>Or we will meet ==concurrency bugs==. 并发错误</p><h2 id="async-and-sync"><a href="#async-and-sync" class="headerlink" title="async and sync"></a>async and sync</h2><ul><li>Dispatch_async(): doesn’t wait for the closure to finish, and moves on.</li><li>Dispatch_sync(): waits until the closure is done. Could easily get stalled.</li></ul><h2 id="UserDefaults"><a href="#UserDefaults" class="headerlink" title="UserDefaults"></a>UserDefaults</h2><p><strong><code>UserDefaults</code></strong>: a Dictionary that periodically saves its contents to your device’s permanent storage (SSD).</p><ul><li>Great for storing user preferences and other simple things.</li><li>Saves data in a plist file (property list file).</li><li>Can only store the following data types: <code>Data</code>, <code>String</code>, <code>Number</code>, <code>Date</code>, <code>Array</code>, and <code>Dictionary</code>.</li><li>When storing (writing) the file or accessing (reading) the file, <code>UserDefaults</code> does it all at once, possibly creating long/unnecessary I/O time.</li><li>It’s a good idea to keep <code>UserDefaults</code> under 1MB.</li></ul><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>The difference between Swift optionals and Core Data optional attributes is subtle. Swift optionals can be nil during runtime, and Core Data optional attributes can be nil at save time.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;What-is-GCD&quot;&gt;&lt;a href=&quot;#What-is-GCD&quot; class=&quot;headerlink&quot; title=&quot;What is GCD&quot;&gt;&lt;/a&gt;What is GCD&lt;/h2&gt;&lt;p&gt;GCD - ==Grand Central Dispatch==&lt;/
      
    
    </summary>
    
      <category term="iOS" scheme="https://www.qianhongbo.com/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>Java Notes</title>
    <link href="https://www.qianhongbo.com/Backend/Java/Java%20Notes.html"/>
    <id>https://www.qianhongbo.com/Backend/Java/Java Notes.html</id>
    <published>2022-01-22T13:48:53.000Z</published>
    <updated>2022-02-25T01:50:18.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-Programing-Basics"><a href="#Java-Programing-Basics" class="headerlink" title="Java Programing Basics"></a>Java Programing Basics</h2><h3 id="Java-is-static-typing"><a href="#Java-is-static-typing" class="headerlink" title="Java is static typing"></a>Java is static typing</h3><p>Notice that, in Java, we must specify the data type (e.g., <code>int</code>). This is becouse Java is a <em>statically typed</em> language. Here are the key points to remember about <strong>static typing</strong>:</p><ul><li>The data type is bound to the variable when the variable is first declared.</li><li>The data type is checked when the code is compiled.</li><li>The data type for a variable cannot later be changed.</li></ul><p>In contrast, some languages, such as Python, are dynamically typed. In <strong>dynamic typing</strong>:</p><ul><li>The data type is bound to the <em>value</em> itself, but not to the variable.</li><li>The type is checked during runtime.</li><li>The data type of a variable can be changed after it is declared; since the type is associated with the <em>value</em>, assigning a new value may mean changing the data type.</li></ul><h3 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world!"></a>Hello world!</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GettingStarted</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Add your code here:</span></span><br><span class="line">        System.out.println(<span class="string">"Hello world!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use commond line to compile and run</span></span><br><span class="line">javac GettingStarted.java</span><br><span class="line">java GettingStarted.java</span><br></pre></td></tr></table></figure><h3 id="Type-casting"><a href="#Type-casting" class="headerlink" title="Type casting"></a>Type casting</h3><h4 id="Automatic-Type-Casting"><a href="#Automatic-Type-Casting" class="headerlink" title="Automatic Type Casting"></a>Automatic Type Casting</h4><p><strong>Automatic</strong> type casting converts a smaller type into a larger type. For example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intNumber = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">double</span> doubleNumber = intNumber;</span><br><span class="line">System.out.println(doubleNumber);</span><br></pre></td></tr></table></figure><p>When we print <code>doubleNumber</code>, the value will be <code>3.0</code>. Notice that there is no precision lost going from a smaller type into a larger type. We started with <code>3</code> and ended up with <code>3.0</code>.</p><h4 id="Manual-Type-Casting"><a href="#Manual-Type-Casting" class="headerlink" title="Manual Type Casting"></a>Manual Type Casting</h4><p><strong>Manual</strong> type casting is necessary when we want to do either of these things:</p><ul><li>Convert a larger type into a smaller type</li><li>Convert one object type into another</li></ul><p>For example, here we are converting from a larger type (double) to a smaller type (int):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">double doubleNumber = 3.5;</span><br><span class="line">int intNumber = (int)doubleNumber;</span><br><span class="line">System.out.println(intNumber);</span><br></pre></td></tr></table></figure><p>The resulting value will be <code>3</code>, not <code>3.5</code>. When we go from a larger type into a smaller type, precision is lost. Java cuts off additional data that will not fit in the casted type. So when we go from a double to an int, any values that are not integers will be removed. This is called <em>truncation</em>.</p><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><h4 id="Method-syntax"><a href="#Method-syntax" class="headerlink" title="Method syntax"></a>Method syntax</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findTheArea</span><span class="params">(<span class="keyword">double</span> length, <span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> area = length * width;</span><br><span class="line">    <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Methods-vs-Functions"><a href="#Methods-vs-Functions" class="headerlink" title="Methods vs Functions"></a>Methods vs Functions</h4><p>You’ll often see the words <strong>function</strong> and <strong>method</strong> used interchangeably. Although the terms are sometimes used loosely, here’s the distinction:</p><ul><li>A <em>function</em> is any block of reusable/callable code.</li><li>A <em>method</em> is a block of reusable/callable code that is attached to a class or object.</li></ul><p>So a method is a type of function, but it’s one that is associated with a class or object, whereas other functions can be executed from anywhere.</p><h3 id="Stack-and-Heap"><a href="#Stack-and-Heap" class="headerlink" title="Stack and Heap"></a>Stack and Heap</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gynk6gr9opj31fl0u0wiv.jpg" alt="image-20220122102441454"></p><h3 id="Types-of-Access-Modifiers"><a href="#Types-of-Access-Modifiers" class="headerlink" title="Types of Access Modifiers"></a>Types of Access Modifiers</h3><p>There are four types of access modifiers in Java:</p><ul><li><strong>Public</strong> means the class can be accessed from everywhere. If you have a method on a class that you want to expose to all other classes, then use this access modifier.</li><li><strong>Private</strong> means only the defining class can access the data. This provides security, by not allowing other classes to change the data directly. Instead, they must make changes to the data via the provided methods only.</li><li><strong>Protected</strong> means that access is restricted to the defining class, package, or subclass. This will be useful when we get into subclasses and inheritance in a later lesson, as it will allow our subclasses to use variables and methods from the parent class.</li><li><strong>Default</strong> means access is restricted to the defining class or the package. This can be used when we have classes inside the same package that we may want to expose data and methods too.</li></ul><table><thead><tr><th align="left">Access</th><th align="left">Inside class</th><th align="left">Inside package</th><th align="left">Outside package by subclass</th><th align="left">Outside package</th></tr></thead><tbody><tr><td align="left"><strong>Private</strong></td><td align="left">Yes</td><td align="left">No</td><td align="left">No</td><td align="left">No</td></tr><tr><td align="left"><strong>Default</strong></td><td align="left">Yes</td><td align="left">Yes</td><td align="left">No</td><td align="left">No</td></tr><tr><td align="left"><strong>Protected</strong></td><td align="left">Yes</td><td align="left">Yes</td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><strong>Public</strong></td><td align="left">Yes</td><td align="left">Yes</td><td align="left">Yes</td><td align="left">Yes</td></tr></tbody></table><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="Creating-an-Array"><a href="#Creating-an-Array" class="headerlink" title="Creating an Array"></a>Creating an Array</h4><p>Here’s an example of some code that creates an array of size four, containing four integer values:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [] numbers  = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><p>Notice that creating an array involves three steps:</p><ol><li>Declare the type of the array, using brackets (as in <code>int []</code>).</li><li>Name the array (in this example, the name is <code>numbers</code>).</li><li>Add values to the array.</li></ol><h4 id="Another-Way-to-Create-an-Array"><a href="#Another-Way-to-Create-an-Array" class="headerlink" title="Another Way to Create an Array"></a>Another Way to Create an Array</h4><p>Here’s another way we can create an array and add values to it:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">numbers[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">numbers[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">numbers[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">numbers[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br></pre></td></tr></table></figure><p>This approach uses the <code>new</code> keyword to create a new array object of size 4, and then we assign values to the four spaces created in the array.</p><h3 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopExercise</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add for Loop Here</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.println(numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add while Loop Here</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; numbers.length) &#123;</span><br><span class="line">            System.out.println(numbers[index]);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add Do while Loop Here</span></span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(numbers[counter]);</span><br><span class="line">            counter++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (counter &lt; numbers.length);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h3><h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><p>JavaDoc comments use a simple syntax that supports multi-line HTML format documentation. Here’s what the syntax looks like:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** documentation */</span></span><br></pre></td></tr></table></figure><p>And here’s an example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** This program HelloWorld produces a standard output</span></span><br><span class="line"><span class="comment"> *  displaying "Hello World"</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> The author of the class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> A reference to another class</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="Parts-of-a-JavaDoc-Comment"><a href="#Parts-of-a-JavaDoc-Comment" class="headerlink" title="Parts of a JavaDoc Comment"></a>Parts of a JavaDoc Comment</h4><p>Notice that JavaDoc comments are broken down into two parts:</p><ol><li>The description</li><li>Block tags</li></ol><p>In the above example, the description is the first part of the comment, and the block tags are the last part (<code>@author</code> and <code>@see</code>).</p><p>In this example, we have a doc comment for a method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method displays a simple text output to a provided name</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name The name of the person we want to say “Hi” too</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> results Returns true if the name was printed or</span></span><br><span class="line"><span class="comment"> * false if it failed </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Objecte-Oriented-Programming"><a href="#Objecte-Oriented-Programming" class="headerlink" title="Objecte-Oriented Programming"></a>Objecte-Oriented Programming</h2><h3 id="Define-a-class"><a href="#Define-a-class" class="headerlink" title="Define a class"></a>Define a class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> +<span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Garbage-Collection"><a href="#Garbage-Collection" class="headerlink" title="Garbage Collection"></a>Garbage Collection</h3><p>Every new object that we instantiate is added to the heap and consumes memory. In programming languages like C or C++, developers are responsible for creating and destroying objects. In contrast, Java has a background process called <strong>Garbage Collection (GC)</strong> that checks all instantiated objects, and destroys them if they do not have any references—thus freeing up memory, even without any active management on the part of the developer.</p><h3 id="Abstract-Classes"><a href="#Abstract-Classes" class="headerlink" title="Abstract Classes"></a>Abstract Classes</h3><p>An <strong>abstract class</strong> has the following key characteristics:</p><ul><li>It defines the behavior for each of the subclasses, but we cannot directly instantiate the abstract class itself.</li><li>It allows us to create abstract methods<ul><li>An abstract method is a method that does not contain an implementation body. Instead, it simply provides a header for the method.</li><li>Subclasses that extend an abstract class are required to override all abstract methods and provide a specific implementation.</li></ul></li></ul><h4 id="Example-Abstract-Vehicle-Class"><a href="#Example-Abstract-Vehicle-Class" class="headerlink" title="Example: Abstract Vehicle Class"></a>Example: Abstract <code>Vehicle</code> Class</h4><p>Here’s the example we looked at in the video. To ensure that we will <em>not</em> be able to directly instantiate <code>Vehicle</code> objects from this class, we define it using the <code>abstract</code> keyword:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String start;</span><br><span class="line">    <span class="keyword">protected</span> String stop;</span><br><span class="line">    <span class="keyword">protected</span> String direction;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vehicle</span><span class="params">(String start, String stop, String direction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.stop = stop;</span><br><span class="line">        <span class="keyword">this</span>.direction = direction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span></span>;    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, we use the <code>Extends</code> keyword to have our <code>Car</code> class extend the <code>Vehicle</code> class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Car start"</span>, <span class="string">"Car stop"</span>, <span class="string">"Car direction"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"55"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><p><strong>Interfaces</strong> allow us to avoid hardcoding features in an application. We can move specific implementation details into subclasses, and then use an interface to communicate between the application and the subclasses.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSpeed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String speed;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String type, String speed, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.speed = speed;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> speed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Interfaces-vs-Abstract-Classes"><a href="#Interfaces-vs-Abstract-Classes" class="headerlink" title="Interfaces vs Abstract Classes"></a>Interfaces vs Abstract Classes</h3><p>Here are some of the similarities and differences between abstract classes and interfaces:</p><p><strong>Abstract class</strong></p><ul><li>Can have class(static) variables.</li><li>Can have both <strong>abstract</strong> methods and <strong>concrete</strong> methods that are shared with the subclasses.</li><li><strong>Can have instance variables</strong>, i.e. variables that are specific to individual subclasses.</li><li>Subclasses can only extend one class.</li></ul><p><strong>Interfaces</strong></p><ul><li>Can have class(static) variables.</li><li>Every method in an interface is <strong>abstract</strong>.</li><li><strong>Cannot have instance variables</strong>. Variables in an interface must be the same for every class implementing the interface.</li><li>Classes can implement more than one interface and <strong>have multiple inheritance</strong>.</li></ul><blockquote><p>Abstract classes are used for <strong>Modeling</strong> a class hierarchy of similar looking classes (For example Animal can be abstract class and Human , Lion, Tiger can be concrete derived classes)</p><p>Interface is used for <strong>Communication</strong> between 2 similar / non similar classes which does not care about type of the class implementing Interface(e.g. Height can be interface property and it can be implemented by Human , Building , Tree. It does not matter if you can eat , you can swim you can die or anything.. it matters only a thing that you need to have Height (implementation in you class) ).</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java-Programing-Basics&quot;&gt;&lt;a href=&quot;#Java-Programing-Basics&quot; class=&quot;headerlink&quot; title=&quot;Java Programing Basics&quot;&gt;&lt;/a&gt;Java Programing Basi
      
    
    </summary>
    
      <category term="Backend" scheme="https://www.qianhongbo.com/categories/Backend/"/>
    
    
      <category term="Java" scheme="https://www.qianhongbo.com/tags/Java/"/>
    
  </entry>
  
</feed>
