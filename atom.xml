<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog | Qian Homeberg</title>
  
  <subtitle>Look! Who is here! Welcome~~</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.qianhongbo.com/"/>
  <updated>2021-12-13T06:06:15.510Z</updated>
  <id>https://www.qianhongbo.com/</id>
  
  <author>
    <name>Qian Hongbo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Swift进阶</title>
    <link href="https://www.qianhongbo.com/Swift%E8%BF%9B%E9%98%B6.html"/>
    <id>https://www.qianhongbo.com/Swift进阶.html</id>
    <published>2021-12-11T12:09:37.000Z</published>
    <updated>2021-12-13T06:06:15.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h1><h2 id="Nil-value"><a href="#Nil-value" class="headerlink" title="Nil value"></a>Nil value</h2><p>The Nil value is the same as null in some other languages.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> z: <span class="type">Int?</span></span><br><span class="line"><span class="keyword">var</span> s: <span class="type">String</span></span><br><span class="line">s = <span class="string">"123"</span></span><br><span class="line">z = <span class="type">Int</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zee: <span class="type">Int?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> string: <span class="type">String</span></span><br><span class="line"><span class="keyword">let</span> randomNumber = <span class="type">Int</span>(arc4random() % <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> randomNumber == <span class="number">1</span> &#123;</span><br><span class="line">    string = <span class="string">"123"</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// always 0</span></span><br><span class="line">    string = <span class="string">"ABC"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">zee = <span class="type">Int</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> intValue = zee &#123;</span><br><span class="line">  intValue * <span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="string">"No value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Another-Example-With-Nested-Structures"><a href="#Another-Example-With-Nested-Structures" class="headerlink" title="Another Example With Nested Structures"></a>Another Example With Nested Structures</h2><p>Safely unwrapping optionals is a fundamental Swift skill and one can’t have too much practice. Let’s walk through another example using the following enum and structures.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Genre</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> country, blues, folk</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Artist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> primaryGenre: <span class="type">Genre?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> released: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> artist: <span class="type">Artist?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>Song</code> struct contains a property <code>artist</code> of optional type <code>Artist?</code>. Then, the <code>Artist</code> struct as a <code>primaryGenre</code> property of optional type <code>Genre?</code>. <code>Genre</code> is a simple enumeration with only three cases for simplicity.</p><p>Now imagine we have the following instances of the <code>Artist</code> and <code>Song</code> structs. Here, <code>johnny</code> is assigned to the <code>Artist</code> property of <code>walkTheLine</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> johnny = <span class="type">Artist</span>(name: <span class="string">"Johnny Cash"</span>, primaryGenre: <span class="type">Genre</span>.country)</span><br><span class="line"><span class="keyword">var</span> walkTheLine = <span class="type">Song</span>(title: <span class="string">"I Walk the Line"</span>, released: <span class="number">1956</span>, artist: johnny)</span><br></pre></td></tr></table></figure><p>If we only had access to the the <code>Song</code> instance <code>walkTheLine</code> and we wanted to determine the <code>primaryGenre</code> of the song’s artist, we’d need some <code>if let</code>s.</p><p>First, we’d need to get the artist.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> artist = walkTheLine.artist &#123;</span><br><span class="line">  <span class="built_in">print</span>(artist.name)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Artist unknown"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And within the first <code>if let</code>, we’d use another to get the <code>primaryGenre</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> artist = walkTheLine.artist &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> genre = artist.primaryGenre &#123;</span><br><span class="line">      <span class="comment">// If there is no value for enum, it wll be "country"</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Primary genre: \(genre.rawValue)"</span>) </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Primary genre unknown"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Artist unknown"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the <code>genre</code> property of <code>artist</code> is not <code>nil</code>, we know it has a value and can safely print out the genre.</p><h2 id="Example-Animals-With-and-Without-Tails"><a href="#Example-Animals-With-and-Without-Tails" class="headerlink" title="Example: Animals With and Without Tails"></a>Example: Animals With and Without Tails</h2><p>Here’s another example: let’s say we have a struct called Animal. The Animal struct has a tail property and the tail property is an optional — not all animals have tails.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tail</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(length: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.length = <span class="string">"\(length)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> species: <span class="type">String</span> = <span class="string">"homo sapiens"</span></span><br><span class="line">    <span class="keyword">var</span> tail: <span class="type">Tail?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, species: <span class="type">String</span>, tailLength:<span class="type">Int?</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.species = species</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> tailLength = tailLength &#123;</span><br><span class="line">            <span class="keyword">self</span>.tail = <span class="type">Tail</span>(length: tailLength)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.tail = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = <span class="type">Animal</span>(name: <span class="string">"Lenny"</span>, species: <span class="string">"lemur"</span>, tailLength: <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> tailLength = animal.tail?.length&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(animal.name)'s tail is \(tailLength) cm long"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(animal.name) doesn't have a tail."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "Lenny's tail is 12 cm long\n"</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = <span class="type">Animal</span>(name: <span class="string">"Gilbert"</span>, species: <span class="string">"Gorilla"</span>, tailLength: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> tailLength = animal.tail?.length&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(animal.name)'s tail is \(tailLength) cm long"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(animal.name) doesn't have a tail."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "Gilbert doesn't have a tail.\n"</span></span><br></pre></td></tr></table></figure><h2 id="Nil-Coalescing-Operator"><a href="#Nil-Coalescing-Operator" class="headerlink" title="Nil Coalescing Operator"></a>Nil Coalescing Operator</h2><p>We already used optional chaining to avoid nesting <code>if let</code>s, but what if all we want to do is provide <code>tailLength</code> with a default value if the optional chaining fails? Swift provides a useful operator, for situations like these, the <strong>nil coalescing operator</strong>, <code>??</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;optional expression&gt; ?? &lt;default case&gt;</span><br></pre></td></tr></table></figure><p>To use the operator, simply place <code>??</code> after the optional chaining expression, and then put a default value after the <code>??</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tailLength = animal.tail?.length ?? <span class="string">"0"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"tail length: \(tailLength)"</span>)</span><br><span class="line"><span class="comment">// tail length: 0</span></span><br></pre></td></tr></table></figure><h2 id="Your-Turn"><a href="#Your-Turn" class="headerlink" title="Your Turn"></a>Your Turn</h2><p>Assume the following structs and enum are defined.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Genre</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> country, blues, folk</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Artist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> primaryGenre: <span class="type">Genre?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> released: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> artist: <span class="type">Artist?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using the enums and structures, implement the <code>getArtistGenre()</code> function. Given a <code>Song</code> as input, return the raw value of the artist’s primary genre. If either the <code>artist</code> is <code>nil</code> or the <code>primaryGenre</code> is <code>nil</code>, then return an empty string. You must use optional chaining and the nil coalescing operator (<code>??</code>).</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Genre</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> country, blues, folk</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Artist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> primaryGenre: <span class="type">Genre?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> released: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> artist: <span class="type">Artist?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getArtistGenre</span><span class="params">(song: Song)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> songGenre = song.artist?.primaryGenre &#123;</span><br><span class="line">        <span class="keyword">return</span> songGenre.rawValue</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> songGenre = song.artist?.primaryGenre?.rawValue ?? <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> songGenre</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> artisTest = <span class="type">Artist</span>(name: <span class="string">"name"</span>, primaryGenre: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="type">Song</span>(title: <span class="string">"title"</span>, released: <span class="number">2021</span>, artist: artisTest)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(getArtistGenre(song: test))</span><br></pre></td></tr></table></figure><h2 id="Example-Revisiting-the-Int-Initializer-Method"><a href="#Example-Revisiting-the-Int-Initializer-Method" class="headerlink" title="Example: Revisiting the Int() Initializer Method"></a>Example: Revisiting the <code>Int()</code> Initializer Method</h2><p>Let’s say we’re using the <code>Int()</code> initializer method and invoking it on a variable that we are confident can be converted to an Int.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> w = <span class="type">Int</span>(<span class="string">"123"</span>)</span><br></pre></td></tr></table></figure><p>We know this method is going to return the Int, 123, so in this case, unwrapping with the exclamation point is appropriate. We know there is little risk of a fatal error being thrown. We can place the exclamation point after w, like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w! * <span class="number">2</span></span><br></pre></td></tr></table></figure><p>Or we could unwrap the return value directly, like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> w = <span class="type">Int</span>(<span class="string">"123"</span>)!</span><br><span class="line">w * <span class="number">2</span></span><br></pre></td></tr></table></figure><p>In this second case the value assigned to w will be a plain old Int.</p><h2 id="Implicitly-Unwrapped-Optionals-Revisiting-the-Villain-struct"><a href="#Implicitly-Unwrapped-Optionals-Revisiting-the-Villain-struct" class="headerlink" title="Implicitly Unwrapped Optionals: Revisiting the Villain struct"></a>Implicitly Unwrapped Optionals: Revisiting the Villain struct</h2><p>What about declaring implicitly unwrapped optionals? When is an appropriate time to be so bold? Well, remember the <code>evilScheme</code> property of the <code>Villain</code> struct? We wanted the ability to create instances of <code>Villain</code> with the option of not providing an <code>evilScheme</code> at first. However, once we know that the <code>evilScheme</code> has been set, we can access the property as if it were a regular non-optional type.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Villain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="comment">// exclamation point means implicitly unwrapped</span></span><br><span class="line">    <span class="keyword">var</span> evilScheme: <span class="type">String!</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">performScheme</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// no unwrapping necessary</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"And now, I will \(evilScheme!)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> villain = <span class="type">Villain</span>(name: <span class="string">"Billy"</span>, evilScheme: <span class="literal">nil</span>)</span><br><span class="line">villain.evilScheme = <span class="string">"steal from the cookie jar"</span></span><br><span class="line"><span class="comment">// we know for sure the scheme has been set</span></span><br><span class="line">villain.performScheme()</span><br></pre></td></tr></table></figure><p>There are a few things to note in the example above.</p><ul><li>The <code>evilScheme</code> property is now declared as an <strong>implicitly unwrapped optional</strong>. It’s type is written as <code>String!</code> instead of <code>String?</code>.</li><li>In the <code>performScheme()</code> method, we reference <code>evilScheme</code> as any other property, without unwrapping.</li><li>We call <code>performScheme()</code> once we know for a fact that <code>evilScheme</code> was set. The function assumes that <code>evilScheme</code> is not <code>nil</code>. If we treat an implicitly unwrapped optional that contains nil as if it contained a value, bad things can happen - including crashes!</li></ul><h2 id="Difference-between-upwrapping-an-with-with-and-with-implicit-unwrapping"><a href="#Difference-between-upwrapping-an-with-with-and-with-implicit-unwrapping" class="headerlink" title="Difference between upwrapping an with ?, with ! and with implicit unwrapping?"></a>Difference between upwrapping an with <code>?</code>, with <code>!</code> and with implicit unwrapping?</h2><p>Unwrapping with <code>?</code> is useful if you’re accessing nested properties or want some default behavior to occur if a value is nil.</p><p>Using <code>!</code> does not require providing a default value and is useful if you know that a value won’t be <code>nil</code>. However, if it is <code>nil</code>, the program will crash.</p><p>Implicitly unwrapping optionals is also useful when you know a value won’t be <code>nil</code>, but you can use the same syntax as a normal property. However, unintended behavior and crashes can occur if it is <code>nil</code>.</p><h1 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h1><h2 id="A-String-is-a-Struct"><a href="#A-String-is-a-Struct" class="headerlink" title="A String is a Struct"></a>A String is a Struct</h2><p>You just saw how a string can be initialized without a string literal.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringWithPotential = <span class="type">String</span>()</span><br></pre></td></tr></table></figure><h2 id="Counting-Characters"><a href="#Counting-Characters" class="headerlink" title="Counting Characters"></a>Counting Characters</h2><p>Let’s start with something straightforward. If you want to know how many characters are in a string, you use the count property.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Meet me in St. Louis!"</span></span><br><span class="line"><span class="string">"The string is \(str.count) characters long"</span></span><br></pre></td></tr></table></figure><p>Many real apps rely on counting characters - for example, a Twitter client that ensures a user is restricted to typing 140 or fewer characters.</p><h2 id="Accessing-specific-characters"><a href="#Accessing-specific-characters" class="headerlink" title="Accessing specific characters"></a>Accessing specific characters</h2><p>We can also conveniently access the characters at the beginning and end of a string.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstLetter = str.first</span><br><span class="line"><span class="keyword">let</span> isExcited = str.last == <span class="string">"!"</span></span><br></pre></td></tr></table></figure><h2 id="Checking-for-Substrings"><a href="#Checking-for-Substrings" class="headerlink" title="Checking for Substrings"></a>Checking for Substrings</h2><p>A <strong>substring</strong> is the term programmers use for any string that occurs within another string. We can check for the presence of a substring in different cases as shown below.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="built_in">contains</span>(<span class="string">"Lou"</span>)</span><br><span class="line">str.hasPrefix(<span class="string">"Me"</span>)</span><br><span class="line">str.hasSuffix(<span class="string">"in"</span>)</span><br></pre></td></tr></table></figure><p><code>contains()</code> simply checks if the substring occurs anywhere in <code>str</code>. <code>hasPrefix()</code> and <code>hasSuffix()</code> are more specialized and check if the substring occurs at the beginning and end of the string respectively.</p><h2 id="Creating-Variations-of-Strings"><a href="#Creating-Variations-of-Strings" class="headerlink" title="Creating Variations of Strings"></a>Creating Variations of Strings</h2><p>We can also use some string methods to generate different strings.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str.lowercased()</span><br><span class="line">str.uppercased()</span><br><span class="line"><span class="type">String</span>(str.reversed())</span><br></pre></td></tr></table></figure><p>Converting strings to all-lowercase or all-uppercase is great when you want user input to be case-insensitive. And reversing a string is useful if you want to see if two strings are <a href="https://en.wikipedia.org/wiki/Palindrome" target="_blank" rel="noopener">palindromes</a>.</p><p>Note in the last example, we need to use <code>str.reversed()</code> with a <code>String</code> initializer. If you look closely at the <a href="https://developer.apple.com/documentation/swift/string/2893808-reversed" target="_blank" rel="noopener">documentation for reversed()</a>, you’ll see that it actually returns a <code>ReversedCollection</code> instead of a <code>String</code>. You won’t need to use this type directly, but just know that Swift uses it “under the hood” for efficiency. You can simply use the <code>String()</code> initializer to convert the result into a usable string.</p><h2 id="Appending-Two-Strings"><a href="#Appending-Two-Strings" class="headerlink" title="Appending Two Strings"></a>Appending Two Strings</h2><p>Similar to concatenation, <code>String</code> also has an <code>append()</code> method that takes a string as an argument and attaches it to the string you’re mutating.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="string">"hello "</span></span><br><span class="line"><span class="keyword">let</span> world = <span class="string">"world!"</span></span><br><span class="line">hello.append(world)</span><br></pre></td></tr></table></figure><p>Is the equivalent of</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello = hello + world</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello += world</span><br></pre></td></tr></table></figure><p>With <code>append()</code> you don’t need to reassign <code>hello</code> a new value, and you’ll find the code is much more readable.</p><h2 id="Trimming-characters"><a href="#Trimming-characters" class="headerlink" title="Trimming characters"></a>Trimming characters</h2><p>In addition to <code>append()</code>, we can also remove characters from the end of a string. For example, you may want to remove all whitespace characters from the end of a user’s input.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">"   Be back later!        "</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> message.last == <span class="string">" "</span> &#123;</span><br><span class="line">    message.removeLast()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And the same can be done at the beginning.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> message.first == <span class="string">" "</span> &#123;</span><br><span class="line">    message.removeFirst()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Replacing-Substrings"><a href="#Replacing-Substrings" class="headerlink" title="Replacing Substrings"></a>Replacing Substrings</h2><p>We can also modify the middle of strings. A common manipulation method is <code>replacingOccurrences(of: String, with: String)</code>, which allows us to swap out one substring with another.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> verbose = <span class="string">"We hope you are very excited to learn Swift. It's a very fun and very useful skill. Soon enough, you'll be writing your very own app!"</span></span><br><span class="line"><span class="keyword">let</span> better = verbose.replacingOccurrences(of: <span class="string">"very "</span>, with: <span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>This method might come in handy for implementing a Find and Replace feature, a profanity filter, and many other cases, and is great to have in your string manipulation bag of tricks.</p><p><strong>Note:</strong> To use the <code>replaceOccurrences()</code> method, you will need to add <code>import Foundation</code> to the top of your file. <code>Foundation</code> is a <strong>framework</strong>, which is just a name for a collection of commonly used code. Apple provides frameworks like Foundation so that developers, like you, don’t need to reinvent the wheel for common tasks like string manipulation. We’ve already imported Foundation in the playground, so you can just follow along with the examples.</p><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="Initialize"><a href="#Initialize" class="headerlink" title="Initialize"></a>Initialize</h2> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: ## Initializing Arrays</span></span><br><span class="line"><span class="comment">//: The verbose way</span></span><br><span class="line"><span class="keyword">var</span> numbers = <span class="type">Array</span>&lt;<span class="type">Double</span>&gt;()</span><br><span class="line"><span class="comment">//: More often you will see ...</span></span><br><span class="line"><span class="keyword">var</span> moreNumbers = [<span class="type">Double</span>]()</span><br><span class="line">moreNumbers = [<span class="number">85.0</span>, <span class="number">90.0</span>, <span class="number">95.0</span>]</span><br><span class="line"><span class="comment">//: Array literal syntax</span></span><br><span class="line"><span class="keyword">let</span> differentNumbers = [<span class="number">97.5</span>, <span class="number">98.5</span>, <span class="number">99.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//: Array concatenation is super convenient in Swift</span></span><br><span class="line">moreNumbers += differentNumbers</span><br><span class="line"></span><br><span class="line"><span class="comment">//: ## Swift Arrays have types</span></span><br><span class="line"><span class="comment">//: An array can hold any type of object</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LightSwitch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> on: <span class="type">Bool</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> circuit = [<span class="type">LightSwitch</span>]()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> livingRoomSwitch = <span class="type">LightSwitch</span>()</span><br><span class="line"><span class="keyword">var</span> kitchenSwitch = <span class="type">LightSwitch</span>()</span><br><span class="line"><span class="keyword">var</span> bathroomSwitch = <span class="type">LightSwitch</span>()</span><br><span class="line"></span><br><span class="line">circuit = [livingRoomSwitch, kitchenSwitch, bathroomSwitch]</span><br></pre></td></tr></table></figure><p><strong>Append</strong></p><p>Here is an array of type <code>String</code>, listing musicians we want to play in the car on our upcoming road trip. To add an item to the end of an array we can use the append method, like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> musicians = [<span class="string">"Neil Young"</span>, <span class="string">"Kendrick Lamar"</span>, <span class="string">"Flo Rida"</span>, <span class="string">"Fetty Wap"</span>]</span><br><span class="line">musicians.append(<span class="string">"Rae Sremmurd"</span>)</span><br></pre></td></tr></table></figure><p>The array now looks like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"Neil Young"</span>, <span class="string">"Kendrick Lamar"</span>, <span class="string">"Flo Rida"</span>, <span class="string">"Fetty Wap"</span>, <span class="string">"Rae Sremmurd"</span>]</span><br></pre></td></tr></table></figure><p><strong>Insert</strong></p><p>To add an item to a specific place in an array we can use the method, <em>insert(at:)</em>. So, to add in “Dej Loaf” at index 2 we would write the following:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">musicians.insert(<span class="string">"Dej Loaf"</span>, at: <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>The array now looks like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"Neil Young"</span>, <span class="string">"Kendrick Lamar"</span>, <span class="string">"Dej Loaf"</span>, <span class="string">"Flo Rida"</span>, <span class="string">"Fetty Wap"</span>, <span class="string">"Rae Sremmurd"</span>]</span><br></pre></td></tr></table></figure><p><strong>Remove</strong></p><p>We can use a method called <code>remove(at:)</code> to remove an item at a particular index. If we remove the item at index 3, you can see that “Flo Rida” is removed:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">musicians.remove(at: <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>Subscripting</strong></p><p>Finally, if you want to retrieve an item at a particular index, you can use subscript syntax. Simply put the index in-between brackets after the array name, like so:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> musician = musician[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h1 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h1><h2 id="Initialize-1"><a href="#Initialize-1" class="headerlink" title="Initialize"></a>Initialize</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initializer syntax</span></span><br><span class="line"><span class="keyword">var</span> groupDict = [<span class="type">String</span>:<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dictionary literal</span></span><br><span class="line"><span class="keyword">var</span> animalGroupDict = [<span class="string">"whales"</span>:<span class="string">"pod"</span>, <span class="string">"geese"</span>:<span class="string">"flock"</span>, <span class="string">"lions"</span>: <span class="string">"pride"</span>]</span><br></pre></td></tr></table></figure>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: ## Dictionary operations</span></span><br><span class="line"><span class="comment">//: insert, count, remove, update, retrieve</span></span><br><span class="line"><span class="keyword">var</span> animalGroupsDict = [<span class="string">"whales"</span>:<span class="string">"pod"</span>, <span class="string">"geese"</span>:<span class="string">"flock"</span>, <span class="string">"lions"</span>: <span class="string">"pride"</span>]</span><br><span class="line"><span class="comment">//: Adding items to a dictionary</span></span><br><span class="line">animalGroupsDict[<span class="string">"crows"</span>] = <span class="string">"murder"</span></span><br><span class="line">animalGroupsDict[<span class="string">"monkeys"</span>] = <span class="string">"troop"</span></span><br><span class="line"><span class="comment">//: The count method is available to all collections.</span></span><br><span class="line">animalGroupsDict.<span class="built_in">count</span> <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">print</span>(animalGroupsDict)</span><br><span class="line"><span class="comment">//: Removing items from a dictionary</span></span><br><span class="line">animalGroupsDict[<span class="string">"crows"</span>] = <span class="literal">nil</span></span><br><span class="line">animalGroupsDict</span><br><span class="line"><span class="comment">//: Updating a value</span></span><br><span class="line">animalGroupsDict[<span class="string">"monkeys"</span>] = <span class="string">"barrel"</span></span><br><span class="line"><span class="keyword">var</span> group = animalGroupsDict.updateValue(<span class="string">"gaggle"</span>, forKey: <span class="string">"geese"</span>)</span><br><span class="line">type(of: group)</span><br><span class="line"></span><br><span class="line">animalGroupsDict.updateValue(<span class="string">"crash"</span>, forKey: <span class="string">"rhinoceroses"</span>)</span><br><span class="line"><span class="built_in">print</span>(animalGroupsDict)</span><br><span class="line"><span class="comment">//: ## Example</span></span><br><span class="line"><span class="comment">//: Retrieving the value for a particular key</span></span><br><span class="line"><span class="keyword">let</span> groupOfWhales = animalGroupsDict[<span class="string">"whales"</span>]</span><br><span class="line"><span class="comment">//: Why would the code below return an optional?</span></span><br><span class="line"><span class="comment">//:</span></span><br><span class="line"><span class="comment">//:     animalGroupsDict["whales"]</span></span><br><span class="line"><span class="comment">//: We unwrap a value returned from a dictionary just like we would unwrap any other optional.</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> groupOfWhales = animalGroupsDict[<span class="string">"whales"</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"We saw a \(groupOfWhales) of whales from the boat."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No value found for that key."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//: What happens if the key isn't found?</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> groupOfSasquatches = animalGroupsDict[<span class="string">"Sasquatches"</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"We saw a \(groupOfSasquatches) of Sasquatches on our hike."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No value found for that key."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we use the <code>removeValueForKey()</code> method to remove the value for the string, “George Bush”. Since <code>removeValueForKey()</code> returns the value removed, we can reset the value of the new key, “George H. W. Bush” to be the previously returned value, “Miss Beazley.”</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldValue = presidentialPetsDict.removeValueForKey(<span class="string">"George Bush"</span>)</span><br><span class="line">presidentialPetsDict[<span class="string">"George W. Bush"</span>] = oldValue</span><br></pre></td></tr></table></figure><p>We unwrap the retrieved value using <code>if let</code> and then use string interpolation to insert “Bo” into the string. The string is printed out as a part of the if block.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> dog = presidentialDogs[<span class="string">"Barack Obama"</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Michele Obama walks \(dog) evey morning."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No value found."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: ## Sets</span></span><br><span class="line"><span class="comment">//: Literal syntax</span></span><br><span class="line"><span class="keyword">var</span> cutlery: <span class="type">Set</span> = [<span class="string">"fork"</span>, <span class="string">"knife"</span>, <span class="string">"spoon"</span>]</span><br><span class="line"><span class="keyword">var</span> flowers:<span class="type">Set</span>&lt;<span class="type">Character</span>&gt; = [<span class="string">"🌷"</span>,<span class="string">"🌹"</span>,<span class="string">"🌸"</span>]</span><br><span class="line"><span class="comment">//: Initializer syntax</span></span><br><span class="line"><span class="keyword">var</span> utensils = <span class="type">Set</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> trees = <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;()</span><br><span class="line"><span class="comment">//: ## Set operations</span></span><br><span class="line"><span class="comment">//: Insert, Remove, Count</span></span><br><span class="line">trees.insert(<span class="string">"🌲"</span>)</span><br><span class="line">trees.insert(<span class="string">"🌳"</span>)</span><br><span class="line">trees.insert(<span class="string">"🌵"</span>)</span><br><span class="line"></span><br><span class="line">trees.remove(<span class="string">"🌵"</span>)</span><br><span class="line">trees.<span class="built_in">count</span></span><br></pre></td></tr></table></figure><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> director: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> releaseYear: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(title: <span class="type">String</span>, director: <span class="type">String</span>, releaseYear: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.title = title</span><br><span class="line">        <span class="keyword">self</span>.director = director</span><br><span class="line">        <span class="keyword">self</span>.releaseYear = releaseYear</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieArchive</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> movies: [<span class="type">Movie</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">filterByYear</span><span class="params">(year: Int)</span></span> -&gt; [<span class="type">Movie</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> filteredArray = [<span class="type">Movie</span>]()</span><br><span class="line">        <span class="keyword">for</span> movie <span class="keyword">in</span> <span class="keyword">self</span>.movies &#123;</span><br><span class="line">            <span class="keyword">if</span> movie.releaseYear == year &#123;</span><br><span class="line">                filteredArray.append(movie)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filteredArray</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(movies: [<span class="type">Movie</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.movies = movies</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> movie1 = <span class="type">Movie</span>(title: <span class="string">"Bride of Frankenstein"</span>, director: <span class="string">"James Whale"</span>, releaseYear: <span class="number">1935</span>)</span><br><span class="line"><span class="keyword">let</span> movie2 = <span class="type">Movie</span>(title: <span class="string">"The Night Walker"</span>, director: <span class="string">"William Castle"</span>, releaseYear: <span class="number">1964</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> archive = <span class="type">MovieArchive</span>(movies: [movie1, movie2])</span><br><span class="line">archive.filterByYear(year: <span class="number">1935</span>)</span><br><span class="line">archive.movies</span><br></pre></td></tr></table></figure><p>One important difference between structs and classes in Swift is how they’re handled in the computer or phone’s memory. Structs are <strong>passed by value</strong> while classes are <strong>passed by reference</strong>. Let’s see what this means with a simple example.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Musician</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instrument: <span class="type">Instrument</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(instrument: <span class="type">Instrument</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.instrument = instrument</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> duo = [<span class="type">Musician</span>(instrument: .fiddle), <span class="type">Musician</span>(instrument: .banjo)]</span><br><span class="line"></span><br><span class="line"><span class="comment">//: Alternately, we could define a struct</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MusicianStruct</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instrument: <span class="type">Instrument</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> structDuo = [<span class="type">MusicianStruct</span>(instrument: .fiddle), <span class="type">MusicianStruct</span>(instrument: .banjo)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepareForDuelingBanjos</span><span class="params">(musician: Musician)</span></span> &#123;</span><br><span class="line">    <span class="comment">//var musicianCopy = musician</span></span><br><span class="line">    <span class="comment">//musicianCopy.instrument = .banjo</span></span><br><span class="line">    musician.instrument = .banjo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">prepareForDuelingBanjos</span><span class="params">(musician: MusicianStruct)</span></span> &#123;</span><br><span class="line">    <span class="keyword">var</span> musicianCopy = musician</span><br><span class="line">    musicianCopy.instrument = .banjo</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: instances of classes are passed by reference</span></span><br><span class="line"><span class="keyword">let</span> fiddler = duo[<span class="number">0</span>]</span><br><span class="line">prepareForDuelingBanjos(musician: fiddler)</span><br><span class="line">fiddler.instrument <span class="comment">// banjo</span></span><br><span class="line"><span class="comment">//: instances of structs are passed by value</span></span><br><span class="line"><span class="keyword">let</span> fiddlerStruct = structDuo[<span class="number">0</span>]</span><br><span class="line">prepareForDuelingBanjos(musician: fiddlerStruct)</span><br><span class="line">fiddlerStruct.instrument <span class="comment">// fiddle</span></span><br></pre></td></tr></table></figure><h2 id="Class-Inheritance"><a href="#Class-Inheritance" class="headerlink" title="Class Inheritance"></a>Class Inheritance</h2><p>One powerful feature of classes not available to structs is inheritance. Inheritance allows one class to take on the properties and methods of another class, as well as add its own functionality.</p><p>To start, let’s say we have a <code>Guitar</code> class defined as the following.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Guitar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> strings: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> frets: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(strings: <span class="type">Int</span>, frets: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.strings = strings</span><br><span class="line">        <span class="keyword">self</span>.frets = frets</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pluckString</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"twang"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is a great start, but what if we then wanted to model an electric guitar. The electric guitar is a “kind of” guitar, but with a few differences. For example, the electric guitar has electronics for modifying the volume and tone of its output (check out the knobs on the lower body). We could define a new <code>ElectricGuitar</code> class by copy-pasting the <code>GuitarClass</code> and adding these different properties, but we can do much better. Instead, if we place a colon after the the class name and then specify the class we want to inherit from, the <code>ElectricGuitar</code> automatically has all the properties and methods of a guitar.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricGuitar</span>: <span class="title">Guitar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> volumeLevel: <span class="type">Float</span> = <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">var</span> toneLevel: <span class="type">Float</span> = <span class="number">1.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we have a new class, <code>ElectricGuitar</code> that has all the properties of <code>Guitar</code> with the additional properties for volume and tone.</p><table><thead><tr><th align="left"></th><th align="left"></th></tr></thead><tbody><tr><td align="left">superclass</td><td align="left">A class that is inherited from</td></tr><tr><td align="left">subclass</td><td align="left">A class that inherits from another class (the superclass)</td></tr><tr><td align="left">parent class</td><td align="left">A class’s superclass</td></tr><tr><td align="left">child class</td><td align="left">A class that descended (inherited directly) from a parent class.</td></tr><tr><td align="left">descendant</td><td align="left">A class that inherited from an ancestor</td></tr><tr><td align="left">ancestor</td><td align="left">A class that has child or descendent classes</td></tr><tr><td align="left">root class</td><td align="left">A class with no superclass</td></tr><tr><td align="left">leaf class</td><td align="left">A class with no subclasses</td></tr><tr><td align="left">hierarchy</td><td align="left">A tree of inheritance relationships</td></tr></tbody></table><h2 id="Overriding-Methods"><a href="#Overriding-Methods" class="headerlink" title="Overriding Methods"></a>Overriding Methods</h2><p>Inheritance doesn’t just let you add to a class - you can also override its behavior. For example, since an electric guitar’s volume affects its sound, we can provide some custom functionality to the <code>pluck()</code> method.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">pluckString</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> volumeLevel &gt; <span class="number">0.7</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"🎸🎸🎸 DRAOWWW"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> volumeLevel &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"🎸 twang"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// volumeLevel is 0</span></span><br><span class="line">        <span class="comment">// Guitar's implementation of pluckString()</span></span><br><span class="line">        <span class="keyword">super</span>.pluckString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Overriding a method is as simple as redeclaring it and adding the <code>override</code> keyword before <code>func</code>. And if you ever need to fall back to the original functionality, as we do in the case when the volume is 0, the old implementation can be called <code>super</code> keyword. <code>super</code> just refers to the superclass (the <code>Guitar</code> class we’re inheriting from) so <code>super.pluck()</code> will call the <code>pluck() method of the</code>Guitar` class which will print “twang”.</p><h2 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h2><p>Inheritance, or the ability of one class to take on the properties and methods of a superclass, leads us to the next topic - <strong>polymorphism</strong>.</p><p>Polymorphism means “many forms.” It is a programming language feature by which a type can be substituted for another type. For example, since it inherits from a <code>Guitar</code>, an <code>ElectricGuitar</code> can be substituted anywhere that a <code>Guitar</code> would be used. In other words, an <code>ElectricGuitar</code> is a form of <code>Guitar</code>.</p><p>Polymorphism allows for simpler code that avoids unnecessary specificity, and code that is flexible and expandable because it’s applicable to more than one type. If we were to add additional subclasses of <code>Guitar</code>, we could still use any of these types where a <code>Guitar</code> is used.</p><p><code>override</code> is used to indicate that a subclass’s method implementation will be substituted for a superclass’s method implementation. This is an aspect of polymorphism through inheritance.</p><p>We saw an example of polymorphism previously when we used <code>override</code> to refer to a single <code>Guitar</code> type, and produced different behavior by substituting in an <code>ElectricGuitar</code> instead of a <code>Guitar</code>.</p><p>We can see an example of polymorphism in action below. Because <code>anyGuitar</code>‘s type is <code>Guitar</code> we can assign any subclass of <code>Guitar</code>, including an <code>ElectricGuitar</code> to that variable.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anyGuitar: <span class="type">Guitar</span> = <span class="type">Guitar</span>(strings: <span class="number">6</span>, frets: <span class="number">20</span>)</span><br><span class="line">anyGuitar.pluckString()</span><br><span class="line"></span><br><span class="line">anyGuitar = <span class="type">ElectricGuitar</span>(strings: <span class="number">6</span>, frets: <span class="number">20</span>)</span><br><span class="line">anyGuitar.pluckString()</span><br></pre></td></tr></table></figure><p>Even though <code>anyGuitar()</code>‘s type is still <code>Guitar</code>, calling <code>pluckString()</code> will call the custom method we defined for <code>ElectricGuitar</code>. As a result, we can keep our code involving <code>Guitar</code> instances reusable, without sacrificing the functionality of any subclasses that happen to override a method.</p><h2 id="Type-Casting"><a href="#Type-Casting" class="headerlink" title="Type Casting"></a>Type Casting</h2><p>Finally, if we know that <code>anyGuitar</code> is assigned an <code>ElectricGuitar</code> and we want to access the <code>toneLevel</code> property, we can convert the types with a special keyword: <code>as</code>. When using the <code>as</code> keyword the variable you want to convert goes on the left and the type you’re converting to goes on the right.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">result = variableToConvert as NewType</span><br><span class="line">// forcibly convert the types with &quot;as!&quot;</span><br><span class="line">let electricGuitar = anyGuitar as! ElectricGuitar</span><br><span class="line">electricGuitar.toneLevel</span><br><span class="line">// or safely convert with &quot;if let&quot; with &quot;as?&quot;</span><br><span class="line">if let electricGuitar = anyGuitar as? ElectricGuitar &#123;</span><br><span class="line">    electricGuitar.toneLevel</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You’ll also notice the use of <code>as!</code> and <code>as?</code> in this example. This may seem complicated but it’s really the same concept you learned about unwrapping optionals. Since there’s no guarantee that <code>anyGuitar</code> will actually be an <code>ElectricGuitar</code>, casting to an <code>ElectricGuitar</code> returns an optional of type <code>Guitar?</code>. To forcibly unwrap the result, we use <code>as!</code> and to conditionally unwrap with <code>if let</code>, we use <code>as?</code>.</p><h2 id="Defining-Terms"><a href="#Defining-Terms" class="headerlink" title="Defining Terms"></a>Defining Terms</h2><p>There’s some terminology to cover, and then we’ll describe what happens when a method is called on a type that is defined as a <code>class</code>.</p><table><thead><tr><th align="left">Term</th><th align="left">Example</th><th align="left">Definition</th></tr></thead><tbody><tr><td align="left">instance</td><td align="left">Guitar()</td><td align="left">A class or type that we have initialized. Can be referred to with a constant or variable, and refers to its own instance with <code>self</code></td></tr><tr><td align="left">override</td><td align="left">override func pluckString() { }</td><td align="left">Used to indicate that this method implementation should supersede the superclass’s method implementation</td></tr><tr><td align="left">super</td><td align="left">super.someMethod()</td><td align="left">Used to retrieve and invoke a method implementation that has been overridden</td></tr></tbody></table><h1 id="Protocols"><a href="#Protocols" class="headerlink" title="Protocols"></a>Protocols</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Init</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Souschef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chop</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rinse</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Roommate</span>: <span class="title">Souschef</span>, <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hungry = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(hungry: <span class="type">Bool</span>, name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.hungry = hungry</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chop</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"She's choppin' \(vegetable)!"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rinse</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The \(vegetable) is so fresh and so clean"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implete the function outside the class</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> ==<span class="params">(lhs: Roommate, rhs: Roommate)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.name == rhs.name &amp;&amp; lhs.hungry == rhs.hungry</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> roomie = <span class="type">Roommate</span>(hungry: <span class="literal">true</span>, name: <span class="string">"Jennifer"</span>)</span><br><span class="line"><span class="keyword">var</span> theBestRoomie = <span class="type">Roommate</span>(hungry: <span class="literal">true</span>, name: <span class="string">"Jennifer"</span>)</span><br><span class="line"></span><br><span class="line">roomie == theBestRoomie</span><br><span class="line"><span class="comment">//: ## A protocol is also a type, any class that adopts this protocol</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DinnerCrew</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> members: [<span class="type">Souschef</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(members: [<span class="type">Souschef</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.members = members</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomPasserby</span>: <span class="title">Souschef</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chop</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"She's choppin' \(vegetable)!"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rinse</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The \(vegetable) is so fresh and so clean"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newFriend = <span class="type">RandomPasserby</span>(name: <span class="string">"Dave"</span>)</span><br><span class="line"><span class="keyword">var</span> motleyDinnerCrew = <span class="type">DinnerCrew</span>(members: [newFriend, roomie])</span><br></pre></td></tr></table></figure><h2 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h2><p>One more powerful feature of Swift types is the ability to add new methods and properties through <strong>extensions</strong>. You’ll see extensions in action as you start building the Pitch Perfect app, so let’s take a look at an example before wrapping up with object oriented programming.</p><p>To extend a class, simply use the <code>extension</code> keyword, followed by the type name.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SomeClass</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>Additionally, you can also add a colon after the type name followed by any number of protocols you’d like the type to conform to. Let’s rewrite the <code>Roommate</code> example so that it uses an extension to conform to <code>Souschef</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Roommate</span>: <span class="title">Souschef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chop</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"She's choppin' \(vegetable)!"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rinse</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The \(vegetable) is so fresh and so clean"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Isn’t this the same as the previous example? It is, but with extensions, you don’t even need access to the original class definition for <code>Roommate</code>. As you begin your journey into iOS development, you’ll be working with many classes provided by Apple in which you do not have direct access to the code. However, with extensions you can add functionality to these types without ever modifying the original class definition.</p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>Something that is passed by value such as an instance of a struct is copied when it’s assigned to a variable or passed to a function. Changing a property on the instance will only apply to the copy, and the original instance will remain unchanged.</p><p>Values that are passed by reference, such as instances of classes, are not copied. Changing a value on a copy will also modify the original instance, since the copy is simply referencing the original.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Optionals&quot;&gt;&lt;a href=&quot;#Optionals&quot; class=&quot;headerlink&quot; title=&quot;Optionals&quot;&gt;&lt;/a&gt;Optionals&lt;/h1&gt;&lt;h2 id=&quot;Nil-value&quot;&gt;&lt;a href=&quot;#Nil-value&quot; class
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.qianhongbo.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Swift" scheme="https://www.qianhongbo.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift初探</title>
    <link href="https://www.qianhongbo.com/Swift%E5%88%9D%E6%8E%A2.html"/>
    <id>https://www.qianhongbo.com/Swift初探.html</id>
    <published>2021-12-10T12:12:53.000Z</published>
    <updated>2021-12-12T17:34:35.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Variables-and-Types"><a href="#Variables-and-Types" class="headerlink" title="Variables and Types"></a>Variables and Types</h1><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world!"></a>Hello world!</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> question = <span class="string">"Hello world!"</span></span><br><span class="line"><span class="built_in">print</span>(question)</span><br></pre></td></tr></table></figure><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this is a comment</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* this is a </span></span><br><span class="line"><span class="comment">   multiline comment */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">print("neither will this")</span></span><br><span class="line"><span class="comment">print("or this")</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Data-types"><a href="#Data-types" class="headerlink" title="Data types"></a>Data types</h2><table><thead><tr><th>Type</th><th align="left">Description</th><th>Example Values</th></tr></thead><tbody><tr><td>Int</td><td align="left">whole number values</td><td>0, 2, -2, 100, …</td></tr><tr><td>Float</td><td align="left">floating-point (decimal) numbers that require no more than 6 decimal digits (32-bit)</td><td>3.14, 5.693, -12.321, …</td></tr><tr><td>Double</td><td align="left">floating-point (decimal) numbers that require more precision—guaranteed 15 decimal digits (64-bit)</td><td>3.14, 5.693, -12.321, …</td></tr><tr><td>Bool</td><td align="left">a Boolean truth value</td><td>true, false</td></tr><tr><td>Character</td><td align="left">a single letter, digit, symbol, or code</td><td>“a”, “+”, “q”, …</td></tr><tr><td>String</td><td align="left">combinations of characters</td><td>“swift”, “I Love Swift”, “ “, “:)”, …</td></tr></tbody></table><h2 id="Creating-variables"><a href="#Creating-variables" class="headerlink" title="Creating variables"></a>Creating variables</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberOfWheels: <span class="type">Int</span> = <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> centimetersOfRainfall: <span class="type">Float</span> = <span class="number">5.5</span></span><br><span class="line"><span class="keyword">var</span> pi: <span class="type">Double</span> = <span class="number">3.14159265359</span></span><br><span class="line"><span class="keyword">var</span> letterOfTheDay: <span class="type">Character</span> = <span class="string">"z"</span></span><br><span class="line"><span class="keyword">var</span> myFavoriteAnimal: <span class="type">String</span>  = <span class="string">"octopus"</span></span><br><span class="line"><span class="keyword">var</span> rainingOutside: <span class="type">Bool</span>  = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>The code below is also okay, because Siwft can infer what is the type of the variable.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName = <span class="string">"Aisha"</span></span><br></pre></td></tr></table></figure><p>Change the value of the variable, but we can’t change the type of the vcariable.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// initial declaration of petsAge</span></span><br><span class="line"><span class="keyword">var</span> petsAge = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">petsAge = <span class="number">13</span></span><br></pre></td></tr></table></figure><p>Constant.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> encouragement = <span class="string">"You can do it!"</span></span><br><span class="line"><span class="keyword">var</span> customizedEncouragement = <span class="string">"You can do it, Stephanie!"</span></span><br><span class="line">customizedEncouragement = <span class="string">"You can do it, Ryder!"</span></span><br></pre></td></tr></table></figure><p>String.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> emailSignature = <span class="string">"Aliyah Smith\nVP, Sales\n(555) - 555 - 5555"</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"><strong>Character</strong></th><th align="left"><strong>Usage</strong></th></tr></thead><tbody><tr><td align="left">\n</td><td align="left">Newline / line feed</td></tr><tr><td align="left">\t</td><td align="left">Horizontal tab</td></tr><tr><td align="left">&quot;</td><td align="left">Double quotation mark, using <code>&quot;</code> alone signifies the end of a string</td></tr><tr><td align="left">&#39;</td><td align="left">Single quotation mark</td></tr><tr><td align="left">\</td><td align="left">Backslash, using “&quot; alone escapes the next character</td></tr></tbody></table><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"Happy birthday, \("</span><span class="type">Maverick</span><span class="string">")!"</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h1 id="Operators-and-Expressions"><a href="#Operators-and-Expressions" class="headerlink" title="Operators and Expressions"></a>Operators and Expressions</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> / <span class="number">3</span> <span class="comment">// The result is 1</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> / <span class="number">3.0</span> <span class="comment">// The result is 1.66666667</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hello = <span class="string">"Hello"</span></span><br><span class="line"><span class="keyword">var</span> world = <span class="string">"world!"</span></span><br><span class="line"><span class="keyword">let</span> greeting = hello + <span class="string">" "</span> + world</span><br></pre></td></tr></table></figure><h1 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> onGuestList &amp;&amp; age &gt;= <span class="number">21</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(name), come party with us!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !onGuestList || age &lt; <span class="number">21</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Sorry, \(name), maybe you can go play Bingo with the Android team."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> breakfast &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Good morning!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> lunch &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Good afternoon!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> dinner &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Good evening!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> month &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">print</span>(“<span class="type">January</span>”)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">print</span>(“<span class="type">February</span>”)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> meal = <span class="string">"breakfast"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> meal</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"breakfast"</span>: <span class="built_in">print</span>(<span class="string">"Good morning!"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"lunch"</span>: <span class="built_in">print</span>(<span class="string">"Good afternoon!"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"dinner"</span>: <span class="built_in">print</span>(<span class="string">"Good evening!"</span>)</span><br><span class="line">    <span class="keyword">default</span>: <span class="built_in">print</span>(<span class="string">"none"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>...<span class="number">10</span> <span class="comment">// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.</span></span><br><span class="line"><span class="number">1</span>..&lt;<span class="number">10</span> <span class="comment">// 1, 2, 3, 4, 5, 6, 7, 8, 9.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">10</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i&lt;<span class="number">1001</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span>) == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// repeat-while loop</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello, world!"</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">while</span> i &lt; <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printLove</span><span class="params">(s: String)</span></span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I love \(s)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printLove(s: <span class="string">"Swift"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printLove</span><span class="params">(s: String)</span></span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I love"</span> + s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printLove(s: <span class="string">"Swift"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">areaOfRectangle</span><span class="params">(length: Int, width: Int)</span></span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(length * width)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">areaOfRectangle(length: <span class="number">2</span>, width: <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculateTip</span><span class="params">(priceOfMeal: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> priceOfMeal * <span class="number">0.15</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPastBedtime</span><span class="params">(hour: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> hour &gt; <span class="number">9</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addValues</span><span class="params">(value1 x: Int, value2 y: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="comment">// internally, use `x` and `y`</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// externally, use `value1` and `value2`</span></span><br><span class="line">addValues(value1: <span class="number">5</span>, value2: <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addExcitementToString</span><span class="params">(<span class="number">_</span> string: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> string + <span class="string">"!"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addExcitementToString(<span class="string">"Swift"</span>)</span><br></pre></td></tr></table></figure><h1 id="Structures-and-Enums"><a href="#Structures-and-Enums" class="headerlink" title="Structures and Enums"></a>Structures and Enums</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> school: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ayush = <span class="type">Student</span>(name: <span class="string">"Ayush Saraswat"</span>, age: <span class="number">19</span>, school: <span class="string">"Udacity"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Beaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> volumeMilliliters: <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canContainContents</span><span class="params">(otherBeaker: Beaker)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> volumeMilliliters &gt;= otherBeaker.volumeMilliliters</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> beaker1 = <span class="type">Beaker</span>(volumeMilliliters: <span class="number">500</span>)</span><br><span class="line"><span class="keyword">let</span> beaker2 = <span class="type">Beaker</span>(volumeMilliliters: <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">let</span> canContainContents: <span class="type">Bool</span> = beaker1.canContainContents(otherBeaker: beaker2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// If, however, a method tries to modify (or mutate) one of the struct's properties, then the mutating keyword must be added before func. For example</span></span><br><span class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">increaseCapacity</span><span class="params">()</span></span> &#123;</span><br><span class="line">    volumeMilliliters += <span class="number">500</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Beaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> volumeMilliliters: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> madeIn = <span class="string">"China"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// These are US ounces</span></span><br><span class="line">    <span class="keyword">var</span> volumeOunces: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> volumeMilliliters * <span class="number">0.033814</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canContainContents</span><span class="params">(otherBeaker: Beaker)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> volumeMilliliters &gt;= otherBeaker.volumeMilliliters</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// In fact, when we change the value of a static property with dot notation, we reference the type name and not a specific instance (Beaker.madeIn).</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">PrimaryColor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> red</span><br><span class="line">    <span class="keyword">case</span> blue</span><br><span class="line">    <span class="keyword">case</span> yellow</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Aunties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> aime, billie, diane, gail, janie, pam</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DrinkSize</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> small = <span class="number">12</span></span><br><span class="line">    <span class="keyword">case</span> medium = <span class="number">16</span></span><br><span class="line">    <span class="keyword">case</span> large = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rawValue</span></span><br><span class="line"><span class="type">Var</span> sugar = <span class="string">"A \(DrinkSize.small.rawValue) oz Coke has 33 g of sugar"</span></span><br><span class="line"><span class="comment">// "A 12 oz Coke has 33 g of sugar"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Using 'enum' with 'switch'</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Finger</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> thumb = <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> index = <span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> middle = <span class="number">3</span></span><br><span class="line">    <span class="keyword">case</span> ring = <span class="number">4</span></span><br><span class="line">    <span class="keyword">case</span> pinky = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> destination = <span class="type">Finger</span>.thumb</span><br><span class="line"><span class="keyword">var</span> test = <span class="type">Finger</span>(rawValue: <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch destination</span></span><br><span class="line"><span class="keyword">switch</span> test &#123;</span><br><span class="line">    <span class="keyword">case</span> .thumb:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"thumb"</span>)</span><br><span class="line">    <span class="keyword">case</span> .index:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"index"</span>)</span><br><span class="line">    <span class="keyword">case</span> .middle:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"middle"</span>)</span><br><span class="line">    <span class="keyword">case</span> .ring:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"ring"</span>)</span><br><span class="line">    <span class="keyword">case</span> .pinky:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"pinky"</span>)</span><br><span class="line">  <span class="comment">// We need to use none for 'test'</span></span><br><span class="line">    <span class="keyword">case</span> .<span class="keyword">none</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"None!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Variables-and-Types&quot;&gt;&lt;a href=&quot;#Variables-and-Types&quot; class=&quot;headerlink&quot; title=&quot;Variables and Types&quot;&gt;&lt;/a&gt;Variables and Types&lt;/h1&gt;&lt;h2 i
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.qianhongbo.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Swift" scheme="https://www.qianhongbo.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>UCSD EC80 选课</title>
    <link href="https://www.qianhongbo.com/%E5%9B%9B%E5%AD%A6%E6%9C%9F%E8%AF%BE%E7%A8%8B%E5%AE%89%E6%8E%92.html"/>
    <id>https://www.qianhongbo.com/四学期课程安排.html</id>
    <published>2021-09-27T15:41:25.000Z</published>
    <updated>2021-12-11T03:59:40.980Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>SEASON</th><th>CLASS_1</th><th>CLASS_2</th><th>CLASS_3</th></tr></thead><tbody><tr><td>FALL</td><td>ECE269</td><td>CSE252A</td><td>CSE258</td></tr><tr><td>WINTER</td><td>ECE276A</td><td>ECE141A</td><td>ECE143</td></tr><tr><td>SPRING</td><td>ECE272A</td><td>ECE141B</td><td>CSE240</td></tr><tr><td>FALL</td><td>ECE271A</td><td>CSE250</td><td>ECE250</td></tr></tbody></table><h1 id="FALL-2021"><a href="#FALL-2021" class="headerlink" title="FALL 2021:"></a>FALL 2021:</h1><h2 id="ECE-269-Linear-Algebra-and-Application-Piya-Pal"><a href="#ECE-269-Linear-Algebra-and-Application-Piya-Pal" class="headerlink" title="ECE 269: Linear Algebra and Application (Piya Pal)"></a>ECE 269: Linear Algebra and Application (Piya Pal)</h2><p>Class GPA:  ( students)<br>Stats: A+ (0%), A (5.9%, 11), A- (7.5%, 14), B+ (23.7%,44), B (16.1%, 30), B- (30.6%, 57), C+ (9.7%, 18) …<br>Weights: Quiz (20%), Final (35%), Assignments (45%)<br>Comments:<br>由于EC80的专业特性，毕业要求四门核心课，所以如果想要在一学期之内毕业，就必须要每学期选一门。根据往届的信息，ECE269这门课是所有四门课程中相对简单的，毕竟本科都有点线性代数的基础（对于我来说等于没学）。<br>作为第一学期的核心课，我自认为还是比较认真的，上课次次不落，discussion也每次都去，课后也会复习笔记，因为有些内容真的没有完全听懂。作业的话由于自己马虎，加上有些题目确实不会，导致分数也不理想，都在medium附近徘徊。两个quiz，第一个quiz难度还算可以，第二个quiz难度飙升，三道题目就对了一个。到了期末就更惨了，6道题只会两个半道，到现在我还不知道能打多少分。毕竟这门课是个comprehensive的课程，要达到一定标准才能毕业，再加上GPA 3.0才能达到毕业要求，让这个等待出分的我非常的慌张。</p><h2 id="CSE252A-Computer-Vision-I-Ben-Ochoa"><a href="#CSE252A-Computer-Vision-I-Ben-Ochoa" class="headerlink" title="CSE252A: Computer Vision I (Ben Ochoa)"></a>CSE252A: Computer Vision I (Ben Ochoa)</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SEASON&lt;/th&gt;
&lt;th&gt;CLASS_1&lt;/th&gt;
&lt;th&gt;CLASS_2&lt;/th&gt;
&lt;th&gt;CLASS_3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;FALL&lt;/td&gt;
&lt;td&gt;ECE269&lt;
      
    
    </summary>
    
      <category term="UCSD" scheme="https://www.qianhongbo.com/categories/UCSD/"/>
    
    
  </entry>
  
  <entry>
    <title>LAIOFEER公开课</title>
    <link href="https://www.qianhongbo.com/LAIOFEER%E5%85%AC%E5%BC%80%E8%AF%BE.html"/>
    <id>https://www.qianhongbo.com/LAIOFEER公开课.html</id>
    <published>2020-12-22T01:57:40.000Z</published>
    <updated>2021-04-12T13:21:12.646Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Always put yourself in other people’s shoes. 换位思考</p><p>Critical thinking 任何事情并不是非黑即白</p></blockquote><h2 id="BQ-question-1"><a href="#BQ-question-1" class="headerlink" title="BQ question 1"></a>BQ question 1</h2><p>Tell me about yourself:</p><ol><li>Name, Education, Background</li><li>Skills: Primary programming language, Projects experience, intern experience</li><li>Thank you</li></ol><p>Variants:</p><ol><li>Tell me your weakness(e.g. 多任务同时处理，优先级问题) 承认自己的问题，尽量真实</li><li>Key points: How to avoid/address the same problems in the future.</li></ol><h2 id="BQ-question-2"><a href="#BQ-question-2" class="headerlink" title="BQ question 2"></a>BQ question 2</h2><p>When you have different opinions from your colleagues</p><ol><li>Scenarios</li><li>Communication: 1 on 1 不在公共场合批评别人; How/When/Where</li></ol><h2 id="BQ-question-3"><a href="#BQ-question-3" class="headerlink" title="BQ question 3"></a>BQ question 3</h2><p>When you have limited time available to finish your project. Quality vs Speed</p><p>分情况讨论，用项目举例</p><p>Variant 1:Provide an example scenario in which you made a quick decision under pressure</p><p>Variant 2: Write an email to your manager on how to explain why you missed the deadline</p><h2 id="BQ-question-4"><a href="#BQ-question-4" class="headerlink" title="BQ question 4"></a>BQ question 4</h2><p>What is your career plan for the next 5 years?</p><p>现在有什么，未来期待什么，怎么做？</p><p>concrete example</p><h2 id="BQ-question-5"><a href="#BQ-question-5" class="headerlink" title="BQ question 5"></a>BQ question 5</h2><p>How do you define a good manager? Or what do you expect from your manager?</p><p>grow path</p><h2 id="BQ-question-6"><a href="#BQ-question-6" class="headerlink" title="BQ question 6"></a>BQ question 6</h2><p>Please tell me one of the most challenging projects you have accomplished.</p><p>Why is it challenging？</p><ol><li>Technical </li><li>Human resource </li><li>Operational complexity/ cost</li><li>Novelty</li><li>Time constraints</li></ol><p>How did you solve it?</p><p>How did you evaluate the results? Scope/Impact</p><blockquote><p>择高处立，就平处坐，向宽处行；立上等志，行中等事，享下等福。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Always put yourself in other people’s shoes. 换位思考&lt;/p&gt;
&lt;p&gt;Critical thinking 任何事情并不是非黑即白&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;BQ-question
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.qianhongbo.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="找工作" scheme="https://www.qianhongbo.com/tags/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>托福备考指北</title>
    <link href="https://www.qianhongbo.com/%E6%89%98%E7%A6%8F%E5%A4%87%E8%80%83%E6%8C%87%E5%8C%97.html"/>
    <id>https://www.qianhongbo.com/托福备考指北.html</id>
    <published>2020-11-20T14:36:41.000Z</published>
    <updated>2021-04-12T13:21:12.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="成绩"><a href="#成绩" class="headerlink" title="成绩"></a>成绩</h2><p>说来惭愧，考了3年托福，一共四次，最终还是在临近申请前的不到一个月考出的分，而且分数也只是刚刚过百（见下图），尽管最终成绩很低，但我也有一些经验和心得与各位分享，当然，也会有一些我认为比较好的学习资源通过百度云的方式供大家学习。</p><p><img src="https://tvax3.sinaimg.cn/large/006BuM4Jly1gkw0pe0b9pj30r70b8q5w.jpg" alt="TOEFLGRADE"></p><h2 id="学习顺序与学习时间"><a href="#学习顺序与学习时间" class="headerlink" title="学习顺序与学习时间"></a>学习顺序与学习时间</h2><p>对于理工科学生，强烈建议先学习GRE。理由有以下几点：</p><ol><li>GRE的数学对于理工科学生难度不高，不需要太多准备；</li><li>GRE的verbal部分以背单词为主，这部分单词并不需要托福单词为基础，如果这部分单词搞定了，学托福难度会明显降低不少；</li><li>GRE提分较快，只要刷题就会看到成效，不存在原地踏步的情况，适合初期准备。</li></ol><p>但无论是托福和GRE我的建议都是利用暑假、寒假大块时间准备，切忌将学习英语的时间与上课/实习等杂糅在一起，这样不但英语能力不会很快见效，而且还会影响课内的学习成绩。总之用一个1-2个月的空闲时间全力学习英语之后考试一定是最高效的。</p><h2 id="托福单词"><a href="#托福单词" class="headerlink" title="托福单词"></a>托福单词</h2><p>回归到托福学习。学习英语无论怎样最重要的还是背单词，单词积累的到位了，看文章听听力等自然得心应手，我比较明显的体会是在我单词掌握不扎实的时候看托福阅读都是不知所云的，仿佛在看一段加了密的文字，但在我学习GRE后，单词量得到了较大的提升，看托福阅读速度明显加快，读了一遍后内容也达到了其义自见的程度（再次说明先学GRE的好处），但不能忽视的是，很多GRE的单词书并不涵盖托福需要掌握的重点词汇，更不能轻视的是很多重要的四六级词汇，它们既不会出现在托福单词书中也不会出现在GRE单词书中，但它们的出现频率却惊人的高，这些单词一定要及时弥补！</p><p>分享两个比较好的单词书（pdf），提取码见评论区：</p><p><a href="https://pan.baidu.com/s/1cR1FpD2a8BIvRQCyUYYsYg" target="_blank" rel="noopener">托福救命800词&amp;四六级救命800词</a></p><p><a href="https://pan.baidu.com/s/11h-2epNIy0UFbNkKuLa_ug" target="_blank" rel="noopener">7天搞定托福单词</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;成绩&quot;&gt;&lt;a href=&quot;#成绩&quot; class=&quot;headerlink&quot; title=&quot;成绩&quot;&gt;&lt;/a&gt;成绩&lt;/h2&gt;&lt;p&gt;说来惭愧，考了3年托福，一共四次，最终还是在临近申请前的不到一个月考出的分，而且分数也只是刚刚过百（见下图），尽管最终成绩很低，但我也有一些
      
    
    </summary>
    
      <category term="出国经验分享" scheme="https://www.qianhongbo.com/categories/%E5%87%BA%E5%9B%BD%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="托福" scheme="https://www.qianhongbo.com/tags/%E6%89%98%E7%A6%8F/"/>
    
  </entry>
  
  <entry>
    <title>希望所有的烦恼都能随风而去</title>
    <link href="https://www.qianhongbo.com/%E7%94%9F%E6%97%A0%E6%89%80%E6%81%AF.html"/>
    <id>https://www.qianhongbo.com/生无所息.html</id>
    <published>2020-10-24T14:27:33.000Z</published>
    <updated>2020-10-27T13:16:31.898Z</updated>
    
    <content type="html"><![CDATA[<p>该经历的总要经历，想躲也躲不过。</p><p>该坚持的一定要坚持，坚持下去准没错。</p><p>该放手的尽快放手，省着被折磨。</p><p>最近很喜欢听周深的《无限》，可惜网易云音乐的外链无法分享。</p><p>“当风吹来，我会回来”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该经历的总要经历，想躲也躲不过。&lt;/p&gt;
&lt;p&gt;该坚持的一定要坚持，坚持下去准没错。&lt;/p&gt;
&lt;p&gt;该放手的尽快放手，省着被折磨。&lt;/p&gt;
&lt;p&gt;最近很喜欢听周深的《无限》，可惜网易云音乐的外链无法分享。&lt;/p&gt;
&lt;p&gt;“当风吹来，我会回来”&lt;/p&gt;

      
    
    </summary>
    
      <category term="随笔" scheme="https://www.qianhongbo.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="目标" scheme="https://www.qianhongbo.com/tags/%E7%9B%AE%E6%A0%87/"/>
    
  </entry>
  
  <entry>
    <title>文献如何精读</title>
    <link href="https://www.qianhongbo.com/%E6%96%87%E7%8C%AE%E5%A6%82%E4%BD%95%E7%B2%BE%E8%AF%BB.html"/>
    <id>https://www.qianhongbo.com/文献如何精读.html</id>
    <published>2020-05-13T11:40:25.000Z</published>
    <updated>2020-09-13T13:21:37.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一遍：需5-10分钟"><a href="#第一遍：需5-10分钟" class="headerlink" title="第一遍：需5-10分钟"></a>第一遍：需5-10分钟</h2><p>快速浏览整篇论文，对其有个大概的了解。你也可以自己决定是否需要进一步阅读。该阶段分下面的几个步骤组成：</p><ol><li>仔细阅读题目、摘要和引言；</li><li>阅读标题和小节标题，标题下的内容不必看。</li><li>阅读结论</li><li>看看参考文献，也许有你读过的论文。</li></ol><p>在第一遍完成后，你应该可以回答以下五个问题：</p><ol><li>类别：这篇论文是什么类型？测试类？对现有系统进行分析的？对原型系统进行描述的？</li><li>内容：在你读过的论文中与其相关的有哪些？使用哪些理论基础来分析文章？</li><li>正确性：结论是否有效？</li><li>创新：该论文的主要创新是什么？</li><li>清晰度：该论文是否条理清晰？</li></ol><p>回答出以上问题，你便清楚是否有必要继续阅读该论文，这也许与你的兴趣或研究领域有关，也可能是作者的结论不正确使之没必要再继续阅读。这也再次提醒你，在你写论文的时候，希望有人看你的论文，那么简明扼要的标题及摘要是非常重要的，无论是读者还是审稿人在用五分钟过一遍你的论文后，看不到文章的亮点也就对你的论文失去读下去的兴趣了。</p><h2 id="第二遍：需1小时左右"><a href="#第二遍：需1小时左右" class="headerlink" title="第二遍：需1小时左右"></a>第二遍：需1小时左右</h2><p>第二遍要仔细阅读论文，但忽略掉诸如证明之类的细节。 阅读过程中做好笔记记录重点，或在论文空白处标注出来。</p><ol><li>仔细阅读论文中的数字、图表和其他插图。 尤其要注意图表： 轴标签是否正确？ 标示的结果是否有误差线？ 这些常见的错误能区分出该论文是粗制滥造的还是经过尽心做研究后的结果。</li><li>为了了解更多关于该论文的背景，记得要标记未读过的参考文献供进一步阅读。通过第二步的阅读，你应该能够掌握论文的主要内容。你也应该可以把论文的主旨及论据总结给别人。对于你感兴趣的论文，读到这个程度就可以了，但是对于那些在你研究领域内的论文来时，还远远不够。</li></ol><p>有些情况你在读到第二步结束时仍然难以理解论文，可能的原因是主旨对你来说是全新的，还有不熟悉的术语和缩略词。也可能论文作者使用您不明白的论据或实验技术，导致大部分论文内容无法理解。除此之外，有些论文可能写得很差，也导致你无法理解该篇论文。亦或者可能是深夜，你很累了。如果是这样，你可以选择：（1）把论文放到一边，期望着在你走向事业成功的路上不需要理解它，（b）在了解了相关背景知识后，过段时间再回头读，或者（c）坚持不懈继续阅读。</p><h2 id="第三遍：数小时"><a href="#第三遍：数小时" class="headerlink" title="第三遍：数小时"></a>第三遍：数小时</h2><p>要充分了解一篇论文，尤其你是审稿人时，需要进行第三步。第三步的关键是：在脑中勾勒出整篇论文，作出与作者相同的假设，重新创作。通过将这种重新创作与实际文章进行比较，您可以轻松地验证出论文的创新之处，也可以轻松找出一些不易察觉的缺陷和假设。</p><p>这一步需要读者精读论文，完成这一步读者便可验证论文中每一个假设是否成立，并且同时思考如果自己是本文作者的话会如何去体现自己的idea ，这种假设自己是作者的方法可以加深你对该论文论据及表述技巧上的理解，并且能从中学到这些技巧。在完成第三步的过程中，你应该时刻留意对于未来研究工作的新想法。</p><p>第三步是最耗费时间的，对于初学者来说可能要数小时，即便是有经验的学者也至少要一两个小时。当完成这一步后，你应该可以在脑海中重现构造论文的整个架构，同时能确定论文中哪些是好的，哪些是一般的论点。特别地，你也应该能明确指出论文中不清晰的假设、漏掉引用的相关工作以及论文中试验和分析的手段潜在的缺点。</p><blockquote><p>以上内容参考<a href="https://www.zhihu.com/question/50973300/answer/737010046" target="_blank" rel="noopener">知乎文章</a></p></blockquote><p>延伸阅读：</p><p><a href="https://www.cs.jhu.edu/~jason/advice/how-to-read-a-paper.html" target="_blank" rel="noopener">How to read a technical paper (JHU)</a></p><p><a href="https://towardsdatascience.com/guide-to-reading-academic-research-papers-c69c21619de6" target="_blank" rel="noopener">How to read an academic paper</a></p><p><a href="https://www.eecs.harvard.edu/~michaelm/postscripts/ReadPaper.pdf" target="_blank" rel="noopener">Harvard EECS research guide</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一遍：需5-10分钟&quot;&gt;&lt;a href=&quot;#第一遍：需5-10分钟&quot; class=&quot;headerlink&quot; title=&quot;第一遍：需5-10分钟&quot;&gt;&lt;/a&gt;第一遍：需5-10分钟&lt;/h2&gt;&lt;p&gt;快速浏览整篇论文，对其有个大概的了解。你也可以自己决定是否需要进一步
      
    
    </summary>
    
      <category term="远程科研" scheme="https://www.qianhongbo.com/categories/%E8%BF%9C%E7%A8%8B%E7%A7%91%E7%A0%94/"/>
    
    
      <category term="阅读文献" scheme="https://www.qianhongbo.com/tags/%E9%98%85%E8%AF%BB%E6%96%87%E7%8C%AE/"/>
    
  </entry>
  
  <entry>
    <title>注册了新域名啦！</title>
    <link href="https://www.qianhongbo.com/%E6%B3%A8%E5%86%8C%E4%BA%86%E6%96%B0%E5%9F%9F%E5%90%8D%E5%95%A6%EF%BC%81.html"/>
    <id>https://www.qianhongbo.com/注册了新域名啦！.html</id>
    <published>2020-05-10T16:18:34.000Z</published>
    <updated>2020-09-13T13:21:37.660Z</updated>
    
    <content type="html"><![CDATA[ <font size="3" face="楷体"> 一年时间说长也长说短也短，去年的5月份我注册了"www.qianhongbo.top"这个域名，从零开始搭建自己的博客，那段时间很辛苦却也学到了不少，最近很少更新博客了，也正值之前的域名一年期限到期，注册了一个新的域名"www.qianhongbo.com"，之前没有注册.com域名的原因是不确定自己会不会坚持做下去，就没选那么贵的，选了一个便宜的，既然我已经坚持了这么久，而且做得还算可以，就注册一个更专业的.com吧！<p>然而比较可惜的是注册了新域名后，站点底部的记录访问人数和人次的记录清零了，也就是一切都要从头再来，可惜！</p><p>之后多写写博客吧！<br></p></font><p></p>]]></content>
    
    <summary type="html">
    
      
      
         &lt;font size=&quot;3&quot; face=&quot;楷体&quot;&gt;
 一年时间说长也长说短也短，去年的5月份我注册了&quot;www.qianhongbo.top&quot;这个域名，从零开始搭建自己的博客，那段时间很辛苦却也学到了不少，最近很少更新博客了，也正值之前的域名一年期限到期，注册了一个新的域名&quot;ww
      
    
    </summary>
    
      <category term="随笔" scheme="https://www.qianhongbo.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Diary" scheme="https://www.qianhongbo.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>Matlab机器人工具箱（Robotic Toolbox）仿真双六轴机械臂对侧打磨加工</title>
    <link href="https://www.qianhongbo.com/Matlab%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%AE%B1%EF%BC%88Robotic%20Toolbox%EF%BC%89%E4%BB%BF%E7%9C%9F%E5%8F%8C%E5%85%AD%E8%BD%B4%E6%9C%BA%E6%A2%B0%E8%87%82%E5%AF%B9%E4%BE%A7%E6%89%93%E7%A3%A8%E5%8A%A0%E5%B7%A5.html"/>
    <id>https://www.qianhongbo.com/Matlab机器人工具箱（Robotic Toolbox）仿真双六轴机械臂对侧打磨加工.html</id>
    <published>2020-05-10T13:36:49.000Z</published>
    <updated>2020-09-13T13:21:37.653Z</updated>
    
    <content type="html"><![CDATA[<p>本任务为完成大三下学期机器人学课程讨论是所做<br>实际上也是在之前做的双机仿真的基础上进行了修改。</p><p>最终结果如下：</p><p><a href="https://www.bilibili.com/video/BV1t541147vs/" target="_blank" rel="noopener">B站视频地址</a></p><iframe src="//player.bilibili.com/player.html?aid=455552595&bvid=BV1t541147vs&cid=189565321&page=1" scrolling="no" border="0" frameborder="no" width="95%" height="600"> </iframe><blockquote><p>使用的机器人工具箱版本为10.3.1版本</p><p>修改了工具箱自带的函数mdl_puma560，要使用代码需要在函数开头加上function p560 = mdl_puma560，结尾加上end以实现调用功能。</p></blockquote><p>代码：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line">close all</span><br><span class="line">clear;</span><br><span class="line">d = <span class="number">0.2</span>;</span><br><span class="line"><span class="built_in">plot3</span>([<span class="number">0</span> <span class="number">0</span>],[<span class="number">-1</span> <span class="number">1</span>],[<span class="number">0</span> <span class="number">0</span>])</span><br><span class="line">p560_1 = mdl_puma560;</span><br><span class="line">p560_1.name = <span class="string">'puma1'</span>;</span><br><span class="line">p560_1.base = [<span class="number">-0.8</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">p560_2 = mdl_puma560;</span><br><span class="line">p560_2.name = <span class="string">'puma2'</span>;</span><br><span class="line">p560_2.base = [<span class="number">0.8</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">t=<span class="number">0</span>:<span class="number">0.05</span>:<span class="number">2</span>;</span><br><span class="line"><span class="comment">%计算puma1机械臂移动到指定点，并将z轴指向朝前的齐次变换矩阵</span></span><br><span class="line">T1 = transl(<span class="number">-0.4</span>,<span class="number">0.2</span>,<span class="number">0.1</span>);</span><br><span class="line">T2 = transl(<span class="number">0</span>-d,<span class="number">-0.4</span>,<span class="number">0</span>)*troty(<span class="number">90</span>);</span><br><span class="line"><span class="comment">%计算puma2机械臂移动到指定点，z轴指向朝后的齐次变换矩阵</span></span><br><span class="line">T3 = transl(<span class="number">0.3</span>,<span class="number">-0.3</span>,<span class="number">0</span>)*troty(<span class="number">-90</span>);</span><br><span class="line">T4 = transl(<span class="number">0</span>+d,<span class="number">-0.4</span>,<span class="number">0</span>)*troty(<span class="number">-90</span>);</span><br><span class="line"><span class="comment">%利用ctraj函数让两个机械臂运动到指定点</span></span><br><span class="line">m1=ctraj(T1,T2,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">n1=ctraj(T3,T4,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">q1=p560_1.ikine6s(m1);</span><br><span class="line">s1=p560_2.ikine6s(n1);</span><br><span class="line"><span class="comment">%移动到指定点后沿直线移动</span></span><br><span class="line">T5 = transl(<span class="number">0</span>-d,<span class="number">0.5</span>,<span class="number">0</span>)*troty(<span class="number">90</span>);<span class="comment">%puma1沿直线移动</span></span><br><span class="line">T6 = transl(<span class="number">0</span>+d,<span class="number">0.5</span>,<span class="number">0</span>)*troty(<span class="number">-90</span>);<span class="comment">%puma2沿直线移动                                                         </span></span><br><span class="line">m2=ctraj(T2,T5,<span class="built_in">length</span>(t));</span><br><span class="line">n2=ctraj(T4,T6,<span class="built_in">length</span>(t));</span><br><span class="line">y1=p560_1.ikine6s(m2);</span><br><span class="line">f1=p560_2.ikine6s(n2);</span><br><span class="line"><span class="comment">%重复</span></span><br><span class="line">T7 = transl(<span class="number">0</span>-d,<span class="number">0.5</span>,<span class="number">0.2</span>)*troty(<span class="number">90</span>);</span><br><span class="line">T8 = transl(<span class="number">0</span>+d,<span class="number">0.5</span>,<span class="number">0.2</span>)*troty(<span class="number">-90</span>); </span><br><span class="line">m3=ctraj(T5,T7,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">n3=ctraj(T6,T8,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">q2=p560_1.ikine6s(m3);</span><br><span class="line">s2=p560_2.ikine6s(n3);</span><br><span class="line">T9 = transl(<span class="number">0</span>-d,<span class="number">-0.4</span>,<span class="number">0.2</span>)*troty(<span class="number">90</span>);</span><br><span class="line">T10 = transl(<span class="number">0</span>+d,<span class="number">-0.4</span>,<span class="number">0.2</span>)*troty(<span class="number">-90</span>);</span><br><span class="line">m4=ctraj(T7,T9,<span class="built_in">length</span>(t));</span><br><span class="line">n4=ctraj(T8,T10,<span class="built_in">length</span>(t));</span><br><span class="line">y2=p560_1.ikine6s(m4);</span><br><span class="line">f2=p560_2.ikine6s(n4);</span><br><span class="line"><span class="comment">%画图</span></span><br><span class="line">p560_1.<span class="built_in">plot</span>(q1);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(s1);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_1.<span class="built_in">plot</span>(y1);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(f1);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot3</span>([<span class="number">0</span> <span class="number">0</span>],[<span class="number">-1</span> <span class="number">1</span>],[<span class="number">0.2</span> <span class="number">0.2</span>])</span><br><span class="line">p560_1.<span class="built_in">plot</span>(q2);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(s2);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_1.<span class="built_in">plot</span>(y2);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(f2);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br></pre></td></tr></table></figure><p>由于Matlab无法实现双线程编程，所以并不是同步运动，所以考虑用循环的方式来实现“同步运动”，但本质上仍然不同步。</p><p>代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line">close all</span><br><span class="line">clear;</span><br><span class="line">d = <span class="number">0.2</span>;</span><br><span class="line"><span class="built_in">plot3</span>([<span class="number">0</span> <span class="number">0</span>],[<span class="number">-1</span> <span class="number">1</span>],[<span class="number">0</span> <span class="number">0</span>])</span><br><span class="line">p560_1 = mdl_puma560;</span><br><span class="line">p560_1.name = <span class="string">'puma1'</span>;</span><br><span class="line">p560_1.base = [<span class="number">-0.8</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">p560_2 = mdl_puma560;</span><br><span class="line">p560_2.name = <span class="string">'puma2'</span>;</span><br><span class="line">p560_2.base = [<span class="number">0.8</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">t=<span class="number">0</span>:<span class="number">0.05</span>:<span class="number">2</span>;</span><br><span class="line"><span class="comment">%计算puma1机械臂移动到指定点，并将z轴指向朝下的齐次变换矩阵</span></span><br><span class="line">T1 = transl(<span class="number">-0.4</span>,<span class="number">0.2</span>,<span class="number">0.1</span>);</span><br><span class="line">T2 = transl(<span class="number">0</span>-d,<span class="number">-0.4</span>,<span class="number">0</span>)*troty(<span class="number">90</span>);</span><br><span class="line"><span class="comment">%计算puma2机械臂移动到指定点，z轴指向朝上的齐次变换矩阵</span></span><br><span class="line">T3 = transl(<span class="number">0.3</span>,<span class="number">-0.3</span>,<span class="number">0</span>)*troty(<span class="number">-90</span>);</span><br><span class="line">T4 = transl(<span class="number">0</span>+d,<span class="number">-0.4</span>,<span class="number">0</span>)*troty(<span class="number">-90</span>);</span><br><span class="line"><span class="comment">%利用jtraj函数让两个机械臂运动到指定点</span></span><br><span class="line">m1=ctraj(T1,T2,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">n1=ctraj(T3,T4,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">q1=p560_1.ikine6s(m1);</span><br><span class="line">s1=p560_2.ikine6s(n1);</span><br><span class="line"><span class="comment">%移动到指定点后沿直线移动</span></span><br><span class="line">T5 = transl(<span class="number">0</span>-d,<span class="number">0.5</span>,<span class="number">0</span>)*troty(<span class="number">90</span>);<span class="comment">%puma1沿直线移动</span></span><br><span class="line">T6 = transl(<span class="number">0</span>+d,<span class="number">0.5</span>,<span class="number">0</span>)*troty(<span class="number">-90</span>);<span class="comment">%puma2沿直线移动                                                         </span></span><br><span class="line">m2=ctraj(T2,T5,<span class="built_in">length</span>(t));</span><br><span class="line">n2=ctraj(T4,T6,<span class="built_in">length</span>(t));</span><br><span class="line">y1=p560_1.ikine6s(m2);</span><br><span class="line">f1=p560_2.ikine6s(n2);</span><br><span class="line"><span class="comment">%重复</span></span><br><span class="line">T7 = transl(<span class="number">0</span>-d,<span class="number">0.5</span>,<span class="number">0.2</span>)*troty(<span class="number">90</span>);</span><br><span class="line">T8 = transl(<span class="number">0</span>+d,<span class="number">0.5</span>,<span class="number">0.2</span>)*troty(<span class="number">-90</span>); </span><br><span class="line">m3=ctraj(T5,T7,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">n3=ctraj(T6,T8,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">q2=p560_1.ikine6s(m3);</span><br><span class="line">s2=p560_2.ikine6s(n3);</span><br><span class="line">T9 = transl(<span class="number">0</span>-d,<span class="number">-0.4</span>,<span class="number">0.2</span>)*troty(<span class="number">90</span>);</span><br><span class="line">T10 = transl(<span class="number">0</span>+d,<span class="number">-0.4</span>,<span class="number">0.2</span>)*troty(<span class="number">-90</span>);</span><br><span class="line">m4=ctraj(T7,T9,<span class="built_in">length</span>(t));</span><br><span class="line">n4=ctraj(T8,T10,<span class="built_in">length</span>(t));</span><br><span class="line">y2=p560_1.ikine6s(m4);</span><br><span class="line">f2=p560_2.ikine6s(n4);</span><br><span class="line"><span class="comment">%画图</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(t)/<span class="number">2</span></span><br><span class="line">p560_1.<span class="built_in">plot</span>(q1(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(s1(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(t)</span><br><span class="line">p560_1.<span class="built_in">plot</span>(y1(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(f1(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">plot3</span>([<span class="number">0</span> <span class="number">0</span>],[<span class="number">-1</span> <span class="number">1</span>],[<span class="number">0.2</span> <span class="number">0.2</span>])</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(t)/<span class="number">2</span></span><br><span class="line">p560_1.<span class="built_in">plot</span>(q2(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(s2(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(t)</span><br><span class="line">p560_1.<span class="built_in">plot</span>(y2(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(f2(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本任务为完成大三下学期机器人学课程讨论是所做&lt;br&gt;实际上也是在之前做的双机仿真的基础上进行了修改。&lt;/p&gt;
&lt;p&gt;最终结果如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1t541147vs/&quot; target=&quot;_
      
    
    </summary>
    
      <category term="机器人学" scheme="https://www.qianhongbo.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6/"/>
    
    
      <category term="Robotic Toolbox" scheme="https://www.qianhongbo.com/tags/Robotic-Toolbox/"/>
    
  </entry>
  
  <entry>
    <title>如何理解欧拉角中的pitch,roll,yaw</title>
    <link href="https://www.qianhongbo.com/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%AC%A7%E6%8B%89%E8%A7%92%E4%B8%AD%E7%9A%84roll%EF%BC%8Cpitch%EF%BC%8Cyaw.html"/>
    <id>https://www.qianhongbo.com/如何理解欧拉角中的roll，pitch，yaw.html</id>
    <published>2020-03-15T01:44:19.000Z</published>
    <updated>2020-09-13T13:21:37.658Z</updated>
    
    <content type="html"><![CDATA[<p>欧拉角也就是绕着固定轴x,y,z旋转</p><p>在资料中关于x,y,z和三个角度的方向和对应关系定义的并不是很明确，我认为可能是这个并没有一个严格的规定，但是pitch,roll,yaw三个角度的含义定义还是很明确的。具体定义如下：</p><h2 id="pitch"><a href="#pitch" class="headerlink" title="pitch"></a>pitch</h2><p>pitch在英文中的意思是倾斜，坠落的含义，因此就是以翅膀所在的直线为轴发生旋转</p><p><img src="//tva1.sinaimg.cn/large/006BuM4Jly1gcufkbno87g30dy0b87dz.gif" alt="pitch"></p><h2 id="roll"><a href="#roll" class="headerlink" title="roll"></a>roll</h2><p>roll在英文中的意思是翻滚，就是绕着机身所在的那个轴</p><p><img src="//tva2.sinaimg.cn/large/006BuM4Jly1gcuflbey7gg30e00bbdpp.gif" alt="roll"></p><h2 id="yaw"><a href="#yaw" class="headerlink" title="yaw"></a>yaw</h2><p>yaw在英文中是yaw是（火箭、飞机、宇宙飞船等）偏航的意思，也就是绕着重力方向为轴旋转</p><p><img src="//tvax4.sinaimg.cn/large/006BuM4Jly1gcuff4nhx5g30e00b7122.gif" alt="0_1303867644Dzds"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欧拉角也就是绕着固定轴x,y,z旋转&lt;/p&gt;
&lt;p&gt;在资料中关于x,y,z和三个角度的方向和对应关系定义的并不是很明确，我认为可能是这个并没有一个严格的规定，但是pitch,roll,yaw三个角度的含义定义还是很明确的。具体定义如下：&lt;/p&gt;
&lt;h2 id=&quot;pitch&quot;
      
    
    </summary>
    
      <category term="机器人学" scheme="https://www.qianhongbo.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6/"/>
    
    
      <category term="机器人学" scheme="https://www.qianhongbo.com/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Matlab机器人工具箱（Robotic Toolbox）</title>
    <link href="https://www.qianhongbo.com/Matlab%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%AE%B1.html"/>
    <id>https://www.qianhongbo.com/Matlab机器人工具箱.html</id>
    <published>2020-03-10T12:50:12.000Z</published>
    <updated>2020-09-13T13:21:37.653Z</updated>
    
    <content type="html"><![CDATA[<p>Matlab机器人工具箱是我们在学习机器人学时候的一个非常好的工具，不但可以帮助我们计算，也可以做图形化的输出。</p><p>在此就不多谈安装问题，主要介绍各个函数的使用方法。</p><h2 id="启动机器人工具箱"><a href="#启动机器人工具箱" class="headerlink" title="启动机器人工具箱"></a>启动机器人工具箱</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup_rvc;</span><br></pre></td></tr></table></figure><h2 id="绕xyz轴的旋转变化矩阵"><a href="#绕xyz轴的旋转变化矩阵" class="headerlink" title="绕xyz轴的旋转变化矩阵"></a>绕xyz轴的旋转变化矩阵</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rotx(<span class="number">30</span>*<span class="built_in">pi</span>/<span class="number">180</span>) <span class="comment">%用弧度</span></span><br><span class="line">rotx(<span class="number">30</span>,<span class="string">'deg'</span>) <span class="comment">%用角度</span></span><br><span class="line">roty(<span class="number">30</span>,<span class="string">'deg'</span>)</span><br><span class="line">rotz(<span class="number">30</span>,<span class="string">'deg'</span>)</span><br></pre></td></tr></table></figure><h2 id="绕xyz轴旋转的齐次变换矩阵"><a href="#绕xyz轴旋转的齐次变换矩阵" class="headerlink" title="绕xyz轴旋转的齐次变换矩阵"></a>绕xyz轴旋转的齐次变换矩阵</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">trotx(<span class="number">30</span>*<span class="built_in">pi</span>/<span class="number">180</span>) <span class="comment">%用弧度</span></span><br><span class="line">trotx(<span class="number">30</span>,<span class="string">'deg'</span>) <span class="comment">%用角度</span></span><br><span class="line">troty(<span class="number">30</span>,<span class="string">'deg'</span>)</span><br><span class="line">trotz(<span class="number">30</span>,<span class="string">'deg'</span>)</span><br></pre></td></tr></table></figure><h2 id="平移齐次变换矩阵"><a href="#平移齐次变换矩阵" class="headerlink" title="平移齐次变换矩阵"></a>平移齐次变换矩阵</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transl([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>])</span><br></pre></td></tr></table></figure><h2 id="旋转变换的连续乘积"><a href="#旋转变换的连续乘积" class="headerlink" title="旋转变换的连续乘积"></a>旋转变换的连续乘积</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trotx(<span class="number">30</span>,<span class="string">'deg'</span>)*troty(<span class="number">30</span>,<span class="string">'deg'</span>)*trotz(<span class="number">30</span>,<span class="string">'deg'</span>)</span><br></pre></td></tr></table></figure><h2 id="rpy角"><a href="#rpy角" class="headerlink" title="rpy角"></a>rpy角</h2><h3 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">roll=<span class="number">10</span>*<span class="built_in">pi</span>/<span class="number">180</span>; pitch=<span class="number">20</span>*<span class="built_in">pi</span>/<span class="number">180</span>; yaw=<span class="number">30</span>*<span class="built_in">pi</span>/<span class="number">180</span>;</span><br><span class="line">rpy2r(roll,pitch,yaw)</span><br><span class="line">rpy2r(roll,pitch,yaw,<span class="string">'zyx'</span>)</span><br><span class="line">rpy2r(roll,pitch,yaw,<span class="string">'xyz'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>需要说名的是，rpy2r这个函数在不同的工具箱版本的函数并不一样，使用的角度顺序发生了改变，具体内容可以看具体版本的rpy2r.m文件。</p></blockquote><p>在此附上机器人工具箱中关于各个参数option的定义，仅提供10版本</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> opt.order</span><br><span class="line">        <span class="keyword">case</span> &#123;<span class="string">'xyz'</span>, <span class="string">'arm'</span>&#125;</span><br><span class="line">            <span class="comment">% XYZ order</span></span><br><span class="line">            <span class="keyword">if</span> numrows(roll) == <span class="number">1</span></span><br><span class="line">                R = rotx(yaw) * roty(pitch) * rotz(roll);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                R = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">3</span>,numrows(roll));</span><br><span class="line">                <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:numrows(roll)</span><br><span class="line">                    R(:,:,<span class="built_in">i</span>) = rotx(yaw(<span class="built_in">i</span>)) * roty(pitch(<span class="built_in">i</span>)) * rotz(roll(<span class="built_in">i</span>));</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">case</span> &#123;<span class="string">'zyx'</span>, <span class="string">'vehicle'</span>&#125;</span><br><span class="line">            <span class="comment">% ZYX order</span></span><br><span class="line">            <span class="keyword">if</span> numrows(roll) == <span class="number">1</span></span><br><span class="line">                R = rotz(yaw) * roty(pitch) * rotx(roll);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                R = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">3</span>,numrows(roll));</span><br><span class="line">                <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:numrows(roll)</span><br><span class="line">                    R(:,:,<span class="built_in">i</span>) = rotz(yaw(<span class="built_in">i</span>)) * roty(pitch(<span class="built_in">i</span>)) * rotx(roll(<span class="built_in">i</span>));</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> &#123;<span class="string">'yxz'</span>, <span class="string">'camera'</span>&#125;</span><br><span class="line">            <span class="comment">% YXZ order</span></span><br><span class="line">            <span class="keyword">if</span> numrows(roll) == <span class="number">1</span></span><br><span class="line">                R = roty(yaw) * rotx(pitch) * rotz(roll);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                R = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">3</span>,numrows(roll));</span><br><span class="line">                <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:numrows(roll)</span><br><span class="line">                    R(:,:,<span class="built_in">i</span>) = roty(yaw(<span class="built_in">i</span>)) * rotx(pitch(<span class="built_in">i</span>)) * rotz(roll(<span class="built_in">i</span>));</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rotx(yaw)*roty(pitch)*rotz(roll)</span><br><span class="line">rotz(roll)*roty(pitch)*rotx(yaw)</span><br><span class="line">rotx(roll)*roty(pitch)*rotz(yaw)</span><br><span class="line">rotz(yaw)*roty(pitch)*rotx(roll)</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%以下二者结果相同</span></span><br><span class="line">rpy2r(roll,pitch,yaw,<span class="string">'zyx'</span>)</span><br><span class="line">rotz(yaw)*roty(pitch)*rotx(roll)</span><br><span class="line"><span class="comment">%以下二者结果相同</span></span><br><span class="line">rpy2r(roll,pitch,yaw,<span class="string">'xyz'</span>)</span><br><span class="line">rotx(yaw)*roty(pitch)*rotz(roll)</span><br></pre></td></tr></table></figure><blockquote><p>个人认为没必要背下来，也没必要理解，只要想用的时候能知道它是怎么算的就好。</p></blockquote><h2 id="Euler角"><a href="#Euler角" class="headerlink" title="Euler角"></a>Euler角</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%Euler角 旋转矩阵</span></span><br><span class="line">alpha=<span class="number">10</span>*<span class="built_in">pi</span>/<span class="number">180</span>; <span class="built_in">beta</span>=<span class="number">20</span>*<span class="built_in">pi</span>/<span class="number">180</span>; gama=<span class="number">30</span>*<span class="built_in">pi</span>/<span class="number">180</span>;</span><br><span class="line">eul2r(alpha,<span class="built_in">beta</span>,gama)</span><br><span class="line"><span class="comment">%检验</span></span><br><span class="line">rotz(alpha)*roty(<span class="built_in">beta</span>)*rotz(gama)</span><br></pre></td></tr></table></figure><h2 id="齐次变换函数homtrans"><a href="#齐次变换函数homtrans" class="headerlink" title="齐次变换函数homtrans"></a>齐次变换函数<code>homtrans</code></h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">V=[<span class="number">30</span>,<span class="number">40</span>,<span class="number">60</span>];T=trotx(<span class="number">30</span>*<span class="built_in">pi</span>/<span class="number">180</span>);</span><br><span class="line">V=[V';<span class="number">1</span>];</span><br><span class="line">homtrans(T,V)</span><br><span class="line"><span class="comment">%检验</span></span><br><span class="line">T*V</span><br></pre></td></tr></table></figure><h2 id="绕任意轴旋转函数"><a href="#绕任意轴旋转函数" class="headerlink" title="绕任意轴旋转函数"></a>绕任意轴旋转函数</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%绕任意轴旋转函数</span></span><br><span class="line">theta=<span class="number">30</span>*<span class="built_in">pi</span>/<span class="number">180</span>; k=[<span class="number">1</span>;<span class="number">0</span>;<span class="number">0</span>];</span><br><span class="line">angvec2r(theta,k)</span><br></pre></td></tr></table></figure><h2 id="建立连杆坐标系"><a href="#建立连杆坐标系" class="headerlink" title="建立连杆坐标系"></a>建立连杆坐标系</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">L(<span class="number">1</span>)=Link(<span class="string">'revolute'</span>,<span class="string">'a'</span>,<span class="number">0</span>,<span class="string">'alpha'</span>,<span class="number">0</span>,<span class="string">'d'</span>,<span class="number">0</span>);</span><br><span class="line">L(<span class="number">1</span>).mdh=<span class="number">1</span>;</span><br><span class="line">L(<span class="number">2</span>)=Link(<span class="string">'revolute'</span>,<span class="string">'a'</span>,<span class="number">10</span>,<span class="string">'alpha'</span>,<span class="built_in">pi</span>/<span class="number">2</span>,<span class="string">'d'</span>,<span class="number">0</span>);</span><br><span class="line">L(<span class="number">2</span>).mdh=<span class="number">1</span>;</span><br><span class="line">L(<span class="number">3</span>)=Link(<span class="string">'revolute'</span>,<span class="string">'a'</span>,<span class="number">6</span>,<span class="string">'alpha'</span>,<span class="number">0</span>,<span class="string">'d'</span>,<span class="number">0</span>);</span><br><span class="line">L(<span class="number">3</span>).mdh=<span class="number">1</span>;</span><br><span class="line">R=SerialLink(L,<span class="string">'name'</span>,<span class="string">'3RRR'</span>)</span><br><span class="line"><span class="comment">%改变一些参数</span></span><br><span class="line">R.base=transl([<span class="number">-10</span> <span class="number">0</span> <span class="number">0</span>]);</span><br><span class="line">R.tool=transl([<span class="number">4</span> <span class="number">0</span> <span class="number">0</span>]);</span><br><span class="line">q0=[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">R.<span class="built_in">plot</span>(q0)</span><br></pre></td></tr></table></figure><h2 id="让连杆坐标系运动起来"><a href="#让连杆坐标系运动起来" class="headerlink" title="让连杆坐标系运动起来"></a>让连杆坐标系运动起来</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">L(<span class="number">1</span>)=Link(<span class="string">'revolute'</span>,<span class="string">'a'</span>,<span class="number">0</span>,<span class="string">'alpha'</span>,<span class="number">0</span>,<span class="string">'d'</span>,<span class="number">0</span>);</span><br><span class="line">L(<span class="number">1</span>).mdh=<span class="number">1</span>;</span><br><span class="line">L(<span class="number">2</span>)=Link(<span class="string">'revolute'</span>,<span class="string">'a'</span>,<span class="number">10</span>,<span class="string">'alpha'</span>,<span class="built_in">pi</span>/<span class="number">2</span>,<span class="string">'d'</span>,<span class="number">0</span>);</span><br><span class="line">L(<span class="number">2</span>).mdh=<span class="number">1</span>;</span><br><span class="line">L(<span class="number">3</span>)=Link(<span class="string">'revolute'</span>,<span class="string">'a'</span>,<span class="number">6</span>,<span class="string">'alpha'</span>,<span class="number">0</span>,<span class="string">'d'</span>,<span class="number">0</span>);</span><br><span class="line">L(<span class="number">3</span>).mdh=<span class="number">1</span>;</span><br><span class="line">R=SerialLink(L,<span class="string">'name'</span>,<span class="string">'3RRR'</span>)</span><br><span class="line">q1=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="built_in">pi</span>/<span class="number">2</span>,<span class="number">100</span>)';</span><br><span class="line">q2=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="built_in">pi</span>/<span class="number">2</span>,<span class="number">100</span>)';</span><br><span class="line">q3=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="built_in">pi</span>/<span class="number">2</span>,<span class="number">100</span>)';</span><br><span class="line">Q=[q1,q2,q3];</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>)</span><br><span class="line">R.<span class="built_in">plot</span>(Q)</span><br><span class="line">R.fkine(Q(<span class="keyword">end</span>,:))</span><br></pre></td></tr></table></figure><h1 id="实操任务"><a href="#实操任务" class="headerlink" title="实操任务"></a>实操任务</h1><ol><li>建立两个机器人，机器人基座的相对位置可调。（实际环境中，机器人位置可能发生变动，需要进行修改）</li><li>建立一个一条线段（一系列散点），线段的位置可调。（此线段即为机器人末端需要走的xyz轨迹点。实际环境中，轨迹位置随着工件安装位置而变换）</li><li>针对线段上的任意一个点，使某一机器人末端以某种姿态到达该点。（为xyz轨迹点加上姿态，一般的，机械臂末端z轴应当和工件表面垂直。这里只有一条线段，可指定rpy为pi/4,0,0)</li><li>针对线段上的任意一个点，使某一机器人末端以某种姿态，到达距离该点z向（末端坐标系下的z向）距离为某值的点。(此处表达的是待加工平板有一定厚度，而线段位于平板中部的情况。)</li><li>在4的基础上，使得两个机器人末端z 向正对（xy不作要求），且两个机器人末端距离可调b</li></ol><h2 id="Matlab仿真结果图"><a href="#Matlab仿真结果图" class="headerlink" title="Matlab仿真结果图"></a>Matlab仿真结果图</h2><p><img src="https://tvax3.sinaimg.cn/large/006BuM4Jly1gd2tp522waj30ji0hgq42.jpg" alt="19"></p><blockquote><p>使用的机器人工具箱版本为10.3.1版本</p><p>修改了工具箱自带的函数mdl_puma560，要使用代码需要在函数开头加上function p560 = mdl_puma560，结尾加上end以实现调用功能。</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">close all</span><br><span class="line">clear;</span><br><span class="line">d = <span class="number">0.1</span>;</span><br><span class="line"><span class="built_in">plot3</span>([<span class="number">0</span> <span class="number">0</span>],[<span class="number">-1</span> <span class="number">1</span>],[<span class="number">0</span> <span class="number">0</span>])</span><br><span class="line">p560_1 = mdl_puma560;</span><br><span class="line">p560_1.name = <span class="string">'puma1'</span>;</span><br><span class="line">p560_1.base = [<span class="number">-0.6</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">p560_2 = mdl_puma560;</span><br><span class="line">p560_2.name = <span class="string">'puma2'</span>;</span><br><span class="line">p560_2.base = [<span class="number">0.6</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">t=<span class="number">0</span>:<span class="number">0.05</span>:<span class="number">2</span>;</span><br><span class="line"><span class="comment">%计算puma1机械臂移动到指定点，并将z轴指向朝下的齐次变换矩阵</span></span><br><span class="line">T1 = transl(<span class="number">-0.4</span>,<span class="number">0.2</span>,<span class="number">0.1</span>);</span><br><span class="line">T2 = transl(<span class="number">0</span>,<span class="number">-0.4</span>,d)*trotx(<span class="number">180</span>);</span><br><span class="line"><span class="comment">%计算puma2机械臂移动到指定点，z轴指向朝上的齐次变换矩阵</span></span><br><span class="line">T3 = transl(<span class="number">0.2</span>,<span class="number">-0.2</span>,<span class="number">-0.1</span>);</span><br><span class="line">T4 = transl(<span class="number">0</span>,<span class="number">-0.4</span>,-d);</span><br><span class="line"><span class="comment">%利用jtraj函数让两个机械臂运动到指定点</span></span><br><span class="line">q=p560_1.jtraj(T1,T2,t);</span><br><span class="line">s=p560_2.jtraj(T3,T4,t);</span><br><span class="line"><span class="comment">%移动到指定点后沿直线移动</span></span><br><span class="line">T5 = transl(<span class="number">0</span>,<span class="number">0.5</span>,d)*trotx(<span class="number">180</span>);<span class="comment">%puma1沿直线移动</span></span><br><span class="line">T6 = transl(<span class="number">0</span>,<span class="number">0.5</span>,-d);<span class="comment">%puma2沿直线移动                                                         </span></span><br><span class="line">m=ctraj(T2,T5,<span class="number">50</span>);</span><br><span class="line">n=ctraj(T4,T6,<span class="built_in">length</span>(t));</span><br><span class="line">y=p560_1.ikine6s(m);</span><br><span class="line">f=p560_2.ikine6s(n);</span><br><span class="line"><span class="comment">%画图</span></span><br><span class="line">p560_1.<span class="built_in">plot</span>(q);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(s);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_1.<span class="built_in">plot</span>(y);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(f);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Matlab机器人工具箱是我们在学习机器人学时候的一个非常好的工具，不但可以帮助我们计算，也可以做图形化的输出。&lt;/p&gt;
&lt;p&gt;在此就不多谈安装问题，主要介绍各个函数的使用方法。&lt;/p&gt;
&lt;h2 id=&quot;启动机器人工具箱&quot;&gt;&lt;a href=&quot;#启动机器人工具箱&quot; class
      
    
    </summary>
    
      <category term="机器人学" scheme="https://www.qianhongbo.com/categories/%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%AD%A6/"/>
    
    
      <category term="Robotic Toolbox" scheme="https://www.qianhongbo.com/tags/Robotic-Toolbox/"/>
    
  </entry>
  
  <entry>
    <title>疫情原因宅家一个半月后出门有感</title>
    <link href="https://www.qianhongbo.com/%E7%96%AB%E6%83%85%E5%8E%9F%E5%9B%A0%E5%AE%85%E5%AE%B6%E4%B8%80%E4%B8%AA%E5%8D%8A%E6%9C%88%E5%90%8E%E5%87%BA%E9%97%A8%E6%9C%89%E6%84%9F.html"/>
    <id>https://www.qianhongbo.com/疫情原因宅家一个半月后出门有感.html</id>
    <published>2020-03-10T12:23:41.000Z</published>
    <updated>2020-09-13T13:21:37.660Z</updated>
    
    <content type="html"><![CDATA[ <font size="3" face="楷体"><p> 新冠病毒疫情原因，自从年前回家后，就没怎么出过门，出去两次也只是出门随便走走，没和陌生人说过话。目前疫情有较大好转，加之我头发太长，自从元旦那天在武汉剪了之后就没再动过，用理发店老板的话来讲，我这个“鸟巢”再不处理就可能要招来鸟了。</p><p>宅在家这么多天，除了偶尔的颈椎酸痛，大体上都很开心，主要是和父母沟通为主，为数不多的和别人交流也都是通过网络，感觉少了很多不必要的烦恼。自己每天做着自己认为该做的事，准备比赛也好，看看直播也罢，都让自己觉得自己还活着，没在虚度自己的光阴，和上学唯一的区别就是，我可以随意的掌控我自己的时间，至于效果怎么样，我也不得而知，但自由总是最宝贵的。</p><p>今天出门却感到有些伤感，不知道是因为在家呆的太久了对外面陌生的世界多了一份畏惧，还是在受疫情影响的社会背景下被气氛所感染，突然感觉到外面的世界并不是我曾经所认为的那么充满活力，相反，是一种死气沉沉的感觉。我对外面的一切都感到陌生，仿佛自己是一个关在监狱里5年的人，刚走出来，没有太多喜悦，反而是莫名的恐慌。</p><p>在家呆久了，每天依靠着网络，可以看到全世界各地的新闻，和天南海北的人聊天，不出门以为自己拥有了全世界。出了门才发现，原来我还是我，世界不知道还是不是之前的那个世界，但可以肯定的是我只不过是这个世界的一个过客罢了，开心就好。</p></font>]]></content>
    
    <summary type="html">
    
      
      
         &lt;font size=&quot;3&quot; face=&quot;楷体&quot;&gt;

&lt;p&gt; 新冠病毒疫情原因，自从年前回家后，就没怎么出过门，出去两次也只是出门随便走走，没和陌生人说过话。目前疫情有较大好转，加之我头发太长，自从元旦那天在武汉剪了之后就没再动过，用理发店老板的话来讲，我这个“鸟巢”再不处理就
      
    
    </summary>
    
      <category term="随笔" scheme="https://www.qianhongbo.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Diary" scheme="https://www.qianhongbo.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>2020美赛有感</title>
    <link href="https://www.qianhongbo.com/2020%E7%BE%8E%E8%B5%9B%E6%9C%89%E6%84%9F.html"/>
    <id>https://www.qianhongbo.com/2020美赛有感.html</id>
    <published>2020-03-10T06:32:33.000Z</published>
    <updated>2020-09-13T13:21:37.651Z</updated>
    
    <content type="html"><![CDATA[ <font size="3" face="楷体"><p>为了出国，提升背景为目的，我在大三报名了美赛，机缘巧合在一个留学交流群里，看到一个同学问有没有人有参加数模美赛的意向，要求是会写代码，我想着就去问问，毕竟我一个从小对数学无感，并且考了几次托福都上不了90的垃圾来说，除了写写代码还能干点什么呢？我就去说明了下自己的情况，他们考虑后也同意了，他们两个是同学，都是在经济学院，男生数学好，微积分什么的都接近满分，女生英语好，托福首考105，我了解到他们的情况之后压力还是很大的，毕竟我也只是一个懂$Matlab$语法的小白啊，数学建模这个词在我的印象里简直就像是“量子力学”一样的神秘（滑稽）。后来我们三个见面聊了聊，互相了解了下情况，我们都没有太多的数学建模基础，情况类似，之后也就没再多聊。</p><p>直到考试前，我们关于建模的事情聊得都不多，感觉我们三个都是比较内敛的人，我还算是其中比较外向的了，很多时候如果我不说话，估计群里就不会有人说话了。赶在寒假前期末考试后，我打算好好准备一下，虽然感觉毫无头绪，不知道从哪个高深的算法开始学起，但还是硬着头皮上，买了个课，每天听一听，后来就去北京学GRE了，数模什么的也就暂且搁置了，直到比赛前几周，才继续学一些知识。忘记说了，今年比较特殊的是，受疫情影响，美赛从一次改成了两次，一次是2月份，一次是3月份，我们当时想着或许3月能开学，就去搞3月的比赛（我实际上是觉得自己啥也不会，能拖几天是几天，拖，就恩拖）</p><p>然而躲得过初一却躲不过十五，3月份的比赛马上就到了，我们采用的是腾讯会议的方式线上交流。第一天早上起得很早，六点多就看赛题了，没记错的话，我3点多就醒了一次，估计是没准备太紧张了吧…拿到赛题，用词典把B题翻译了下，了解了题意，大概就是问想在海边建沙堡的话，怎么剪最好，我当时看了就觉得，这不就是开脑洞胡思乱想嘛，一个从小都没怎么去过海边的中国人，沙堡？别搞笑了，你问我怎么做汉堡好吃还差不多。</p><p>但当我用翻译软件把B题翻译了之后我才发现，或许B题是唯一一个我能理解的题目了，这就像是养龙，你说咋养就咋养，你说怎么搭沙堡就怎么搭，没有硬性规定，全靠你自己的理解，这种还算好的，毕竟只要说服了自己，就觉得没问题不是。在和两个队友商量后，也一致认为B题比较好理解，虽然暂时没有太明确的思路，但至少能靠脑子想想，编，就恩编。第一天，我们最开始思路很乱，没搞清楚应该从哪个点入手，毕竟对一个沙堡要分析的东西还是很多的，没有限定条件随便扯总不是一个事，搞数学的同学想从含水量的角度出发，我想从力的角度考虑，但奈何我的流体力学也只是学了一个皮毛，现在一个公式都想不起来的我，想从力学出发未免太难了点，搞数学的同学倒是想出了个思路，还写了不少式子，到了下午，搞数学的同学竟然已经写出了一个模型，虽然忽略了很多因素，但听起来觉得很有道理，达到了“自圆其说”的作用，于是我们就照着这个方向继续研究，提出问题，否决问题，提出方案，改正方案…就这样我慢慢觉得这个模型有搞头，至少我开始有了点思路。当晚搞数学的同学给我提出了一个难题，让我求一个函数的最小值，单求最小值不要紧，毕竟我还是上了点网课的，懂一点算法，但这函数也太复杂了，迭代套迭代，简直就是一个套娃，我完全没有思路。当晚我们还说明天要不要讨论一下F题，毕竟如果这个式子不能解决，可能这个思路就没法继续下去了。实在不行，我们就去做文字建模。。。</p><p>那晚我也没怎么睡好，因为我真的不知道这个“套娃”怎么解决，第二天早上起来我就自学了下可能能解决的办法–蒙特卡洛模拟，试着化简一下式子，再写写代码，听着两个队友在腾讯会议里讨论F题的题意，我得到了一个看起来“不错”的结果，我就在里面和他们说，如果我得到了第二问的结果，你们是觉得做F题还是B题？在我的语言诱导下，我们又开始脑洞大开建沙堡。可能是算出了个结果，有了信心，我们逐渐攻克各个难题，一起讨论，我认为我们仨合作还是很愉快的，总之就是在自圆其说的道路上越走越远233。</p><p>我们每天也不熬夜，大概10点左右就收工，早上八点集合，第三天，大部分问题也都已经想好。最后一天，该算的也算完了，我就给自己找点事做，下了个Latex（真的是作死），最后一天把我搞得死去活来，硬是坐在电脑前一天，从零入门Latex还好我有点Markdown基础，搞这个上手也比较快，我们改了又改，填了又填，最后在后半夜两点，在我们三个人一同的见证下交上了论文，4天的美赛到此结束，圆满收工。</p><p>这次美赛，收获很多，首先感谢我的两个队友，都很靠谱！我自己也算尽心尽力了，虽然基础差，但在这几天现学了不少东西，总之还是那句话，“尽吾志也而不能至者，可以无悔矣。”</p></font>]]></content>
    
    <summary type="html">
    
      
      
         &lt;font size=&quot;3&quot; face=&quot;楷体&quot;&gt;

&lt;p&gt;为了出国，提升背景为目的，我在大三报名了美赛，机缘巧合在一个留学交流群里，看到一个同学问有没有人有参加数模美赛的意向，要求是会写代码，我想着就去问问，毕竟我一个从小对数学无感，并且考了几次托福都上不了90的垃圾来说，除
      
    
    </summary>
    
      <category term="随笔" scheme="https://www.qianhongbo.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Diary" scheme="https://www.qianhongbo.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>Bit,Byte,K,M之间的换算问题</title>
    <link href="https://www.qianhongbo.com/Bit,Byte,K,M%E4%B9%8B%E9%97%B4%E7%9A%84%E6%8D%A2%E7%AE%97%E9%97%AE%E9%A2%98.html"/>
    <id>https://www.qianhongbo.com/Bit,Byte,K,M之间的换算问题.html</id>
    <published>2020-02-22T11:13:09.000Z</published>
    <updated>2020-09-13T13:21:37.651Z</updated>
    
    <content type="html"><![CDATA[<p>Bit意为“位”或“比特”，是计算机运算的基础，属于二进制的范畴；<br>Byte意为“字节”，是计算机文件大小的基本计算单位；<br>换算： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 Byte = 8 Bits </span><br><span class="line"></span><br><span class="line">1 KB = 1024 Bytes </span><br><span class="line"></span><br><span class="line">1 MB = 1024 KB </span><br><span class="line"></span><br><span class="line">1 GB = 1024 MB</span><br></pre></td></tr></table></figure><p>Byte简写为B，而bit简写为b；1B=8b；<br>一个数字与一个字母都是占1B；一个汉字占两个字节。</p><p>问题：计算机硬盘64G，每个块的大小为4K，用位示图来管理硬盘的空间，则位示图的大小为多少字节？</p><ul><li><input disabled type="checkbox"> 16M</li><li><input disabled type="checkbox"> 4M</li><li><input checked disabled type="checkbox"> 2M</li><li><input disabled type="checkbox"> 1M</li></ul><p>解答：<br>$$<br>\frac{64G}{4K}=\frac{64\times1024\times1024K}{4K}次(bit)=\frac{16\times1024\times1024}{8\times1024\times1024}=2M<br>$$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Bit意为“位”或“比特”，是计算机运算的基础，属于二进制的范畴；&lt;br&gt;Byte意为“字节”，是计算机文件大小的基本计算单位；&lt;br&gt;换算： &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
      <category term="知识积累" scheme="https://www.qianhongbo.com/categories/%E7%9F%A5%E8%AF%86%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="操作系统" scheme="https://www.qianhongbo.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>你凭什么上北大？ 作者:贺舒婷</title>
    <link href="https://www.qianhongbo.com/%E4%BD%A0%E5%87%AD%E4%BB%80%E4%B9%88%E4%B8%8A%E5%8C%97%E5%A4%A7%EF%BC%9F.html"/>
    <id>https://www.qianhongbo.com/你凭什么上北大？.html</id>
    <published>2020-02-21T01:33:42.000Z</published>
    <updated>2020-09-13T13:21:37.657Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这是一篇陪伴我走过初中，高中的文章</p><p>在我无数次的怀疑自己，自暴自弃之后给予我力量</p><p>现在我已经来到了大学，重读此篇，来找回曾经的自己。</p></blockquote><font size="3" face="楷体"><p>未名湖边的桃花开了，就在前几天。</p><p>我曾无数次梦想过，陌上开花的时候湖边折柳的人群里会有自己的身影。那个时候，我的心思和大家一样单纯而迫切，我的目光却是比你们更加迷茫和彷徨。</p><p>那年高三。</p><p>十年磨一剑，我得到的却几乎只是一块废铁。</p><p>高一那年，我真的差点把自己废成了一块废铁。上课睡觉，聊天，看漫画，吃零食，跟着后面那些男生大呼小叫，把年轻的女老师气得眼圈含泪，然后自鸣得意而洋洋之。那真是一段不堪回首的日子，像色彩斑斓的黑洞，看上去奇观异彩，鬼魅般的吸引力却在不知不觉中一点点把你拉向无敌的深渊。于是下滑，堕落，而更加难过的是明明知道自己在堕落却无力去改变。习惯的力量的确大道了让我无可奈何，于是我放弃了最后的挣扎与努力。现在想想，那只是懦弱，那只是懒惰，那只是给自己自甘堕落所找的一个看似冠冕堂皇的理由，一切是自欺欺人。</p><p>可当时没有任何人来指着我的鼻尖骂我，说你是不是就想这样破罐子破摔，就像这样玩完你的一辈子，也许他们已经放弃了我，有时候我想，然后是极其嘲讽般的不屑，不屑以及自以为是的洒脱——谁稀罕谁。其实，那个时候真的是应该有一个人，就像很多人曾经经历过的那样，指着我的鼻尖，戳着我的脊梁说，你知不知道自己在做什么，请不清楚自己想要什么，请不清楚自己的明天会是什么。</p><p>可是，在无所谓的人也会有自己的底线的。正如再深的涧谷也会有它的低谷。一切就像滑楼梯，一路上放肆张扬地笑了下来，最后终于重重的摔在了下面，头破血流。</p><p>也许，人只有在痛的时候，才会认认真真反省自己走错了哪一步吧，总要摔些跟头，才能学会绕着道走。而这条再简单不过的路，我却付出了整整一年的青春时光才真正明白。一年，365天，可以让居里夫人发现镭，可以让爱因斯坦证出E=mc2，一年可以让一个婴儿学会跌跌撞撞走向母亲的怀抱，一年可以让一段轰轰烈烈的爱情开始和终了。可是这一年，我只得到了那一句话。所幸，并不亏，也并不晚</p><p>高二分科，我选了文科。你无法想象我所在的中学有着怎样烂的文科班——本科上线只有三人，本科上线三人是个什么概念？当我现在大学同学颇为自得的告诉我他们中学的班级北大清华一走几十个的时候，我轻轻的笑了笑。我所在的文科班，是一个本科上线三人的文科班，更具有讽刺意味的是，三个人全是复读生。我就是在大家或无奈或讽刺或无谓的目光里，毅然决绝地在文科报名表上写上了自己的名字，那真是我一生中写得最好看的一次。</p><p>我只是突然间觉醒了，觉得自己的一辈子不能就那样过。时候很多人问我怎么回事，也许他们是想在我这里听到一个传奇般的浪子回头的故事，而我当时所能想到的解释就只有这一句，我只是觉得，我的一辈子不应该就这样吊儿郎当的过去。</p><p>可我还是低估了过去那一年给我带来的影响。第一次月考，我考了年级第12名，也许这是一个听上去差强人意的成绩，可是，仅有的理智还是足以提醒我，那是一个本科上线三人的文科班，如果你不能把所有的人远远甩在后面，12名和120有什么区别？</p><p>至今我还记得那次考了第一的那个女生，是一个不见经传的女孩子，瘦瘦小小，戴副厚厚的黑边眼镜，趴伏在书桌上的身影常常有些佝偻。而这个印象的得来，是因为所有的人永远只能看到她趴在桌上的身影。她一直是班里第一个来最后一个走的人。我一直对那种学生持有一种莫名的排斥和抵触情绪，总想你们有什么了不起，不就是死读书嘛，我要是像你们这样刻苦努力早是市里第一了。事实上直到那次考试成绩出来以后我仍然对她不屑     一顾。然后，我迎来了一生中最重要的一次班会。</p><p>我不知道要用怎样的分量去感谢那个班主任，因为如果不是她的那席话，现如今的我在哪里都不一定。班会上，她说：“这次考试非常能说明问题，该考好的人都考好了。”然后她扫了我一眼，我明白她的潜台词，也就是说在她看来我属于是没有理由考好的的那一堆人里的。奇怪，我居然没有脸红。不知道是太久的堕落已经在不知不觉中磨光了原本敏感的自尊，还是下意识里仍然对她的话不置可否，我当时面无表情的迎上了她的目光。她的眼睛只是平静地扫过我那里，然后继续：“我知道有些人自以为很聪明很有才气，看不起那些认真学习刻苦努力的同学，总觉得人家是笨鸟先飞是先天不足。可是我想说，你只是懦弱！你是不敢尝试，你只是不敢像他们一样去努力去刻苦，因为你怕自己即使刻苦了也比不上他们，刻苦了也考不了第一，反而遭人耻笑，你宁可不去尝试，只是因为有失败的风险，而你甚至连这一点风险都承担不起，因为，在你心底，你对自己根本就没有把握……”后面她又说了什么我已经想不起来了，我承认当时我是完完全全懵在那儿了，因为她说的那几句话。“你只是懦弱……”当时的感觉是雷轰一样把我整个人震住了，反反复复回荡在脑子里就只有那么一句话：“你只是懦弱。”</p><p>她是正确的。</p><p>那种突然觉醒的震撼是言语无法描述的，也是我不想用文字去表达的。你只能通过结果来想象，也只需要通过借结果来想象。那晚我在日记里写，试试吧。试一试自己那样刻苦那样努力的去学上一个月会不会见效。当时我根本不敢对自己承诺什么结果，也的却承诺不起。我只是抱着一个念头，试一试。</p><p>然后迎来了一生中最戏剧性的一个月。之所以说它戏剧性，只因为就像难以想象唐僧不再啰嗦孙悟空不再好斗猪八戒不再贪吃一样，我简直不敢相信那个早晨六点早自习上课到晚上十点晚自习下课一动也不动坐在位置上安安稳稳踏踏实实的人可以是我自己。其实并没有说起来那么简单的。我去一点一点地做的时候就已经发现了：要想在几天里改变365天来形成的习惯，太难；而要想在一个月里创造出令人瞠目结舌的奇迹来，也太难。习惯成自然啊。就像那句话说的，“心思平原放马，易放难收”，野惯了的心要想一下子收回来，谈何容易？常常做着做着就忍不住了，心开始浮躁，眼神也开始飘离，好几次差一点就要放弃。只是，在那个最危险的边缘晃荡的时候我总是压一压，告诉自己，忍不住的时候，再忍一下，其实说白了也就那么一句话：忍不住的时候，再忍一下。我承认自己是一个骨子里相当傲气的人，我就是不相信我刻苦起来会不如哪个人，我就是不信我真的去做一件事情的时候会做不到，我就是不信这世上真的有什么不可能的事。I believe that nothing is impossible.</p><p>然后，我迎来了那次期待已久的期中考试，至今我仍记得考完之后的感觉。抱着书走在回家的路上，茫茫的看着车水马龙人来人往，恍惚想真的考完了吗？为什么心里空空的没有着落？那的确是我一生中最特殊的一次考试，因为它关系着我此后的方向和道路选择，风险太大，我怎么安得下心？其实。考试结果想必大家已经猜到了。我的的确确让所有的人真正瞠目结舌了一次。是的，我考了第一，全市第一。</p><p>你永远无法想象那个结果于我而言有多么重要。知道成绩是我出乎寻常的平静。那时我才明白原来激扬和呐喊的冲动到了极点只是平静。当名字出现在了成绩单的第一行时，我默默地对自己说：记住了，这世上没有什么事情是不可能的。</p><p>从此我再也没有去改变过那种态度和方法。其实所有的方法说白了都是没有方法的，只有一个词：刻苦。</p><p>我坚守着那些不是方法的方法，也坚守着我的名字在成绩单上的位置，一直到高考前的最后一次考试，我始终是第一名。但是，真正的挑战还没有开始。即使我可以牢牢占据第一名的位置，即使我可以每次都把第二名甩下几十分，我知道，北大离我还是太远，远的连在梦里都看的不真切。所有的老师都坚信我将会是学校有史以来考得最好的一个文科生，而在他们的概念里，考得最好的文科生，意味着你可以上山大，运气好点儿的话也许可以伸伸手还能够上复旦甚至人大的门槛。而我只要北大。我从来没有对任何人讲起过我的志愿——如果可以称之为志愿的话。我只想把所有的力量都积蓄起来。</p><p>高三第二学期，我们搬进了刚刚落成的教学楼。搬迁的那天，楼道里吵得很，拖桌子拉板凳的声音在走廊里不绝于耳。我一个人不言不语的跳过窗子，踏上了二楼窗外那个大大的平台。对面是操场，初雪未融，空气湿冷，光秃秃的树枝直直的刺向天空。雪天的阳光凉凉的透过睫毛洒在眼睛里。眼睛静静的看着远远的天空。我默默在心里说：“等着吧，我要你见证一个奇迹。”我知道，这世上的确没有什么不可能的事情。</p><p>我从来不知道压力达到一定程度居然可以把人的潜能激发到那种地步的。我是一个极其不安分的人，可是那段时间我表现得无比耐心沉稳，踏实得像头老黄牛。事实上无数次我都面临崩溃的边缘了。高中5本历史书我翻来覆去背了整整六遍。当你把一本书也背上6遍的时候你就知道那是什么感觉了，只是，忍不住的时候，再忍一下。坚持的确是世上最伟大的一种品质。那段时间我唯一的休息方式就是站在走廊里看远处的天空。后来发现在对面的建筑墙壁上有一行大大的红字，是学校用来激励学生的吧。我不确定。可就是那句话陪我走过了高三最后的日子——意志的力量，是决定成败的力量。我用我所有的经历和体会去实践而且证明了这句话：意志的力量，是决定成败的力量。</p><p>呼啸而过的风卷着漫天的黄沙，在那个北方的春天里，我们一个个头发蓬乱，皮肤粗糙。死寂和喧嚣交替如同美国的执政党，规律的让人怀疑冥冥之中可有双奇异而魔力无穷的手。惶然而又茫然的我们在敬畏与期待中迎来又送走了一模，二模乃至N模。每根神经都被冷酷无情的事实锤炼的坚不可摧，无论是吟惯了杨柳岸晓风残月的诗情，还是习惯了信手涂鸦的画意。在这个来去匆匆的季节里，一切敏感纤细都奢侈的如同凯撒大帝的绸衣，徒留无数次的希望在无数次的失望前撞得粉身碎骨，无数次的激扬在无数次的颓丧下摔得头破血流。每个人都比昨天更加明白理想和现实之间那道不可逾越的鸿沟，同时也比昨天更加拼命努力挣扎，试图挤过那道窄窄的独木桥，哪怕明知是徒劳。</p><p>——会是徒劳吗？</p><p>当这个锥心的问号在夜阑人静的时候一次次猛烈叩击起了心门，每个人都难以承受那潮涌而至的恐慌和迷惘，于是逼着自己埋进去，埋进书本，埋进试卷，埋进密不透风的黑茧里——为的是有朝一日的破茧成蝶。青黑的眼圈，浮肿的眼袋，干燥的手指，焦虑的起了水泡的嘴角。那个春天我不知道流行的是粉蓝果绿还是黛紫银灰。小镜子被悄悄收起，因为不忍见到自己憔悴的面容和黯淡的眼睛，因为怕有什么会在汪洋恣意般在干旱已久的脸上纵横开来——上帝，我是个女孩子啊！</p><p>上帝无言。无言微笑。微笑告诉我，你，心甘情愿。是的。我心甘情愿我不悔初衷我自己选择了这条路，平坦也好崎岖也罢我得走下去。我要走下去。我会走下去。</p><p>于是所有的呐喊被咽下去，所有的豪情被收起来。我像一头二月黄牛，默默踏步，无声前行。当拼搏被拼命所取代时，香格里拉已经幻化成心中恒远而朦胧的梦想，而所有的努力也只是为了让这梦想不再“美人如花隔去端”，哪怕青冥长天，纵然绿水波澜。</p><p>踏入考场的时候我很平静，“尽吾志也而不能至者，可以无悔矣”事实上我从来没有想过自己会考入北大以外的哪所学校。与其说这是一种自信，莫如说这是一种预感。我只是想，哪怕北大只招一个名额，为什么不可能是我？这世上没有什么事情是真正不可能发生的。</p><p>考完后走在回家的路上，看着依然匆匆的人群，心里依然空无着落。眼睛因为泪雾而模糊，视野里的东西却越发清晰。这在科学上有解释，我却宁愿相信是因为一切真实的感知都要以泪水和苦痛作为代价。是的，我们总是要学会放弃一些东西，在能得到另外一些东西。如果你所在乎的东西值得你为了它而付出一切，那么所有的放弃只是分娩前的阵痛。总要有所取舍的，蝴蝶的生命之所以如此短暂，是因为它的翅膀太过精致了。有时候，放弃是为了更好的得到，关键看你想要的究竟是什么，以及为了这想要的东西你愿意付出多大的代价。上帝对每一个人都是平等的。</p><p>事实上我怀念那段日子，而且永远感激它。不只是因为在那段时间里我完成了自己的过渡与蜕变，更是因为那时的一切深深烙在了我正处于可塑期的性格中，成为这一生永远的财富。那真的是多少钱都买不来的财富。人生中再也不会有哪个时期像那时一样专一地，单纯地，坚决地，几近顽固而又饱含信仰和希冀地，心无旁骛乃至与世隔绝地，为了一个认定的目标而奋斗。当你在若干年后某个悠闲的下午，回想起自己曾经的努力和放弃，曾经的坚忍和毅力，曾经的执着和付出，曾经的汗水和泪水，那会是怎样一种感动和庆幸，怎样一种欣慰和尊重+尊敬你自己。真的，在这个过程中，请允许我重复一遍，最重要的，是你自己。我感谢父母感谢老师感谢同学感谢朋友感谢所有关心我帮助我的人，但我最感谢的，是我自己。Nothing is impossible.这是我在一点一滴的努力与尝试中得到的东西。而且我也相信，这也将会是使我终身受益的东西。在这里，我把自己最信仰的一句话送给大家：Nothing is impossible.</p></font><blockquote><p>分享此文给所有正在奋斗拼搏的你！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这是一篇陪伴我走过初中，高中的文章&lt;/p&gt;
&lt;p&gt;在我无数次的怀疑自己，自暴自弃之后给予我力量&lt;/p&gt;
&lt;p&gt;现在我已经来到了大学，重读此篇，来找回曾经的自己。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;font size=&quot;3&quot; face=&quot;楷体&quot;&gt;
      
    
    </summary>
    
      <category term="随笔" scheme="https://www.qianhongbo.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="励志" scheme="https://www.qianhongbo.com/tags/%E5%8A%B1%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>华科机械学院综合测控实验</title>
    <link href="https://www.qianhongbo.com/%E5%8D%8E%E7%A7%91%E6%9C%BA%E6%A2%B0%E5%AD%A6%E9%99%A2%E7%BB%BC%E5%90%88%E6%B5%8B%E6%8E%A7%E5%AE%9E%E9%AA%8C.html"/>
    <id>https://www.qianhongbo.com/华科机械学院综合测控实验.html</id>
    <published>2020-02-19T04:10:39.000Z</published>
    <updated>2020-09-13T13:21:37.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h1><p>现在布置自学同学第一周的任务：</p><ol><li>用MATLAB产生0-100hz的方波信号，可以在数字框或者滚动条上改变方波频率。</li><li>用时域过零检测方法测量你产生的方波信号，测量误差越小越好，0.2hz以内打100分，0.5hz以内95分，1hz以内90分，5hz以内85分，10hz以内80分，以上评分标准是初步设的，不满意可以提</li><li>在你产生的方波信号上添加一直流分量，比如500-1000，如何保证你的程序也正常测量。</li><li>注意初始信号值如果全为0的情况下，如何保证你的程序也正常测量。</li></ol><p>仿真做好了，把上学期编写的采集代码替换仿真数据即完成第一次实验，第一次实验最终通过测量信号发生器的信号频率来评分。<br>学有余力的同学可以看看实验指导书的实验六编码器模式，另外一种通过硬件测量信号频率的方法，有一定难度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;实验一&quot;&gt;&lt;a href=&quot;#实验一&quot; class=&quot;headerlink&quot; title=&quot;实验一&quot;&gt;&lt;/a&gt;实验一&lt;/h1&gt;&lt;p&gt;现在布置自学同学第一周的任务：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用MATLAB产生0-100hz的方波信号，可以在数字框或者滚动条上改变方
      
    
    </summary>
    
      <category term="华科机械学习资料分享" scheme="https://www.qianhongbo.com/categories/%E5%8D%8E%E7%A7%91%E6%9C%BA%E6%A2%B0%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="综合测控实验" scheme="https://www.qianhongbo.com/tags/%E7%BB%BC%E5%90%88%E6%B5%8B%E6%8E%A7%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>大三上学期总结</title>
    <link href="https://www.qianhongbo.com/%E5%A4%A7%E4%B8%89%E4%B8%8A%E5%AD%A6%E6%9C%9F%E6%80%BB%E7%BB%93.html"/>
    <id>https://www.qianhongbo.com/大三上学期总结.html</id>
    <published>2020-02-17T07:38:19.000Z</published>
    <updated>2020-09-13T13:21:37.657Z</updated>
    
    <content type="html"><![CDATA[ <font size="3" face="楷体">这是我看似很努力的一个学期，结果也还说得过去，但这些与我预想的都还差了太多，我用20分钟的时间做了一个反思，试图找出我存在的问题。<ol><li><p>我的努力程度不够，我是一个自制力很差的人，向来如此，总是禁不住诱惑，无论是手机还是游戏，都是一沾上就会上瘾，所以这一学期我尽管花了不少时间在学习上，但相比于其他同学，可能还是不够吧，毕竟很多人可能是花费自己的全部时间去学习了。</p></li><li><p>我对某些并不感兴趣的学科没有学的认真，比如机械原理，热工基础。我并没有抱着一个为了得高分的心态，而是自认为学的够了就不学了，但很显然，这种学习程度对于达到90+以上的分数是不太可能的。</p></li><li><p>学习方法，自从上了大学，我好想对于学习方法就已经不再要求自己了，学得再也不聪明，总是以一种比较笨，低效的方式在学习，这也不是一个聪明人应该做的事情。</p></li></ol><p>希望在最后的学期，我能逐渐克服这些问题，尽管GPA可能已经不会有太大的改观，但这学期对我来说尤为重要，我要考出GRE和TOEFL，我希望我能在这两项成绩的考试中证明自己，考出高分！也算不让自己的大学留下遗憾吧。<br></p></font><p></p>]]></content>
    
    <summary type="html">
    
      
      
         &lt;font size=&quot;3&quot; face=&quot;楷体&quot;&gt;
这是我看似很努力的一个学期，结果也还说得过去，但这些与我预想的都还差了太多，我用20分钟的时间做了一个反思，试图找出我存在的问题。

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;我的努力程度不够，我是一个自制力很差的人，向来如此，总是禁不住诱惑，
      
    
    </summary>
    
      <category term="随笔" scheme="https://www.qianhongbo.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Diary" scheme="https://www.qianhongbo.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>一切都是最好的安排</title>
    <link href="https://www.qianhongbo.com/%E4%B8%80%E5%88%87%E9%83%BD%E6%98%AF%E6%9C%80%E5%A5%BD%E7%9A%84%E5%AE%89%E6%8E%92.html"/>
    <id>https://www.qianhongbo.com/一切都是最好的安排.html</id>
    <published>2020-02-11T11:51:46.000Z</published>
    <updated>2020-09-13T13:21:37.655Z</updated>
    
    <content type="html"><![CDATA[ <font size="3" face="楷体">今天偶然想到几位曾经的高中同学，也就想起了很多高中的事，虽然大部分事情已经记得不是很清晰，也就只记得个大概。但涌上心头的不仅仅是对于回忆的伤感，更多的是一种对曾经的遗憾，毕竟当时的我还年少轻狂，对未来还有这无数的幻想，内心难免掀起波澜。<p>希望我能带着今天的情绪继续前行下去，不辜负家人的期待，和自己的期待，2020是决定我人生轨迹的一年，或许多年以后我回望今天，也注定会有所不同吧。</p><p>干就完了，奥利给！<br></p></font><p></p>]]></content>
    
    <summary type="html">
    
      
      
         &lt;font size=&quot;3&quot; face=&quot;楷体&quot;&gt;
今天偶然想到几位曾经的高中同学，也就想起了很多高中的事，虽然大部分事情已经记得不是很清晰，也就只记得个大概。但涌上心头的不仅仅是对于回忆的伤感，更多的是一种对曾经的遗憾，毕竟当时的我还年少轻狂，对未来还有这无数的幻想，内心难免
      
    
    </summary>
    
      <category term="随笔" scheme="https://www.qianhongbo.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="Diary" scheme="https://www.qianhongbo.com/tags/Diary/"/>
    
  </entry>
  
  <entry>
    <title>计算机四级知识点</title>
    <link href="https://www.qianhongbo.com/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%9B%E7%BA%A7%E7%9F%A5%E8%AF%86%E7%82%B9.html"/>
    <id>https://www.qianhongbo.com/计算机四级知识点.html</id>
    <published>2020-02-03T10:19:45.000Z</published>
    <updated>2020-09-13T13:21:37.662Z</updated>
    
    <content type="html"><![CDATA[<p>时钟分为硬件时钟和软件时钟</p><p>目态：用户态 – 一般指令</p><p>管态：系统态 – 特权指令</p><h1 id="第三章：进程线程模型"><a href="#第三章：进程线程模型" class="headerlink" title="第三章：进程线程模型"></a>第三章：进程线程模型</h1><ol><li>顺序执行：顺序性；封闭性；程序结果确定性；程序结果可再现性</li><li>多道程序系统：同时处理多个具有独立功能的程序，提高利用率/ 独立性；随机性；资源共享性</li><li>程序的并发执行：并发程序相互制约；程序与计算不再一一对应；并发程序结果不可再现</li></ol><blockquote><p>多道程序系统属于各种操作系统，是一种思想（实时系统、分布系统）</p><p>并发不等于同时运行</p></blockquote><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><ol><li>进程是正在执行的程序，包括程序，数据，进程控制块</li><li>并发性；动态性；独立性；交往性；异步性</li><li>三状态模型：就绪状态，运行状态，等待状态<ol><li>就绪状态：进程分配到除CPU之外的一切资源；排成就绪队列</li><li>运行状态：就绪状态的程序获得CPU的使用权，单处理器同一时间只能有一个程序处于运行状态</li><li>等待状态/阻塞状态：进程请求输入输出、申请额外空间；不浪费CPU</li></ol></li><li>创建状态，结束状态（完成、未完成）</li><li>挂起状态，激活状态（内存、外存转换）</li><li>新状态–&gt;就绪状态：就绪队列可以接纳新的进程</li><li>就绪状态–&gt;执行状态：按照算法分配；执行状态的进程称为当前进程</li><li>执行状态–&gt;就绪状态：时间片结束、优先权较低</li><li>执行状态–&gt;阻塞状态：IO请求等</li><li>阻塞状态需要先进入就绪状态再进入运行状态</li></ol><p><img src="//tvax4.sinaimg.cn/large/006BuM4Jly1gbhtnod40pj30qo0f7k0k.jpg" alt="TIM截图20200202095653"></p><h2 id="PCB：进程控制块"><a href="#PCB：进程控制块" class="headerlink" title="PCB：进程控制块"></a>PCB：进程控制块</h2><p>组织方式</p><ol><li>线性方式：需要扫描所有的</li><li>索引方式：需要额外的空间</li><li>链接方式：相同状态的进程排列在一起</li></ol><h2 id="Unix的fork-函数"><a href="#Unix的fork-函数" class="headerlink" title="Unix的fork()函数"></a>Unix的<code>fork()</code>函数</h2><p>父进程通过<code>fork()</code>创建子进程</p><p>特点：只被执行一次，返回<strong>两次</strong>结果，父进程返回的是子进程的<code>PID</code>，子进程中<code>fork</code>返回0</p><blockquote><p>代码中有几个fork()就会输出2^n次</p></blockquote><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>线程是进程的一个实体，是被系统独立调度和执行的基本单位</p><p>线程基本上不拥有系统资源，但它可以与同属于一个进程的其他线程共享所拥有的全部资源</p><p>一个线程可以创建和撤销另一个线程，多个线程之间可以并发执行，因此运行中可以呈现出异步性，因此线程同样有就绪，执行，阻塞三个状态</p><blockquote><p>进程是拥有资源的基本单位</p></blockquote><blockquote><p>不同进程之间可以并发执行，一个进程中的多个线程也可以并发执行</p><p>QQ和音乐播放可以同时运行（多进程），QQ里可以多个人同时聊天（多线程）</p><p>线程的引入增加了并发性！</p></blockquote><blockquote><p>一个程序至少有一个进程，一个进程至少有一个线程</p></blockquote><p>用户级线程，内核级线程，混合级线程</p><h2 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h2><ol><li>低级调度：内核用一定的调度算法从就绪队列选出一进程</li><li>中级调度：调度算法将等待状态的进程调至外存中</li></ol><h2 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h2><ol><li>先来先服务调度算法 FCFS：最简单，非抢占式，有利于长进程，不利于短进程。</li><li>最短作业优先算法 SPF：优先处理运行时间最短的进程，降低平均等待时间，提高吞吐量，非抢占式，对长进程不利。</li><li>最短剩余时间优先调度算法 SRT：抢占式的动态版本。</li></ol><p><img src="//tvax3.sinaimg.cn/large/006BuM4Jly1gblan566baj30qc0eedoa.jpg" alt="TIM截图20200205100110"></p><ol start="4"><li>时间片轮转调度算法RR：在分时系统中，队首进程执行一个时间片，之后计时器发生一个时钟终端，并将它放到对尾，继续执行。适合于交互进程的调度。</li><li>最高优先级调度算法：为了照顾紧迫型的进程</li><li>多级反馈队列调度算法MLF：主流使用调度算法</li></ol><p><img src="//tvax3.sinaimg.cn/large/006BuM4Jly1gbotzhu7lnj30m80fm452.jpg" alt="TIM截图20200208112701"></p><ol start="7"><li>实时系统的调度算法：速率单调调度算法，最早最终时限优先调度</li></ol><blockquote><p>进程和程序的本质区别是：进程是动态的，程序是静态的</p><p>进程和程序的其它区别是：进程是在内存，程序是在外存</p></blockquote><h1 id="第四章-并发与同步"><a href="#第四章-并发与同步" class="headerlink" title="第四章 并发与同步"></a>第四章 并发与同步</h1><p>资源共享程度的三个层次：互斥、死锁、饥饿</p><p>临界资源：资源在一段时间内只允许一个进程访问和使用</p><p>进程同步机制应该遵循的原则：</p><ol><li>空闲让进</li><li>忙则等待</li><li>有限等待：以免进入“死等”</li><li>让权等待：以免进入“忙等”</li></ol><p>软件互斥的四种算法：</p><ol><li>单标志算法</li><li>双标志、先检查算法</li><li>双标识、后检查算法</li><li>先修改、后检查、后修改者等待算法</li></ol><p>进程互斥的硬件方法：</p><ol><li>TS指令</li><li>Swap指令</li></ol><p>整型信号量：</p><ol><li>大于0，表示系统中可用资源的数目</li><li>小于0，表示被阻塞的进程数目</li><li>等于0，系统资源已经用完，并没有因资源而被阻塞的进程</li></ol><p>PV操作</p><p> P操作用于申请资源</p><p>V操作用于释放资源</p><p><img src="//tva3.sinaimg.cn/large/006BuM4Jly1gbqb4zsslpj30qn0ey14e.jpg" alt="111111111"></p><p><img src="//tva1.sinaimg.cn/large/006BuM4Jly1gbqb54k2rgj30qk0emgvz.jpg" alt="222222222222222222"></p><p><img src="//tva3.sinaimg.cn/large/006BuM4Jly1gbsqjtggywj30qv0i1qd4.jpg" alt="TIM截图20200211203024"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;时钟分为硬件时钟和软件时钟&lt;/p&gt;
&lt;p&gt;目态：用户态 – 一般指令&lt;/p&gt;
&lt;p&gt;管态：系统态 – 特权指令&lt;/p&gt;
&lt;h1 id=&quot;第三章：进程线程模型&quot;&gt;&lt;a href=&quot;#第三章：进程线程模型&quot; class=&quot;headerlink&quot; title=&quot;第三章：进程线程模
      
    
    </summary>
    
      <category term="学习笔记" scheme="https://www.qianhongbo.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="计算机四级" scheme="https://www.qianhongbo.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%9B%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>第5讲.相关系数</title>
    <link href="https://www.qianhongbo.com/%E7%AC%AC5%E8%AE%B2.%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0.html"/>
    <id>https://www.qianhongbo.com/第5讲.相关系数.html</id>
    <published>2020-02-01T14:15:26.000Z</published>
    <updated>2020-09-13T13:21:37.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>非线性也会使得线性相关系数很大</li><li>离群点对相关系数的影响也很大</li><li>如果两个变量的相关系数很大，也不能说明两者相关</li><li>两个变量的相关系数结果为0，只能说明不是线性相关，但可能会有更复杂的相关关系</li></ol><p>所以在建模时，先画出散点图！看出趋势，如果有线性关系，就可以用皮尔逊相关系数计算相关性的大小</p><h2 id="EXCEL-跳转"><a href="#EXCEL-跳转" class="headerlink" title="EXCEL 跳转"></a>EXCEL 跳转</h2><ol><li>ctrl + -&gt; 跳转到最后一列</li><li>ctrl + &lt;- 跳转到第一列</li><li>ctrl + shift + -&gt; 选中这一行</li><li>ctrl + shift + -&gt; + 下 选中所有的数据</li><li>ctrl + shift + -&gt; + 空格 选中所有的数据</li></ol><h2 id="描述性统计"><a href="#描述性统计" class="headerlink" title="描述性统计"></a>描述性统计</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%% 统计描述</span></span><br><span class="line">MIN = <span class="built_in">min</span>(Test);  <span class="comment">% 每一列的最小值</span></span><br><span class="line">MAX = <span class="built_in">max</span>(Test);   <span class="comment">% 每一列的最大值</span></span><br><span class="line">MEAN = <span class="built_in">mean</span>(Test);  <span class="comment">% 每一列的均值</span></span><br><span class="line">MEDIAN = median(Test);  <span class="comment">%每一列的中位数</span></span><br><span class="line">SKEWNESS = skewness(Test); <span class="comment">%每一列的偏度</span></span><br><span class="line">KURTOSIS = kurtosis(Test);  <span class="comment">%每一列的峰度</span></span><br><span class="line">STD = std(Test);  <span class="comment">% 每一列的标准差</span></span><br><span class="line">RESULT = [MIN;MAX;MEAN;MEDIAN;SKEWNESS;KURTOSIS;STD]  <span class="comment">%将这些统计量放到一个矩阵中中表示</span></span><br></pre></td></tr></table></figure><h2 id="皮尔逊相关系数计算"><a href="#皮尔逊相关系数计算" class="headerlink" title="皮尔逊相关系数计算"></a>皮尔逊相关系数计算</h2><p>皮尔逊相关系数是用于度量两个变量X和Y之间的相关（线性相关），其值介于-1与1之间。绝对值越大，线性相关程度越大，大于零为正相关，小于零为负相关。</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">R = corrcoef(Test)   <span class="comment">% correlation coefficient</span></span><br></pre></td></tr></table></figure><h2 id="用皮尔逊相关系数进行假设检验"><a href="#用皮尔逊相关系数进行假设检验" class="headerlink" title="用皮尔逊相关系数进行假设检验"></a>用皮尔逊相关系数进行假设检验</h2><p>p值判断法：</p><ol><li><p>p&lt;0.05，说明在95%的置信水平上拒绝原假设</p></li><li><p>p&gt;0.05，说明在95%的置信水平上无法拒绝原假设</p></li></ol><h2 id="检验数据是否是正态分布"><a href="#检验数据是否是正态分布" class="headerlink" title="检验数据是否是正态分布"></a>检验数据是否是正态分布</h2><ol><li>JB检验（大样本 n&gt;30）</li><li>Shapiro-Wilk检验（小样本 3&lt;n&lt;50）</li><li>Q-Q图（样本数量极大）</li></ol><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = normrnd(<span class="number">2</span>,<span class="number">3</span>,<span class="number">100</span>,<span class="number">1</span>);   <span class="comment">% 生成100*1的随机向量，每个元素是均值为2，标准差为3的正态分布</span></span><br><span class="line">skewness(x)  <span class="comment">%偏度</span></span><br><span class="line">kurtosis(x)  <span class="comment">%峰度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">% 检验第一列数据是否为正态分布</span></span><br><span class="line">[h,p] = jbtest(Test(:,<span class="number">1</span>),<span class="number">0.05</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">% Q-Q图</span></span><br><span class="line">qqplot(Test(:,<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h2 id="斯皮尔曼相关系数"><a href="#斯皮尔曼相关系数" class="headerlink" title="斯皮尔曼相关系数"></a>斯皮尔曼相关系数</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">X = [<span class="number">3</span> <span class="number">8</span> <span class="number">4</span> <span class="number">7</span> <span class="number">2</span>]'  <span class="comment">% 一定要是列向量</span></span><br><span class="line">Y = [<span class="number">5</span> <span class="number">10</span> <span class="number">9</span> <span class="number">10</span> <span class="number">6</span>]'</span><br><span class="line"></span><br><span class="line">coeff = corr(X , Y , <span class="string">'type'</span> , <span class="string">'Spearman'</span>)</span><br><span class="line"><span class="comment">% 等价于：</span></span><br><span class="line">RX = [<span class="number">2</span> <span class="number">5</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span>]</span><br><span class="line">RY = [<span class="number">1</span> <span class="number">4.5</span> <span class="number">3</span> <span class="number">4.5</span> <span class="number">2</span>]</span><br><span class="line">R = corrcoef(RX,RY)</span><br><span class="line">[R,P]=corr(Test, <span class="string">'type'</span> , <span class="string">'Spearman'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;非线性也会使得线性相关系数很大&lt;/li&gt;
&lt;li&gt;离群点对相关系数的影响也很大&lt;/li&gt;
&lt;li&gt;如果两个变量的
      
    
    </summary>
    
      <category term="数模美赛" scheme="https://www.qianhongbo.com/categories/%E6%95%B0%E6%A8%A1%E7%BE%8E%E8%B5%9B/"/>
    
    
      <category term="数模" scheme="https://www.qianhongbo.com/tags/%E6%95%B0%E6%A8%A1/"/>
    
  </entry>
  
</feed>
