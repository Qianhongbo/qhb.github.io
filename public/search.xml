<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Node.js</title>
      <link href="/Fullstack/Node-js.html"/>
      <url>/Fullstack/Node-js.html</url>
      
        <content type="html"><![CDATA[<h2 id="History-of-Backend-Development"><a href="#History-of-Backend-Development" class="headerlink" title="History of Backend Development"></a>History of Backend Development</h2><p><img src="https://video.udacity-data.com/topher/2021/February/60351af5_screen-shot-2021-02-23-at-9.04.16-am/screen-shot-2021-02-23-at-9.04.16-am.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Fullstack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Notes</title>
      <link href="/Fullstack/JavaScript-Notes.html"/>
      <url>/Fullstack/JavaScript-Notes.html</url>
      
        <content type="html"><![CDATA[<h2 id="Null-Undefined-and-NaN"><a href="#Null-Undefined-and-NaN" class="headerlink" title="Null, Undefined and NaN"></a>Null, Undefined and NaN</h2><h3 id="null-means-“value-of-nothing”"><a href="#null-means-“value-of-nothing”" class="headerlink" title="null means “value of nothing”"></a>null means “value of nothing”</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="literal">null</span></span><br></pre></td></tr></table></figure><h3 id="undefined-means-“absence-of-value”"><a href="#undefined-means-“absence-of-value”" class="headerlink" title="undefined means “absence of value”"></a>undefined means “absence of value”</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure><h3 id="NaN-means-“not-a-number”"><a href="#NaN-means-“not-a-number”" class="headerlink" title="NaN means “not a number”"></a>NaN means “not a number”</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// calculating the square root of a negative number will return NaN</span></span><br><span class="line"><span class="built_in">Math</span>.sqrt(<span class="number">-10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// trying to divide a string by 5 will return NaN</span></span><br><span class="line"><span class="string">"hello"</span>/<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="Equality"><a href="#Equality" class="headerlink" title="Equality"></a>Equality</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"1"</span> == <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Returns:</strong> true</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"1"</span> === <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>Returns:</strong> false</p></blockquote><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> sum = x + y;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sum = add(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><blockquote><p>If you don’t explicitly define a return value, the function will return <code>undefined</code> by default.</p></blockquote><h2 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sayHi(<span class="string">"Julia"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(greeting + <span class="string">" "</span> + name);</span><br><span class="line">  <span class="keyword">var</span> greeting;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// undefined Julia</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">sayHi(<span class="string">"Julia"</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(greeting + <span class="string">" "</span> + name);</span><br><span class="line">  <span class="keyword">var</span> greeting = <span class="string">"Hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// undefined Julia</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">The about function is equal to the following function...</span></span><br><span class="line"><span class="comment">function sayHi(name) &#123;</span></span><br><span class="line"><span class="comment">  var greeting;</span></span><br><span class="line"><span class="comment">  console.log(greeting + " " + name);</span></span><br><span class="line"><span class="comment">  greeting = "Hello";</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Function-Expressions"><a href="#Function-Expressions" class="headerlink" title="Function Expressions"></a>Function Expressions</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> catSays = <span class="function"><span class="keyword">function</span>(<span class="params">max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> catMessage = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">    catMessage += <span class="string">"meow "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> catMessage;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Notice how the <code>function</code> keyword no longer has a name.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> catSays = <span class="function"><span class="keyword">function</span>(<span class="params">max</span>) </span>&#123; </span><br><span class="line">  <span class="comment">// code here </span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>It’s an <strong>anonymous function</strong>, a function with no name, and you’ve stored it in a variable called <code>catSays</code>.</p><h3 id="Use-function-expressions-as-parameters"><a href="#Use-function-expressions-as-parameters" class="headerlink" title="Use function expressions as parameters"></a>Use function expressions as parameters</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function expression catSays</span></span><br><span class="line"><span class="keyword">var</span> catSays = <span class="function"><span class="keyword">function</span>(<span class="params">max</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> catMessage = <span class="string">""</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">    catMessage += <span class="string">"meow "</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> catMessage;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// function declaration helloCat accepting a callback</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloCat</span>(<span class="params">callbackFunc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"Hello "</span> + callbackFunc(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pass in catSays as a callback function</span></span><br><span class="line">helloCat(catSays);</span><br></pre></td></tr></table></figure><h3 id="Inline-function-expressions"><a href="#Inline-function-expressions" class="headerlink" title="Inline function expressions"></a>Inline function expressions</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> favoriteMovie = <span class="function"><span class="keyword">function</span> <span class="title">displayFavorite</span>(<span class="params">movieName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"My favorite movie is "</span> + movieName);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">movies</span>(<span class="params">messageFunction, name</span>) </span>&#123;</span><br><span class="line">  messageFunction(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">movies(favoriteMovie, <span class="string">"Finding Nemo"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">movies</span>(<span class="params">messageFunction, name</span>) </span>&#123;</span><br><span class="line">  messageFunction(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">movies(<span class="function"><span class="keyword">function</span> <span class="title">displayFavorite</span>(<span class="params">movieName</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"My favorite movie is "</span> + movieName);</span><br><span class="line">&#125;, <span class="string">"Finding Nemo"</span>);</span><br></pre></td></tr></table></figure><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// creates a `donuts` array with three strings</span></span><br><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"powdered"</span>, <span class="string">"jelly"</span>];</span><br></pre></td></tr></table></figure><p>But strings aren’t the only type of data you can store in an array. You can also store numbers, booleans… and really anything!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// creates a `mixedData` array with mixed data types</span></span><br><span class="line"><span class="keyword">var</span> mixedData = [<span class="string">"abcd"</span>, <span class="number">1</span>, <span class="literal">true</span>, <span class="literal">undefined</span>, <span class="literal">null</span>, <span class="string">"all the things"</span>];</span><br></pre></td></tr></table></figure><p>You can even store an array in an array to create a <strong>nested array</strong>!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arraysInArrays = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], </span><br><span class="line">  [<span class="string">"Julia"</span>, <span class="string">"James"</span>], </span><br><span class="line">  [<span class="literal">true</span>, <span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">false</span>]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="Indexing"><a href="#Indexing" class="headerlink" title="Indexing"></a>Indexing</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"powdered"</span>, <span class="string">"sprinkled"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(donuts[<span class="number">0</span>]);</span><br></pre></td></tr></table></figure><h3 id="Length"><a href="#Length" class="headerlink" title="Length"></a>Length</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"powdered"</span>, <span class="string">"sprinkled"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(donuts.length);</span><br></pre></td></tr></table></figure><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"chocolate frosted"</span>, <span class="string">"Boston creme"</span>, <span class="string">"glazed cruller"</span>, <span class="string">"cinnamon sugar"</span>, <span class="string">"sprinkled"</span>];</span><br><span class="line">donuts.push(<span class="string">"powdered"</span>); <span class="comment">// the `push()` method returns 7 because the `donuts` array now has 7 elements</span></span><br></pre></td></tr></table></figure><h3 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"glazed"</span>, <span class="string">"chocolate frosted"</span>, <span class="string">"Boston creme"</span>, <span class="string">"glazed cruller"</span>, <span class="string">"cinnamon sugar"</span>, <span class="string">"sprinkled"</span>, <span class="string">"powdered"</span>];</span><br><span class="line">donuts.pop();</span><br></pre></td></tr></table></figure><h3 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"jelly donut"</span>, <span class="string">"chocolate donut"</span>, <span class="string">"glazed donut"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; donuts.length; i++) &#123;</span><br><span class="line">    donuts[i] += <span class="string">" hole"</span>;</span><br><span class="line">    donuts[i] = donuts[i].toUpperCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="forEach-loop"><a href="#forEach-loop" class="headerlink" title="forEach loop"></a>forEach loop</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"jelly donut"</span>, <span class="string">"chocolate donut"</span>, <span class="string">"glazed donut"</span>];</span><br><span class="line"></span><br><span class="line">donuts.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">donut</span>) </span>&#123;</span><br><span class="line">  donut += <span class="string">" hole"</span>;</span><br><span class="line">  donut = donut.toUpperCase();</span><br><span class="line">  <span class="built_in">console</span>.log(donut);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>The function that you pass to the <code>forEach()</code> method can take up to three parameters. In the video, these are called <code>element</code>, <code>index</code>, and <code>array</code>, but you can call them whatever you like.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">words = [<span class="string">"cat"</span>, <span class="string">"in"</span>, <span class="string">"hat"</span>];</span><br><span class="line">words.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">word, num, all</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Word "</span> + num + <span class="string">" in "</span> + all.toString() + <span class="string">" is "</span> + word);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>With the <code>map()</code> method, you can take an array, perform some operation on each element of the array, and return a new array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> donuts = [<span class="string">"jelly donut"</span>, <span class="string">"chocolate donut"</span>, <span class="string">"glazed donut"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> improvedDonuts = donuts.map(<span class="function"><span class="keyword">function</span>(<span class="params">donut</span>) </span>&#123;</span><br><span class="line">  donut += <span class="string">" hole"</span>;</span><br><span class="line">  donut = donut.toUpperCase();</span><br><span class="line">  <span class="keyword">return</span> donut;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>donuts array:</strong> [“jelly donut”, “chocolate donut”, “glazed donut”]<br><strong>improvedDonuts array:</strong> [“JELLY DONUT HOLE”, “CHOCOLATE DONUT HOLE”, “GLAZED DONUT HOLE”]</p></blockquote><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sister = &#123;</span><br><span class="line">  name: <span class="string">"Sarah"</span>,</span><br><span class="line">  age: <span class="number">23</span>,</span><br><span class="line">  parents: [ <span class="string">"alice"</span>, <span class="string">"andy"</span> ],</span><br><span class="line">  siblings: [<span class="string">"julia"</span>],</span><br><span class="line">  favoriteColor: <span class="string">"purple"</span>,</span><br><span class="line">  pets: <span class="literal">true</span>,</span><br><span class="line">  paintPicture: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">"Sarah paints!"</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">sister.paintPicture();</span><br></pre></td></tr></table></figure><blockquote><p><strong>Returns</strong>: “Sarah paints!”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Fullstack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lambda expression in C++</title>
      <link href="/Backend/c++/lambda-expression-in-C.html"/>
      <url>/Backend/c++/lambda-expression-in-C.html</url>
      
        <content type="html"><![CDATA[<p>There are three ways to call the function.</p><ul><li>Just call</li><li>Function pointer</li><li>Lambda expression</li></ul><h2 id="Just-call"><a href="#Just-call" class="headerlink" title="Just call"></a>Just call</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> foo(<span class="keyword">size_t</span> aValue) &#123;</span><br><span class="line">    <span class="keyword">return</span> rand() % <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Container</span> &#123;</span></span><br><span class="line">    Container() &#123;</span><br><span class="line">        values.push_back(<span class="number">10</span>);</span><br><span class="line">        values.push_back(<span class="number">20</span>);</span><br><span class="line">        values.push_back(<span class="number">30</span>);</span><br><span class="line">        values.push_back(<span class="number">40</span>);</span><br><span class="line">        values.push_back(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eachFrom</span><span class="params">(<span class="keyword">size_t</span> anIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> ((anIndex = foo(values[anIndex]))) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; values[anIndex] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    Container theContainer;</span><br><span class="line">    theContainer.eachFrom(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Function-pointer"><a href="#Function-pointer" class="headerlink" title="Function pointer"></a>Function pointer</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Container</span> &#123;</span></span><br><span class="line">    Container() &#123;</span><br><span class="line">        values.push_back(<span class="number">10</span>);</span><br><span class="line">        values.push_back(<span class="number">20</span>);</span><br><span class="line">        values.push_back(<span class="number">30</span>);</span><br><span class="line">        values.push_back(<span class="number">40</span>);</span><br><span class="line">        values.push_back(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> EachVisitor = <span class="built_in">std</span>::function&lt;<span class="keyword">size_t</span>(<span class="keyword">size_t</span>)&gt;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eachFrom</span><span class="params">(<span class="keyword">size_t</span> anIndex, EachVisitor aVisitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> ((anIndex = aVisitor(values[anIndex]))) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; values[anIndex] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> foo(<span class="keyword">size_t</span> aValue) &#123;</span><br><span class="line">    <span class="keyword">return</span> rand() % <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    Container theContainer;</span><br><span class="line">    theContainer.eachFrom(<span class="number">1</span>, foo);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lambda-expression"><a href="#Lambda-expression" class="headerlink" title="Lambda expression"></a>Lambda expression</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Container</span> &#123;</span></span><br><span class="line">    Container() &#123;</span><br><span class="line">        values.push_back(<span class="number">10</span>);</span><br><span class="line">        values.push_back(<span class="number">20</span>);</span><br><span class="line">        values.push_back(<span class="number">30</span>);</span><br><span class="line">        values.push_back(<span class="number">40</span>);</span><br><span class="line">        values.push_back(<span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> EachVisitor = <span class="built_in">std</span>::function&lt;<span class="keyword">size_t</span>(<span class="keyword">size_t</span>)&gt;;</span><br><span class="line">    <span class="keyword">size_t</span> eachFrom(<span class="keyword">size_t</span> anIndex, EachVisitor aVisitor) &#123;</span><br><span class="line">        <span class="keyword">while</span>((anIndex = aVisitor(values[anIndex]))) &#123;</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"value"</span> &lt;&lt; values[anIndex] &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; values;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>)); </span><br><span class="line">    Container theContainer;</span><br><span class="line">    theContainer.eachFrom(<span class="number">1</span>, [&amp;](<span class="keyword">size_t</span> aValue) &#123;<span class="keyword">return</span> rand() % <span class="number">5</span>;&#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Two pointers</title>
      <link href="/LeetCode/Two-pointers.html"/>
      <url>/LeetCode/Two-pointers.html</url>
      
        <content type="html"><![CDATA[<h2 id="Trap-Rain-Water-LeetCode-42"><a href="#Trap-Rain-Water-LeetCode-42" class="headerlink" title="Trap Rain Water(LeetCode 42)"></a>Trap Rain Water(LeetCode 42)</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Given <code>n</code> non-negative integers representing an elevation map where the width of each bar is <code>1</code>, compute how much water it can trap after raining. </p><p><img src="https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]</span><br><span class="line">Output: 6</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Brute-force"><a href="#Brute-force" class="headerlink" title="Brute force"></a>Brute force</h4><p>For every position, find <code>left_max</code> and <code>right_max</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(1) space</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">      <span class="keyword">if</span> height <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(height)):</span><br><span class="line">            left_max, right_max = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">                left_max = max(left_max, height[j])</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> range(i, len(height)):</span><br><span class="line">                right_max = max(right_max, height[k])</span><br><span class="line">            ans += min(left_max, right_max) - height[i]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h4 id="Dynamic-programming"><a href="#Dynamic-programming" class="headerlink" title="Dynamic programming"></a>Dynamic programming</h4><p>We can find that we don’t need to find <code>left_max</code> and <code>right_max</code> at every position. We can traverse the list and store them. Although we improved the time complexity, we use more space than brute force. This is also not a good way.</p><p><img src="https://leetcode.com/problems/trapping-rain-water/Figures/42/trapping_rain_water.png" alt></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> height <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        theSize = len(height)</span><br><span class="line">        left_max, right_max = [height[<span class="number">0</span>]] * theSize, [height[theSize - <span class="number">1</span>]] * theSize</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, theSize):</span><br><span class="line">            left_max[i] = max(height[i], left_max[i - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(theSize - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            right_max[j] = max(height[j], right_max[j + <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, theSize - <span class="number">1</span>):</span><br><span class="line">            ans += min(left_max[k], right_max[k]) - height[k]</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><h4 id="Two-pointers"><a href="#Two-pointers" class="headerlink" title="Two pointers"></a>Two pointers</h4><p>The best way for this question is using two pointers, which is also a good way for some array questions. If we don’t want to preserve the data like in dynamic programming way, we can find a way to get the <code>left_max</code> and <code>right_max</code> during the for loop.</p><p>Firstly, set the <code>leftId</code> and <code>rightId</code> as 0, and size. Then, set the <code>left_max</code> and <code>right_max</code> as leftmost value and rightmost value. We should know that we only use the minimum of <code>left_max</code> and <code>right_max</code>, so we should start with smaller side. When we found that the current <code>left_max</code> or <code>right_max</code> is larger than another one. We should change to another side. This ensures that we always use the minimun of <code>left_max</code> and <code>right_max</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, height: List[int])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> height:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left, right = <span class="number">0</span>, len(height) - <span class="number">1</span></span><br><span class="line">        left_max, right_max = height[left], height[right]</span><br><span class="line">        water = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            <span class="keyword">if</span> left_max &lt; right_max:</span><br><span class="line">                left_max = max(left_max, height[left])</span><br><span class="line">                water += left_max - height[left]</span><br><span class="line">                left += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                right_max = max(right_max, height[right])</span><br><span class="line">                water += right_max - height[right]</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> water</span><br></pre></td></tr></table></figure><h4 id="Using-stacks"><a href="#Using-stacks" class="headerlink" title="Using stacks"></a>Using stacks</h4><p>This way is not the best and also not easy to understand. The main idea is to track and compute the <code>V</code> shape, because it is only possible to trap vater in <code>V</code> shape.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trap</span><span class="params">(self, heights: List[int])</span> -&gt; int:</span></span><br><span class="line">        stack, trapped_water = [], <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> hi_index, height <span class="keyword">in</span> enumerate(heights):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> height &gt;= heights[stack[<span class="number">-1</span>]]:</span><br><span class="line">                ground_height = heights[stack.pop()]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                     <span class="keyword">continue</span></span><br><span class="line">                lo_index = stack[<span class="number">-1</span>]</span><br><span class="line">                water_line = min(heights[lo_index], height)</span><br><span class="line">                trapped_water += (water_line - ground_height) * (hi_index - lo_index - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            stack.append(hi_index)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> trapped_water</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java Notes 4</title>
      <link href="/Backend/Java/Java-Notes-4.html"/>
      <url>/Backend/Java/Java-Notes-4.html</url>
      
        <content type="html"><![CDATA[<h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><h3 id="What-is-Reflection"><a href="#What-is-Reflection" class="headerlink" title="What is Reflection?"></a>What is Reflection?</h3><p><strong>Reflection</strong>, which is sometimes called <strong>introspection</strong>, is the ability of a program to examine its own structure at runtime.</p><h3 id="Static-vs-Dynamic-Code"><a href="#Static-vs-Dynamic-Code" class="headerlink" title="Static vs Dynamic Code"></a>Static vs Dynamic Code</h3><h4 id="Static-Code"><a href="#Static-Code" class="headerlink" title="Static Code"></a>Static Code</h4><p>Normally, when you write a program, all the class names, method names, and variable names are known <em>statically</em>, when the code is being written and compiled:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Foo myObject = <span class="keyword">new</span> Foo();</span><br></pre></td></tr></table></figure><p>Static code gives you the benefit of <strong>static analysis</strong>, which includes compile-type checking of static symbols like class and method names, and useful IDE features like auto-completion.</p><p>The Java compiler will return an error if you used an invalid class or method name.</p><h4 id="Dynamic-Code"><a href="#Dynamic-Code" class="headerlink" title="Dynamic Code"></a>Dynamic Code</h4><p>You can also create a <code>Foo</code> object <em>without</em> static symbol names. This is sometimes called <em>dynamic</em> coding:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object myObject = Class.forName(<span class="string">"Foo"</span>).getConstructor().newInstance();</span><br></pre></td></tr></table></figure><p>Writing this kind of code, you won’t get any static or compile-time checks to make sure you got the class name correct. If you run this code and there is no class named “Foo”, a <code>ClassNotFoundException</code> will be thrown.</p><h3 id="What-are-Annotations"><a href="#What-are-Annotations" class="headerlink" title="What are Annotations?"></a>What are Annotations?</h3><p><strong>Annotations</strong> are a way to provide extra metadata about your program. Annotations only provide metadata — they have no other effect on execution of the annotated code.</p><h4 id="Common-built-in-annotations"><a href="#Common-built-in-annotations" class="headerlink" title="Common built-in annotations"></a>Common built-in annotations</h4><table><thead><tr><th>Annotations</th><th>Description</th></tr></thead><tbody><tr><td><code>@Override</code></td><td>Tells the compuler that a method is inteded to iverride a superclass method.</td></tr><tr><td><code>@Deprecated</code></td><td>Indicated that a method is deprecated an should not be used. Using it will result in a compiler warning.</td></tr><tr><td><code>@FunctionalInterface</code></td><td>Tells the compuler that the annotated interface is intended to be a functional interface.</td></tr><tr><td><code>@SuppressWarnings</code></td><td>Stops the compuler from generating warnings such as for type casting or deprecation warnings.</td></tr></tbody></table><h3 id="Defining-custom-annotations"><a href="#Defining-custom-annotations" class="headerlink" title="Defining custom annotations"></a>Defining custom annotations</h3><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)  <span class="comment">// Applies to class, interface, or enum</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConvertsTo &#123;</span><br><span class="line">  Class&lt;?&gt; targetClass();</span><br><span class="line">  <span class="function">String <span class="title">setterPrefix</span><span class="params">()</span> <span class="keyword">default</span> "set"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Test &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Retention-Policies"><a href="#Retention-Policies" class="headerlink" title="Retention Policies"></a>Retention Policies</h4><p>Here are the possible retention policies for an annotation:</p><table><thead><tr><th align="left"><strong>Retention Policy</strong></th><th align="left"><strong>Description</strong></th></tr></thead><tbody><tr><td align="left"><code>SOURCE</code></td><td align="left">Annotation only exists in the source code.</td></tr><tr><td align="left"><code>RUNTIME</code></td><td align="left">Annotation exists in the .class bytecode file and is available at runtime to be used with reflection.</td></tr><tr><td align="left"><code>CLASS</code></td><td align="left">Annotation exists in the <code>.class</code> bytecode file but not exist while the program is running.</td></tr></tbody></table><h4 id="Annotation-Targets"><a href="#Annotation-Targets" class="headerlink" title="Annotation Targets"></a>Annotation Targets</h4><p>The target types determine which parts of the program can be given a particular annotation. Here are the possible target types:</p><table><thead><tr><th align="left"><strong>Element Type</strong></th><th align="left"><strong>Description</strong></th></tr></thead><tbody><tr><td align="left"><code>ANNOTATION_TYPE</code></td><td align="left">Annotation type declarations (for annotations that apply to other annotations).</td></tr><tr><td align="left"><code>CONSTRUCTOR</code></td><td align="left">Constructor declarations</td></tr><tr><td align="left"><code>FIELD</code></td><td align="left">Field declarations, including enum constants.</td></tr><tr><td align="left"><code>LOCAL_VARIABLE</code></td><td align="left">Local variable declarations.</td></tr><tr><td align="left"><code>METHOD</code></td><td align="left">Method declarations.</td></tr><tr><td align="left"><code>PACKAGE</code></td><td align="left">Package declarations.</td></tr><tr><td align="left"><code>PARAMETER</code></td><td align="left">Method parameter declarations.</td></tr><tr><td align="left"><code>TYPE</code></td><td align="left">Type declarations, such as classes, interfaces, annotation types, and enum declarations.</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Test &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reflection-API"><a href="#Reflection-API" class="headerlink" title="Reflection API"></a>Reflection API</h3><p>Every class, interface, and type (including primitive types) has a corresponding <code>Class</code> object that accesses metadata about that type.</p><p><code>Class</code> objects are the main entry point into Java’s <strong>Reflection API</strong>.</p><h4 id="Obtaining-Class-Objects"><a href="#Obtaining-Class-Objects" class="headerlink" title="Obtaining Class Objects"></a>Obtaining <code>Class</code> Objects</h4><p>There are many ways to get <code>Class</code> objects:</p><ul><li><p>Call <code>getClass()</code> on an object:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;String&gt; c = <span class="string">"Hello world!"</span>.getClass();</span><br></pre></td></tr></table></figure></li><li><p>Use <code>.class</code> to create a class literal:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;String&gt; c = String.class;</span><br><span class="line">Class&lt;<span class="keyword">int</span>[]&gt;  c = <span class="keyword">int</span>[].class;</span><br></pre></td></tr></table></figure></li><li><p>Create classes dynamically using <code>Class.forName()</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;String&gt; c = Class.forName(<span class="string">"java.lang.String"</span>);</span><br></pre></td></tr></table></figure></li></ul><h4 id="Working-with-Methods"><a href="#Working-with-Methods" class="headerlink" title="Working with Methods"></a>Working with Methods</h4><p>Using the <code>Class</code> API, you can also obtain <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/reflect/Method.html" target="_blank" rel="noopener"><code>Method</code></a> objects.</p><p><code>Method</code>s have some smiliar functionality as <code>Class</code>es, such as finding annotations and listing qualifiers, but methods can also be invoked by calling <code>Method.invoke()</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Method m = String.class.getMethod(<span class="string">"equals"</span>, Object.class);</span><br><span class="line">m.invoke(<span class="string">"foo"</span>, <span class="string">"bar"</span>);</span><br><span class="line"><span class="comment">// This is the same as `"foo".equals("bar")` return false</span></span><br></pre></td></tr></table></figure><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;Class&lt;?&gt;&gt; TESTS = List.of(CalculatorTest.class);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; passed = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;String&gt; failed = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Class&lt;?&gt; klass : TESTS) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!UnitTest.class.isAssignableFrom(klass)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Class "</span> + klass.toString() + <span class="string">" must implement UnitTest"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (Method method : klass.getDeclaredMethods()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (method.getAnnotation(Test.class) != <span class="keyword">null</span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            UnitTest test = (UnitTest) klass.getConstructor().newInstance();</span><br><span class="line">            test.beforeEachTest();</span><br><span class="line">            method.invoke(test);</span><br><span class="line">            test.afterEachTest();</span><br><span class="line">            passed.add(getTestName(klass, method));</span><br><span class="line">          &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            failed.add(getTestName(klass, method));</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"Passed tests: "</span> + passed);</span><br><span class="line">    System.out.println(<span class="string">"FAILED tests: "</span> + failed);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getTestName</span><span class="params">(Class&lt;?&gt; klass, Method method)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> klass.getName() + <span class="string">"#"</span> + method.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kadane&#39;s Algorithm</title>
      <link href="/LeetCode/Kadane&#39;s%20Algorithm.html"/>
      <url>/LeetCode/Kadane&#39;s%20Algorithm.html</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Write a function that takes in a non-empty array of integers an returns the maximum sum that can be obtained by summing up all of the integers in a non empty sunarray of the input array. A subarray must only contain adjacent numbers.</p><h3 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array = [<span class="number">3</span>, <span class="number">5</span>, <span class="number">-9</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">-2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">-9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">-5</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">19</span> // [<span class="number">1</span>, <span class="number">3</span>, <span class="number">-2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">-9</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>The reason why this question is not that straightforward is that there exists negative number in the array. If the negative number is small enough, we need to discard all preceding numbers and it.</p><p>Compare the sum ending here with the number here. Save the bigger number as <code>maxEndingHere</code>. If the number here is negative and small enough, we just save the next number. </p><p>Compare all the <code>maxEndingHere</code>, the maximum <code>maxSoFar</code> will be the final result.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">kadanesAlgorithm</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Find the maximum sum that can be obtained by </span></span><br><span class="line"><span class="string">    all of the integers of the subarray of input array.</span></span><br><span class="line"><span class="string">    :param array: an array</span></span><br><span class="line"><span class="string">    :return: the maximum sum</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> isinstance(array, list)</span><br><span class="line"></span><br><span class="line">    maxEndingHere = array[<span class="number">0</span>]</span><br><span class="line">    maxSoFar = array[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(array)):</span><br><span class="line">        num = array[i]</span><br><span class="line">        maxEndingHere = max(maxEndingHere + num, num)</span><br><span class="line">        maxSoFar = max(maxSoFar, maxEndingHere)</span><br><span class="line">    <span class="keyword">return</span> maxSoFar</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Connect different classes in C++</title>
      <link href="/Backend/c++/Connect-different-classes-in-C.html"/>
      <url>/Backend/c++/Connect-different-classes-in-C.html</url>
      
        <content type="html"><![CDATA[<h2 id="Problem-description"><a href="#Problem-description" class="headerlink" title="Problem description"></a>Problem description</h2><p>How to connect different classes, but they don’t know each other?</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="IMessenger-Interface"><a href="#IMessenger-Interface" class="headerlink" title="IMessenger Interface"></a>IMessenger Interface</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">IMessenger</span> &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setOther</span><span class="params">(IMessenger *anOther)</span> </span>&#123;other=anOther;&#125;</span><br><span class="line">    </span><br><span class="line">    IMessenger* other;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Two-class"><a href="#Two-class" class="headerlink" title="Two class"></a>Two class</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> :</span> <span class="keyword">public</span> IMessenger &#123;</span><br><span class="line">    A() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tell</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> override </span>&#123;</span><br><span class="line">        other-&gt;receive(aMsg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"A got "</span> &lt;&lt; aMsg &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">B</span> :</span> <span class="keyword">public</span> IMessenger &#123;</span><br><span class="line">    B() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tell</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> override </span>&#123;</span><br><span class="line">        other-&gt;receive(aMsg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">receive</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;aMsg)</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"B got "</span> &lt;&lt; aMsg &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    A theA;</span><br><span class="line">    B theB;</span><br><span class="line">    theA.setOther(&amp;theB);</span><br><span class="line">    theB.setOther(&amp;theA);</span><br><span class="line">    theA.tell(<span class="string">"Hello world!"</span>);</span><br><span class="line">    theB.tell(<span class="string">"Happy everyday!"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// output:</span></span><br><span class="line"><span class="comment">// B got Hello world!</span></span><br><span class="line"><span class="comment">// A got Happy everyday!</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sorting</title>
      <link href="/LeetCode/Sorting.html"/>
      <url>/LeetCode/Sorting.html</url>
      
        <content type="html"><![CDATA[<h2 id="Three-Number-Sort"><a href="#Three-Number-Sort" class="headerlink" title="Three Number Sort"></a>Three Number Sort</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>The order is an array of three distinct integers. The first array is guaranteed to only contain integers that are in the second array, and the second array represents a desired order for the integers in the first array.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sample input</span></span><br><span class="line">array = [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">order = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample output</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Bucket-sort"><a href="#Bucket-sort" class="headerlink" title="Bucket sort"></a>Bucket sort</h4><p>Traverse the array two times. Get the number of each elements in the order in the  first time. Set the number in the array in the second time.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeNumberSort</span><span class="params">(array, order)</span>:</span></span><br><span class="line">    buckets = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">buckets[order.index(i)] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line"><span class="keyword">if</span> i &lt; buckets[<span class="number">0</span>]: </span><br><span class="line">array[i] = order[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">elif</span> i &lt; buckets[<span class="number">0</span>] + buckets[<span class="number">1</span>]:</span><br><span class="line">array[i] = order[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">array[i] = order[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><h4 id="Two-pointers"><a href="#Two-pointers" class="headerlink" title="Two pointers"></a>Two pointers</h4><p>Still traverse two times using two pointers.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"> ^  ^      </span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ^  ^ </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ^          ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">               ^        ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">           ^         ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">          ^         ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line"> ^              ^</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeNumberSort</span><span class="params">(array, order)</span>:</span></span><br><span class="line">    Idx = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line"><span class="keyword">if</span> array[i] == order[<span class="number">0</span>]:</span><br><span class="line">array[Idx], array[i] = array[i], array[Idx]</span><br><span class="line">Idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">Idy = len(array) - <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len(array))):</span><br><span class="line"><span class="keyword">if</span> array[i] == order[<span class="number">-1</span>]:</span><br><span class="line">array[Idy], array[i] = array[i], array[Idy]</span><br><span class="line">Idy -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><h4 id="Three-pointers"><a href="#Three-pointers" class="headerlink" title="Three pointers"></a>Three pointers</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"> ^  ^                   ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    ^  ^                ^      </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">       ^   ^            ^   </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^  ^         ^  </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^      ^     ^  </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^     ^  ^  </span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^        ^ </span><br><span class="line">                ^</span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>]</span><br><span class="line">       ^        ^   ^</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">threeNumberSort</span><span class="params">(array, order)</span>:</span></span><br><span class="line">    Idx0, Idx1, Idx2 = <span class="number">0</span>, <span class="number">0</span>, len(array) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> Idx1 &lt;= Idx2:</span><br><span class="line">value = array[Idx1]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> value == order[<span class="number">0</span>]:</span><br><span class="line">array[Idx0], array[Idx1] = array[Idx1], array[Idx0]</span><br><span class="line">Idx0 += <span class="number">1</span></span><br><span class="line">Idx1 += <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> value == order[<span class="number">1</span>]:</span><br><span class="line">Idx1 += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">array[Idx1], array[Idx2] = array[Idx2], array[Idx1]</span><br><span class="line">Idx2 -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><h2 id="Search-in-Sorted-Matrix"><a href="#Search-in-Sorted-Matrix" class="headerlink" title="Search in Sorted Matrix"></a>Search in Sorted Matrix</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">matrix = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">1000</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">5</span>, <span class="number">19</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1001</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">33</span>, <span class="number">35</span>, <span class="number">1002</span>],</span><br><span class="line">  [<span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">1003</span>],</span><br><span class="line">  [<span class="number">99</span>, <span class="number">100</span>, <span class="number">103</span>, <span class="number">106</span>, <span class="number">128</span>, <span class="number">1004</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">target = <span class="number">44</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># output = [3, 3]</span></span><br></pre></td></tr></table></figure><p>If the matrix does not contain the integer, return [-1, -1].</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">searchInSortedMatrix</span><span class="params">(matrix, target)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    search the target  number in a sorted matrix</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param matrix: a two dimensional array of distinct integers. each row is sorted; each column is sorted</span></span><br><span class="line"><span class="string">    :param target: a target integer</span></span><br><span class="line"><span class="string">    :return: an array of the row and column indices of the target integer</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">assert</span> isinstance(matrix, list)</span><br><span class="line">    <span class="keyword">assert</span> isinstance(target, int)</span><br><span class="line"></span><br><span class="line">    row = <span class="number">0</span></span><br><span class="line">    column = len(matrix[<span class="number">0</span>]) - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> row &lt; len(matrix) <span class="keyword">and</span> column &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> matrix[row][column] &gt; target:</span><br><span class="line">            column -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> matrix[row][column] &lt; target:</span><br><span class="line">            row += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> [row, column]</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">-1</span>, <span class="number">-1</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c++多层Switch简化</title>
      <link href="/Backend/c++/c-%E5%A4%9A%E5%B1%82Switch%E7%AE%80%E5%8C%96.html"/>
      <url>/Backend/c++/c-%E5%A4%9A%E5%B1%82Switch%E7%AE%80%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h2 id="如何简化多层switch条件判断"><a href="#如何简化多层switch条件判断" class="headerlink" title="如何简化多层switch条件判断"></a>如何简化多层switch条件判断</h2><h3 id="Logic-before"><a href="#Logic-before" class="headerlink" title="Logic before"></a>Logic before</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(type) &#123;</span><br><span class="line">      <span class="keyword">case</span>(Bird):</span><br><span class="line">      <span class="keyword">switch</span>(color) &#123;</span><br><span class="line">        <span class="keyword">case</span> Red: ...</span><br><span class="line">          <span class="keyword">case</span> Blue ...</span><br><span class="line">      <span class="keyword">case</span> Fox ...</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Simplify"><a href="#Simplify" class="headerlink" title="Simplify"></a>Simplify</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span>  &#123;</span>Red, Blue, End_&#125;;</span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span>Bird, Fox, Lizard, End_&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> Enum&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_t <span class="title">enumValue</span><span class="params">(Enum aValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;<span class="keyword">size_t</span>&gt;(aValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Enum&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_t <span class="title">param</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> enumValue(Enum::End_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Just like a hash map</span></span><br><span class="line"><span class="comment">// Map every situation to an int</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Enum1, <span class="keyword">typename</span> Enum2&gt;</span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> size_t <span class="title">combineEnums</span><span class="params">(Enum1 e1, Enum2 e2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> enumValue(e1) + param&lt;Enum1&gt;() * enumValue(e2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> theC1 = combineEnums(Color::Red, Animal::Lizard);</span><br><span class="line">    <span class="keyword">switch</span>(theC1) &#123;</span><br><span class="line">        case combineEnums(Color::Red, Animal::Bird):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Red Bird\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Red, Animal::Fox):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Red Fox\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Red, Animal::Lizard):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Red Lizard\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Blue, Animal::Bird):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Blue Bird\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Blue, Animal::Fox):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Blue Fox\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        case combineEnums(Color::Blue, Animal::Lizard):</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Blue Lizard\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structure</title>
      <link href="/Data%20Structure/Data-Structure.html"/>
      <url>/Data%20Structure/Data-Structure.html</url>
      
        <content type="html"><![CDATA[<h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gyrm73geuxj319q0u041v.jpg" alt="image-20220126100207323"></p><h3 id="Bit"><a href="#Bit" class="headerlink" title="Bit"></a>Bit</h3><p>Short for binary digit. It represents <code>0</code> and <code>1</code>.</p><h3 id="Byte"><a href="#Byte" class="headerlink" title="Byte"></a>Byte</h3><p>A group of <code>8</code> bits. For example, <code>01101000</code> is a byte.</p><p>A single byte can represent up to <code>256</code> data values($2^8$).</p><h3 id="Fixed-width-integer"><a href="#Fixed-width-integer" class="headerlink" title="Fixed-width integer"></a>Fixed-width integer</h3><p>An integer represented by a fixed amount of bits. For example, a 32-bit integer is an an integer represented by <code>32</code> bits(<code>4</code> bytes), and a 64-bit integer is an integer represented by <code>64</code> bits(<code>8</code> bytes).</p><h3 id="Memory-1"><a href="#Memory-1" class="headerlink" title="Memory"></a>Memory</h3><ul><li>Data stored in memory is stored in bytes and, by extension, bits.</li><li>Bytes in memory can point to other bytes in memory, so as to store references to other data.</li><li>The amount of memory that a machine has is bounded, making it valuable to limit how much memory an algorithm takes up.</li><li>Accessing a byte or a fixed number of bytesis an elementary operation.</li></ul><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>The following are an array’s standard operations and their corresponding time complexities:</p><ol><li>Accessing a value at a given index: <code>O(1)</code></li><li>Updating a value at a given index: <code>O(1)</code></li><li>Inserting a value at the beginning: <code>O(n)</code></li><li>Inserting a value in the middle: <code>O(n)</code></li><li>Inserting a value at the end: <code>O(1)</code> for dynamic array; <code>O(n)</code> for static array</li><li>Removing a value at the beginning: <code>O(n)</code></li><li>Removing a value in the middle: <code>O(n)</code></li><li>Removing a value at the end: <code>O(1)</code></li><li>Copying the array: <code>O(n)</code></li></ol><blockquote><p>A static array is an implementation of an array that allocates a fixed amount of memory to be used for storing the array’s values. Appending values to the array therefor involves copying the entire array and allocating new memory for it. This is a linear time operation.</p><p>A lot of popular programming languages like JavaScript and Python implement arrays as dynamic arrays.</p></blockquote><h2 id="Linked-Lists"><a href="#Linked-Lists" class="headerlink" title="Linked Lists"></a>Linked Lists</h2><h3 id="Singly-Linked-Lists"><a href="#Singly-Linked-Lists" class="headerlink" title="Singly Linked Lists"></a>Singly Linked Lists</h3><p>A linked list node’s value and next node are typically stored in <code>value</code> and <code>next</code> properties.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7 -&gt; null</span><br></pre></td></tr></table></figure><p>A singly linked list typically exposes its head to its user for easy access. While finding a node in a singly linked list involves traversing through all of the nodes leading up to the node in question (as opposed to instant access with an array).</p><ol><li>Accessing the head: <code>O(1)</code></li><li>Accessing the tail: <code>O(n)</code></li><li>Accessing the middle node: <code>O(n)</code></li><li>Inserting/Removing the head: <code>O(1)</code></li><li>Inserting/Removing the tail: <code>O(n)</code> + <code>O(1)</code></li><li>Inserting/Removing a middle node: <code>O(n)</code> + <code>O(1)</code></li><li>Searching for a value: <code>O(n)</code></li></ol><h3 id="Doubly-Linked-List"><a href="#Doubly-Linked-List" class="headerlink" title="Doubly Linked List"></a>Doubly Linked List</h3><p>A doubly linked list also has a pointer to the previous node in the linked list. THe previous node is typically stored in a <code>prev</code> property.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">null &lt;- 0 &lt;-&gt; 1 &lt;-&gt; 2 &lt;-&gt; 3 &lt;-&gt; 4 &lt;-&gt; 5 &lt;-&gt; 6 &lt;-&gt; 7 -&gt; null</span><br></pre></td></tr></table></figure><p>The doubly linked list typically exposes both its head an tail to its user.</p><ol><li>Accessing the head: <code>O(1)</code></li><li>Accessing the tail: <code>O(1)</code></li><li>Accessing the middle node: <code>O(n)</code></li><li>Inserting/Removing the head: <code>O(1)</code></li><li>Inserting/Removing the tail:  <code>O(1)</code></li><li>Inserting/Removing a middle node: <code>O(n)</code> + <code>O(1)</code></li><li>Searching for a value: <code>O(n)</code></li></ol><h2 id="Hash-Tables"><a href="#Hash-Tables" class="headerlink" title="Hash Tables"></a>Hash Tables</h2><p>Under the hood, a hash table uses a dynamic array of linked lists to efficiently store key/value pairs. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0: (value1, key1) -&gt; null</span><br><span class="line">1: (value2, key2) -&gt; (value3, key3) -&gt; (value4, key4)</span><br><span class="line">2: (value5, key5) -&gt; null</span><br><span class="line">3: (value6, key6) -&gt; null</span><br><span class="line">4: null</span><br><span class="line">5: (value7, key7) -&gt; (value8, key8)</span><br><span class="line">6: (value9, key9) -&gt; null</span><br></pre></td></tr></table></figure><p>Hash table rely on highly optimized hash functions to minimize the number of <code>collisions</code> than occur when storing values: cases where two keys map to the same index.</p><ol><li>Inserting a key/value pair: <code>O(1)</code> on average; <code>O(n)</code> in the worse case</li><li>Removing a key/value pair: <code>O(1)</code> on average; <code>O(n)</code> in the worse case</li><li>Looking up a key: <code>O(1)</code> on average; <code>O(n)</code> in the worse case</li></ol><p>The worst-case linear time operations occur when a hash table experiences a lot of collisions, leading to long linked lists internally, which take <code>O(n)</code> time to traverse.</p><p>However, in practice and especially in coding interviews, we typically assume that the hash functions employed by hash tables are so optimized that collisions are extremely rare and constant-time operations are all but guaranteed.</p><h2 id="Stacks-and-Queues"><a href="#Stacks-and-Queues" class="headerlink" title="Stacks and Queues"></a>Stacks and Queues</h2><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>An array-like data structure whose elements follow the <code>LIFO</code> rule: Last In, First Out.</p><p>A stack is typically implemented with a <code>dynamic array</code>.</p><ol><li>Push an element onto the stack: <code>O(1)</code></li><li>Hoping an element onto the stack: <code>O(1)</code></li><li>Peeking at the element on the top of the stack: <code>O(1)</code></li><li>Searching for an element in the stack: <code>O(n)</code></li></ol><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>An array-like data structure whose elements follow the <code>FIFO</code> rule: First In, First Out.</p><p>A queue is typically implemented with a doubly linked list.</p><ol><li>Enqueuing an element into the queue: <code>O(1)</code></li><li>Dequeuing an element out of the queue: <code>O(1)</code></li><li>Peeking at the element ar the front of the queue: <code>O(1)</code></li><li>Searching for an lement in the queue: <code>O(n)</code></li></ol><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>Strings are stored in memory as arrays of integers, where each character in a given string is mapped to an integer via some characer encoding standard like <code>ASCII</code>.</p><p>If the character is encoded in ASCII, it requires one byte. 1 byte(256) can cover all of the English characters. </p><p>Stri ngs behave much like normal arrays. In most programming languages(<code>C++</code> is a notable exception), strings are immutable, meaning that they can’t be edited after creation. This also means that simple operations like appending a chracter to a string are more expensive than they might appear.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"this is a string"</span></span><br><span class="line">newString = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> character <span class="keyword">in</span> string:</span><br><span class="line">newString += character</span><br></pre></td></tr></table></figure><p>The operation above has a time complexity of <code>O(n2)</code> where n is the length of string, because each addition of a character to newString creates an entirely new string and is itself an <code>O(n)</code> operation. </p><h2 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h2><p>A collection of nodes or values called vertices that might be related; relations between vertices are called edges.</p><h3 id="Graph-cycle"><a href="#Graph-cycle" class="headerlink" title="Graph cycle"></a>Graph cycle</h3><p>A cycle occurs in a graph when three or more vertices in the graph are connected so as to form a closed loop</p><ul><li>Acyclic graph: A graph that has no cycles.</li><li>Cyclic graph: A graph that has at least one cycle.</li></ul><h3 id="Directed-and-undirected-graph"><a href="#Directed-and-undirected-graph" class="headerlink" title="Directed and undirected graph"></a>Directed and undirected graph</h3><ul><li>Directed graph: they can only be reversed in one direction, which is specified.</li><li>Undirected graph: they can be traversed in both directions.</li></ul><h3 id="Connected-graph"><a href="#Connected-graph" class="headerlink" title="Connected graph"></a>Connected graph</h3><p>A graph is connected if for every pair of vertices in the graph, there is a path of one or more edges connecting the given vertices.</p>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Reverse Integer</title>
      <link href="/LeetCode/Reverse-Integer.html"/>
      <url>/LeetCode/Reverse-Integer.html</url>
      
        <content type="html"><![CDATA[<h2 id="Reverse-Integer"><a href="#Reverse-Integer" class="headerlink" title="Reverse Integer"></a>Reverse Integer</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Given a signed 32-bit integer <code>x</code>, return <code>x</code> <em>with its digits reversed</em>. If reversing <code>x</code> causes the value to go outside the signed 32-bit integer range $[-2^{31}, 2^{31} - 1]$, then return $0$.</p><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 123</span><br><span class="line">Output: 321</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: x = -123</span><br><span class="line">Output: -321</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 120</span><br><span class="line">Output: 21</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time complexity: O(log10(n))</span></span><br><span class="line"><span class="comment"># Space complexity: O(1)  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, x: int)</span> -&gt; int:</span></span><br><span class="line">        result = <span class="number">0</span></span><br><span class="line">        INT_MAX = <span class="number">2</span>**<span class="number">31</span><span class="number">-1</span></span><br><span class="line">        INT_MIN = <span class="number">-2</span>**<span class="number">31</span></span><br><span class="line">        <span class="keyword">while</span> x != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> x &gt; <span class="number">0</span>: </span><br><span class="line">                remain = x % <span class="number">10</span></span><br><span class="line">                x //= <span class="number">10</span></span><br><span class="line">            <span class="keyword">else</span>: </span><br><span class="line">                remain = x % <span class="number">-10</span></span><br><span class="line">                x = -(x//<span class="number">-10</span>)</span><br><span class="line">            <span class="keyword">if</span> result &gt; INT_MAX / <span class="number">10</span> <span class="keyword">or</span> (result == INT_MAX // <span class="number">10</span> <span class="keyword">and</span> remain &gt; <span class="number">7</span>): <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> result &lt; INT_MIN / <span class="number">10</span> <span class="keyword">or</span> (result == INT_MIN // <span class="number">10</span> <span class="keyword">and</span> remain &lt; <span class="number">-8</span>): <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            result = result * <span class="number">10</span> + remain</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><blockquote><p>python的取余和java并不一样，<a href="https://zhuanlan.zhihu.com/p/70819721" target="_blank" rel="noopener">一篇很好的解释文章</a></p></blockquote><h2 id="Palindrome-Number"><a href="#Palindrome-Number" class="headerlink" title="Palindrome Number"></a>Palindrome Number</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 121</span><br><span class="line">Output: true</span><br><span class="line">Explanation: 121 reads as 121 from left to right and from right to left.</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: x = -121</span><br><span class="line">Output: false</span><br><span class="line">Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.</span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time complexity: O(log10(n))</span></span><br><span class="line"><span class="comment"># Space complexity: O(1)  </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(self, x: int)</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> x &lt; <span class="number">0</span> <span class="keyword">or</span> (x % <span class="number">10</span> == <span class="number">0</span> <span class="keyword">and</span> x != <span class="number">0</span>): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        reversedNumber = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> x &gt; reversedNumber:</span><br><span class="line">            reversedNumber = reversedNumber * <span class="number">10</span> + x % <span class="number">10</span></span><br><span class="line">            x = x // <span class="number">10</span></span><br><span class="line">        <span class="keyword">return</span> reversedNumber == x <span class="keyword">or</span> x == reversedNumber // <span class="number">10</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linked list</title>
      <link href="/LeetCode/Linked-list.html"/>
      <url>/LeetCode/Linked-list.html</url>
      
        <content type="html"><![CDATA[<h2 id="Merge-Tow-Sorted-Lists"><a href="#Merge-Tow-Sorted-Lists" class="headerlink" title="Merge Tow Sorted Lists"></a>Merge Tow Sorted Lists</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: list1 = [1,2,4], list2 = [1,3,4]</span><br><span class="line">Output: [1,1,2,3,4,4]</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time complexity: O(n + m)</span></span><br><span class="line"><span class="comment"># Space complexity: O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">mergeTwoLists</span><span class="params">(self, list1: Optional[ListNode], list2: Optional[ListNode])</span> -&gt; Optional[ListNode]:</span></span><br><span class="line">        prehead = ListNode(<span class="number">-1</span>)</span><br><span class="line">        result = prehead</span><br><span class="line">        <span class="keyword">while</span> list1 <span class="keyword">and</span> list2:</span><br><span class="line">            <span class="keyword">if</span> list1.val &lt;= list2.val:</span><br><span class="line">                result.next = list1</span><br><span class="line">                list1 = list1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result.next = list2</span><br><span class="line">                list2 = list2.next</span><br><span class="line">            result = result.next</span><br><span class="line">        result.next = list1 <span class="keyword">if</span> list1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> list2</span><br><span class="line">        <span class="keyword">return</span> prehead.next</span><br></pre></td></tr></table></figure><h2 id="Sum-of-Linked-Lists"><a href="#Sum-of-Linked-Lists" class="headerlink" title="Sum of Linked Lists"></a>Sum of Linked Lists</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">linkedListOne = 2 -&gt; 4 -&gt; 7 -&gt; 1</span><br><span class="line">linkedListTwo = 9 -&gt; 4 -&gt; 5</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line">// linkedListOne represents <span class="number">1742</span></span><br><span class="line">// linkedListTwo represents <span class="number">549</span></span><br><span class="line">// <span class="number">1742</span> + <span class="number">549</span> = <span class="number">2291</span></span><br><span class="line">1 -&gt; 9 -&gt; 2 -&gt; 2</span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is an input class. Do not edit.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># O(max(m, n)) time | O(max(m, n)) space</span></span><br><span class="line"><span class="comment"># For time and space, max(m, n) + 1 (1 is for carry).</span></span><br><span class="line"><span class="comment"># We have to store a new linked list for space.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sumOfLinkedLists</span><span class="params">(linkedListOne, linkedListTwo)</span>:</span></span><br><span class="line">carry = <span class="number">0</span></span><br><span class="line">resultLinkedList = LinkedList(<span class="number">0</span>)</span><br><span class="line">currentNode = resultLinkedList</span><br><span class="line">NodeOne = linkedListOne</span><br><span class="line">NodeTwo = linkedListTwo</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> NodeOne <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> NodeTwo <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">or</span> carry != <span class="number">0</span>:</span><br><span class="line">valueOne = NodeOne.value <span class="keyword">if</span> NodeOne <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">valueTwo = NodeTwo.value <span class="keyword">if</span> NodeTwo <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">sumVal = valueOne + valueTwo + carry</span><br><span class="line"></span><br><span class="line">carry = sumVal // <span class="number">10</span></span><br><span class="line">resultVal = sumVal % <span class="number">10</span></span><br><span class="line"></span><br><span class="line">newNode = LinkedList(resultVal)</span><br><span class="line">currentNode.next = newNode</span><br><span class="line">currentNode = currentNode.next</span><br><span class="line"></span><br><span class="line">NodeOne = NodeOne.next <span class="keyword">if</span> NodeOne <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">NodeTwo = NodeTwo.next <span class="keyword">if</span> NodeTwo <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> resultLinkedList.next</span><br></pre></td></tr></table></figure><h2 id="Remove-Kth-Node-From-End"><a href="#Remove-Kth-Node-From-End" class="headerlink" title="Remove Kth Node From End"></a>Remove Kth Node From End</h2><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">head = 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6</span><br><span class="line">k = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Output</span></span><br><span class="line">0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 6</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is an input class. Do not edit.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.next = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># O(n) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">removeKthNodeFromEnd</span><span class="params">(head, k)</span>:</span></span><br><span class="line">    pointerOne = head</span><br><span class="line">pointerTwo = head</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">pointerTwo = pointerTwo.next</span><br><span class="line"></span><br><span class="line">  <span class="comment"># have to check this, because in the while loop</span></span><br><span class="line">  <span class="comment"># we need to use pointerTwo.next</span></span><br><span class="line">  <span class="comment"># we have to check whether pointerTwo is None...</span></span><br><span class="line"><span class="keyword">if</span> pointerTwo <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">pointerOne.value = pointerOne.next.value</span><br><span class="line">pointerOne.next = pointerOne.next.next</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> pointerTwo.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">pointerOne = pointerOne.next</span><br><span class="line">pointerTwo = pointerTwo.next</span><br><span class="line">pointerOne.next = pointerOne.next.next</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>String</title>
      <link href="/LeetCode/String.html"/>
      <url>/LeetCode/String.html</url>
      
        <content type="html"><![CDATA[<h2 id="Longest-Common-Prefix"><a href="#Longest-Common-Prefix" class="headerlink" title="Longest Common Prefix"></a>Longest Common Prefix</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p><strong>Example 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</span><br><span class="line">Output: &quot;fl&quot;</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</span><br><span class="line">Output: &quot;&quot;</span><br><span class="line">Explanation: There is no common prefix among the input strings.</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Horizontal-scanning"><a href="#Horizontal-scanning" class="headerlink" title="Horizontal scanning"></a>Horizontal scanning</h4><p><img src="https://leetcode.com/media/original_images/14_basic.png" alt="Horizontal scanning"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time Complexity: O(S), where S is the sum of all characters in all strings</span></span><br><span class="line"><span class="comment"># Space Complexity: O(1)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        prefix = strs[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">            <span class="keyword">while</span> s.find(prefix) != <span class="number">0</span>:</span><br><span class="line">                prefix = prefix[<span class="number">0</span>:<span class="number">-1</span>]</span><br><span class="line">                <span class="keyword">if</span> prefix <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> prefix</span><br></pre></td></tr></table></figure><h4 id="Vertical-scanning"><a href="#Vertical-scanning" class="headerlink" title="Vertical scanning"></a>Vertical scanning</h4><p>Imagine a very short string is the common prefix at the end of the array. The above approach will still do S<em>S</em> comparisons. One way to optimize this case is to do vertical scanning. We compare characters from top to bottom on the same column (same character index of the strings) before moving on to the next column.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time Complexity: O(S), where S is the sum of all characters in all strings</span></span><br><span class="line"><span class="comment"># Even though the worst case is still the same as Approach 1, </span></span><br><span class="line"><span class="comment"># in the best case there are at most n minLen comparisons </span></span><br><span class="line"><span class="comment"># where minLen is the length of the shortest string in the array.</span></span><br><span class="line"><span class="comment"># Space Complexity: O(1)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> strs <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> len(strs) == <span class="number">0</span>: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(strs[<span class="number">0</span>])):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, len(strs)):</span><br><span class="line">                <span class="keyword">if</span> i == len(strs[j]) <span class="keyword">or</span> strs[j][i] != strs[<span class="number">0</span>][i]:</span><br><span class="line">                    <span class="keyword">return</span> strs[<span class="number">0</span>][<span class="number">0</span>:i]</span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="Divide-and-conquer"><a href="#Divide-and-conquer" class="headerlink" title="Divide and conquer"></a>Divide and conquer</h4><p><img src="https://leetcode.com/media/original_images/14_lcp_diviso_et_lmpera.png" alt="Divide and conquer"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> self.longestCommonPrefixHelper(strs, <span class="number">0</span>, len(strs) - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefixHelper</span><span class="params">(self, strs: List[str], l: int , r: int)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> l == r:</span><br><span class="line">            <span class="keyword">return</span> strs[l]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            mid = (l + r) // <span class="number">2</span></span><br><span class="line">            lcpLeft = self.longestCommonPrefixHelper(strs, l, mid)</span><br><span class="line">            lcpRight = self.longestCommonPrefixHelper(strs, mid + <span class="number">1</span>, r)</span><br><span class="line">            <span class="keyword">return</span> self.commonPrefix(lcpLeft, lcpRight)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">commonPrefix</span><span class="params">(self, left: str, right: str)</span>:</span></span><br><span class="line">        minLen = min(len(left), len(right))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(minLen):</span><br><span class="line">            <span class="keyword">if</span> left[i] != right[i]:</span><br><span class="line">                <span class="keyword">return</span> left[<span class="number">0</span>:i]</span><br><span class="line">        <span class="keyword">return</span> left[<span class="number">0</span>:minLen]</span><br></pre></td></tr></table></figure><h4 id="Binary-search"><a href="#Binary-search" class="headerlink" title="Binary search"></a>Binary search</h4><p><img src="https://leetcode.com/media/original_images/14_lcp_binary_search.png" alt="Binary search"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestCommonPrefix</span><span class="params">(self, strs: List[str])</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">if</span> strs <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> len(strs) == <span class="number">0</span>: <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line">        minLen = len(strs[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> strs:</span><br><span class="line">            minLen = min(minLen, len(s))</span><br><span class="line">        low = <span class="number">1</span></span><br><span class="line">        high = minLen</span><br><span class="line">        <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">            middle = (low + high) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> self.isCommonPrefix(strs, middle):</span><br><span class="line">                low = middle + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                high = middle - <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> strs[<span class="number">0</span>][<span class="number">0</span>:(low + high) // <span class="number">2</span>]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isCommonPrefix</span><span class="params">(self, strs: List[str], middle: int)</span>:</span></span><br><span class="line">        str1 = strs[<span class="number">0</span>][<span class="number">0</span>:middle]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(strs)):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> strs[i].startswith(str1): <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="Longest-Palindromic-Substring"><a href="#Longest-Palindromic-Substring" class="headerlink" title="Longest Palindromic Substring"></a>Longest Palindromic Substring</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sample input </span></span><br><span class="line">string = <span class="string">"abaxyzzyxf"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sample output</span></span><br><span class="line"><span class="string">"xyzzyx"</span></span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Brutal-force"><a href="#Brutal-force" class="headerlink" title="Brutal force"></a>Brutal force</h4><p>判断是否为palindrome string是<code>O(n)</code>, 最简单的方式是获取所有的子串，对每一种子串进行验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n^3) time | O(n) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindromicSubstring</span><span class="params">(string)</span>:</span></span><br><span class="line">    longest = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(string)):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i, len(string)):</span><br><span class="line">substring = string[i : j + <span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> len(substring) &gt; len(longest) <span class="keyword">and</span> isPalindrome(substring):</span><br><span class="line">longest = substring</span><br><span class="line"><span class="keyword">return</span> longest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPalindrome</span><span class="params">(string)</span>:</span></span><br><span class="line">leftIdx = <span class="number">0</span></span><br><span class="line">rightIdx = len(string) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> leftIdx &lt; rightIdx:</span><br><span class="line"><span class="keyword">if</span> string[leftIdx] != string[rightIdx]:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">leftIdx += <span class="number">1</span></span><br><span class="line">rightIdx -= <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h4 id="Better-way"><a href="#Better-way" class="headerlink" title="Better way"></a>Better way</h4><p>为了不判断所有的子串，改变判断是否为palindrome string的方式，从子串的中间开始判断两侧的字符是否相同。这也分两种情况，一种是子串为奇数，一种是子串为偶数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n^2) time | O(n) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">longestPalindromicSubstring</span><span class="params">(string)</span>:</span></span><br><span class="line">    currentLongest = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(string)):</span><br><span class="line">odd = getLongestPalindromeFrom(string, i - <span class="number">1</span>, i + <span class="number">1</span>)</span><br><span class="line">even = getLongestPalindromeFrom(string, i - <span class="number">1</span>, i)</span><br><span class="line">longest = max(odd, even, key = <span class="keyword">lambda</span> x: x[<span class="number">1</span>] - x[<span class="number">0</span>])</span><br><span class="line">currentLongest = max(longest, currentLongest, key = <span class="keyword">lambda</span> x: x[<span class="number">1</span>] - x[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">return</span> string[currentLongest[<span class="number">0</span>] : currentLongest[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getLongestPalindromeFrom</span><span class="params">(string, leftIdx, rightIdx)</span>:</span></span><br><span class="line"><span class="keyword">while</span> leftIdx &gt;= <span class="number">0</span> <span class="keyword">and</span> rightIdx &lt; len(string):</span><br><span class="line"><span class="keyword">if</span> string[leftIdx] != string[rightIdx]:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">leftIdx -= <span class="number">1</span></span><br><span class="line">rightIdx += <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> [leftIdx + <span class="number">1</span>, rightIdx]</span><br></pre></td></tr></table></figure><h2 id="Group-Anagrams"><a href="#Group-Anagrams" class="headerlink" title="Group Anagrams"></a>Group Anagrams</h2><h3 id="Question-2"><a href="#Question-2" class="headerlink" title="Question"></a>Question</h3><p>Anagrams are strings made up of exactly the same letters, where order dosen’t matter.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sample Input</span></span><br><span class="line">words = [<span class="string">"yo"</span>, <span class="string">"act"</span>, <span class="string">"flop"</span>, <span class="string">"tac"</span>, <span class="string">"foo"</span>, <span class="string">"cat"</span>, <span class="string">"oy"</span>, <span class="string">"olfp"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Sample output</span></span><br><span class="line">[[<span class="string">"yo"</span>, <span class="string">"oy"</span>], [<span class="string">"flop"</span>, <span class="string">"olfp"</span>], [<span class="string">"act"</span>, <span class="string">"tac"</span>, <span class="string">"cat"</span>], [<span class="string">"foo"</span>]]</span><br></pre></td></tr></table></figure><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><ul><li>sort every word in the list</li><li>use hash code to group the anagrams</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(wnlog(n)) time | O(wn) space</span></span><br><span class="line"><span class="comment"># where w is the number of words and </span></span><br><span class="line"><span class="comment"># n is the length of the longest word</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">groupAnagrams</span><span class="params">(words)</span>:</span></span><br><span class="line">  anagrams = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">sortedWord = <span class="string">""</span>.join(sorted(word))</span><br><span class="line"><span class="keyword">if</span> sortedWord <span class="keyword">in</span> anagrams:</span><br><span class="line">anagrams[sortedWord].append(word)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">anagrams[sortedWord] = [word]</span><br><span class="line"><span class="keyword">return</span> list(anagrams.values())</span><br></pre></td></tr></table></figure><h2 id="Valid-IP-Addresses"><a href="#Valid-IP-Addresses" class="headerlink" title="Valid IP Addresses"></a>Valid IP Addresses</h2><h3 id="Question-3"><a href="#Question-3" class="headerlink" title="Question"></a>Question</h3><p>Write a function that returns all the possible IP addresses that can be created by inserting <code>.</code>s in the string. </p><p>A valid IP adress should have some properties:</p><ul><li>it consists of four sets of integer</li><li>the individual integer is within the range<code>0 - 255</code>, inclusive</li><li>not contain leading <code>0</code></li></ul><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(1) time | O(1) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validIPAddresses</span><span class="params">(string)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, min(len(string), <span class="number">4</span>)):</span><br><span class="line">currentIPAddressParts = [<span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>, <span class="string">""</span>]</span><br><span class="line"></span><br><span class="line">currentIPAddressParts[<span class="number">0</span>] = string[:i]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isValidPart(currentIPAddressParts[<span class="number">0</span>]):</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, i + min(len(string) - i, <span class="number">4</span>)):</span><br><span class="line">currentIPAddressParts[<span class="number">1</span>] = string[i:j]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> isValidPart(currentIPAddressParts[<span class="number">1</span>]):</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(j + <span class="number">1</span>, j + min(len(string) - j, <span class="number">4</span>)):</span><br><span class="line">currentIPAddressParts[<span class="number">2</span>] = string[j:k]</span><br><span class="line">currentIPAddressParts[<span class="number">3</span>] = string[k:]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> isValidPart(currentIPAddressParts[<span class="number">2</span>]) <span class="keyword">and</span> isValidPart(currentIPAddressParts[<span class="number">3</span>]):</span><br><span class="line">result.append(<span class="string">"."</span>.join(currentIPAddressParts))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValidPart</span><span class="params">(string)</span>:</span></span><br><span class="line">stringAsInt = int(string)</span><br><span class="line"><span class="keyword">if</span> stringAsInt &gt; <span class="number">255</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">return</span> len(string) == len(str(stringAsInt)) <span class="comment"># check for leading 0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Integer to Roman</title>
      <link href="/LeetCode/Integer-to-Roman.html"/>
      <url>/LeetCode/Integer-to-Roman.html</url>
      
        <content type="html"><![CDATA[<h2 id="Roman-To-Integer"><a href="#Roman-To-Integer" class="headerlink" title="Roman To Integer"></a>Roman To Integer</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;III&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: III = 3.</span><br></pre></td></tr></table></figure><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;LVIII&quot;</span><br><span class="line">Output: 58</span><br><span class="line">Explanation: L = 50, V= 5, III = 3.</span><br></pre></td></tr></table></figure><h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3:"></a>Example 3:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;MCMXCIV&quot;</span><br><span class="line">Output: 1994</span><br><span class="line">Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.</span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Left-to-Right-Pass"><a href="#Left-to-Right-Pass" class="headerlink" title="Left-to-Right Pass"></a>Left-to-Right Pass</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(1)</span></span><br><span class="line"><span class="comment"># Space O(1)</span></span><br><span class="line">values = &#123;</span><br><span class="line">    <span class="string">"I"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"V"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"X"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"L"</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">"C"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">"D"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">"M"</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(s):</span><br><span class="line">            <span class="comment"># If this is the subtractive case.</span></span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; len(s) <span class="keyword">and</span> values[s[i]] &lt; values[s[i + <span class="number">1</span>]]:</span><br><span class="line">                total += values[s[i + <span class="number">1</span>]] - values[s[i]]</span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            <span class="comment"># Else this is NOT the subtractive case.</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total += values[s[i]]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h4 id="Left-to-Right-Pass-Improved"><a href="#Left-to-Right-Pass-Improved" class="headerlink" title="Left-to-Right Pass Improved"></a>Left-to-Right Pass Improved</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(1)</span></span><br><span class="line"><span class="comment"># Space O(1)</span></span><br><span class="line">values = &#123;</span><br><span class="line">    <span class="string">"I"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"V"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"X"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"L"</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">"C"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">"D"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">"M"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="string">"IV"</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">"IX"</span>: <span class="number">9</span>,</span><br><span class="line">    <span class="string">"XL"</span>: <span class="number">40</span>, </span><br><span class="line">    <span class="string">"XC"</span>: <span class="number">90</span>,</span><br><span class="line">    <span class="string">"CD"</span>: <span class="number">400</span>,</span><br><span class="line">    <span class="string">"CM"</span>: <span class="number">900</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt; len(s):</span><br><span class="line">            <span class="comment"># This is the subtractive case.</span></span><br><span class="line">            <span class="keyword">if</span> i &lt; len(s) - <span class="number">1</span> <span class="keyword">and</span> s[i:i+<span class="number">2</span>] <span class="keyword">in</span> values:</span><br><span class="line">                total += values[s[i:i+<span class="number">2</span>]] </span><br><span class="line">                i += <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total += values[s[i]]</span><br><span class="line">                i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h4 id="Right-to-Left-Pass"><a href="#Right-to-Left-Pass" class="headerlink" title="Right-to-Left Pass"></a>Right-to-Left Pass</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(1)</span></span><br><span class="line"><span class="comment"># Space O(1)</span></span><br><span class="line">values = &#123;</span><br><span class="line">    <span class="string">"I"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"V"</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="string">"X"</span>: <span class="number">10</span>,</span><br><span class="line">    <span class="string">"L"</span>: <span class="number">50</span>,</span><br><span class="line">    <span class="string">"C"</span>: <span class="number">100</span>,</span><br><span class="line">    <span class="string">"D"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="string">"M"</span>: <span class="number">1000</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">romanToInt</span><span class="params">(self, s: str)</span> -&gt; int:</span></span><br><span class="line">        total = values.get(s[<span class="number">-1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> reversed(range(len(s) - <span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> values[s[i]] &lt; values[s[i + <span class="number">1</span>]]:</span><br><span class="line">                total -= values[s[i]]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                total += values[s[i]]</span><br><span class="line">        <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure><h2 id="Integer-to-Roman"><a href="#Integer-to-Roman" class="headerlink" title="Integer to Roman"></a>Integer to Roman</h2><h3 id="Question-1"><a href="#Question-1" class="headerlink" title="Question"></a>Question</h3><h4 id="Example-1-1"><a href="#Example-1-1" class="headerlink" title="Example 1:"></a>Example 1:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: num = <span class="number">3</span></span><br><span class="line">Output: <span class="string">"III"</span></span><br><span class="line">Explanation: <span class="number">3</span> is represented as <span class="number">3</span> ones.</span><br></pre></td></tr></table></figure><h4 id="Example-2-1"><a href="#Example-2-1" class="headerlink" title="Example 2:"></a>Example 2:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: num = <span class="number">58</span></span><br><span class="line">Output: <span class="string">"LVIII"</span></span><br><span class="line">Explanation: L = <span class="number">50</span>, V = <span class="number">5</span>, III = <span class="number">3</span>.</span><br></pre></td></tr></table></figure><h4 id="Example-3-1"><a href="#Example-3-1" class="headerlink" title="Example 3:"></a>Example 3:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: num = <span class="number">1994</span></span><br><span class="line">Output: <span class="string">"MCMXCIV"</span></span><br><span class="line">Explanation: M = <span class="number">1000</span>, CM = <span class="number">900</span>, XC = <span class="number">90</span> and IV = <span class="number">4</span>.</span><br></pre></td></tr></table></figure><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(1)</span></span><br><span class="line"><span class="comment"># Space O(1)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">intToRoman</span><span class="params">(self, num: int)</span> -&gt; str:</span></span><br><span class="line">        digits = [(<span class="number">1000</span>, <span class="string">"M"</span>), (<span class="number">900</span>, <span class="string">"CM"</span>), (<span class="number">500</span>, <span class="string">"D"</span>), (<span class="number">400</span>, <span class="string">"CD"</span>), (<span class="number">100</span>, <span class="string">"C"</span>), </span><br><span class="line">                  (<span class="number">90</span>, <span class="string">"XC"</span>), (<span class="number">50</span>, <span class="string">"L"</span>), (<span class="number">40</span>, <span class="string">"XL"</span>), (<span class="number">10</span>, <span class="string">"X"</span>), (<span class="number">9</span>, <span class="string">"IX"</span>), </span><br><span class="line">                  (<span class="number">5</span>, <span class="string">"V"</span>), (<span class="number">4</span>, <span class="string">"IV"</span>), (<span class="number">1</span>, <span class="string">"I"</span>)]</span><br><span class="line">        roman_digits = []</span><br><span class="line">        <span class="keyword">for</span> value, symbol <span class="keyword">in</span> digits:</span><br><span class="line">            <span class="keyword">if</span> num == <span class="number">0</span>: <span class="keyword">break</span></span><br><span class="line">            count, num = divmod(num, value) <span class="comment"># divmod(7, 2) ----&gt; (3, 1)</span></span><br><span class="line">            roman_digits.append(symbol * count)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(roman_digits)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java Notes 3</title>
      <link href="/Backend/Java/Java-Notes-3.html"/>
      <url>/Backend/Java/Java-Notes-3.html</url>
      
        <content type="html"><![CDATA[<h2 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h2><h3 id="Imperative-Code"><a href="#Imperative-Code" class="headerlink" title="Imperative Code"></a>Imperative Code</h3><p>Early Java programs were usually programmed in the imperative style. Imperative code usually focuses on how a task is performed. Each line of code gives a specific procedure or operation:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTopScore</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> topScore = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (Student s : students) &#123;</span><br><span class="line">   <span class="keyword">if</span> (s == <span class="keyword">null</span>) <span class="keyword">continue</span>;</span><br><span class="line">   topScore = Math.max(topScore, s.getScore());</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> topScore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Focuses on <strong>how</strong> a task is performed.</li><li>Each line of code gives a specific procedure or operation.</li></ul><h3 id="Functional-Code"><a href="#Functional-Code" class="headerlink" title="Functional Code"></a>Functional Code</h3><p>Starting with version 8, Java added language features to support a more functional style of programming. You might also hear some people call it <strong>declarative</strong> programming.</p><p>Functional code focuses on what happens to inputs in order to produce outputs. You can think of it as describing how to get from the input to the output:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getTopScore</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> students.stream()</span><br><span class="line">     .filter(Objects::nonNull)</span><br><span class="line">     .mapToInt(Student::getScore)</span><br><span class="line">     .max()</span><br><span class="line">     .orElse(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code does the exact same thing as the last code example, but it uses a more functional programming style, because it:</p><ul><li>Focuses on what happens to inputs in order to produce outputs..</li><li>Describes how to transform the input into the output.</li></ul><h3 id="Lambda-Expressions"><a href="#Lambda-Expressions" class="headerlink" title="Lambda Expressions"></a>Lambda Expressions</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BinaryOperator&lt;Integer&gt; add =</span><br><span class="line">   (Integer a, Integer b) -&gt; &#123; <span class="keyword">return</span> a + b; &#125;;</span><br><span class="line"></span><br><span class="line">System.out.println(add.apply(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h3 id="Functional-Interface"><a href="#Functional-Interface" class="headerlink" title="Functional Interface"></a>Functional Interface</h3><p>A <strong>functional interface</strong> is a Java interface with exactly one abstract method, called the <strong>functional method</strong>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">default</span> Predicate&lt;T&gt; <span class="title">negate</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (t) -&gt; !test(t); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Other methods left out of this example</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Predicate</code>‘s one abstract method is <code>test()</code>. <code>test()</code> is known as the <strong>functional method</strong>. “Abstract” means the method is not implemented, so in order to be a functional method, it cannot have a default implementation. However, functional interfaces <em>can</em> have other default methods. In this case, the <code>Predicate</code> interface has a default method called <code>negate()</code> that returns another <code>Predicate</code>.</p><h3 id="Anonymous-Class"><a href="#Anonymous-Class" class="headerlink" title="Anonymous Class"></a>Anonymous Class</h3><p>An <strong>anonymous class</strong> is a class that is defined “in-line” and <strong>has no name</strong>, and so it is called “anonymous”.</p><h4 id="Anonymous-Class-vs-Lambda"><a href="#Anonymous-Class-vs-Lambda" class="headerlink" title="Anonymous Class vs. Lambda"></a>Anonymous Class vs. Lambda</h4><p>This anonymous class…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; anonymousSubclass =</span><br><span class="line">   <span class="keyword">new</span> Predicate&lt;String&gt;() &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> s.trim().isEmpty();</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure><p>… does the same thing as this lambda expresssion:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Predicate&lt;String&gt; lambdaInstead = s -&gt; s.trim().isEmpty();</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"><strong>Anonymous Class</strong></th><th align="left"><strong>Lambdas</strong></th></tr></thead><tbody><tr><td align="left">Class generated at compile-time</td><td align="left">Class generated at runtime</td></tr><tr><td align="left">Can override <strong><code>equals()</code>/<code>hashCode()</code></strong></td><td align="left">Cannot override them; has no identity</td></tr><tr><td align="left"><strong><code>this</code></strong> refers to the anonymous class</td><td align="left"><strong><code>this</code></strong> refers to the enclosing class</td></tr></tbody></table><h4 id="What’s-this-all-about"><a href="#What’s-this-all-about" class="headerlink" title="What’s this all about?"></a>What’s <code>this</code> all about?</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ThisExample</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Runnable withLambda =</span><br><span class="line">      () -&gt; System.out.println(<span class="string">"From lambda: "</span> + <span class="keyword">this</span>.getClass());</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Runnable withSubclass = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"From subclass: "</span> + <span class="keyword">this</span>.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ThisExample thisExample = <span class="keyword">new</span> ThisExample();</span><br><span class="line">    thisExample.withLambda.run();</span><br><span class="line">    thisExample.withSubclass.run();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">From lambda: <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">udacitydemo</span>.<span class="title">lambdas</span>.<span class="title">ThisExample</span></span></span><br><span class="line">From subclass: class com.udacitydemo.lambdas.ThisExample$1</span><br></pre></td></tr></table></figure><p>Inside the lambda, <code>this.getClass()</code> returns the class object representing <code>ThisExample</code>. We’ll cover class objects in more detail in the lesson on reflection, but for now the important part is that the <code>this</code> keyword inside the lambda references the <em>enclosing class</em>, which is <code>com.udacitydemo.lambdas.ThisExample</code>.</p><p>For the <code>Runnable</code> subclass, on the other hand, the program printed <code>com.udacitydemo.lambdas.ThisExample$1</code>. You can see that the Java compiler generated a class called <code>com.udacitydemo.lambdas.ThisExample$1</code> for the anonymous lambda (yes, the class name contains a dollar sign), and the <code>this</code> keyword refers to <em>that</em> generated class! If you compile this program yourself, you’ll even notice the Java compiler produces a file called <code>ThisExample$1.class</code>, which contains the compiled byte code for the anonymous class.</p><h3 id="Shortcomings-of-Lambdas"><a href="#Shortcomings-of-Lambdas" class="headerlink" title="Shortcomings of Lambdas"></a>Shortcomings of Lambdas</h3><p>Lambdas are very useful, but they do have some shortcomings:</p><ul><li>They can only be used to implement <strong>functional interfaces</strong>, not classes.</li><li>Lambdas cannot implement any interface that has multiple abstract methods.</li><li>Lambdas cannot throw checked exceptions (any subclass of <code>Exception</code>, such as <code>IOException</code>).</li></ul><h3 id="Two-Examples"><a href="#Two-Examples" class="headerlink" title="Two Examples"></a>Two Examples</h3><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h4><h5 id="BinaryOperation-java"><a href="#BinaryOperation-java" class="headerlink" title="BinaryOperation.java"></a>BinaryOperation.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BinaryOperation</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">apply</span><span class="params">(T a, T b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Main-java"><a href="#Main-java" class="headerlink" title="Main.java"></a>Main.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    BinaryOperator&lt;Integer&gt; add = (a, b) -&gt; a + b;</span><br><span class="line">    <span class="keyword">assert</span> <span class="number">5</span> == add.apply(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h4><h5 id="Calculator-java"><a href="#Calculator-java" class="headerlink" title="Calculator.java"></a>Calculator.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.function.BinaryOperator; <span class="comment">// a functional interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BinaryOperator&lt;Integer&gt;&gt; operators = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerOperation</span><span class="params">(String symbol, BinaryOperator&lt;Integer&gt; operator)</span> </span>&#123;</span><br><span class="line">    operators.put(symbol.strip(), operator);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="keyword">int</span> a, String operator, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> operators.get(operator).apply(a, b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Calculate-java"><a href="#Calculate-java" class="headerlink" title="Calculate.java"></a>Calculate.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculate</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">3</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Usage: Calculate [int] [operator] [int]"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line">    calculator.registerOperation(<span class="string">"+"</span>, (a, b) -&gt; a + b);</span><br><span class="line">    calculator.registerOperation(<span class="string">"-"</span>, (a, b) -&gt; a - b);</span><br><span class="line">    calculator.registerOperation(<span class="string">"/"</span>, (a, b) -&gt; a / b);</span><br><span class="line">    calculator.registerOperation(<span class="string">"*"</span>, (a, b) -&gt; a * b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">    String operator = args[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> b = Integer.parseInt(args[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    System.out.println(calculator.calculate(a, operator, b));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Capturing-variables"><a href="#Capturing-variables" class="headerlink" title="Capturing variables"></a>Capturing variables</h3><h4 id="Captured-variables"><a href="#Captured-variables" class="headerlink" title="Captured variables"></a>Captured variables</h4><p>Lambdas can <strong>capture</strong> variables from the surrounding code. If a lambda uses any variables from the surrounding code, those variables are <strong>captured</strong>. Variables can only be captured if they are <strong>effectively final</strong>.</p><p>An <strong>effectively final</strong> variable is a variable whose value does not change after it is initialized.</p><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Map&lt;Year, Integer&gt; <span class="title">getClassSizes</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Map&lt;Year, Integer&gt; classSizes = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  students.stream().forEach(s -&gt;</span><br><span class="line">      classSizes.compute(</span><br><span class="line">          s.getGraduationYear(),</span><br><span class="line">          (k, v) -&gt; (v == <span class="keyword">null</span>) ? <span class="number">1</span> : <span class="number">1</span> + v));</span><br><span class="line">  <span class="keyword">return</span> classSizes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A good test to figure out if a variable is effectively final is to add the <code>final</code> keyword to it. If the code still compiles, that variable is effectively final!</p><p>In the example, the <code>classSizes</code> variable is effectively final because the value of the variable itself does not change after it’s initialized. Remember that in Java, objects are passed by reference. Even though the <code>HashMap</code> changes, the variable’s value is the <code>HashMap</code>‘s location in memory, and that location never changes.</p><h3 id="Method-Reference"><a href="#Method-Reference" class="headerlink" title="Method Reference"></a>Method Reference</h3><p>A <strong>method reference</strong> is a short lambda expression that refers to a method that is already named.</p><p>Generally speaking, if a method is already defined that you can use, you should use a method reference instead of writing a brand new lambda. It’s usually a good idea in software development to not write new code if there’s already existing code that does the same thing you’re trying to do!</p><p>Method references cannot capture surrounding variables, though. If you find yourself in this situation, you should use a custom lambda instead.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Predicate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdasMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns the number of strings that match a given condition.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> input the strings that should be tested.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> condition the condition that strings should be tested against.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the number of strings in the input that match the condition.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">countMatchingStrings</span><span class="params">(List&lt;String&gt; input, Predicate&lt;String&gt; condition)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> input.stream().filter(condition).count();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; input = List.of(<span class="string">"hello"</span>, <span class="string">"\t   "</span>, <span class="string">"world"</span>, <span class="string">""</span>, <span class="string">"\t"</span>, <span class="string">" "</span>, <span class="string">"goodbye"</span>, <span class="string">"  "</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Using lambda expression:</span></span><br><span class="line">    <span class="keyword">long</span> numberOfWhitespaceStrings =</span><br><span class="line">            countMatchingStrings(input, s -&gt; s.trim().isEmpty());</span><br><span class="line">    <span class="comment">// Using method reference:</span></span><br><span class="line">    <span class="keyword">long</span> numberOfWhitespaceStrings = countMatchingStrings(input, String::isBlank);</span><br><span class="line"></span><br><span class="line">    System.out.println(numberOfWhitespaceStrings + <span class="string">" whitespace strings"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h3><p>A <strong>stream</strong> is a sequence of elements.</p><p>Streams are useful because they allow us to process collection, one element at a time. They can process elements in many ways, such as (but not limited to) filtering or transforming elements, sorting elements, or computing statistics such as the sum or average.</p><p>A stream pipeline consists of creating a stream, calling intermediate operations on the stream, and then terminating the stream using a terminal operation.</p><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printScores</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> students.stream()</span><br><span class="line">     .filter(Objects::nonNull)</span><br><span class="line">     .mapToInt(Student::getScore)</span><br><span class="line">     .max()</span><br><span class="line">     .orElse(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First, the <code>stream()</code> method creates a stream from the students list.</p><p>This stream pipeline has two intermediate methods: the <code>filter()</code> method removes the elements of the stream that are <code>null</code>, and <code>mapToInt()</code> transforms each student into an <code>int</code>. Notice that each of these methods returns another <code>Stream</code>: <code>filter()</code> returns a <code>Stream&lt;Student&gt;</code>, and <code>mapToInt()</code> returns an <code>IntStream</code>.</p><p>Finally, the terminal operation <code>max()</code> computes the maximum value in the <code>IntStream</code>. This terminal method actually returns an <code>OptionalInt</code> instead of an <code>int</code>. If the <code>students</code> parameter is empty or contains only <code>null</code> elements, it’s possible the final stream will be empty. In this case, we need to tell the program to return a default value of <code>0</code>.</p><blockquote><p>If <code>max()</code> returns an <code>OptionalInt</code> with a value, that value will be used. However, if <code>max()</code> returns <code>OptionalInt.empty()</code>, the call to <code>orElse()</code> makes sure that a default value of <code>0</code> will be returned.</p></blockquote><h4 id="Collector"><a href="#Collector" class="headerlink" title="Collector"></a>Collector</h4><p>A <code>Collector</code> is a terminal stream operation that accumulates stream elements into a container.</p><p>The <code>collect()</code> method is a terminal operation that aggregates streams of elements. Collectors can be passed to <code>collect()</code> to determine what kind of collection is created.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; s = stringList.stream().collect(Collectors.toSet());</span><br></pre></td></tr></table></figure><p>Collectors can be used to perform reduction operations such as adding or counting.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Year, Long&gt; graduatingClassSizes = studentList.stream()</span><br><span class="line">    .collect(Collectors.groupingBy(</span><br><span class="line">        Student::getGraduationYear, Collectors.counting());</span><br></pre></td></tr></table></figure><p>Here, <code>groupingBy()</code> is used to collect elements into a <code>Map</code>. <code>Collectors.counting()</code> counts the number of values for each key, so, in this example, it will count how many students there are for each graduation year.</p><h2 id="Working-with-Files-amp-I-O"><a href="#Working-with-Files-amp-I-O" class="headerlink" title="Working with Files &amp; I/O"></a>Working with Files &amp; I/O</h2><h3 id="I-O-Input-Output"><a href="#I-O-Input-Output" class="headerlink" title="I/O (Input/Output)"></a>I/O (Input/Output)</h3><p><strong>Input</strong> is data the program receives from external processes and systems, such as from the local file system or the Internet.</p><p><strong>Output</strong> is data the program sends to external processes and systems.</p><h3 id="Program-Memory-vs-Persistent-Storage"><a href="#Program-Memory-vs-Persistent-Storage" class="headerlink" title="Program Memory vs. Persistent Storage"></a>Program Memory vs. Persistent Storage</h3><h4 id="Program-Memory"><a href="#Program-Memory" class="headerlink" title="Program Memory"></a>Program Memory</h4><p>In Java programs and other computer programs, short-term storage happens in the program memory.</p><ul><li>Variables, objects and data structures are stored in the heap and stack. * Memory access is fast.</li><li>Memory is erased when the program is done running.</li></ul><h4 id="Persistent-Storage"><a href="#Persistent-Storage" class="headerlink" title="Persistent Storage"></a>Persistent Storage</h4><p>If we want to store data for longer periods of time, we have to use long-term storage, also known as persistent storage.</p><ul><li><em>Files</em>, stored on disk, are one of the most common forms of persistent storage. Your PC, laptop, and phone all have their own file systems that can store different kinds of files.</li><li>Files stick around, or <em>persist</em>, after the program is done executing, so can also be read by humans or other programs.</li><li>Persistent storage access is usually <em>much</em> slower than memory access.</li><li>Databases are another common form of persistent storage.</li></ul><h3 id="File-Open-Options"><a href="#File-Open-Options" class="headerlink" title="File Open Options"></a>File Open Options</h3><p>When you create, read, or write a file, there are standard modes that you can use to do so. Java uses the <a href="https://docs.oracle.com/javase/10/docs/api/java/nio/file/StandardOpenOption.html" target="_blank" rel="noopener"><code>StandardOpenOptions</code></a> class to encapsulate all these modes.</p><p>Here are some of the common modes:</p><table><thead><tr><th align="left"><strong>Option</strong></th><th align="left"><strong>Description</strong></th></tr></thead><tbody><tr><td align="left"><code>READ</code></td><td align="left">Open a file for reading, fail if it doesn’t exist.</td></tr><tr><td align="left"><code>CREATE</code></td><td align="left">Create a file.</td></tr><tr><td align="left"><code>CREATE_NEW</code></td><td align="left">Same as <code>CREATE</code>, but fail if the file already exists.</td></tr><tr><td align="left"><code>WRITE</code></td><td align="left">Open a file for writing.</td></tr><tr><td align="left"><code>APPEND</code></td><td align="left">Same as <code>WRITE</code>, but write to the end of the file.</td></tr></tbody></table><p>You are allowed to use more than one option at a time.</p><h3 id="Path-API"><a href="#Path-API" class="headerlink" title="Path API"></a>Path API</h3><p>A <a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Path.html" target="_blank" rel="noopener"><code>Path</code></a> is Java’s way to refer to a file on a file system:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Path p = Path.of(&quot;your/path/here&quot;);</span><br></pre></td></tr></table></figure><p>All paths either refer to <em>files</em> or <em>directories</em>.</p><ul><li>A <em>file</em> contains stored data or bytes.</li><li>A <em>directory</em> contains zero or more files.</li></ul><p>All paths are either <em>absolute</em> or <em>relative</em>.</p><ul><li><em>Absolute paths</em> start with a forward-slash (<code>/</code>) (known as the <em>root directory</em> on Mac and Linux), or a drive name on Windows.</li><li><em>Relative paths</em> are only meaningful relative to some other starting point. They do not start with a forward slash or drive name.</li></ul><p>Note that the <code>Path</code> object in Java always uses forward-slashes to delimit the parts of the path <code>String</code>, even if the underlying file system uses backslashes (such as the NTFS file system on Windows).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Absolute path to a directory on Mac or Linux</span></span><br><span class="line">Path p = Path.of(<span class="string">"/home/user/Documents/workspaces"</span>);</span><br><span class="line"><span class="comment">// Absolute path to a file on Mac or Linux</span></span><br><span class="line">Path p = Path.of(<span class="string">"/home/user/Documents/workspaces/main.java"</span>);</span><br><span class="line"><span class="comment">// Relatuve path to a directory</span></span><br><span class="line">Path p = Path.of(<span class="string">"user/Documents/workspaces"</span>);</span><br><span class="line"><span class="comment">// Path parts as separate parameters</span></span><br><span class="line">Path p = Path.of(<span class="string">"user"</span>, <span class="string">"Documents"</span>, <span class="string">"workspaces"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PathApiDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Path p1 = Path.of(<span class="string">"."</span>);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        <span class="comment">// output: .</span></span><br><span class="line">        Path p2 = Path.of(<span class="string">"."</span>);</span><br><span class="line">        System.out.println(p2.toAbsolutePath());</span><br><span class="line">        <span class="comment">// output: /Users/qianhongbo/Documents/Mycode/JAVA/Java Code/Java Notes 4/.</span></span><br><span class="line">        Path p3 = Path.of(<span class="string">"."</span>);</span><br><span class="line">        System.out.println(p3.toAbsolutePath().normalize());</span><br><span class="line">        <span class="comment">// output: /Users/qianhongbo/Documents/Mycode/JAVA/Java Code/Java Notes 4</span></span><br><span class="line">        Path p4 = Path.of(<span class="string">"."</span>);</span><br><span class="line">        System.out.println(p4.toAbsolutePath().resolve(<span class="string">".."</span>));</span><br><span class="line">        <span class="comment">// output: /Users/qianhongbo/Documents/Mycode/JAVA/Java Code/Java Notes 4/./..</span></span><br><span class="line">        Path p5 = Path.of(<span class="string">"."</span>);</span><br><span class="line">        System.out.println(p5.toAbsolutePath().resolve(<span class="string">".."</span>).normalize());</span><br><span class="line">        <span class="comment">// output: /Users/qianhongbo/Documents/Mycode/JAVA/Java Code</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Reading-and-Writing-data-in-Java"><a href="#Reading-and-Writing-data-in-Java" class="headerlink" title="Reading and Writing data in Java"></a>Reading and Writing data in Java</h3><p>In Java, the utilities for reading and writing data are built on top of each other. This diagram shows you what that means. When you use a <a href="https://docs.oracle.com/javase/10/docs/api/java/io/BufferedReader.html" target="_blank" rel="noopener"><code>BufferedReader</code></a> to read lines of text, that buffered reader is reading from another underlying <a href="https://docs.oracle.com/javase/10/docs/api/java/io/Reader.html" target="_blank" rel="noopener"><code>Reader</code></a> that provides characters of text. That <code>Reader</code>, in turn, is itself using an <a href="https://docs.oracle.com/javase/10/docs/api/java/io/InputStream.html" target="_blank" rel="noopener"><code>InputStream</code></a> behind the scenes to read the raw data.</p><p><img src="https://video.udacity-data.com/topher/2020/November/5faf3729_screen-shot-2020-11-13-at-5.45.56-pm/screen-shot-2020-11-13-at-5.45.56-pm.png" alt="stream"></p><h4 id="InputStream-and-OutputStream"><a href="#InputStream-and-OutputStream" class="headerlink" title="InputStream and OutputStream"></a><code>InputStream</code> and <code>OutputStream</code></h4><p>Input and output streams are the lowest level utilities Java provides. They give you access to the raw data, in the form of bytes. This data can come from a file, from user input on the command-line, or from a network or other source. These are the lowest level APIs Java offers for reading or writing a stream of bytes.</p><h4 id="InputStream-Example"><a href="#InputStream-Example" class="headerlink" title="InputStream Example"></a><code>InputStream</code> Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">InputStream in =</span><br><span class="line">   Files.newInputStream(Path.of(<span class="string">"test"</span>), StandardOpenOption.READ);</span><br><span class="line"><span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">while</span> (in.read(data) != -<span class="number">1</span>) &#123;  <span class="comment">// Returns the number of bytes read</span></span><br><span class="line">  useData(data);</span><br><span class="line">&#125;</span><br><span class="line">in.close();  <span class="comment">// Close the "test" file</span></span><br></pre></td></tr></table></figure><p>This code creates a file called “test” using <code>newInputStream()</code> method of the Files API. The code calls the <code>read()</code> method, which reads the data into a <code>byte[]</code> and returns the number of bytes that were read. If no bytes were read, it returns <code>-1</code>. This code will read the entire file, 10 bytes at a time, until the loop reaches the end of the file.</p><h4 id="OutputStream-Example"><a href="#OutputStream-Example" class="headerlink" title="OutputStream Example"></a><code>OutputStream</code> Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OutputStream out = Files.newOutputStream(Path.of(<span class="string">"test"</span>));</span><br><span class="line">out.write(<span class="string">"Hello, world!"</span>.getBytes());</span><br><span class="line">out.close();  <span class="comment">// Close the "test" file</span></span><br></pre></td></tr></table></figure><p>The basic <code>write()</code> method only deals with bytes. It’s pretty self-explanatory: you give the <code>write()</code> method a <code>byte[]</code>, and it writes those bytes to the output stream.</p><p>Both code examples call the <code>close()</code> method, which we’ll cover in more detail later in this lesson.</p><h4 id="Demo-Code-Ways-to-Copy-a-File"><a href="#Demo-Code-Ways-to-Copy-a-File" class="headerlink" title="Demo Code: Ways to Copy a File"></a>Demo Code: Ways to Copy a File</h4><h5 id="Reading-and-Writing-the-Data-Directly"><a href="#Reading-and-Writing-the-Data-Directly" class="headerlink" title="Reading and Writing the Data Directly"></a>Reading and Writing the Data Directly</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream in = Files.newInputStream(Path.of(args[<span class="number">0</span>]));</span><br><span class="line">        OutputStream out = Files.newOutputStream(Path.of(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">while</span> (in.read(data) != -<span class="number">1</span>) &#123;</span><br><span class="line">            out.write(data);</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Using-InputStream-transferTo-OutputStream"><a href="#Using-InputStream-transferTo-OutputStream" class="headerlink" title="Using InputStream.transferTo(OutputStream)"></a>Using <code>InputStream.transferTo(OutputStream)</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputOutputStreams</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream in = Files.newInputStream(Path.of(args[<span class="number">0</span>]));</span><br><span class="line">        OutputStream out = Files.newOutputStream(Path.of(args[<span class="number">1</span>]));</span><br><span class="line">        in.transferTo(out);</span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Using-the-Files-API"><a href="#Using-the-Files-API" class="headerlink" title="Using the Files API"></a>Using the Files API</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Files.copy(Path.of(args[<span class="number">0</span>]), Path.of(args[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Readers-Writers"><a href="#Readers-Writers" class="headerlink" title="Readers / Writers"></a>Readers / Writers</h4><p>Readers and Writers are the next level of abstraction built on top of input and output streams. These interfaces read and write text characters.</p><h5 id="Reader-Example"><a href="#Reader-Example" class="headerlink" title="Reader Example"></a>Reader Example</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] data = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">10</span>];</span><br><span class="line">Reader reader =</span><br><span class="line">   Files.newBufferedReader(Path.of(<span class="string">"test"</span>), StandardCharsets.UTF_8);</span><br><span class="line"><span class="keyword">while</span> (reader.read(data) != -<span class="number">1</span>) &#123;</span><br><span class="line"> useData(data);</span><br><span class="line">&#125;</span><br><span class="line">reader.close();</span><br></pre></td></tr></table></figure><p>Just like input streams, <code>Reader</code>s are usually created with the Files API. But instead of reading <code>byte</code>s, we are reading <code>char</code>s. There’s also a <code>StandardCharset</code>, which we’ll cover that in more detail in the next video.</p><h5 id="Writer-Example"><a href="#Writer-Example" class="headerlink" title="Writer Example"></a>Writer Example</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Writer writer =</span><br><span class="line">   Files.newBufferedWriter(Path.of(<span class="string">"test"</span>),</span><br><span class="line">                           StandardCharsets.UTF_8);</span><br><span class="line">writer.write(<span class="string">"hello, world"</span>);</span><br><span class="line">writer.close();  <span class="comment">// Close the "test" file</span></span><br></pre></td></tr></table></figure><p>The <code>Writer</code> is pretty much what you would expect. This time we are writing encoded <code>String</code>s of data instead of raw <code>byte</code>s.</p><h4 id="Buffered-Strams"><a href="#Buffered-Strams" class="headerlink" title="Buffered Strams"></a>Buffered Strams</h4><p>Buffered streams reduce the number of I/O operations performed by your program. This can significantly shrink the amount of time your program spends doing I/O!</p><p>When your code calls <code>BufferedReader.read()</code>, the <code>BufferedReader</code> reads ahead, and fetches more data than you asked for. Whatever it reads is stored in an array, which is also called a <em>buffer</em>.</p><p>The next time you call <code>read()</code>, if the data you requested is already in the buffer, the BufferedReader will give you that cached data, without having to do another read from disk!</p><h5 id="BufferedReader-Example"><a href="#BufferedReader-Example" class="headerlink" title="BufferedReader Example"></a><code>BufferedReader</code> Example</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BufferedReader reader =</span><br><span class="line">   Files.newBufferedReader(Path.of(<span class="string">"test"</span>), StandardCharsets.UTF_8);</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line"> useString(line);</span><br><span class="line">&#125;</span><br><span class="line">reader.close();</span><br></pre></td></tr></table></figure><p>The main difference between this API and the <code>Reader</code> API is the addition of the <code>readLine()</code> method, which returns a full line of text. Reading lines this way is a lot easier than reading the individual characters one by one!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BufferedWriter writer =</span><br><span class="line">   Files.newBufferedWriter(Path.of(&quot;test&quot;),</span><br><span class="line">                           StandardCharsets.UTF_8);</span><br><span class="line">writer.write(&quot;Hello, &quot;);</span><br><span class="line">writer.write(&quot;world!&quot;);</span><br><span class="line">writer.flush();  // Writes the contents of the buffer</span><br><span class="line">writer.close();  // Flushes the buffer and closes &quot;test&quot;</span><br></pre></td></tr></table></figure><p><code>BufferedWriter</code> also uses an in-memory buffer to store writes, and then periodically writes contents of the buffer in batches.</p><p>In this code, the <code>write()</code> method is called twice, but there is only one actual write to the underlying output stream.</p><h3 id="Java-Object-Serialization"><a href="#Java-Object-Serialization" class="headerlink" title="Java Object Serialization"></a>Java Object Serialization</h3><p><strong>Serialization</strong> is the process of converting an object into a data format that can later be <strong>deserialized</strong> back into the original object.</p><p><img src="https://video.udacity-data.com/topher/2020/November/5faf3bcd_screen-shot-2020-11-13-at-6.06.13-pm/screen-shot-2020-11-13-at-6.06.13-pm.png" alt></p><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h4><p><code>UdacisearchClient.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">UdacisearchClient</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  ... <span class="comment">// Everything else stays the same!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Main.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Usage: Main [file path]"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UdacisearchClient client =</span><br><span class="line">        <span class="keyword">new</span> UdacisearchClient(</span><br><span class="line">            <span class="string">"CatFacts LLC"</span>,</span><br><span class="line">            <span class="number">17</span>,</span><br><span class="line">            <span class="number">8000</span>,</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            Instant.now(),</span><br><span class="line">            Duration.ofDays(<span class="number">180</span>),</span><br><span class="line">            ZoneId.of(<span class="string">"America/Los_Angeles"</span>),</span><br><span class="line">            <span class="string">"555 Meowmers Ln, Riverside, CA 92501"</span>);</span><br><span class="line"></span><br><span class="line">    Path outputPath = Path.of(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">try</span> (ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(Files.newOutputStream(outputPath))) &#123;</span><br><span class="line">      out.writeObject(client);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"Wrote to "</span> + outputPath.toAbsolutePath().toString());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(Files.newInputStream(outputPath))) &#123;</span><br><span class="line">      UdacisearchClient deserialized = (UdacisearchClient) in.readObject();</span><br><span class="line">      System.out.println(<span class="string">"Deserialized "</span> + deserialized);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JSON-and-XML"><a href="#JSON-and-XML" class="headerlink" title="JSON and XML"></a>JSON and XML</h4><p>JSON (<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation) and XML (E<strong>x</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage) are two common text formats for serializing data.</p><h5 id="JSON-Example"><a href="#JSON-Example" class="headerlink" title="JSON Example"></a>JSON Example</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="number">17</span>,</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"George Washington"</span>,</span><br><span class="line">  <span class="string">"emails"</span>: [<span class="string">"george.w@gmail.com"</span>, <span class="string">"potus.ftw@yahoo.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="XML-Example"><a href="#XML-Example" class="headerlink" title="XML Example"></a>XML Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;client&gt;</span><br><span class="line">  &lt;id&gt; 17 &lt;/id&gt;</span><br><span class="line">  &lt;name&gt; George Washington &lt;/name&gt;</span><br><span class="line">  &lt;emails&gt;</span><br><span class="line">    &lt;email&gt; george.w@gmail.com &lt;/email&gt;</span><br><span class="line">    &lt;email&gt; potus.ftw@yahoo.com &lt;/email&gt;</span><br><span class="line">  &lt;/emails&gt;</span><br><span class="line">&lt;/client&gt;</span><br></pre></td></tr></table></figure><h5 id="Jackson-example-for-JSON"><a href="#Jackson-example-for-JSON" class="headerlink" title="Jackson example for JSON"></a>Jackson example for JSON</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"><span class="keyword">import</span> java.time.ZoneId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (args.length != <span class="number">1</span>) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Usage: Main [file path]"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UdacisearchClient client =</span><br><span class="line">        <span class="keyword">new</span> UdacisearchClient(</span><br><span class="line">            <span class="string">"CatFacts LLC"</span>,</span><br><span class="line">            <span class="number">17</span>,</span><br><span class="line">            <span class="number">8000</span>,</span><br><span class="line">            <span class="number">5</span>,</span><br><span class="line">            Instant.now(),</span><br><span class="line">            Duration.ofDays(<span class="number">180</span>),</span><br><span class="line">            ZoneId.of(<span class="string">"America/Los_Angeles"</span>),</span><br><span class="line">            <span class="string">"555 Meowmers Ln, Riverside, CA 92501"</span>);</span><br><span class="line"></span><br><span class="line">    Path outputPath = Path.of(args[<span class="number">0</span>]);</span><br><span class="line">    ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    objectMapper.registerModule(<span class="keyword">new</span> JavaTimeModule());</span><br><span class="line">    objectMapper.writeValue(Files.newBufferedWriter(outputPath), client);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"Wrote to "</span> + outputPath.toAbsolutePath().toString());</span><br><span class="line"></span><br><span class="line">    UdacisearchClient deserialized =</span><br><span class="line">        objectMapper.readValue(Files.newBufferedReader(outputPath), UdacisearchClient.class);</span><br><span class="line">    System.out.println(<span class="string">"Deserialized "</span> + deserialized);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dependency-Injection"><a href="#Dependency-Injection" class="headerlink" title="Dependency Injection"></a>Dependency Injection</h2><h3 id="What-is-a-Dependency"><a href="#What-is-a-Dependency" class="headerlink" title="What is a Dependency?"></a>What is a Dependency?</h3><p>A <strong>dependency</strong> is anything your code needs to work, such as an external library, an environment variable, a remote website, or a database.</p><p>In the context of dependency injection, a dependency usually refers to an object, class, or interface that your code imports, creates, or uses.</p><h3 id="What-is-Dependency-Injection"><a href="#What-is-Dependency-Injection" class="headerlink" title="What is Dependency Injection?"></a>What is Dependency Injection?</h3><p><strong>D</strong>ependency <strong>I</strong>njection, or DI, is a design pattern that moves the creation of dependencies to outside of your code. Instead of creating objects, you tell the DI framework to create the objects for you, and then you inject those objects into your class.</p><h3 id="Using-Inject-Annotations"><a href="#Using-Inject-Annotations" class="headerlink" title="Using @Inject Annotations"></a>Using <code>@Inject</code> Annotations</h3><p>To inject objects from a DI framework, you can add <code>@Inject</code> annotations to your code. You can add them directly to instance fields:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseRegistrar</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Inject</span> <span class="keyword">private</span> Database db;</span><br><span class="line">  <span class="meta">@Inject</span> <span class="keyword">private</span> Clock clock;</span><br><span class="line">  <span class="meta">@Inject</span> <span class="keyword">private</span> RegistrationFactory factory;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">registerStudentForCourse</span><span class="params">(Student s, <span class="keyword">int</span> courseId)</span> </span>&#123;</span><br><span class="line">    Course c = db.getCourse(courseId);</span><br><span class="line">    <span class="keyword">if</span> (clock.instant().isAfter(c.getRegistrationDeadline())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!s.getPassedCourses().containsAll(c.getPrereqs())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    db.createRegistration(factory.create(courseId, s.getId()));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>… or, you can add <code>@Inject</code> annotations to constructors:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CourseRegistrar</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Database db;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Clock clock;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> RegistrationFactory factory;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Inject</span></span><br><span class="line">  CourseRegistrar(Database db, Clock clock, RegistrationFactory factory) &#123;</span><br><span class="line">    <span class="keyword">this</span>.db = db;</span><br><span class="line">    <span class="keyword">this</span>.clock = clock;</span><br><span class="line">    <span class="keyword">this</span>.factory = factory;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">registerStudentForCourse</span><span class="params">(Student s, <span class="keyword">int</span> courseId)</span> </span>&#123;</span><br><span class="line">    Course c = db.getCourse(courseId);</span><br><span class="line">    <span class="keyword">if</span> (clock.instant().isAfter(c.getRegistrationDeadline())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (!s.getPassedCourses().containsAll(c.getPrereqs())) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    db.createRegistration(factory.create(courseId, s.getId()));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Add Binary</title>
      <link href="/LeetCode/Add-Binary.html"/>
      <url>/LeetCode/Add-Binary.html</url>
      
        <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>Given two binary strings <code>a</code> and <code>b</code>, return <em>their sum as a binary string</em>.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1:"></a>Example 1:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = &quot;11&quot;, b = &quot;1&quot;</span><br><span class="line">Output: &quot;100&quot;</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2:"></a>Example 2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: a = &quot;1010&quot;, b = &quot;1011&quot;</span><br><span class="line">Output: &quot;10101&quot;</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(M+N)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span> -&gt; str:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;0:b&#125;'</span>.format(int(a, <span class="number">2</span>) + int(b, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二进制字符串转十进制</span></span><br><span class="line">int(“<span class="number">11</span>”, <span class="number">2</span>) <span class="comment"># 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把十进制数12转为对应的二进制数的字符串形式</span></span><br><span class="line"><span class="string">'&#123;0:b&#125;'</span>.format(<span class="number">12</span>)  </span><br><span class="line"><span class="string">'1100'</span></span><br></pre></td></tr></table></figure><p>1 . In Java this approach is limited by the length of the input strings a and b. Once the string is long enough, the result of conversion into integers will not fit into Integer, Long or BigInteger.</p><p>2 . This method has quite low performance in the case of large input numbers.</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time O(max(M,N))</span></span><br><span class="line"><span class="comment"># Space O(max(N,M))</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span> -&gt; str:</span></span><br><span class="line">        n = max(len(a), len(b))</span><br><span class="line">        <span class="comment"># zfill() 方法返回指定长度的字符串，原字符串右对齐，前面填充0</span></span><br><span class="line">        a, b = a.zfill(n), b.zfill(n)</span><br><span class="line">        </span><br><span class="line">        carry = <span class="number">0</span></span><br><span class="line">        answer = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> a[i] == <span class="string">'1'</span>:</span><br><span class="line">                carry += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> b[i] == <span class="string">'1'</span>:</span><br><span class="line">                carry += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> carry % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                answer.append(<span class="string">'1'</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                answer.append(<span class="string">'0'</span>)</span><br><span class="line">            carry //= <span class="number">2</span></span><br><span class="line">        <span class="comment"># 最后一位的进位</span></span><br><span class="line">        <span class="keyword">if</span> carry == <span class="number">1</span>:</span><br><span class="line">            answer.append(<span class="string">'1'</span>)</span><br><span class="line">        <span class="comment"># append 方法获得的数据结果需要反向，并将字符串连接到一起</span></span><br><span class="line">        answer.reverse()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(answer)</span><br></pre></td></tr></table></figure><h4 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution 3"></a>Solution 3</h4><p>Here the input is more adapted to push towards Approach 1, but there is popular Facebook variation of this problem when interviewer provides you two numbers and asks to sum them up <code>without using addition operation</code>.</p><p>How to start? There is an interview tip for bit manipulation problems: if you don’t know how to start, start from computing XOR for your input data. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addBinary</span><span class="params">(self, a, b)</span> -&gt; str:</span></span><br><span class="line">        x, y = int(a, <span class="number">2</span>), int(b, <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">while</span> y:</span><br><span class="line">            answer = x ^ y</span><br><span class="line">            carry = (x &amp; y) &lt;&lt; <span class="number">1</span></span><br><span class="line">            x, y = answer, carry</span><br><span class="line">        <span class="keyword">return</span> bin(x)[<span class="number">2</span>:] <span class="comment"># bin()将十进制转二进制</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 结果的前两位需要去掉</span></span><br><span class="line">&gt;&gt;&gt;bin(<span class="number">10</span>)</span><br><span class="line"><span class="string">'0b1010'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Design Pattern</title>
      <link href="/Backend/Design%20Pattern/Design-Pattern.html"/>
      <url>/Backend/Design%20Pattern/Design-Pattern.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener">一个设计模式非常好的网站</a></p><p><a href="https://github.com/Qianhongbo/Design-Pattern.git" target="_blank" rel="noopener">Java实例Github仓库</a></p></blockquote><h2 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h2><p>设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p><h2 id="设计模式的类型"><a href="#设计模式的类型" class="headerlink" title="设计模式的类型"></a>设计模式的类型</h2><p>总共有 23 种设计模式。这些模式可以分为三大类：</p><ol><li>创建型模式（Creational Patterns）</li><li>结构型模式（Structural Patterns）</li><li>行为型模式（Behavioral Patterns）</li></ol><h3 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h3><p>这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</p><ul><li>工厂模式（Factory Pattern）</li><li>抽象工厂模式（Abstract Factory Pattern）</li><li>单例模式（Singleton Pattern）</li><li>建造者模式（Builder Pattern）</li><li>原型模式（Prototype Pattern）</li></ul><h3 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h3><p>这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。</p><ul><li>适配器模式（Adapter Pattern）</li><li>桥接模式（Bridge Pattern）</li><li>过滤器模式（Filter、Criteria Pattern）</li><li>组合模式（Composite Pattern）</li><li>装饰器模式（Decorator Pattern）</li><li>外观模式（Facade Pattern）</li><li>享元模式（Flyweight Pattern）</li><li>代理模式（Proxy Pattern）</li></ul><h3 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h3><p>这些设计模式特别关注对象之间的通信。</p><ul><li>责任链模式（Chain of Responsibility Pattern）</li><li>命令模式（Command Pattern）</li><li>解释器模式（Interpreter Pattern）</li><li>迭代器模式（Iterator Pattern）</li><li>中介者模式（Mediator Pattern）</li><li>备忘录模式（Memento Pattern）</li><li>观察者模式（Observer Pattern）</li><li>状态模式（State Pattern）</li><li>空对象模式（Null Object Pattern）</li><li>策略模式（Strategy Pattern）</li><li>模板模式（Template Pattern）</li><li>访问者模式（Visitor Pattern）</li></ul><h2 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h2><h3 id="Creational-Pattern"><a href="#Creational-Pattern" class="headerlink" title="Creational Pattern"></a>Creational Pattern</h3><h4 id="Singleton-Pattern"><a href="#Singleton-Pattern" class="headerlink" title="Singleton Pattern"></a>Singleton Pattern</h4><p><strong>意图：</strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>主要解决：</strong>一个全局使用的类频繁地创建与销毁。</p><h4 id="Factory-Pattern"><a href="#Factory-Pattern" class="headerlink" title="Factory Pattern"></a>Factory Pattern</h4><p><strong>意图：</strong>定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p><p><strong>主要解决：</strong>主要解决接口选择的问题。</p><h3 id="Structual-Pattern"><a href="#Structual-Pattern" class="headerlink" title="Structual Pattern"></a>Structual Pattern</h3><h4 id="Proxy-Pattern"><a href="#Proxy-Pattern" class="headerlink" title="Proxy Pattern"></a>Proxy Pattern</h4><p><strong>意图：</strong>为其他对象提供一种代理以控制对这个对象的访问。</p><p><strong>主要解决：</strong>在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p><h4 id="Decorator-Pattern"><a href="#Decorator-Pattern" class="headerlink" title="Decorator Pattern"></a>Decorator Pattern</h4><p><strong>意图：</strong>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p><p><strong>主要解决：</strong>一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p><h4 id="Adapter-Pattern"><a href="#Adapter-Pattern" class="headerlink" title="Adapter Pattern"></a>Adapter Pattern</h4><p><strong>意图：</strong>将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p><strong>主要解决：</strong>主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。</p><h3 id="Behavioral-Pattern"><a href="#Behavioral-Pattern" class="headerlink" title="Behavioral Pattern"></a>Behavioral Pattern</h3><h4 id="Observer-Pattern"><a href="#Observer-Pattern" class="headerlink" title="Observer Pattern"></a>Observer Pattern</h4><p><strong>意图：</strong>定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><p><strong>主要解决：</strong>一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p><h4 id="Command-Pattern"><a href="#Command-Pattern" class="headerlink" title="Command Pattern"></a>Command Pattern</h4><p><strong>意图：</strong>将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。</p><p><strong>主要解决：</strong>在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</p><h4 id="Chain-of-Responsibility-Pattern"><a href="#Chain-of-Responsibility-Pattern" class="headerlink" title="Chain of Responsibility Pattern"></a>Chain of Responsibility Pattern</h4><p><strong>意图：</strong>避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p><p><strong>主要解决：</strong>职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</p><h4 id="Interpreter-Pattern"><a href="#Interpreter-Pattern" class="headerlink" title="Interpreter Pattern"></a>Interpreter Pattern</h4><p><strong>意图：</strong>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p><p><strong>主要解决：</strong>对于一些固定文法构建一个解释句子的解释器。</p><p><strong>何时使用：</strong>如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p><h4 id="Template-Pattern"><a href="#Template-Pattern" class="headerlink" title="Template Pattern"></a>Template Pattern</h4><p><strong>意图：</strong>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p><strong>主要解决：</strong>一些方法通用，却在每一个子类都重新写了这一方法。</p><h4 id="Strategy-Pattern"><a href="#Strategy-Pattern" class="headerlink" title="Strategy Pattern"></a>Strategy Pattern</h4><p><strong>意图：</strong>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p><p><strong>主要解决：</strong>在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p><blockquote><p>策略模式和命令模式二者存在相似之处，区别如下：</p><p>“策略模式可能有不同的算法，但是实际工作中，可能在同一环境下只执行一种算法；命令模式可能有不同的命令，实际工作中，可能各个命令是要先后执行的。”</p></blockquote><h4 id="Visitor-Pattern"><a href="#Visitor-Pattern" class="headerlink" title="Visitor Pattern"></a>Visitor Pattern</h4><p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。</p><p><strong>意图：</strong>主要将数据结构与数据操作分离。</p><p><strong>主要解决：</strong>稳定的数据结构和易变的操作耦合问题。</p><p><strong>何时使用：</strong>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，使用访问者模式将这些封装到类中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;variant&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyVisitor</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">double</span> d)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; d &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> i)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; s)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::variant&lt;<span class="keyword">int</span>, <span class="keyword">double</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; var1(<span class="number">42</span>), var2(<span class="number">3.14</span>), var3(<span class="string">"visit"</span>);</span><br><span class="line"> <span class="comment">// calls operator() for matching int type</span></span><br><span class="line">    <span class="built_in">std</span>::visit(MyVisitor(), var1); </span><br><span class="line"> <span class="comment">// calls operator() for matching double type</span></span><br><span class="line">    <span class="built_in">std</span>::visit(MyVisitor(), var2); </span><br><span class="line"> <span class="comment">// calls operator() for matching std::string type</span></span><br><span class="line">    <span class="built_in">std</span>::visit(MyVisitor(), var3); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java Notes 2</title>
      <link href="/Backend/Java/Java-Notes-2.html"/>
      <url>/Backend/Java/Java-Notes-2.html</url>
      
        <content type="html"><![CDATA[<h2 id="Common-Types"><a href="#Common-Types" class="headerlink" title="Common Types"></a>Common Types</h2><h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><h4 id="The-Error-Class-and-the-Exception-Class"><a href="#The-Error-Class-and-the-Exception-Class" class="headerlink" title="The Error Class and the Exception Class"></a>The Error Class and the Exception Class</h4><p>The Java error-handling framework uses two different classes to identify abnormal software events:</p><ul><li>The <strong>Error</strong> class is used to indicate a serious problem that the application should <em>not</em> try to handle.</li><li>The <strong>Exception</strong> class is used when there is a less catastrophic event that the application <em>should</em> try to handle.</li></ul><h4 id="The-Throwable-Class"><a href="#The-Throwable-Class" class="headerlink" title="The Throwable Class"></a>The Throwable Class</h4><p>Both <em>Error</em> and <em>Exception</em> classes inherit from the abstract class <strong>throwable</strong>. This means that both errors and exceptions will contain:</p><ul><li><strong>The type of problem</strong> – the class type, either <em>Exception</em> or <em>Error</em></li><li><strong>The problem message</strong> – whatever description you’ve provided within the class, such as “out of memory”</li><li><strong>The stack trace where the exception occurred</strong> – the order in which things ran and the place in that sequence where the problem occurred (this information is used by developers to track down issues and resolve problems in the code)</li></ul><h4 id="Throwing-an-Exception"><a href="#Throwing-an-Exception" class="headerlink" title="Throwing an Exception"></a>Throwing an Exception</h4><p>What does it mean to throw an exception?</p><ul><li>When an error occurs within a method, that method creates an <em>Exception</em> object.</li><li>Next, the method hands the Exception off to the JVM runtime system. And that’s what we mean when we say that we are throwing an exception. We simply mean that a method hands off an exception to the runtime.</li></ul><h4 id="Checked-vs-Unchecked"><a href="#Checked-vs-Unchecked" class="headerlink" title="Checked vs Unchecked"></a>Checked vs Unchecked</h4><p>In Java there are two different types of exceptions:</p><h5 id="Unchecked-Exceptions"><a href="#Unchecked-Exceptions" class="headerlink" title="Unchecked Exceptions"></a>Unchecked Exceptions</h5><ul><li><strong>Unchecked</strong> exceptions are exceptions that are unknown to the compiler.</li><li>Because these exceptions are only known at runtime, they are also referred to as <em>runtime exceptions</em>.</li><li>They are a result of a programming error, typically arithmetic errors (such as division by 0).</li><li>Unchecked exceptions are used when when we expect that the caller of the method cannot recover from the exception.</li></ul><h5 id="Checked-Exceptions"><a href="#Checked-Exceptions" class="headerlink" title="Checked Exceptions"></a>Checked Exceptions</h5><ul><li><strong>Checked</strong> exceptions are known to the compiler.</li><li>If we are calling a method that potentially throws a checked exception, it <em>must</em> be handled (or we will get an error from the compiler).</li><li>Checked exceptions are used when we expect that the caller of the method <em>can</em> recover from the exception.</li></ul><h4 id="Handling-Exceptions"><a href="#Handling-Exceptions" class="headerlink" title="Handling Exceptions"></a>Handling Exceptions</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    read();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (FileNotFoundException ex)&#123;</span><br><span class="line">    ex.getLocalizedMessage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h3><p>In Java, the declaration of an Enum defines a class. This class can exist <strong>within another class</strong> or as a <strong>standalone class</strong>.</p><p>In some cases, we might only need to use the Enum type within a single class (as would probably be the case with the stoplight example). In that case it would be acceptable to define it within another class rather than as a standalone. However, if other classes are expected to use the enum type, it should be defined as a separate, standalone class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="keyword">enum</span> StopLight &#123;</span><br><span class="line">    RED,</span><br><span class="line">    YELLOW,</span><br><span class="line">    GREEN</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    StopLight myStoplight = Stoplight.RED; </span><br><span class="line">    System.out.println(myStoplight);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h3><p>The <code>Scanner</code> class can read and parse simple text. Here are some key points to keep in mind:</p><ul><li>It parses primitive types and String types into tokens.</li><li>By default it uses whitespaces to delimitate each word. However, it can also use regular expressions.</li><li>The Scanner class can read from several different types of sources, like strings, files and <code>System.in</code> (to get input from the command line).</li></ul><h4 id="Scanner-Syntax"><a href="#Scanner-Syntax" class="headerlink" title="Scanner Syntax"></a>Scanner Syntax</h4><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h5><p>We can use the <code>Scanner</code> class to get input from the command line. To do so, we instantiate a scanner object, passing in <code>System.in</code>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br></pre></td></tr></table></figure><h5 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h5><p>In this example we are using the <code>nextLine</code> method to return the full line of the input:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(<span class="string">"This is a line"</span>);</span><br><span class="line">System.out.println(scanner.nextLine());</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This is a line</span><br></pre></td></tr></table></figure><h5 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h5><p>In this next example, we are using the <code>next</code> method to read the first token. The <code>next</code> method finds and returns the next complete token.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(<span class="string">"This is a line"</span>);</span><br><span class="line">System.out.println(scanner.next());</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This</span><br></pre></td></tr></table></figure><h5 id="Example-4"><a href="#Example-4" class="headerlink" title="Example 4"></a>Example 4</h5><p>In the final example, we are using the <code>hasNext()</code> method in a <code>while</code> loop to determine if it is safe to call the next method. We only want to call the next method when we know there is a token available.</p><blockquote><p><strong>Note:</strong> By default the Scanner tokenizes input by whitespaces. Let’s say we have a string with the following text <code>&quot;One Two Three&quot;</code>. The text will be tokenized into three separate tokens, <code>&quot;One&quot;</code>, <code>&quot;Two&quot;</code> and <code>&quot;Three&quot;</code>.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(<span class="string">"This is a line"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(scanner.hasNext()) &#123;</span><br><span class="line">    System.out.println(scanner.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Output:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This</span><br><span class="line">is</span><br><span class="line">a</span><br><span class="line">line</span><br></pre></td></tr></table></figure><h4 id="Scanner-Example"><a href="#Scanner-Example" class="headerlink" title="Scanner Example"></a>Scanner Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInputTester</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Enter a String"</span>);</span><br><span class="line">            String userInput = scanner.nextLine();</span><br><span class="line">            System.out.println(<span class="string">"User Input: "</span> + userInput);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.getLocalizedMessage();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            scanner.close(); <span class="comment">// we have to close the scanner</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="RegEx"><a href="#RegEx" class="headerlink" title="RegEx"></a>RegEx</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegExTester</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      String emailRegex = <span class="string">"^(.+)@(.+).(.+)$"</span>;</span><br><span class="line">      Pattern pattern = Pattern.compile(emailRegex);</span><br><span class="line">      String email = <span class="string">"jeff@gmail.com"</span>;</span><br><span class="line"></span><br><span class="line">      System.out.println(pattern.matcher(email).matches());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>Java provides advanced memory management for String objects by using a <em>String pool</em>. A <strong>String pool</strong> is a way of storing only one copy of a String.</p><p>To understand this, we have to look at what is happening in memory when we create Strings and assign them to variables. Strings in Java are <em>immutable</em>, meaning they cannot be changed after they are created. When we “change” the String in a variable, what actually happens is that, behind the scenes, Java creates a new String in the String pool—and changes the variable’s reference value to point to this new String. The old String object may remain in place, unchanged.</p><p>Also note that multiple variables may use the same String reference. This means that if we have two variables with exactly the same String (e.g., <code>&quot;Hello&quot;</code>) they will all reference the same String object.</p><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gyofi80gpej31h70u0who.jpg" alt="image-20220123155351170"></p><h2 id="Generics-and-Collections"><a href="#Generics-and-Collections" class="headerlink" title="Generics and Collections"></a>Generics and Collections</h2><h3 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h3><p>With generics, we can identify what types are stored in the list. The syntax for a generic is very simple—it’s just bracket with the type inside, <code>&lt; type &gt;</code>. So in this example, we can add <code>&lt;String&gt;</code> right next to <code>List</code> to identify what types are stored in the list:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; myList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">myList.add(<span class="string">"one"</span>);</span><br><span class="line">myList.add(<span class="string">"two"</span>);</span><br><span class="line">myList.add(<span class="string">"three"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// We could also remove the element "one" </span></span><br><span class="line"><span class="comment">// by using the index 0 instead of the value "one".</span></span><br><span class="line">myList.remove(<span class="string">"one"</span>);</span><br></pre></td></tr></table></figure><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><h4 id="Use-iterator-with-collections"><a href="#Use-iterator-with-collections" class="headerlink" title="Use iterator with collections"></a>Use iterator with collections</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">names.add(<span class="string">"Mike"</span>);</span><br><span class="line">names.add(<span class="string">"Bob"</span>);</span><br><span class="line">names.add(<span class="string">"Alice"</span>);</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; iterator = names.iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">  System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="for-each-loop"><a href="#for-each-loop" class="headerlink" title="for each loop"></a>for each loop</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsExercise</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; listOfItems = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        listOfItems.add(<span class="string">"Mike"</span>);</span><br><span class="line">        listOfItems.add(<span class="string">"Bob"</span>);</span><br><span class="line">        listOfItems.add(<span class="string">"Alice"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String name : listOfItems) &#123;</span><br><span class="line">            System.out.println(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sorting-collections"><a href="#Sorting-collections" class="headerlink" title="Sorting collections"></a>Sorting collections</h3><h4 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h4><p>A list of Strings can be sorted by simply passing the list to the <code>Collections.sort()</code> method. In the example bellow, the names will be sorted in ascending order.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; names = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">names.add(<span class="string">"Mike"</span>);</span><br><span class="line">names.add(<span class="string">"Bob"</span>);</span><br><span class="line">names.add(<span class="string">"Alice"</span>);</span><br><span class="line"></span><br><span class="line">Collections.sort(names);</span><br></pre></td></tr></table></figure><h4 id="Wrapper-Objects"><a href="#Wrapper-Objects" class="headerlink" title="Wrapper Objects"></a>Wrapper Objects</h4><p>Wrapper objects were introduced in Java to wrap primitive variable types into objects. In the example below, the primitive <code>int</code> values are being converted to <code>Integer</code> objects and then sorted.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; numbers = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">numbers.add(<span class="number">201</span>);</span><br><span class="line">numbers.add(<span class="number">100</span>);</span><br><span class="line">numbers.add(<span class="number">101</span>);</span><br><span class="line"></span><br><span class="line">Collections.sort(numbers);</span><br></pre></td></tr></table></figure><h4 id="User-Defined-Classes"><a href="#User-Defined-Classes" class="headerlink" title="User-Defined Classes"></a>User-Defined Classes</h4><p>User-defined classes will need to implement the <strong>Comparable</strong> Interface in order to use the <code>Collections.sort()</code> method. The <em>Comparable</em> Interface provides a method, <code>compareTo</code>, which is used to compare two objects of the same type. In the example below we are using the Person object’s <code>name</code> field to compare Person objects. This line of code, <code>name.compareTo(person.name)</code>, handles all of the hard work.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>&#123;  </span><br><span class="line">  <span class="keyword">public</span> String name;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.name = name;  </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// implement compareTo function</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person person)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> name.compareTo(person.name);  </span><br><span class="line"></span><br><span class="line">  &#125;   </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonSort</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;Person&gt; people = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">    people.add(<span class="keyword">new</span> Person(<span class="string">"Same"</span>));</span><br><span class="line">    people.add(<span class="keyword">new</span> Person(<span class="string">"Mike"</span>));</span><br><span class="line">    people.add(<span class="keyword">new</span> Person(<span class="string">"Apple"</span>));</span><br><span class="line"></span><br><span class="line">    Collections.sort(people);</span><br><span class="line">    <span class="keyword">for</span> (Person person : people) &#123;</span><br><span class="line">      System.out.println(person.name);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Advanced-Collections"><a href="#Advanced-Collections" class="headerlink" title="Advanced Collections"></a>Advanced Collections</h2><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="Creating-a-Map-Object"><a href="#Creating-a-Map-Object" class="headerlink" title="Creating a Map Object"></a>Creating a Map Object</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Person&gt; mapOfPeople = <span class="keyword">new</span> HashMap&lt;String, Person&gt;();</span><br></pre></td></tr></table></figure><h4 id="Adding-to-a-Map"><a href="#Adding-to-a-Map" class="headerlink" title="Adding to a Map"></a>Adding to a Map</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person mike = <span class="keyword">new</span> Person(<span class="string">"Mike"</span>, <span class="string">"mike@email.com"</span>);</span><br><span class="line">Person shaun = <span class="keyword">new</span> Person(<span class="string">"Shaun"</span>, <span class="string">"shaun@email.com"</span>);</span><br><span class="line">Person sally = <span class="keyword">new</span> Person(<span class="string">"Sally"</span>, <span class="string">"sally@email.com"</span>);</span><br><span class="line">Person cesar = <span class="keyword">new</span> Person(<span class="string">"Cesar"</span>, <span class="string">"cesar@email.com"</span>);</span><br><span class="line"></span><br><span class="line">mapOfPeople.put(mike.getEmail(), mike);</span><br><span class="line">mapOfPeople.put(shaun.getEmail(), shaun);</span><br><span class="line">mapOfPeople.put(sally.getEmail(), sally);</span><br><span class="line">mapOfPeople.put(cesar.getEmail(), cesar);</span><br></pre></td></tr></table></figure><h4 id="Retrieving-an-object-from-a-Map"><a href="#Retrieving-an-object-from-a-Map" class="headerlink" title="Retrieving an object from a Map"></a>Retrieving an object from a Map</h4><p>In this example, we will be looking at the syntax to retrieve a Person object from the Map using an email as the key.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapOfPeople.get(<span class="string">"mike@email.com"</span>);</span><br></pre></td></tr></table></figure><h4 id="Iterating-over-a-Map"><a href="#Iterating-over-a-Map" class="headerlink" title="Iterating over a Map"></a>Iterating over a Map</h4><p>We can iterate over our Map using a <code>for-each</code> loop. Remember that each Map has three distinct views for seeing the data. We can get the keys, the values, or key-value mapping. In the example below we are displaying all of the keys for our Map.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (String email : mapOfPeople.keySet()) &#123;</span><br><span class="line">    System.out.println(email);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapExcercise</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Person&gt; mapOfPeople = <span class="keyword">new</span> HashMap&lt;String, Person&gt;();</span><br><span class="line">        Person mike = <span class="keyword">new</span> Person(<span class="string">"Mike"</span>, <span class="string">"mike@email.com"</span>);</span><br><span class="line">        Person shaun = <span class="keyword">new</span> Person(<span class="string">"Shaun"</span>, <span class="string">"shaun@email.com"</span>);</span><br><span class="line">        Person sally = <span class="keyword">new</span> Person(<span class="string">"Sally"</span>, <span class="string">"sally@email.com"</span>);</span><br><span class="line">        Person cesar = <span class="keyword">new</span> Person(<span class="string">"Cesar"</span>, <span class="string">"cesar@email.com"</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Person&gt; people = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        people.add(mike);</span><br><span class="line">        people.add(shaun);</span><br><span class="line">        people.add(sally);</span><br><span class="line">        people.add(cesar);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Person person : people) &#123;</span><br><span class="line">            MapExcercise.addToMap(mapOfPeople, person);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String email : mapOfPeople.keySet()) &#123;</span><br><span class="line">            System.out.println(email);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Person person : mapOfPeople.values()) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Get Mike: "</span> + mapOfPeople.get(<span class="string">"mike@email.com"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Get Jeff: "</span> + mapOfPeople.get(<span class="string">"jeff@email.com"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Contains Mike: "</span> + mapOfPeople.containsKey(<span class="string">"mike@email.com"</span>));</span><br><span class="line">        System.out.println(<span class="string">"Contains Jeff: "</span> + mapOfPeople.containsKey(<span class="string">"jeff@email.com"</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addToMap</span><span class="params">(Map&lt;String, Person&gt; map, Person person)</span> </span>&#123;</span><br><span class="line">        map.put(person.getEmail(), person);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String email)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">" "</span> + email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><h4 id="Concrete-Implementations"><a href="#Concrete-Implementations" class="headerlink" title="Concrete Implementations"></a>Concrete Implementations</h4><p>There are three concrete implementations for the Set interface:</p><ul><li>HashSet</li><li>TreeSet</li><li>LinkedHashSet</li></ul><p>Each of these implementations vary, but all of them enforce the no-duplicate-values requirement of the Set interface.</p><h4 id="Creating-a-Set-Object"><a href="#Creating-a-Set-Object" class="headerlink" title="Creating a Set Object"></a>Creating a Set Object</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;String&gt; mySet = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br></pre></td></tr></table></figure><h4 id="Adding-to-a-Set"><a href="#Adding-to-a-Set" class="headerlink" title="Adding to a Set"></a>Adding to a Set</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mySet.add(<span class="string">"Hello"</span>);</span><br><span class="line">mySet.add(<span class="string">"Hello"</span>);</span><br><span class="line">mySet.add(<span class="string">"Hellos"</span>);</span><br></pre></td></tr></table></figure><p>Even though we used <code>add</code> three times, this will actually only add two items, since one of the items is a duplicate.</p><h4 id="Retrieving-an-Object-From-a-Set"><a href="#Retrieving-an-Object-From-a-Set" class="headerlink" title="Retrieving an Object From a Set"></a>Retrieving an Object From a Set</h4><p>Using for each loop to retrieve an object.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String foundObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String text : mySet) &#123;</span><br><span class="line">   <span class="keyword">if</span>(text.equals(<span class="string">"Hello"</span>)&#123;</span><br><span class="line">      foundObject  = text;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetExcercise</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; numbers = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We have a list of numbers and some are duplicates</span></span><br><span class="line">        numbers.add(<span class="string">"123-222-3333"</span>);</span><br><span class="line">        numbers.add(<span class="string">"123-222-3333"</span>);</span><br><span class="line">        numbers.add(<span class="string">"555-222-3333"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add them to a Set to get a unique list</span></span><br><span class="line">        Set&lt;String&gt; uniqueNumbers = <span class="keyword">new</span> HashSet&lt;String&gt;(numbers);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String number : uniqueNumbers) &#123;</span><br><span class="line">            System.out.println(number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Queues"><a href="#Queues" class="headerlink" title="Queues"></a>Queues</h3><p><strong>Queues</strong> are data structures that allow us to process items in a <strong>First-In, First-Out</strong> (<strong>FIFO</strong>) order. The first item placed in a queue is also the first one removed from the queue.</p><p>Some key points about Queues in Java:</p><ul><li>Queue is an <em>interface</em> that implements the <em>Collection</em> interface</li><li>We <em>put</em> newly added elements at the <em>end</em> of the queue</li><li>We <em>pop</em> elements off the <em>front</em> of the queue</li></ul><h4 id="Creating-a-Queue-object"><a href="#Creating-a-Queue-object" class="headerlink" title="Creating a Queue object"></a>Creating a Queue object</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;String&gt; myQueue = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br></pre></td></tr></table></figure><h4 id="Adding-to-a-Queue"><a href="#Adding-to-a-Queue" class="headerlink" title="Adding to a Queue"></a>Adding to a Queue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myQueue.add(<span class="string">"Hi"</span>);</span><br><span class="line">myQueue.add(<span class="string">"There"</span>);</span><br></pre></td></tr></table></figure><h4 id="Retrieving-an-Object-From-a-Queue"><a href="#Retrieving-an-Object-From-a-Queue" class="headerlink" title="Retrieving an Object From a Queue"></a>Retrieving an Object From a Queue</h4><p>This method both <em>retrieves</em> the first element from the Queue and <em>removes</em> it from the Queue.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myQueue.poll()</span><br></pre></td></tr></table></figure><h4 id="Iterating-Over-a-Queue"><a href="#Iterating-Over-a-Queue" class="headerlink" title="Iterating Over a Queue"></a>Iterating Over a Queue</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (!myQueue.isEmpty()) &#123;</span><br><span class="line">    System.out.println(myQueue.poll());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Supplementary-Knowledge"><a href="#Supplementary-Knowledge" class="headerlink" title="Supplementary Knowledge"></a>Supplementary Knowledge</h2><h3 id="Super"><a href="#Super" class="headerlink" title="Super()"></a>Super()</h3><p>We can use super() to call the direct parent constructor.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeDecorator</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Shape decoratedShape;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShapeDecorator</span><span class="params">(Shape decoratedShape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.decoratedShape = decoratedShape;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        decoratedShape.draw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedShapeDecorator</span> <span class="keyword">extends</span> <span class="title">ShapeDecorator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedShapeDecorator</span><span class="params">(Shape decoratedShape)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(decoratedShape); <span class="comment">// use super() to call the parent constructor</span></span><br><span class="line">        <span class="comment">// inheritate the decoratedShape </span></span><br><span class="line">        <span class="comment">// this.decoratedShape = decoratedShape;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.draw();</span><br><span class="line">        setRedBorder(<span class="keyword">this</span>.decoratedShape); <span class="comment">// use the decoratedShape</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add a new function(decorate)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRedBorder</span><span class="params">(Shape decoratedShape)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Border Color: Red"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GCD</title>
      <link href="/iOS/GCD.html"/>
      <url>/iOS/GCD.html</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-GCD"><a href="#What-is-GCD" class="headerlink" title="What is GCD"></a>What is GCD</h2><p>GCD - ==Grand Central Dispatch==</p><p>UIKit can only be used on main queue.</p><p>Core data can be used both on main queue and background queue. But the core data can only be used in the same queue it was created.</p><p>Or we will meet ==concurrency bugs==. 并发错误</p><h2 id="async-and-sync"><a href="#async-and-sync" class="headerlink" title="async and sync"></a>async and sync</h2><ul><li>Dispatch_async(): doesn’t wait for the closure to finish, and moves on.</li><li>Dispatch_sync(): waits until the closure is done. Could easily get stalled.</li></ul><h2 id="UserDefaults"><a href="#UserDefaults" class="headerlink" title="UserDefaults"></a>UserDefaults</h2><p><strong><code>UserDefaults</code></strong>: a Dictionary that periodically saves its contents to your device’s permanent storage (SSD).</p><ul><li>Great for storing user preferences and other simple things.</li><li>Saves data in a plist file (property list file).</li><li>Can only store the following data types: <code>Data</code>, <code>String</code>, <code>Number</code>, <code>Date</code>, <code>Array</code>, and <code>Dictionary</code>.</li><li>When storing (writing) the file or accessing (reading) the file, <code>UserDefaults</code> does it all at once, possibly creating long/unnecessary I/O time.</li><li>It’s a good idea to keep <code>UserDefaults</code> under 1MB.</li></ul><h2 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h2><p>The difference between Swift optionals and Core Data optional attributes is subtle. Swift optionals can be nil during runtime, and Core Data optional attributes can be nil at save time.</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java Notes</title>
      <link href="/Backend/Java/Java%20Notes.html"/>
      <url>/Backend/Java/Java%20Notes.html</url>
      
        <content type="html"><![CDATA[<h2 id="Java-Programing-Basics"><a href="#Java-Programing-Basics" class="headerlink" title="Java Programing Basics"></a>Java Programing Basics</h2><h3 id="Java-is-static-typing"><a href="#Java-is-static-typing" class="headerlink" title="Java is static typing"></a>Java is static typing</h3><p>Notice that, in Java, we must specify the data type (e.g., <code>int</code>). This is becouse Java is a <em>statically typed</em> language. Here are the key points to remember about <strong>static typing</strong>:</p><ul><li>The data type is bound to the variable when the variable is first declared.</li><li>The data type is checked when the code is compiled.</li><li>The data type for a variable cannot later be changed.</li></ul><p>In contrast, some languages, such as Python, are dynamically typed. In <strong>dynamic typing</strong>:</p><ul><li>The data type is bound to the <em>value</em> itself, but not to the variable.</li><li>The type is checked during runtime.</li><li>The data type of a variable can be changed after it is declared; since the type is associated with the <em>value</em>, assigning a new value may mean changing the data type.</li></ul><h3 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world!"></a>Hello world!</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GettingStarted</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Add your code here:</span></span><br><span class="line">        System.out.println(<span class="string">"Hello world!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use commond line to compile and run</span></span><br><span class="line">javac GettingStarted.java</span><br><span class="line">java GettingStarted.java</span><br></pre></td></tr></table></figure><h3 id="Type-casting"><a href="#Type-casting" class="headerlink" title="Type casting"></a>Type casting</h3><h4 id="Automatic-Type-Casting"><a href="#Automatic-Type-Casting" class="headerlink" title="Automatic Type Casting"></a>Automatic Type Casting</h4><p><strong>Automatic</strong> type casting converts a smaller type into a larger type. For example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> intNumber = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">double</span> doubleNumber = intNumber;</span><br><span class="line">System.out.println(doubleNumber);</span><br></pre></td></tr></table></figure><p>When we print <code>doubleNumber</code>, the value will be <code>3.0</code>. Notice that there is no precision lost going from a smaller type into a larger type. We started with <code>3</code> and ended up with <code>3.0</code>.</p><h4 id="Manual-Type-Casting"><a href="#Manual-Type-Casting" class="headerlink" title="Manual Type Casting"></a>Manual Type Casting</h4><p><strong>Manual</strong> type casting is necessary when we want to do either of these things:</p><ul><li>Convert a larger type into a smaller type</li><li>Convert one object type into another</li></ul><p>For example, here we are converting from a larger type (double) to a smaller type (int):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">double doubleNumber = 3.5;</span><br><span class="line">int intNumber = (int)doubleNumber;</span><br><span class="line">System.out.println(intNumber);</span><br></pre></td></tr></table></figure><p>The resulting value will be <code>3</code>, not <code>3.5</code>. When we go from a larger type into a smaller type, precision is lost. Java cuts off additional data that will not fit in the casted type. So when we go from a double to an int, any values that are not integers will be removed. This is called <em>truncation</em>.</p><h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><h4 id="Method-syntax"><a href="#Method-syntax" class="headerlink" title="Method syntax"></a>Method syntax</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">findTheArea</span><span class="params">(<span class="keyword">double</span> length, <span class="keyword">double</span> width)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> area = length * width;</span><br><span class="line">    <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Methods-vs-Functions"><a href="#Methods-vs-Functions" class="headerlink" title="Methods vs Functions"></a>Methods vs Functions</h4><p>You’ll often see the words <strong>function</strong> and <strong>method</strong> used interchangeably. Although the terms are sometimes used loosely, here’s the distinction:</p><ul><li>A <em>function</em> is any block of reusable/callable code.</li><li>A <em>method</em> is a block of reusable/callable code that is attached to a class or object.</li></ul><p>So a method is a type of function, but it’s one that is associated with a class or object, whereas other functions can be executed from anywhere.</p><h3 id="Stack-and-Heap"><a href="#Stack-and-Heap" class="headerlink" title="Stack and Heap"></a>Stack and Heap</h3><p><img src="https://tva1.sinaimg.cn/large/008i3skNgy1gynk6gr9opj31fl0u0wiv.jpg" alt="image-20220122102441454"></p><h3 id="Types-of-Access-Modifiers"><a href="#Types-of-Access-Modifiers" class="headerlink" title="Types of Access Modifiers"></a>Types of Access Modifiers</h3><p>There are four types of access modifiers in Java:</p><ul><li><strong>Public</strong> means the class can be accessed from everywhere. If you have a method on a class that you want to expose to all other classes, then use this access modifier.</li><li><strong>Private</strong> means only the defining class can access the data. This provides security, by not allowing other classes to change the data directly. Instead, they must make changes to the data via the provided methods only.</li><li><strong>Protected</strong> means that access is restricted to the defining class, package, or subclass. This will be useful when we get into subclasses and inheritance in a later lesson, as it will allow our subclasses to use variables and methods from the parent class.</li><li><strong>Default</strong> means access is restricted to the defining class or the package. This can be used when we have classes inside the same package that we may want to expose data and methods too.</li></ul><table><thead><tr><th align="left">Access</th><th align="left">Inside class</th><th align="left">Inside package</th><th align="left">Outside package by subclass</th><th align="left">Outside package</th></tr></thead><tbody><tr><td align="left"><strong>Private</strong></td><td align="left">Yes</td><td align="left">No</td><td align="left">No</td><td align="left">No</td></tr><tr><td align="left"><strong>Default</strong></td><td align="left">Yes</td><td align="left">Yes</td><td align="left">No</td><td align="left">No</td></tr><tr><td align="left"><strong>Protected</strong></td><td align="left">Yes</td><td align="left">Yes</td><td align="left">Yes</td><td align="left">No</td></tr><tr><td align="left"><strong>Public</strong></td><td align="left">Yes</td><td align="left">Yes</td><td align="left">Yes</td><td align="left">Yes</td></tr></tbody></table><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><h4 id="Creating-an-Array"><a href="#Creating-an-Array" class="headerlink" title="Creating an Array"></a>Creating an Array</h4><p>Here’s an example of some code that creates an array of size four, containing four integer values:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [] numbers  = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><p>Notice that creating an array involves three steps:</p><ol><li>Declare the type of the array, using brackets (as in <code>int []</code>).</li><li>Name the array (in this example, the name is <code>numbers</code>).</li><li>Add values to the array.</li></ol><h4 id="Another-Way-to-Create-an-Array"><a href="#Another-Way-to-Create-an-Array" class="headerlink" title="Another Way to Create an Array"></a>Another Way to Create an Array</h4><p>Here’s another way we can create an array and add values to it:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> [] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">numbers[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">numbers[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">numbers[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">numbers[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> &#125;;</span><br></pre></td></tr></table></figure><p>This approach uses the <code>new</code> keyword to create a new array object of size 4, and then we assign values to the four spaces created in the array.</p><h3 id="Loop"><a href="#Loop" class="headerlink" title="Loop"></a>Loop</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoopExercise</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] numbers = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add for Loop Here</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">            System.out.println(numbers[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add while Loop Here</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; numbers.length) &#123;</span><br><span class="line">            System.out.println(numbers[index]);</span><br><span class="line">            index++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add Do while Loop Here</span></span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(numbers[counter]);</span><br><span class="line">            counter++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (counter &lt; numbers.length);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Documentation"><a href="#Documentation" class="headerlink" title="Documentation"></a>Documentation</h3><h4 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h4><p>JavaDoc comments use a simple syntax that supports multi-line HTML format documentation. Here’s what the syntax looks like:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** documentation */</span></span><br></pre></td></tr></table></figure><p>And here’s an example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** This program HelloWorld produces a standard output</span></span><br><span class="line"><span class="comment"> *  displaying "Hello World"</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> The author of the class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> A reference to another class</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="Parts-of-a-JavaDoc-Comment"><a href="#Parts-of-a-JavaDoc-Comment" class="headerlink" title="Parts of a JavaDoc Comment"></a>Parts of a JavaDoc Comment</h4><p>Notice that JavaDoc comments are broken down into two parts:</p><ol><li>The description</li><li>Block tags</li></ol><p>In the above example, the description is the first part of the comment, and the block tags are the last part (<code>@author</code> and <code>@see</code>).</p><p>In this example, we have a doc comment for a method:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This method displays a simple text output to a provided name</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name The name of the person we want to say “Hi” too</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> results Returns true if the name was printed or</span></span><br><span class="line"><span class="comment"> * false if it failed </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Objecte-Oriented-Programming"><a href="#Objecte-Oriented-Programming" class="headerlink" title="Objecte-Oriented Programming"></a>Objecte-Oriented Programming</h2><h3 id="Define-a-class"><a href="#Define-a-class" class="headerlink" title="Define a class"></a>Define a class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">        <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">" "</span> +<span class="keyword">this</span>.lastName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Garbage-Collection"><a href="#Garbage-Collection" class="headerlink" title="Garbage Collection"></a>Garbage Collection</h3><p>Every new object that we instantiate is added to the heap and consumes memory. In programming languages like C or C++, developers are responsible for creating and destroying objects. In contrast, Java has a background process called <strong>Garbage Collection (GC)</strong> that checks all instantiated objects, and destroys them if they do not have any references—thus freeing up memory, even without any active management on the part of the developer.</p><h3 id="Abstract-Classes"><a href="#Abstract-Classes" class="headerlink" title="Abstract Classes"></a>Abstract Classes</h3><p>An <strong>abstract class</strong> has the following key characteristics:</p><ul><li>It defines the behavior for each of the subclasses, but we cannot directly instantiate the abstract class itself.</li><li>It allows us to create abstract methods<ul><li>An abstract method is a method that does not contain an implementation body. Instead, it simply provides a header for the method.</li><li>Subclasses that extend an abstract class are required to override all abstract methods and provide a specific implementation.</li></ul></li></ul><h4 id="Example-Abstract-Vehicle-Class"><a href="#Example-Abstract-Vehicle-Class" class="headerlink" title="Example: Abstract Vehicle Class"></a>Example: Abstract <code>Vehicle</code> Class</h4><p>Here’s the example we looked at in the video. To ensure that we will <em>not</em> be able to directly instantiate <code>Vehicle</code> objects from this class, we define it using the <code>abstract</code> keyword:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String start;</span><br><span class="line">    <span class="keyword">protected</span> String stop;</span><br><span class="line">    <span class="keyword">protected</span> String direction;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vehicle</span><span class="params">(String start, String stop, String direction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.stop = stop;</span><br><span class="line">        <span class="keyword">this</span>.direction = direction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span></span>;    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next, we use the <code>Extends</code> keyword to have our <code>Car</code> class extend the <code>Vehicle</code> class:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Car start"</span>, <span class="string">"Car stop"</span>, <span class="string">"Car direction"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"55"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><p><strong>Interfaces</strong> allow us to avoid hardcoding features in an application. We can move specific implementation details into subclasses, and then use an interface to communicate between the application and the subclasses.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSpeed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String speed;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String type, String speed, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.speed = speed;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSpeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> speed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Interfaces-vs-Abstract-Classes"><a href="#Interfaces-vs-Abstract-Classes" class="headerlink" title="Interfaces vs Abstract Classes"></a>Interfaces vs Abstract Classes</h3><p>Here are some of the similarities and differences between abstract classes and interfaces:</p><p><strong>Abstract class</strong></p><ul><li>Can have class(static) variables.</li><li>Can have both <strong>abstract</strong> methods and <strong>concrete</strong> methods that are shared with the subclasses.</li><li><strong>Can have instance variables</strong>, i.e. variables that are specific to individual subclasses.</li><li>Subclasses can only extend one class.</li></ul><p><strong>Interfaces</strong></p><ul><li>Can have class(static) variables.</li><li>Every method in an interface is <strong>abstract</strong>.</li><li><strong>Cannot have instance variables</strong>. Variables in an interface must be the same for every class implementing the interface.</li><li>Classes can implement more than one interface and <strong>have multiple inheritance</strong>.</li></ul><blockquote><p>Abstract classes are used for <strong>Modeling</strong> a class hierarchy of similar looking classes (For example Animal can be abstract class and Human , Lion, Tiger can be concrete derived classes)</p><p>Interface is used for <strong>Communication</strong> between 2 similar / non similar classes which does not care about type of the class implementing Interface(e.g. Height can be interface property and it can be implemented by Human , Building , Tree. It does not matter if you can eat , you can swim you can die or anything.. it matters only a thing that you need to have Height (implementation in you class) ).</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Backend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/OtherTechnique/Git.html"/>
      <url>/OtherTechnique/Git.html</url>
      
        <content type="html"><![CDATA[<h1 id="How-to-use-Git"><a href="#How-to-use-Git" class="headerlink" title="How to use Git"></a>How to use Git</h1><p>Here are some commonds to use git.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &apos;&apos;</span><br><span class="line">git push</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git branch <span class="comment"># show the local branch </span></span><br><span class="line">git branch -a <span class="comment"># show all the branch including the remote branch</span></span><br><span class="line">git checkout branchName <span class="comment"># change to the local branch</span></span><br><span class="line">git checkout -b localBranchName origin/remoteBranchName </span><br><span class="line"><span class="comment"># create a new local branch the same as the remote branch</span></span><br><span class="line">git merge branchName <span class="comment"># merge the current branch with another branch</span></span><br><span class="line">git branch -d branchName <span class="comment"># delete the local branch</span></span><br><span class="line">git push origin --delete remoteBranchName <span class="comment"># delete the remote branch</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network Foundations HTTP</title>
      <link href="/iOS/Network-Foundations-HTTP.html"/>
      <url>/iOS/Network-Foundations-HTTP.html</url>
      
        <content type="html"><![CDATA[<h1 id="Networking-Terms"><a href="#Networking-Terms" class="headerlink" title="Networking Terms"></a>Networking Terms</h1><ul><li><strong>Data:</strong> (Usually in the raw form) anything that is sent over the network.</li><li><strong>Client:</strong></li><li><strong>Server:</strong></li><li><strong>URL:</strong> <strong>U</strong>niform <strong>R</strong>esource <strong>L</strong>ocator</li><li><strong>HTTP:</strong> <strong>H</strong>yper<strong>t</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol</li><li><strong>HTTPS:</strong> HTTP <strong>S</strong>ecure,</li></ul><h1 id="Anatomy-of-a-URL"><a href="#Anatomy-of-a-URL" class="headerlink" title="Anatomy of a URL"></a>Anatomy of a URL</h1><table><thead><tr><th>Component</th><th>Name</th></tr></thead><tbody><tr><td>https://</td><td>scheme</td></tr><tr><td>swift.org</td><td>host</td></tr><tr><td>/about/</td><td>path</td></tr></tbody></table><table><thead><tr><th>Order</th><th>Component</th></tr></thead><tbody><tr><td>1st</td><td>scheme</td></tr><tr><td>2nd</td><td>host</td></tr><tr><td>3rd</td><td>port</td></tr><tr><td>4th</td><td>path</td></tr><tr><td>5th</td><td>query</td></tr><tr><td>6th</td><td>fragment</td></tr></tbody></table><h1 id="Status-codes"><a href="#Status-codes" class="headerlink" title="Status codes"></a>Status codes</h1><p>HTTP status codes fall into 5 ranges based on the type of response.</p><ul><li><strong>100:</strong> Informational response (request has been received by the server but is not finished yet)</li><li><strong>200:</strong> Successful response (request has been processed and completed by the server)</li><li><strong>300:</strong> Redirection (client needs to do something to complete the request)</li><li><strong>400:</strong> Unsuccessful (problem with the client’s request)</li><li><strong>500:</strong> Unsuccessful (problem with the server)</li></ul><p>A complete list of status codes can be found <a href="https://en.wikipedia.org/wiki/List_of_HTTP_status_codes" target="_blank" rel="noopener">here</a>.</p><table><thead><tr><th align="left"><strong>Status Code</strong></th><th align="left"><strong>Short Description</strong></th><th align="left"><strong>Category</strong></th></tr></thead><tbody><tr><td align="left">100</td><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/100" target="_blank" rel="noopener">Continue</a></td><td align="left">Information</td></tr><tr><td align="left">200</td><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/200" target="_blank" rel="noopener">OK</a></td><td align="left">Success</td></tr><tr><td align="left">301</td><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301" target="_blank" rel="noopener">Moved Permanently</a></td><td align="left">Redirection</td></tr><tr><td align="left">403</td><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403" target="_blank" rel="noopener">Forbidden</a></td><td align="left">Client Error</td></tr><tr><td align="left">404</td><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404" target="_blank" rel="noopener">Not Found</a></td><td align="left">Client Error</td></tr><tr><td align="left">418</td><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/418" target="_blank" rel="noopener">I’m a teapot</a></td><td align="left">Client Error</td></tr><tr><td align="left">500</td><td align="left"><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500" target="_blank" rel="noopener">Internal Server Error</a></td><td align="left">Server Error</td></tr></tbody></table><h1 id="HTTP-Verbs"><a href="#HTTP-Verbs" class="headerlink" title="HTTP Verbs"></a>HTTP Verbs</h1><p>CRUD:</p><ul><li>Create</li><li>Read</li><li>Update</li><li>Delete</li></ul><table><thead><tr><th>Verb</th><th>CRUD Operation</th></tr></thead><tbody><tr><td>GET</td><td>Read</td></tr><tr><td>POST</td><td>Create</td></tr><tr><td>PUT</td><td>Update(Replace)</td></tr><tr><td>PATCH</td><td>Update(Modify)</td></tr><tr><td>DELETE</td><td>Delete</td></tr></tbody></table><ul><li><strong>GET</strong>: Retrieves data from the server, such as getting a list of search results.</li><li><strong>POST</strong>: Submits data to be stored in the server, such as when submitting a form.</li><li><strong>PUT</strong>: Updates data on the server, replacing the old data with the new data.</li><li><strong>PATCH</strong>: Updates data on the server, by changing specific values.</li><li><strong>DELETE</strong>: Used when removing data from the server.</li></ul><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><h1 id="string"><a href="#string" class="headerlink" title="string"></a>string</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Task 1: create a valid URL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> website = <span class="string">"http://udacity.com"</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="type">URL</span>(string: website)</span><br><span class="line"><span class="built_in">print</span>(url!)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Task 2: append an "ios" path component to the URL</span></span><br><span class="line"></span><br><span class="line">url?.appendPathComponent(<span class="string">"ios"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> url = url &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"URL: \(url)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>We can’t add query and fragment.</p></blockquote><h2 id="URLComponents"><a href="#URLComponents" class="headerlink" title="URLComponents"></a>URLComponents</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a new URLComponents</span></span><br><span class="line"><span class="keyword">var</span> components = <span class="type">URLComponents</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// set the scheme</span></span><br><span class="line">components.scheme = <span class="string">"https"</span></span><br><span class="line"><span class="comment">// set the host</span></span><br><span class="line">components.host = <span class="string">"google.com"</span></span><br><span class="line"><span class="comment">// set the path</span></span><br><span class="line">components.path = <span class="string">"/search"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set the query, you'll need to create a new URLQueryItem</span></span><br><span class="line">components.queryItems = [<span class="type">URLQueryItem</span>(name: <span class="string">"query"</span>, value: <span class="string">"udacity"</span>)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(components.url ?? <span class="string">""</span>)</span><br></pre></td></tr></table></figure><h2 id="Use-struct-to-store-URLComponents"><a href="#Use-struct-to-store-URLComponents" class="headerlink" title="Use struct to store URLComponents"></a>Use struct to store URLComponents</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> urlString = <span class="string">"https://itunes.apple.com/us/app/udacity/id819700933?mt=8"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> urlComponents = <span class="type">URLComponents</span>(string: urlString)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> urlComponents = urlComponents &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"scheme:\t\t\(String(reflecting: urlComponents.scheme))"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"user:\t\t\(String(reflecting: urlComponents.user))"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"password:\t\(String(reflecting: urlComponents.password))"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"host:\t\t\(String(reflecting: urlComponents.host))"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"port:\t\t\(String(reflecting: urlComponents.port))"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"path:\t\t\(String(reflecting: urlComponents.path))"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"query:\t\t\(String(reflecting: urlComponents.query))"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"fragment:\t\(String(reflecting: urlComponents.fragment))"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AppStore</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> scheme = <span class="string">"https"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> host = <span class="string">"itunes.apple.com"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> udacityPath = <span class="string">"/us/app/udacity/id819700933"</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ParameterKey</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> mediaType = <span class="string">"mt"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">MediaType</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> music = <span class="string">"1"</span>,</span><br><span class="line">        podcasts = <span class="string">"2"</span>,</span><br><span class="line">        audiobooks = <span class="string">"3"</span>,</span><br><span class="line">        tvShows = <span class="string">"4"</span>,</span><br><span class="line">        musicVideos = <span class="string">"5"</span>,</span><br><span class="line">        movies = <span class="string">"6"</span>,</span><br><span class="line">        iPodGames = <span class="string">"7"</span>,</span><br><span class="line">        mobileApps = <span class="string">"8"</span>,</span><br><span class="line">        ringTones = <span class="string">"9"</span>,</span><br><span class="line">        iTunesU = <span class="string">"10"</span>,</span><br><span class="line">        ebooks = <span class="string">"11"</span>,</span><br><span class="line">        desktopApps = <span class="string">"12"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> udacityAppURL = <span class="type">URLComponents</span>()</span><br><span class="line">udacityAppURL.scheme = <span class="type">AppStore</span>.scheme</span><br><span class="line">udacityAppURL.host = <span class="type">AppStore</span>.host</span><br><span class="line">udacityAppURL.path = <span class="type">AppStore</span>.udacityPath</span><br><span class="line"></span><br><span class="line">udacityAppURL.queryItems = [<span class="type">URLQueryItem</span>(name: <span class="type">AppStore</span>.<span class="type">ParameterKey</span>.mediaType.rawValue, value: <span class="type">AppStore</span>.<span class="type">MediaType</span>.mobileApps.rawValue)]</span><br><span class="line"><span class="built_in">print</span>(udacityAppURL)</span><br></pre></td></tr></table></figure><h2 id="URLSession"><a href="#URLSession" class="headerlink" title="URLSession"></a>URLSession</h2><p>“Tasks” are what <code>URLSession</code> calls network requests.</p><ul><li><code>URLSessionDataTask</code>: Used for perfuming an HTTP request (GET, POST, etc.).</li><li><code>URLSessionDownloadTask</code>: Downloading a file from a server.</li><li><code>URLSessionUploadTask</code>: Uploading a file to a server</li><li><code>URLSessionStreamTask</code>: Getting a continuous stream of data from a server.</li></ul><blockquote><p>After you create the task, you must start it by calling its <a href="https://developer.apple.com/documentation/foundation/urlsessiontask/1411121-resume" target="_blank" rel="noopener"><code>resume()</code></a> method.</p><p>Newly-initialized tasks begin in a suspended state, so you need to call this method to start the task.</p></blockquote><p>###URLSession.shared.dataTask </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">loadImage</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="keyword">self</span>.imageLocation) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Cannot create url!"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: url) &#123;</span><br><span class="line">            (data, response, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> data = data <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"no data"</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> downLoadedImage = <span class="type">UIImage</span>(data: data)</span><br><span class="line">          <span class="comment">// the code of network request is working on the background</span></span><br><span class="line">          <span class="comment">// have to move this line of code to the main thread</span></span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                <span class="keyword">self</span>.imageView.image = downLoadedImage</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  <span class="comment">// have to use resume() to start the task </span></span><br><span class="line">        task.resume()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="Trailing-closure-syntax"><a href="#Trailing-closure-syntax" class="headerlink" title="Trailing closure syntax"></a>Trailing closure syntax</h4><p>Many functions in iOS accept multiple parameters where the final parameter is a closure.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: url, completionHandler: &#123;</span><br><span class="line">  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// trailing closure syntax</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: url) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URLSession-shared-downloadTask"><a href="#URLSession-shared-downloadTask" class="headerlink" title="URLSession.shared.downloadTask"></a>URLSession.shared.downloadTask</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">loadImage</span><span class="params">(<span class="number">_</span> sender: <span class="keyword">Any</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="keyword">self</span>.imageLocation) <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Cannot create url!"</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.downloadTask(with: url) &#123;</span><br><span class="line">            (location, response, error) <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> location = location <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">"location is nil!"</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> downLoadedImage = <span class="keyword">try</span>! <span class="type">Data</span>(contentsOf: location)</span><br><span class="line">            <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">                <span class="keyword">self</span>.imageView.image = <span class="type">UIImage</span>(data: downLoadedImage)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        task.resume()</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="API-amp-Web-Service"><a href="#API-amp-Web-Service" class="headerlink" title="API &amp; Web Service"></a>API &amp; Web Service</h2><p>There you have it: an API is an interface that allows you to build on the data and functionality of another application, while a web service is a network-based resource that fulfills a specific task. Yes, there’s overlap between the two: all web services are APIs, but not all APIs are web services.</p><h2 id="DogAPI"><a href="#DogAPI" class="headerlink" title="DogAPI"></a>DogAPI</h2><h3 id="JSONSerialization"><a href="#JSONSerialization" class="headerlink" title="JSONSerialization"></a>JSONSerialization</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogAPI</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">endpoint</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> randomImageFromAllDogsCollection = <span class="string">"https://dog.ceo/api/breeds/image/random"</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> url: <span class="type">URL</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="type">URL</span>(string: <span class="keyword">self</span>.rawValue)!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> randomImageEndpoint = <span class="type">DogAPI</span>.endpoint.randomImageFromAllDogsCollection.url</span><br><span class="line">        </span><br><span class="line"><span class="keyword">let</span> tast = <span class="type">URLSession</span>.shared.dataTask(with: randomImageEndpoint) &#123; </span><br><span class="line">  data, response, error <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">guard</span> <span class="keyword">let</span> data = data <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125; <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> json = <span class="keyword">try</span> <span class="type">JSONSerialization</span>.jsonObject(with: data, options: []) <span class="keyword">as</span>! [<span class="type">String</span>: <span class="type">Any</span>]</span><br><span class="line">    <span class="keyword">let</span> url = json[<span class="string">"message"</span>] <span class="keyword">as</span>! <span class="type">String</span></span><br><span class="line">    <span class="built_in">print</span>(url)</span><br><span class="line">  &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">tast.resume()</span><br></pre></td></tr></table></figure><h2 id="Codable"><a href="#Codable" class="headerlink" title="Codable"></a>Codable</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DogImage</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> status: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> message: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">let</span> imageData = <span class="keyword">try</span>! decoder.decode(<span class="type">DogImage</span>.<span class="keyword">self</span>, from: data)</span><br><span class="line"><span class="built_in">print</span>(imageData) <span class="comment">// a struct</span></span><br></pre></td></tr></table></figure><h2 id="JSON-parsing-scenarios"><a href="#JSON-parsing-scenarios" class="headerlink" title="JSON parsing scenarios"></a>JSON parsing scenarios</h2><ul><li><strong>Coding Keys</strong> (a way to map differently named JSON keys to Swift property names)</li><li><strong>Parsing JSON Arrays</strong></li><li><strong>Nested</strong> JSON objects</li><li><strong>Accessing keys and values</strong> (treating a JSON object like a dictionary when we don’t know what the keys and values will be)</li></ul><h3 id="Coding-Keys"><a href="#Coding-Keys" class="headerlink" title="Coding Keys"></a>Coding Keys</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "food_name": "Lemon",</span></span><br><span class="line"><span class="string">    "taste": "sour",</span></span><br><span class="line"><span class="string">    "number of calories": 17</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span>.data(using: .utf8)!</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Food</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> taste: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> calories: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> name = <span class="string">"food_name"</span></span><br><span class="line">        <span class="keyword">case</span> taste</span><br><span class="line">        <span class="keyword">case</span> calories = <span class="string">"number of calories"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">let</span> food: <span class="type">Food</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    food = <span class="keyword">try</span> decoder.decode(<span class="type">Food</span>.<span class="keyword">self</span>, from: json)</span><br><span class="line">    <span class="built_in">print</span>(food)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Parsing-JSON-Arrays"><a href="#Parsing-JSON-Arrays" class="headerlink" title="Parsing JSON Arrays"></a>Parsing JSON Arrays</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">"""</span></span><br><span class="line"><span class="string">[</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        "title": "Groundhog Day",</span></span><br><span class="line"><span class="string">        "released": 1993,</span></span><br><span class="line"><span class="string">        "starring": ["Bill Murray", "Andie MacDowell", "Chris Elliot"]</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        "title": "Home Alone",</span></span><br><span class="line"><span class="string">        "released": 1990,</span></span><br><span class="line"><span class="string">        "starring": ["Macaulay Culkin", "Joe Pesci", "Daniel Stern", "John Heard", "Catherine O'Hara"]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">"""</span>.data(using: .utf8)!</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Movie</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> released: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> starring: [<span class="type">String</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">let</span> comedies: [<span class="type">Movie</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    comedies = <span class="keyword">try</span> decoder.decode([<span class="type">Movie</span>].<span class="keyword">self</span>, from: json)</span><br><span class="line">    <span class="built_in">print</span>(comedies)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nested-JSON-objects"><a href="#Nested-JSON-objects" class="headerlink" title="Nested JSON objects"></a>Nested JSON objects</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "name": "",</span></span><br><span class="line"><span class="string">    "studentId: 326156,</span></span><br><span class="line"><span class="string">    "academics": &#123;</span></span><br><span class="line"><span class="string">        "field": "iOS",</span></span><br><span class="line"><span class="string">        "grade": "A"</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span>.data(using: .utf8)!</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Academics</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> field: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> grade: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> studentId: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> academics: <span class="type">Academics</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">let</span> student: <span class="type">Student</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    student = <span class="keyword">try</span> decoder.decode(<span class="type">Student</span>.<span class="keyword">self</span>, from: json)</span><br><span class="line">    <span class="built_in">print</span>(student)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Accessing-keys-and-values"><a href="#Accessing-keys-and-values" class="headerlink" title="Accessing keys and values"></a>Accessing keys and values</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> json = <span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "100": &#123;</span></span><br><span class="line"><span class="string">        "type": "colonial",</span></span><br><span class="line"><span class="string">        "location": "Plainville, MA",</span></span><br><span class="line"><span class="string">        "bedrooms": 3,</span></span><br><span class="line"><span class="string">        "bathrooms": 2.5,</span></span><br><span class="line"><span class="string">        "has air conditioning": false,</span></span><br><span class="line"><span class="string">        "amenities": ["basement", "garden"],</span></span><br><span class="line"><span class="string">        "listing": &#123;</span></span><br><span class="line"><span class="string">            "price": 430000,</span></span><br><span class="line"><span class="string">            "date": "May 2018"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    "101": &#123;</span></span><br><span class="line"><span class="string">        "type": "condo",</span></span><br><span class="line"><span class="string">        "location": "San Francisco, CA",</span></span><br><span class="line"><span class="string">        "bedrooms": 1,</span></span><br><span class="line"><span class="string">        "bathrooms": 1,</span></span><br><span class="line"><span class="string">        "has air conditioning": true,</span></span><br><span class="line"><span class="string">        "amenities": [],</span></span><br><span class="line"><span class="string">        "listing": &#123;</span></span><br><span class="line"><span class="string">            "price": 765000,</span></span><br><span class="line"><span class="string">            "date": "September 2018"</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span>.data(using: .utf8)!</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Listing</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> price: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> date: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">House</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> houseType: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> location: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> beds: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> baths: <span class="type">Float</span></span><br><span class="line">    <span class="keyword">let</span> hasAirConditioning: <span class="type">Bool</span></span><br><span class="line">    <span class="keyword">let</span> amenities: [<span class="type">String</span>]</span><br><span class="line">    <span class="keyword">let</span> listing: <span class="type">Listing</span></span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">CodingKeys</span>: <span class="title">String</span>, <span class="title">CodingKey</span> </span>&#123;</span><br><span class="line">        <span class="keyword">case</span> houseType = <span class="string">"type"</span></span><br><span class="line">        <span class="keyword">case</span> location = <span class="string">"location"</span></span><br><span class="line">        <span class="keyword">case</span> beds = <span class="string">"bedrooms"</span></span><br><span class="line">        <span class="keyword">case</span> baths = <span class="string">"bathrooms"</span></span><br><span class="line">        <span class="keyword">case</span> hasAirConditioning = <span class="string">"has air conditioning"</span></span><br><span class="line">        <span class="keyword">case</span> amenities</span><br><span class="line">        <span class="keyword">case</span> listing</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> decoder = <span class="type">JSONDecoder</span>()</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> houseDict = <span class="keyword">try</span> decoder.decode([<span class="type">String</span>: <span class="type">House</span>].<span class="keyword">self</span>, from: json)</span><br><span class="line">    <span class="built_in">print</span>(houseDict)</span><br><span class="line">    <span class="keyword">let</span> houses = houseDict.values.<span class="built_in">map</span>(&#123;$<span class="number">0</span>&#125;)</span><br><span class="line">    <span class="keyword">let</span> houseIds = houseDict.keys.<span class="built_in">map</span>(&#123;$<span class="number">0</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(houses)</span><br><span class="line">    <span class="built_in">print</span>(houseIds)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>We have to use <a href="https://developer.apple.com/documentation/swift/array/3017522-map" target="_blank" rel="noopener">map</a> to transform the data from keys <code>type</code> to <code>array</code> type.</p></blockquote><h2 id="Post-request-in-Swift"><a href="#Post-request-in-Swift" class="headerlink" title="Post request in Swift"></a>Post request in Swift</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> CoreFoundation</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a Codable struct called "POST" with the correct properties</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Post</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> userId: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> body: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create an instance of the Post struct with your own values</span></span><br><span class="line"><span class="keyword">let</span> post = <span class="type">Post</span>(userId: <span class="number">1</span>, title: <span class="string">"udacity"</span>, body: <span class="string">"udacious"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// create a URLRequest by passing in the URL</span></span><br><span class="line"><span class="keyword">var</span> request = <span class="type">URLRequest</span>(url: <span class="type">URL</span>(string: <span class="string">"https://jsonplaceholder.typicode.com/posts"</span>)!)</span><br><span class="line"><span class="comment">// set the HTTP method to POST</span></span><br><span class="line">request.httpMethod = <span class="string">"POST"</span></span><br><span class="line"><span class="comment">// set the HTTP body to the encoded "Post" struct</span></span><br><span class="line">request.httpBody = <span class="keyword">try</span>! <span class="type">JSONEncoder</span>().encode(post)</span><br><span class="line"><span class="comment">// set the appropriate HTTP header fields</span></span><br><span class="line">request.addValue(<span class="string">"application/json"</span>, forHTTPHeaderField: <span class="string">"Content-Type"</span>)</span><br><span class="line"><span class="comment">// HACK: this line allows the workspace or an Xcode playground to execute the request, but is not needed in a real app</span></span><br><span class="line"><span class="keyword">let</span> runLoop = <span class="type">CFRunLoopGetCurrent</span>()</span><br><span class="line"><span class="comment">// task for making the request</span></span><br><span class="line"><span class="keyword">let</span> task = <span class="type">URLSession</span>.shared.dataTask(with: request) &#123;data, response, error <span class="keyword">in</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="type">String</span>(data: data!, encoding: .utf8))</span><br><span class="line">    <span class="comment">// also not necessary in a real app</span></span><br><span class="line">    <span class="type">CFRunLoopStop</span>(runLoop)</span><br><span class="line">&#125;</span><br><span class="line">task.resume()</span><br><span class="line"><span class="comment">// not necessary</span></span><br><span class="line"><span class="type">CFRunLoopRun</span>()s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Binary Search Tree</title>
      <link href="/LeetCode/Binary-Search-Tree.html"/>
      <url>/LeetCode/Binary-Search-Tree.html</url>
      
        <content type="html"><![CDATA[<h2 id="Find-CLosest-Value-in-BST"><a href="#Find-CLosest-Value-in-BST" class="headerlink" title="Find CLosest Value in BST"></a>Find CLosest Value in BST</h2><h3 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h3><p>Write a function that takes in a <code>BST</code> and a target integer value and returns that closest value to that target value contained in the BST.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tree = <span class="number">10</span></span><br><span class="line">/  \</span><br><span class="line">     <span class="number">5</span>   <span class="number">15</span></span><br><span class="line">    / \  / \</span><br><span class="line">   <span class="number">2</span>  <span class="number">5</span> <span class="number">13</span>  <span class="number">22</span></span><br><span class="line">  /       \</span><br><span class="line"> <span class="number">1</span>         <span class="number">14</span></span><br><span class="line">target = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># output = 13</span></span><br></pre></td></tr></table></figure><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findClosestValueInBst</span><span class="params">(tree, target)</span>:</span></span><br><span class="line">closest = tree.value</span><br><span class="line">currentNode = tree</span><br><span class="line"><span class="keyword">while</span> currentNode <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line"><span class="keyword">if</span> abs(target - currentNode.value) &lt; abs(target - closest):</span><br><span class="line">closest = currentNode.value</span><br><span class="line"><span class="keyword">if</span> target &gt; currentNode.value:</span><br><span class="line">currentNode = currentNode.right</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">currentNode = currentNode.left</span><br><span class="line"><span class="keyword">return</span> closest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># This is the class of the input tree. Do not edit.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="BST-Construction"><a href="#BST-Construction" class="headerlink" title="BST Construction"></a>BST Construction</h2><p>Write a BST class for a Binary Search Tree. The class should support:</p><ol><li>Inserting values</li><li>Removing values</li><li>Searching for values/ Contain</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = <span class="literal">None</span></span><br><span class="line">        self.right = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Average: O(log(n)) time | O(1) space</span></span><br><span class="line">    <span class="comment"># Worst: O(n) time | O(1) space</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        currentNode = self</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">if</span> value &lt; currentNode.value:</span><br><span class="line">                <span class="keyword">if</span> currentNode.left <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    currentNode.left = BST(value)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    currentNode = currentNode.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> currentNode.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    currentNode.right = BST(value)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    currentNode = currentNode.right</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Average: O(log(n)) time | O(1) space</span></span><br><span class="line">    <span class="comment"># Worst: O(n) time | O(1) space</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">contains</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        currentNode = self</span><br><span class="line">        <span class="keyword">while</span> currentNode <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> value &lt; currentNode.value:</span><br><span class="line">                currentNode = currentNode.left</span><br><span class="line">            <span class="keyword">elif</span> value &gt; currentNode.value:</span><br><span class="line">                currentNode = currentNode.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Average: O(log(n)) time | O(1) space</span></span><br><span class="line">    <span class="comment"># Worst: O(n) time | O(1) space</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, value, parrentNode=None)</span>:</span></span><br><span class="line">        currentNode = self</span><br><span class="line">        <span class="keyword">while</span> currentNode <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> value &lt; currentNode.value:</span><br><span class="line">                parrentNode = currentNode</span><br><span class="line">                currentNode = currentNode.left</span><br><span class="line">            <span class="keyword">elif</span> value &gt; currentNode.value:</span><br><span class="line">                parrentNode = currentNode</span><br><span class="line">                currentNode = currentNode.right</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">              <span class="comment"># Circumstance 1</span></span><br><span class="line">                <span class="keyword">if</span> currentNode.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> currentNode.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    currentNode.value = currentNode.right.getMinValue()</span><br><span class="line">                    currentNode.right.remove(currentNode.value, currentNode)</span><br><span class="line">                <span class="comment"># Circumstance 2.2</span></span><br><span class="line">                <span class="keyword">elif</span> parrentNode <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    <span class="keyword">if</span> currentNode.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                        currentNode.value = currentNode.left.value</span><br><span class="line">                        currentNode.right = currentNode.left.right</span><br><span class="line">                        currentNode.left = currentNode.left.left</span><br><span class="line">                    <span class="keyword">elif</span> currentNode.right <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                        currentNode.value = currentNode.right.value</span><br><span class="line">                        currentNode.left = currentNode.right.left</span><br><span class="line">                        currentNode.right = currentNode.right.right</span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">                <span class="comment"># Circumstance 2.1</span></span><br><span class="line">                <span class="keyword">elif</span> currentNode == parrentNode.left:</span><br><span class="line">                    parrentNode.left = currentNode.left <span class="keyword">if</span> currentNode.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> currentNode.right</span><br><span class="line">                <span class="comment"># Circumstance 2.1</span></span><br><span class="line">                <span class="keyword">elif</span> currentNode == parrentNode.right:</span><br><span class="line">                    parrentNode.right = currentNode.left <span class="keyword">if</span> currentNode.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> currentNode.right</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMinValue</span><span class="params">(self)</span>:</span></span><br><span class="line">    currentNode = self</span><br><span class="line">    <span class="keyword">while</span> currentNode.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        currentNode = currentNode.left</span><br><span class="line">    <span class="keyword">return</span> currentNode.value</span><br></pre></td></tr></table></figure><blockquote><p>There are three circumstances for remove </p><ol><li>have both left child and right child</li><li>only have left child or right child or no child<ul><li>have parent node</li><li>don’t have parent node</li></ul></li></ol></blockquote><h1 id="Validate-BST"><a href="#Validate-BST" class="headerlink" title="Validate BST"></a>Validate BST</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(d) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validateBst</span><span class="params">(tree)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> validateBstHelper(tree, float(<span class="string">"-inf"</span>), float(<span class="string">"inf"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">validateBstHelper</span><span class="params">(tree, minValue, maxValue)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> tree.value &lt; minValue <span class="keyword">or</span> tree.value &gt;= maxValue:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    leftIsValid = validateBstHelper(tree.left, minValue, tree.value)</span><br><span class="line">    rightIsValid = validateBstHelper(tree.right, tree.value, maxValue)</span><br><span class="line">    <span class="keyword">return</span> leftIsValid <span class="keyword">and</span> rightIsValid</span><br></pre></td></tr></table></figure><h1 id="BST-Traversal"><a href="#BST-Traversal" class="headerlink" title="BST Traversal"></a>BST Traversal</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tree = 10</span><br><span class="line">       / \ </span><br><span class="line">      5   15</span><br><span class="line">     / \    \</span><br><span class="line">    2   5    22</span><br><span class="line">  /</span><br><span class="line"> 1</span><br><span class="line"> </span><br><span class="line"> inOrderTraverse: [1, 2, 5, 5, 10, 15, 22]</span><br><span class="line"> preOrderTraverse: [10, 5, 2, 1, 5, 15, 22]</span><br><span class="line"> postOrderTraverse: [1, 2, 5, 5, 22, 15, 10]</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inOrderTraverse</span><span class="params">(tree, array)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        inOrderTraverse(tree.left, array)</span><br><span class="line">        array.append(tree.value)</span><br><span class="line">        inOrderTraverse(tree.right, array)</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">preOrderTraverse</span><span class="params">(tree, array)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        array.append(tree.value)</span><br><span class="line">        preOrderTraverse(tree.left, array)</span><br><span class="line">        preOrderTraverse(tree.right, array)</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">postOrderTraverse</span><span class="params">(tree, array)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        postOrderTraverse(tree.left, array)</span><br><span class="line">        postOrderTraverse(tree.right, array)</span><br><span class="line">        array.append(tree.value)</span><br><span class="line">    <span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><h1 id="Min-Height-BST"><a href="#Min-Height-BST" class="headerlink" title="Min Height BST"></a>Min Height BST</h1><p>Write a function that takes in a sorted array of distince integers. Construct a BST from the integers, and return the root of the BST.</p><p>Recursive!</p><ol><li>Use the insert function of Class BST</li><li>Write the insert function by ourselves</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(nlogn) time | O(n) space</span></span><br><span class="line"><span class="comment"># insert O(logn) time * n elements</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minHeightBst</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> constructMinHeightBst(array, <span class="literal">None</span>, <span class="number">0</span>, len(array) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constructMinHeightBst</span><span class="params">(array, bst, startIdx, endIdx)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> startIdx &gt; endIdx:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    midIdx = (startIdx + endIdx) // <span class="number">2</span></span><br><span class="line">    midValue = array[midIdx]</span><br><span class="line">    <span class="keyword">if</span> bst <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        bst = BST(midValue)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        bst.insert(midValue)</span><br><span class="line"></span><br><span class="line">    constructMinHeightBst(array, bst, startIdx, midIdx - <span class="number">1</span>)</span><br><span class="line">    constructMinHeightBst(array, bst, midIdx + <span class="number">1</span>, endIdx)</span><br><span class="line">    <span class="keyword">return</span> bst</span><br></pre></td></tr></table></figure><p>In order to optimize the program, the built-in insert function is not practical, and there is no need to start from the root node. Directly compare and insert.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(n) time | O(n) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minHeightBst</span><span class="params">(array)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> constructMinHeightBst(array, <span class="literal">None</span>, <span class="number">0</span>, len(array) - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constructMinHeightBst</span><span class="params">(array, bst, startIdx, endIdx)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> startIdx &gt; endIdx:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    midIdx = (startIdx + endIdx) // <span class="number">2</span></span><br><span class="line">    newBstNode = BST(array[midIdx])</span><br><span class="line">    <span class="keyword">if</span> bst <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        bst = newBstNode</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      <span class="comment"># Don't need to traverse elements from the root node.</span></span><br><span class="line">        <span class="keyword">if</span> bst.value &gt; array[midIdx]:</span><br><span class="line">            bst.left = newBstNode</span><br><span class="line">            bst = bst.left</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            bst.right = newBstNode</span><br><span class="line">            bst = bst.right</span><br><span class="line"></span><br><span class="line">    constructMinHeightBst(array, bst, startIdx, midIdx - <span class="number">1</span>)</span><br><span class="line">    constructMinHeightBst(array, bst, midIdx + <span class="number">1</span>, endIdx)</span><br><span class="line">    <span class="keyword">return</span> bst</span><br></pre></td></tr></table></figure><p>Make a few changes to the above code.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">constructMinHeightBst</span><span class="params">(array, startIdx, endIdx)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> startIdx &gt; endIdx:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    midIdx = (startIdx + endIdx) // <span class="number">2</span></span><br><span class="line">    bst = BST(array[midIdx])</span><br><span class="line">    bst.left = constructMinHeightBst(array, startIdx, midIdx - <span class="number">1</span>)</span><br><span class="line">    bst.right = constructMinHeightBst(array, midIdx + <span class="number">1</span>, endIdx)</span><br><span class="line">    <span class="keyword">return</span> bst</span><br></pre></td></tr></table></figure><h1 id="Find-Kth-Largest-Value-in-BST"><a href="#Find-Kth-Largest-Value-in-BST" class="headerlink" title="Find Kth Largest Value in BST"></a>Find Kth Largest Value in BST</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BST</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value, left=None, right=None)</span>:</span></span><br><span class="line">        self.value = value</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># O(N) time, O(N) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findKthLargestValueInBst</span><span class="params">(tree, k)</span>:</span></span><br><span class="line">    array = []</span><br><span class="line">    array = reverseInorderTraverse(tree, array)</span><br><span class="line">    <span class="keyword">return</span> array[k - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseInorderTraverse</span><span class="params">(tree, array)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> tree <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        reverseInorderTraverse(tree.right, array)</span><br><span class="line">        array.append(tree.value)</span><br><span class="line">        reverseInorderTraverse(tree.left, array)</span><br><span class="line">    <span class="keyword">return</span> array</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeInfo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, numberOfNodesVisited, latestVisitedNodeValue)</span>:</span></span><br><span class="line">        self.numberOfNodesVisited = numberOfNodesVisited</span><br><span class="line">        self.latestVisitedNodeValue = latestVisitedNodeValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># O(h + k) time, O(h) space</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findKthLargestValueInBst</span><span class="params">(tree, k)</span>:</span></span><br><span class="line">    treeInfo = TreeInfo(<span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">    reverseInorderTraverse(tree, k, treeInfo)</span><br><span class="line">    <span class="keyword">return</span> treeInfo.latestVisitedNodeValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverseInorderTraverse</span><span class="params">(node, k, treeInfo)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> node <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> treeInfo.numberOfNodesVisited &gt;= k:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    reverseInorderTraverse(node.right, k, treeInfo)</span><br><span class="line">    <span class="keyword">if</span> treeInfo.numberOfNodesVisited &lt; k:</span><br><span class="line">        treeInfo.latestVisitedNodeValue = node.value</span><br><span class="line">        treeInfo.numberOfNodesVisited += <span class="number">1</span></span><br><span class="line">        reverseInorderTraverse(node.left, k, treeInfo)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Swift knowledge supplement</title>
      <link href="/iOS/Swift-knowledge-supplement.html"/>
      <url>/iOS/Swift-knowledge-supplement.html</url>
      
        <content type="html"><![CDATA[<h1 id="Associated-Value"><a href="#Associated-Value" class="headerlink" title="Associated Value"></a>Associated Value</h1><p>Enums can have raw values and associated values. A raw value is a string, character, or number (integer or floating-point) that can represent an enum case.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Position</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> first = <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> second = <span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> third = <span class="number">3</span></span><br><span class="line">    <span class="keyword">case</span> fourth = <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The example above defines a <code>Position</code> enum and uses type annotation to specify that all cases must have a raw integer value.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ": Int" is the type annotation</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Position</span>: <span class="title">Int</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>Then, for each case, a raw integer value is explicitly defined after the case name.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> first = <span class="number">1</span></span><br><span class="line"><span class="keyword">case</span> second = <span class="number">2</span></span><br><span class="line"><span class="keyword">case</span> third = <span class="number">3</span></span><br><span class="line"><span class="keyword">case</span> fourth = <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="Raw-Value-to-Enum"><a href="#Raw-Value-to-Enum" class="headerlink" title="Raw Value to Enum"></a>Raw Value to Enum</h2><p>Raw values enable developers to convert values into enum cases, and vice versa. Let’s keep working with the <code>Position</code> enum.</p><p>To convert an enum case into its raw value, use its <code>rawValue</code> property:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// convert a Position into a raw integer value</span></span><br><span class="line"><span class="keyword">let</span> myPosition = <span class="type">Position</span>.first</span><br><span class="line"><span class="keyword">let</span> myPositionNumber = myPosition.rawValue</span><br><span class="line"><span class="built_in">print</span>(myPositionNumber) <span class="comment">// prints "1"</span></span><br></pre></td></tr></table></figure><p>To convert a raw value to its respective enum case, use the initializer that takes a <code>rawValue</code> argument.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// convert an integer into a Position</span></span><br><span class="line"><span class="keyword">let</span> rivalPositionNumber = <span class="number">4</span></span><br><span class="line"><span class="keyword">let</span> rivalPosition = <span class="type">Position</span>(rawValue: rivalPositionNumber)</span><br><span class="line"><span class="built_in">print</span>(rivalPosition == .fourth) <span class="comment">// prints "true"</span></span><br></pre></td></tr></table></figure><p>Since there is no guarantee that a raw value has a corresponding case, any attempt to create an enum from a raw value will return an optional. To be safe, use <code>if let</code> to create enums from raw values.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> randomNumber = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// safely create enums from raw values</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> newPosition = <span class="type">Position</span>(rawValue: randomNumber) &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"created \(newPosition) from raw value"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"cannot create position from raw value"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Implicit-Raw-Values"><a href="#Implicit-Raw-Values" class="headerlink" title="Implicit Raw Values"></a>Implicit Raw Values</h2><p>In certain situations, the Swift compiler can infer raw values for enum cases.</p><p>If an enum uses raw string values, then each case is implicitly assigned a raw string value equal to the case’s name.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AudioRate</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> slow, normal, fast, custom</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">AudioRate</span>.slow.rawValue) <span class="comment">// prints "slow"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">AudioRate</span>.custom.rawValue) <span class="comment">// prints "custom"</span></span><br></pre></td></tr></table></figure><p>If an enum uses raw integer values, then the compiler assigns zero to the first case, and increases the raw value for subsequent cases by one.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Endurance</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> worst, abysmal, poor, medium, strong</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Endurance</span>.poor.rawValue) <span class="comment">// prints "2"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Endurance</span>.strong.rawValue) <span class="comment">// prints "4"</span></span><br></pre></td></tr></table></figure><p>It is also possible to define an enum with implicitly and explicitly defined raw values; all implicitly defined raw integer values will be one greater than the previous raw integer value. If no previous raw integer value exists, then the compiler will assign zero to the enum case.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SkewedEndurance</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> worst, abysmal = <span class="number">10</span>, poor, medium, strong = <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">SkewedEndurance</span>.worst.rawValue) <span class="comment">// prints "0"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">SkewedEndurance</span>.poor.rawValue) <span class="comment">// prints "11"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">SkewedEndurance</span>.medium.rawValue) <span class="comment">// prints "12"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">SkewedEndurance</span>.strong.rawValue) <span class="comment">// prints "30"</span></span><br></pre></td></tr></table></figure><p>You can mix and match implicit and explicit raw string values too:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Axis</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> x</span><br><span class="line">    <span class="keyword">case</span> y</span><br><span class="line">    <span class="keyword">case</span> z = <span class="string">"zed"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Axis</span>.y.rawValue) <span class="comment">// prints "y"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="type">Axis</span>.z.rawValue) <span class="comment">// prints "zed"</span></span><br></pre></td></tr></table></figure><h2 id="Associated-values"><a href="#Associated-values" class="headerlink" title="Associated values"></a>Associated values</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: Associated values are defined alongside enum cases. Associated values are not required; some enum cases may have an associated value while others do not. In the example below, `LibraryFee` has three cases with associated values and a case without an associated value.</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">LibraryFee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> overdueBook(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> lostBook(<span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">case</span> lostLibraryCard(<span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> annualDues</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fee = <span class="type">LibraryFee</span>.overdueBook(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//: It can be very helpful to name associated values so that their intent is easily understood.</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DescriptiveLibraryFee</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> overdueBook(days: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> lostBook(price: <span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">case</span> lostLibraryCard(timesLost: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> annualDues</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> weekLateFee = <span class="type">DescriptiveLibraryFee</span>.overdueBook(days: <span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//: Associated values are actually tuples. Therefore, an associated value can contain mutliple values.</span></span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ImageFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> sepia</span><br><span class="line">    <span class="keyword">case</span> verticalGradient(from: <span class="type">UIColor</span>, to: <span class="type">UIColor</span>)</span><br><span class="line">    <span class="keyword">case</span> horizontalGradient(from: <span class="type">UIColor</span>, to: <span class="type">UIColor</span>)</span><br><span class="line">    <span class="keyword">case</span> sketch(penThickness: <span class="type">Double?</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fadeToBlack = <span class="type">ImageFilter</span>.horizontalGradient(from: .gray, to: .black)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: - Callout(Watch Out!):</span></span><br><span class="line"><span class="comment">//: If all enum cases have an associated value of the same type, and it is static, then you might consider using a raw value instead.</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AudioRateAssociated</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> slow(value: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> normal(value: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> fast(value: <span class="type">Int</span>)</span><br><span class="line">    <span class="keyword">case</span> custom(value: <span class="type">Int</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the associated values for `AudioRateAssociated` should be raw values</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AudioRateRaw</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> slow, normal, fast, custom</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Extract-the-associated-value-with-switch"><a href="#Extract-the-associated-value-with-switch" class="headerlink" title="Extract the associated value with switch"></a>Extract the associated value with switch</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ImageFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> sepia</span><br><span class="line">    <span class="keyword">case</span> verticalGradient(from: <span class="type">UIColor</span>, to: <span class="type">UIColor</span>)</span><br><span class="line">    <span class="keyword">case</span> horizontalGradient(from: <span class="type">UIColor</span>, to: <span class="type">UIColor</span>)</span><br><span class="line">    <span class="keyword">case</span> sketch(penThickness: <span class="type">Double?</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filter1 = <span class="type">ImageFilter</span>.horizontalGradient(from: .gray, to: .black)</span><br><span class="line"><span class="keyword">let</span> filter2 = <span class="type">ImageFilter</span>.horizontalGradient(from: .white, to: .black)</span><br></pre></td></tr></table></figure><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: Most often, associated values are extracted in a switch block. For cases that have an associated value, the `let` keyword followed by a name will extract each  value from an associated value.</span></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> .sepia:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"sepia"</span>)</span><br><span class="line"><span class="keyword">case</span> .verticalGradient(<span class="keyword">let</span> color1, <span class="keyword">let</span> color2):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"vertical gradient with \(color1) and \(color2)"</span>)</span><br><span class="line"><span class="keyword">case</span> .horizontalGradient(<span class="keyword">let</span> color1, <span class="keyword">let</span> color2):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"horizontal gradient with \(color1) and \(color2)"</span>)</span><br><span class="line"><span class="keyword">case</span> .sketch(<span class="keyword">let</span> penThickness):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> thickness = penThickness &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"sketch using \(thickness) thickness"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"sketch using default thickness"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: Associated values can also be extracted as variables using the `var` keyword. Values extracted as variables are only available in the case where they are declared.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> .horizontalGradient(<span class="keyword">var</span> color1, <span class="keyword">let</span> color2):</span><br><span class="line">    color1 = .blue</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"horizontal gradient with \(color1) and \(color2)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//: To extract all values from an associated value as constants, use the `case let` syntax.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">let</span> .horizontalGradient(color1, color2):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"horizontal gradient with \(color1) and \(color2)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//: To extract all values from an associated value as variables, use the `case var` syntax.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="keyword">var</span> .horizontalGradient(color1, color2):</span><br><span class="line">    color1 = .red</span><br><span class="line">    color2 = .blue</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"horizontal gradient with \(color1) and \(color2)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Watch-out"><a href="#Watch-out" class="headerlink" title="Watch out!"></a>Watch out!</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: - Callout(Watch Out!):</span></span><br><span class="line"><span class="comment">//: Remember, switch statements must be exhaustive or Xcode will complain.</span></span><br><span class="line"><span class="comment">// uncomment the switch statement below to see Xcode complain about a non-exhaustive switch statement.</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> switch filter1 &#123;</span></span><br><span class="line"><span class="comment"> case .horizontalGradient(var color1, let color2):</span></span><br><span class="line"><span class="comment"> color1 = .blue</span></span><br><span class="line"><span class="comment"> print("horizontal gradient with \(color1) and \(color2)")</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//: If it is possible to treat two cases exactly the same, even when they have associated values, then you can combine cases. Note, the associated values must be the same type.</span></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> .verticalGradient(<span class="keyword">let</span> color1, <span class="keyword">let</span> color2), .horizontalGradient(<span class="keyword">let</span> color1, <span class="keyword">let</span> color2):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a gradient from \(color1) to \(color2)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: - Callout(Watch Out!):</span></span><br><span class="line"><span class="comment">//: If two cases are specified with a single case statement, then the tuple element names must match.</span></span><br><span class="line"> <span class="keyword">switch</span> filter1 &#123;</span><br><span class="line">    <span class="comment">// uncomment the case statement below to see Xcode complain that `color2` and `color3` must be used in every pattern (i.e. the tuple element names don't match)</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    case .verticalGradient(let color1, let color3), .horizontalGradient(let color1, let color2):</span></span><br><span class="line"><span class="comment">        print("a gradient from \(color1) to \(color2)")</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> <span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: If associated values are not needed for computation, then they can be ignored. The example below ignores the associated value for the horizontal gradient.</span></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> .horizontalGradient:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the filter is a horizontal gradient!"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: It is also possible to partially ignore values in an associated value, while extracting others.</span></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> .horizontalGradient(<span class="keyword">let</span> color1, <span class="number">_</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the horizontal gradient's first color is \(color1)"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="“where”-keyword"><a href="#“where”-keyword" class="headerlink" title="“where” keyword"></a>“where” keyword</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: Associated values may also be extracted based on conditions specified using the `where` keyword. If all conditions are held, then the values are extracted and the case statement is executed.</span></span><br><span class="line"><span class="keyword">switch</span> filter1 &#123;</span><br><span class="line"><span class="keyword">case</span> .horizontalGradient(<span class="keyword">let</span> color1, <span class="number">_</span>) <span class="keyword">where</span> color1 == .white:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the horizontal gradient's first color is white"</span>)</span><br><span class="line"><span class="keyword">case</span> .horizontalGradient(<span class="number">_</span>, <span class="keyword">let</span> color2) <span class="keyword">where</span> color2 == .black:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the horizontal gradient's second color is black"</span>)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Computed-properties"><a href="#Computed-properties" class="headerlink" title="Computed properties"></a>Computed properties</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: Associated values can be extracted using computed properties. By using a computed property, you may avoid duplicate switch statements.</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ImageFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> colors: (from: <span class="type">UIColor</span>, to: <span class="type">UIColor</span>)? &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .verticalGradient(<span class="keyword">let</span> from, <span class="keyword">let</span> to),</span><br><span class="line">             .horizontalGradient(<span class="keyword">let</span> from, <span class="keyword">let</span> to):</span><br><span class="line">            <span class="keyword">return</span> (from, to)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> penThickness: <span class="type">Double?</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .sketch(<span class="keyword">let</span> penThickness):</span><br><span class="line">            <span class="keyword">return</span> penThickness</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filter3 = <span class="type">ImageFilter</span>.sketch(penThickness: <span class="number">4.0</span>)</span><br><span class="line"></span><br><span class="line">filter1.colors</span><br><span class="line">filter1.colors?.from</span><br><span class="line">filter1.colors?.to</span><br><span class="line">filter3.colors <span class="comment">// nil </span></span><br><span class="line"></span><br><span class="line">filter1.penThickness <span class="comment">// nil</span></span><br><span class="line">filter3.penThickness <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="Extract-with-if"><a href="#Extract-with-if" class="headerlink" title="Extract with if"></a>Extract with if</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ImageFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> sepia</span><br><span class="line">    <span class="keyword">case</span> verticalGradient(from: <span class="type">UIColor</span>, to: <span class="type">UIColor</span>)</span><br><span class="line">    <span class="keyword">case</span> horizontalGradient(from: <span class="type">UIColor</span>, to: <span class="type">UIColor</span>)</span><br><span class="line">    <span class="keyword">case</span> sketch(penThickness: <span class="type">Double?</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filter1 = <span class="type">ImageFilter</span>.horizontalGradient(from: .gray, to: .black)</span><br><span class="line"><span class="keyword">let</span> filter2 = <span class="type">ImageFilter</span>.horizontalGradient(from: .white, to: .black)</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: `if case` works alongside the equals operator (=) to check and extract an associated value from an enum. While the syntax may look strange, the equals operator still behaves in an intuitive way; that is, the associated value on the left-hand side (containing `color1` and `color2`) is set equal to the associated value for the enum on the right-hand side (`filter1`).</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="type">ImageFilter</span>.horizontalGradient(<span class="keyword">let</span> color1, <span class="keyword">var</span> color2) = filter1 &#123;</span><br><span class="line">    color2 = .red</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"horizontal gradient with \(color1) and \(color2)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: To extract all values as constants use `if case let`.</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="keyword">let</span> <span class="type">ImageFilter</span>.horizontalGradient(color1, color2) = filter1 &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"horizontal gradient with \(color1) and \(color2)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: Complex conditionals can be formed using `if case` and conditional statements separated by commas. If the conditional statements are held true, then the values are extracted and usable from within the `if case` block.</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">case</span> <span class="keyword">let</span> <span class="type">ImageFilter</span>.horizontalGradient(<span class="number">_</span>, color2) = filter1, color2 == .black &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the horizontal gradient's second color is \(color2)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: A single associated value can also be extracted as a computed property. By using a computed property, you may avoid duplicate `if case` statements.</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ImageFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hasHeavyPenThickness: <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">case</span> <span class="keyword">let</span> <span class="type">ImageFilter</span>.sketch(penThickness) = <span class="keyword">self</span>, <span class="keyword">let</span> thickness = penThickness, thickness &gt; <span class="number">5.0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter1.hasHeavyPenThickness</span><br></pre></td></tr></table></figure><h2 id="Enums-with-Enums"><a href="#Enums-with-Enums" class="headerlink" title="Enums with Enums"></a>Enums with Enums</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ShirtSize</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> extraSmall</span><br><span class="line">    <span class="keyword">case</span> small</span><br><span class="line">    <span class="keyword">case</span> medium</span><br><span class="line">    <span class="keyword">case</span> large</span><br><span class="line">    <span class="keyword">case</span> extraLarge</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Search</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> forShirts(sizes: [<span class="type">ShirtSize</span>])</span><br><span class="line">    <span class="keyword">case</span> forName(name: <span class="type">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> searchForBigShirts = <span class="type">Search</span>.forShirts(sizes: [.large, .extraLarge])</span><br><span class="line"><span class="keyword">let</span> searchForHenleys = <span class="type">Search</span>.forName(name: <span class="string">"henley"</span>)</span><br></pre></td></tr></table></figure><h1 id="Guard"><a href="#Guard" class="headerlink" title="Guard"></a>Guard</h1><h2 id="Guard-statement"><a href="#Guard-statement" class="headerlink" title="Guard statement"></a>Guard statement</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">takeOff</span><span class="params">(passengersSeated: Bool, crewReady: Bool, runwayClear: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> passengersSeated <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">guard</span> crewReady <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">guard</span> runwayClear <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"✈️ Lifts off runway"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the runway isn't clear, the airplane cannot take off</span></span><br><span class="line">takeOff(passengersSeated: <span class="literal">true</span>, crewReady: <span class="literal">true</span>, runwayClear: <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The same</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">takeOffCombineGuards</span><span class="params">(passengersSeated: Bool, crewReady: Bool, runwayClear: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> passengersSeated, crewReady, runwayClear <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"✈️ Lifts off runway"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Add sth</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">takeOffGuardWithCode</span><span class="params">(passengersSeated: Bool, crewReady: Bool, runwayClear: Bool)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> passengersSeated, crewReady, runwayClear <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"tell passengers there will be a delay"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"✈️ Lifts off runway"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Guard-versus-If"><a href="#Guard-versus-If" class="headerlink" title="Guard versus If"></a>Guard versus If</h2><p>The <code>guard</code> and <code>if</code> keywords can serve similar purposes in Swift, but they should not be used interchangeably. Instead, use the following guidelines to decide when to use guard versus if:</p><ul><li><code>guard</code> should be used to check for preconditions and early exit</li><li><code>if</code> should be used to change execution path based on some condition(s)</li></ul><blockquote><p>Guard: whether the credit card is validate and whether the order is scheduled</p><p>If: wether the user enter a discount code</p></blockquote><h2 id="Guard-with-Optionals"><a href="#Guard-with-Optionals" class="headerlink" title="Guard with Optionals"></a>Guard with Optionals</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">takeOffGuardVar</span><span class="params">(passengersSeated: Bool, crewReady: Bool, runwayClear: Bool, crewLeader: String?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> passengersSeated, crewReady, runwayClear <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">var</span> crewLeaderVariable = crewLeader <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// modify the crew leader</span></span><br><span class="line">    crewLeaderVariable = crewLeaderVariable.uppercased()</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(crewLeaderVariable): \"Takeoff checks complete!\""</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"✈️ Lifts off runway"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">takeOffGuardVar(passengersSeated: <span class="literal">true</span>, crewReady: <span class="literal">true</span>, runwayClear: <span class="literal">true</span>, crewLeader: <span class="string">"👩🏻‍✈️ Natalie"</span>)</span><br></pre></td></tr></table></figure><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> grades: [<span class="type">Double</span>]</span><br><span class="line">    <span class="keyword">var</span> average: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> grades.<span class="built_in">reduce</span>(<span class="number">0</span>) &#123; <span class="keyword">return</span> $<span class="number">0</span> + $<span class="number">1</span> &#125; / <span class="type">Double</span>(grades.<span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">passStudent</span><span class="params">(<span class="number">_</span> student: Student?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> student = student, student.average &gt;= <span class="number">75</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(student.name) passed!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">passStudent(<span class="type">Student</span>(name: <span class="string">"Sam"</span>, grades: [<span class="number">70</span>, <span class="number">90</span>, <span class="number">84</span>, <span class="number">62</span>, <span class="number">88</span>]))</span><br></pre></td></tr></table></figure><h4 id="The-reduce-funtion"><a href="#The-reduce-funtion" class="headerlink" title="The reduce funtion"></a>The reduce funtion</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> numberSum = numbers.<span class="built_in">reduce</span>(<span class="number">0</span>, &#123; x, y <span class="keyword">in</span></span><br><span class="line">x + y</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// numberSum == 10</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.apple.com/documentation/swift/array/2298686-reduce" target="_blank" rel="noopener">One website.</a>.</p><p> <a href="https://stackoverflow.com/questions/56034602/what-does-the-reduce-function-do-in-swift" target="_blank" rel="noopener">Another website</a>.</p><h4 id="Swift-in-keyword"><a href="#Swift-in-keyword" class="headerlink" title="Swift in keyword."></a>Swift <code>in</code> keyword.</h4><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; /parameters and type/ <span class="keyword">in</span> /function body/ &#125;</span><br></pre></td></tr></table></figure><h4 id="0-and-1"><a href="#0-and-1" class="headerlink" title="$0 and $1"></a><code>$0</code> and <code>$1</code></h4><p><code>$0</code> is the first parameter passed into the closure. <code>$1</code> is the second parameter, etc. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">add = &#123; arg1, arg2 <span class="keyword">in</span></span><br><span class="line">arg1 + arg2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add = &#123;</span><br><span class="line">$<span class="number">0</span> + $<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = add(<span class="number">20</span>, <span class="number">20</span>) <span class="comment">// 40</span></span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> grades: [<span class="type">Double</span>]</span><br><span class="line">    <span class="keyword">var</span> topPassingGrade: <span class="type">Double?</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> passingGrades = grades.<span class="built_in">filter</span> &#123; <span class="keyword">return</span> $<span class="number">0</span> &gt;= <span class="number">75</span> &#125;</span><br><span class="line">        <span class="keyword">return</span> passingGrades.<span class="built_in">max</span>() <span class="comment">// It can be "nil".</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">notifyUser</span><span class="params">(<span class="number">_</span> student: Student)</span></span> &#123;</span><br><span class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="number">_</span> = student.topPassingGrade <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"you've passed!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">notifyUser(<span class="type">Student</span>(name: <span class="string">"Ulysses"</span>, grades: [<span class="number">70</span>, <span class="number">60</span>, <span class="number">74</span>, <span class="number">76</span>, <span class="number">63</span>]))</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://developer.apple.com/documentation/swift/sequence/3018365-filter" target="_blank" rel="noopener">The filter function</a></p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">let</span> cast = [<span class="string">"Vivien"</span>, <span class="string">"Marlon"</span>, <span class="string">"Kim"</span>, <span class="string">"Karl"</span>]</span><br><span class="line">&gt; <span class="keyword">let</span> shortNames = cast.<span class="built_in">filter</span> &#123; $<span class="number">0</span>.<span class="built_in">count</span> &lt; <span class="number">5</span> &#125;</span><br><span class="line">&gt; <span class="built_in">print</span>(shortNames)</span><br><span class="line">&gt; <span class="comment">// Prints "["Kim", "Karl"]"</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="Guard-let-Versus-If-let"><a href="#Guard-let-Versus-If-let" class="headerlink" title="Guard let Versus If let"></a>Guard let Versus If let</h2><ul><li>When optional values are used with <code>guard let</code> (or <code>guard var</code>) they are bound as non-optional values and available in the rest of the scope where the guard statement appears.</li><li>This differs from how optionals work with <code>if let</code>. With <code>if let</code>, optionals are bound as non-optional constants, and they are only available in the body of the <code>if let</code> statement.</li></ul><blockquote><p>After the ‘guard let’ judgement, the optional is transformed to a variable or constant.</p></blockquote><h1 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h1><p>The errors referred to by “error handling” are not like warnings or issues raised by Xcode and the compiler. They are also not software bugs. Instead, these errors are either intentionally caused or generated in situations where correct behavior cannot be fully guaranteed.</p><ul><li><p>a compile-time error (or warning) can be generated by the compiler, before code is run</p></li><li><p>a run-time error (sometimes called a logic error) is caused by code that is syntactically correct, but logically incorrect or causes a crash when code is running</p></li></ul><p>These kinds of errors can be fixed.</p><p>The errors in “error handling” can happen even when code is syntactically correct.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// When a catch block is executed, it automatically defines a constant called "error". </span></span><br><span class="line"><span class="comment">// This constant is of type `Error` and it has a localized description property with helpful information about the cause of the problem.</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"swift"</span>, withExtension: <span class="string">"png"</span>) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">try</span> <span class="type">String</span>(contentsOf: fileURL, encoding: .utf8)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(error) <span class="comment">// notice, error is implicitly defined</span></span><br><span class="line">        <span class="built_in">print</span>(error.localizedDescription)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//: For readability, the "error" constant can be explicitly defined using `catch let error`.</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"swift"</span>, withExtension: <span class="string">"png"</span>) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">try</span> <span class="type">String</span>(contentsOf: fileURL, encoding: .utf8)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">        <span class="built_in">print</span>(error) <span class="comment">// error is defined and available for use in the catch block</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Types-of-error"><a href="#Types-of-error" class="headerlink" title="Types of error"></a>Types of error</h2><p>We can use <code>do catch</code> to handle different type of the error. </p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"swift"</span>, withExtension: <span class="string">"png"</span>) &#123;</span><br><span class="line">    <span class="comment">// create a url that does not exist</span></span><br><span class="line">    <span class="keyword">let</span> erroneousURL = fileURL.appendingPathComponent(<span class="string">"unknown-path"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">try</span> <span class="type">String</span>(contentsOf: erroneousURL, encoding: .utf8)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="type">CocoaError</span>.fileReadInapplicableStringEncoding &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"cannot read file into a string"</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="type">CocoaError</span>.fileReadUnknown &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"file unknown, cannot read"</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\(error)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>How can we get the error type?</p><p>Use the <a href="https://osstatus.com/" target="_blank" rel="noopener">website</a> to search the error code.</p></blockquote><h3 id="Catch-is"><a href="#Catch-is" class="headerlink" title="Catch is"></a>Catch is</h3><p>Alternatively, errors can be caught by type using the <code>catch is</code> syntax. As seen before, all errors implement the <code>Error</code> protocol. Additionally, all errors extend from <code>NSError</code> which provides more information for troubleshooting like a string property called “domain” that classifies the origin of an error. An error’s domain may also suggest if the error can be casted into a more specific type like <code>CocoaError</code>, <code>POSIXError</code>, or <code>MachError</code>. See <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ErrorHandlingCocoa/ErrorObjectsDomains/ErrorObjectsDomains.html" target="_blank" rel="noopener">Apple’s documentation on error objects, domains, and codes</a> to learn more.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"swift"</span>, withExtension: <span class="string">"png"</span>) &#123;</span><br><span class="line">    <span class="comment">// create a url that does not exist</span></span><br><span class="line">    <span class="keyword">let</span> erroneousURL = fileURL.appendingPathComponent(<span class="string">"unknown-path"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">try</span> <span class="type">String</span>(contentsOf: erroneousURL, encoding: .utf8)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">is</span> <span class="type">CocoaError</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"this error is a CocoaError"</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\(error)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Catch-let-…-as-…"><a href="#Catch-let-…-as-…" class="headerlink" title="Catch let … as …"></a>Catch let … as …</h3><p>To catch and cast an error by type, combine <code>catch let error</code> with a type cast. In the example below, an error is casted into <code>CocoaError</code> which exposes common error codes generated by core Apple frameworks.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"swift"</span>, withExtension: <span class="string">"png"</span>) &#123;</span><br><span class="line">    <span class="comment">// create a url that does not exist</span></span><br><span class="line">    <span class="keyword">let</span> erroneousURL = fileURL.appendingPathComponent(<span class="string">"unknown-path"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">try</span> <span class="type">String</span>(contentsOf: erroneousURL, encoding: .utf8)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">CocoaError</span> &#123; <span class="comment">/* handle if error can be casted into a `CocoaError` */</span></span><br><span class="line">        <span class="keyword">switch</span> error.errorCode &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">CocoaError</span>.fileReadInapplicableStringEncoding.rawValue:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"cannot read file into a string"</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="type">CocoaError</span>.fileReadUnknown.rawValue:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"file unknown, cannot read"</span>)</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"cocoa error with code: \(error.errorCode)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\(error)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Propogate-error"><a href="#Propogate-error" class="headerlink" title="Propogate error"></a>Propogate error</h2><p>To propagate all possible errors to the calling site, start by removing the <code>do</code>-<code>catch</code> statement and adding <code>throws</code> to the signature of the function which calls the error-prone code.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// add "trows" to the function</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFileIntoStringWithThrows</span><span class="params">(fileName: String, fileExtension: String)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: fileName, withExtension: fileExtension) &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">try</span> <span class="type">String</span>(contentsOf: fileURL, encoding: .utf8)</span><br><span class="line">        <span class="built_in">print</span>(content)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Now, any code that calls `readFileIntoStringWithThrows` is responsible for handling any errors it generates.</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> readFileIntoStringWithThrows(fileName: <span class="string">"swift"</span>, fileExtension: <span class="string">"png"</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"the error was propagated to me, and I handled it!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sometimes it is appropriate to handle some errors immediately while propagating others for further processing. To propagate a specific error, use the <code>throw</code> keyword.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readFileIntoStringHandleAndThrow</span><span class="params">(fileName: String, fileExtension: String)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: fileName, withExtension: fileExtension) &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> content = <span class="keyword">try</span> <span class="type">String</span>(contentsOf: fileURL, encoding: .utf8)</span><br><span class="line">            <span class="built_in">print</span>(content)</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="type">CocoaError</span>.fileReadUnknown &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"file unknown, cannot read"</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">            <span class="keyword">throw</span> error <span class="comment">/* throw (propagate) this error to the call site */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> readFileIntoStringHandleAndThrow(fileName: <span class="string">"swift"</span>, fileExtension: <span class="string">"png"</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"handling error: \(error.localizedDescription)"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="try-and-try"><a href="#try-and-try" class="headerlink" title="try? and try!"></a><code>try?</code> and <code>try!</code></h2><p>Try comes in two other forms: <code>try?</code> and <code>try!</code>. <code>try?</code> executes error-prone code, and if any error is generated, then it is converted into an optional where the underlying value has the same type as the error-prone function or intializer’s return type. This can simplify code, but the ability to analyze errors is lost.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printFileContentsTry</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"swift"</span>, withExtension: <span class="string">"png"</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> content = <span class="keyword">try</span>? <span class="type">String</span>(contentsOf: fileURL, encoding: .utf8)</span><br><span class="line">        <span class="built_in">print</span>(content ?? <span class="string">"content is nil"</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// preferably, combine `if let` with `try?`; it's easier to read</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> content = <span class="keyword">try</span>? <span class="type">String</span>(contentsOf: fileURL, encoding: .utf8) &#123;</span><br><span class="line">            <span class="built_in">print</span>(content)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"could not read contents of file into string"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>try!</code> executes error-prone code while foregoing any opportunity to safely handle an error. If an error-prone function is called using <code>try!</code> and it fails, then the entire app or playground crashes.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// try! should only be used if there is no risk of error; generally, this is not advised</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> fileURL = <span class="type">Bundle</span>.main.url(forResource: <span class="string">"swift"</span>, withExtension: <span class="string">"txt"</span>) &#123;</span><br><span class="line">     <span class="keyword">let</span> content = <span class="keyword">try</span>! <span class="type">String</span>(contentsOf: fileURL, encoding: .utf8)</span><br><span class="line">     <span class="built_in">print</span>(content)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Error-handle-summary"><a href="#Error-handle-summary" class="headerlink" title="Error handle summary"></a>Error handle summary</h2><p>There are four ways to handle the error.</p><ol><li>Handle Error with <code>Do</code>-<code>Catch</code></li><li>Convert Error to Optional with <code>try?</code></li><li>Ignore Error with <code>try!</code></li><li>Propagate Error</li></ol><h2 id="Create-custom-error"><a href="#Create-custom-error" class="headerlink" title="Create custom error"></a>Create custom error</h2><p>To create a custom error, define a type that inherits from the <code>Error</code> protocol. Often, enums are used for this purpose.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">SimplePurchaseError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> invalidAddress</span><br><span class="line">    <span class="keyword">case</span> cardRejected</span><br><span class="line">    <span class="keyword">case</span> cartWeightLimitExceeded</span><br><span class="line">    <span class="keyword">case</span> insufficientStock</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeBadPurchase</span><span class="params">()</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="type">SimplePurchaseError</span>.cardRejected <span class="comment">// throw a custom error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> makeBadPurchase()</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error) <span class="comment">// Result: cardRejected</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When using an enum to define a custom error, use associated values to add helpful debugging information.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ComplexPurchaseError</span>: <span class="title">Error</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> invalidAddress</span><br><span class="line">    <span class="keyword">case</span> cardRejected</span><br><span class="line">    <span class="keyword">case</span> cartWeightLimitExceeded(<span class="type">Double</span>)</span><br><span class="line">    <span class="keyword">case</span> insufficientStock(<span class="type">String</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">attemptPurchase</span><span class="params">(withWeight weight: Double)</span></span> <span class="keyword">throws</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> weight &gt; <span class="number">100</span> &#123;</span><br><span class="line">        <span class="comment">// throw a custom error with an associated value</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="type">ComplexPurchaseError</span>.cartWeightLimitExceeded(-<span class="number">1</span> * (<span class="number">100</span> - weight))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"purchase succeeded!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> attemptPurchase(withWeight: <span class="number">125.6</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">ComplexPurchaseError</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> error &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .cartWeightLimitExceeded(weight): <span class="comment">/* extract the associated value */</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"purchase failed. weight exceeds limit by: \(weight)"</span>)</span><br><span class="line">      <span class="comment">// Result: purchase failed. weight exceeds limit by: 25.599</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">print</span>(error)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Describe-custom-error"><a href="#Describe-custom-error" class="headerlink" title="Describe custom error"></a>Describe custom error</h2><p>You can add extra debugging information to a custom error by also implementing the <code>LocalizedError</code> and <code>CustomNSError</code> protocols.</p><h3 id="LocalizedError"><a href="#LocalizedError" class="headerlink" title="LocalizedError"></a><code>LocalizedError</code></h3><p><code>LocalizedError</code> includes properties which should be used to provide localized information about an error.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Describes an error that provides localized messages describing why</span></span><br><span class="line"><span class="comment">/// an error occurred and provides more information about the error.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">LocalizedError</span> : <span class="title">Error</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A localized message describing what error occurred.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> errorDescription: <span class="type">String?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A localized message describing the reason for the failure.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> failureReason: <span class="type">String?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A localized message describing how one might recover from the failure.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> recoverySuggestion: <span class="type">String?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// A localized message providing "help" text if the user requests help.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> helpAnchor: <span class="type">String?</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The following example describes the <code>failureReason</code> for a <code>PurchaseError</code>. For brevity, the other properties have been excluded.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PurchaseError</span>: <span class="title">LocalizedError</span> </span>&#123;   </span><br><span class="line">    <span class="keyword">var</span> failureReason: <span class="type">String?</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> .invalidAddress:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NSLocalizedString</span>(<span class="string">"address contained invalid or empty fields"</span>, comment: <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">case</span> .cardRejected:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NSLocalizedString</span>(<span class="string">"card number or csv code is invalid"</span>, comment: <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .cartWeightLimitExceeded(amount):</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NSLocalizedString</span>(<span class="string">"weight limit was by exceeded \(amount)"</span>, comment: <span class="string">""</span>)</span><br><span class="line">        <span class="keyword">case</span> .insufficientStock:</span><br><span class="line">            <span class="keyword">return</span> <span class="type">NSLocalizedString</span>(<span class="string">"insufficient stock"</span>, comment: <span class="string">""</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> makeBadPurchase() <span class="comment">// a fictitious function that might throw an error</span></span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">LocalizedError</span> &#123; <span class="comment">// cast error to `LocalizedError`</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> description = error.errorDescription &#123; <span class="built_in">print</span>(description) &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> failureReason = error.failureReason &#123; <span class="built_in">print</span>(failureReason) &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> recoverySuggestion = error.recoverySuggestion &#123; <span class="built_in">print</span>(recoverySuggestion) &#125;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> helpAnchor = error.helpAnchor &#123; <span class="built_in">print</span>(helpAnchor) &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>Note</strong>: Comment is left blank for each <code>NSLocalizedString</code>. Again, this is for brevity. In practice, you should use comments that provide sufficient context about a localized string so that translators can produce more accurate translations. Failure to do so may result in vastly different translations.</p></blockquote><h3 id="CustomNSError"><a href="#CustomNSError" class="headerlink" title="CustomNSError"></a><code>CustomNSError</code></h3><p>Recall, all errors extend from <code>NSError</code>. By default, the properties of <code>NSError</code>, like domain, have inferred values. To provide more accurate values for <code>NSError</code> properties, implement <code>CustomNSError</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// Describes an error type that specifically provides a domain, code,</span></span><br><span class="line"><span class="comment">/// and user-info dictionary.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">CustomNSError</span> : <span class="title">Error</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The domain of the error.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">var</span> errorDomain: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The error code within the given domain.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> errorCode: <span class="type">Int</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The user-info dictionary.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">var</span> errorUserInfo: [<span class="type">String</span> : <span class="type">Any</span>] &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If an error implements <code>CustomNSError</code>, then when casted to an <code>NSError</code>, it will contain the values provided by the protocol implementation.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PurchaseError</span>: <span class="title">CustomNSError</span> </span>&#123;</span><br><span class="line">    <span class="comment">// domain and error code...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// The user-info dictionary.</span></span><br><span class="line">    <span class="keyword">var</span> errorUserInfo: [<span class="type">String</span>: <span class="type">Any</span>] &#123;</span><br><span class="line">        <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .cartWeightLimitExceeded(amount):</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">"weightLimit"</span>: <span class="number">100.0</span>,</span><br><span class="line">                <span class="string">"weightExceeded"</span>: amount</span><br><span class="line">            ]</span><br><span class="line">        <span class="keyword">case</span> <span class="keyword">let</span> .insufficientStock(items):</span><br><span class="line">            <span class="keyword">return</span> [</span><br><span class="line">                <span class="string">"itemsOutOfStock"</span>: items</span><br><span class="line">            ]</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> [:]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> attemptPurchase(withWeight: <span class="number">125.6</span>) <span class="comment">// a fictitious function that might throw an error</span></span><br><span class="line">&#125; <span class="keyword">catch</span> <span class="keyword">let</span> error <span class="keyword">as</span> <span class="type">NSError</span> &#123; <span class="comment">// cast error to `NSError`</span></span><br><span class="line">    <span class="built_in">print</span>(error.domain)</span><br><span class="line">    <span class="built_in">print</span>(error.code)</span><br><span class="line">    <span class="built_in">print</span>(error.userInfo) <span class="comment">// prints "["weightExceeded": 25.599999999999994, "weightLimit": 100.0]"</span></span><br><span class="line">&#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a><code>defer</code></h2><p>The last topic related to errors is the <code>defer</code> keyword. While uncommon, you may find it coupled with error handling because it can be used to execute a block of code before an error-generating scope is exited.</p><p>Typically, a defer block is provided near the top of a function. It cannot contain any code that changes the flow of control, like a break or return statement, or throwing an error. Also, multiple defer blocks may be defined, but they are executed in reverse order of when they appear.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">attemptPurchaseWithMultipleDefers</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// before this function exits, execute this defer block</span></span><br><span class="line">    <span class="keyword">defer</span> &#123; <span class="built_in">print</span>(<span class="string">"then, close the secure purchase session"</span>) &#125;</span><br><span class="line">    <span class="keyword">defer</span> &#123; <span class="built_in">print</span>(<span class="string">"first, clear order"</span>) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> processOrder()</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"\(error)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">attemptPurchaseWithMultipleDefers()</span><br><span class="line"></span><br><span class="line"><span class="comment">// before `attemptPurchaseWithMultipleDefers` exits, it prints…</span></span><br><span class="line"><span class="comment">// "first, clear order"</span></span><br><span class="line"><span class="comment">// "then, close the secure purchase session"</span></span><br></pre></td></tr></table></figure><h1 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h1><h2 id="Array-are-Generic"><a href="#Array-are-Generic" class="headerlink" title="Array are Generic"></a>Array are Generic</h2><p>Upon first glance, many do not realize that Swift arrays use generics. Specifically, the type that a Swift array stores is generic — it can be anything. When declaring an array using its more longhand syntax, this becomes apparent.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intArray = <span class="type">Array</span>&lt;<span class="type">Int</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> stringArray: <span class="type">Array</span>&lt;<span class="type">String</span>&gt; = [<span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>]</span><br></pre></td></tr></table></figure><p>The type specified in the brackets (ex. “<string>“) is called a “concrete type”. When specified, the concrete type takes the place of a generic type. Because Swift arrays use generics, they behave the same, regardless of the concrete type.</string></p><h2 id="Generic-Function"><a href="#Generic-Function" class="headerlink" title="Generic Function"></a>Generic Function</h2><p>Generics can be applied to functions and types. To write a generic function, specify a generic type after the function name using the bracket notation (ex. <code>func myFunction&lt;Type&gt;</code>). Then, for any arguments that should be generic, use the generic type instead of a concrete type. Below, the generic type is called <code>Type</code>; <code>Type</code> can represent any type.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printTypeWithNamedGenericType</span>&lt;Type&gt;<span class="params">(<span class="number">_</span> argument: <span class="keyword">Type</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(type(of: argument))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printTypeWithNamedGenericType(<span class="number">4</span>) <span class="comment">// Int </span></span><br><span class="line">printTypeWithNamedGenericType(<span class="string">"udacity"</span>) <span class="comment">// String</span></span><br></pre></td></tr></table></figure><blockquote><p>Now, the type is for any type. We can’t implement some functions for this value.</p><p>For example, we can’t use “Plus” function, so we should specify a type for it.</p></blockquote><p>A generic type can be bound or constrained such that it can only represent concrete types which adhere to some protocol or inherit from a certain class. In the example below, the generic type is constrained such that it can only represent types which implement the <code>UnsignedInteger</code> protocol — essentially, non-negative integers.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printUIntTypes</span>&lt;Type: UnsignedInteger&gt;<span class="params">(<span class="number">_</span> argument: <span class="keyword">Type</span>)</span></span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(type(of: argument))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> unsignedInt: <span class="type">UInt</span> = <span class="number">4</span></span><br><span class="line"><span class="keyword">let</span> unsignedInt8: <span class="type">UInt8</span> = <span class="number">4</span></span><br><span class="line"><span class="keyword">let</span> unsignedInt16: <span class="type">UInt16</span> = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">printUIntTypes(unsignedInt)</span><br><span class="line">printUIntTypes(unsignedInt8)</span><br><span class="line">printUIntTypes(unsignedInt16)</span><br><span class="line"><span class="comment">// When a generic type is constrained, any concrete types that do not adhere to the constraint will cause Xcode to complain.</span></span><br><span class="line"><span class="comment">//printUIntTypes(4) /* `Int` is not unsigned because it can store negative values */</span></span><br><span class="line"><span class="comment">//printUIntTypes(-4)</span></span><br><span class="line"><span class="comment">//printUIntTypes("abc")</span></span><br></pre></td></tr></table></figure><h2 id="Multiple-generic-function"><a href="#Multiple-generic-function" class="headerlink" title="Multiple generic function"></a>Multiple generic function</h2><p>Generic functions and types can specify multiple generic types, simply use a comma to separate them.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">combineUInt</span>&lt;Type1: UnsignedInteger, Type2&gt;<span class="params">(<span class="number">_</span> int: Type1, withString string: Type2)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"\(int) \(string)"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> unsignedInt: <span class="type">UInt</span> = <span class="number">4</span></span><br><span class="line"><span class="built_in">print</span>(combineUInt(unsignedInt, withString: <span class="string">"zebras"</span>))</span><br></pre></td></tr></table></figure><h2 id="Generic-Type"><a href="#Generic-Type" class="headerlink" title="Generic Type"></a>Generic Type</h2><p>Generics can be applied to an object’s properties to create what is known as a generic type. Similar to generic functions, a generic type is created by specifying the object’s name followed by a generic type using the bracket notation (ex. <code>struct MyType&lt;Type&gt;</code>). Then, for any properties that should be generic, use the generic type instead of a concrete type.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TypeAnalyzer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> value: <span class="type">T</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// represents the sub-structure of the generic type</span></span><br><span class="line">    <span class="keyword">var</span> mirror: <span class="type">Mirror</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Mirror</span>(reflecting: value)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// print information about the type</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">analyze</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Type: \(type(of: value))"</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Value: \(value)"</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> superClassMirror = mirror.superclassMirror &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Superclass: \(superClassMirror.subjectType)"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="type">TypeAnalyzer</span>(value: <span class="number">2</span>)</span><br><span class="line">x.analyze()</span><br><span class="line"><span class="comment">// Type: Int</span></span><br><span class="line"><span class="comment">// Value: 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> view = <span class="type">TypeAnalyzer</span>&lt;<span class="type">UIView</span>&gt;(value: <span class="type">UIView</span>(frame: <span class="type">CGRect</span>.zero))</span><br><span class="line">view.analyze()</span><br><span class="line"><span class="comment">// Type: UIView</span></span><br><span class="line"><span class="comment">// Value: &lt;UIView: 0x7f82c0a0dfc0; frame = (0 0; 0 0); layer = &lt;CALayer: 0x6000035e6140&gt;&gt;</span></span><br><span class="line"><span class="comment">// Superclass: UIResponder</span></span><br></pre></td></tr></table></figure><p>Like generic functions, the generic type can be named and constained. In the example below, <code>ZooExhibit</code> is defined where its animals property is generic and constrained to any type that implements the <code>Animal</code> protocol.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> commonName: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> emoji: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Whale</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> commonName = <span class="string">"Whale"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> emoji = <span class="string">"🐳"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dolphin</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> commonName = <span class="string">"Dolphin"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> emoji = <span class="string">"🐬"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ZooExhibit</span>&lt;<span class="title">AnimalType</span>: <span class="title">Animal</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> animals: [<span class="type">AnimalType</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tourTheExhibit</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Welcome to the \(AnimalType.commonName) Exhibit \(AnimalType.emoji)!"</span>)</span><br><span class="line">        <span class="keyword">for</span> animal <span class="keyword">in</span> animals &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Say hello to \(animal.name) \(AnimalType.emoji)."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> exhibit1 = <span class="type">ZooExhibit</span>(animals: [<span class="type">Whale</span>(name: <span class="string">"Wendy"</span>), <span class="type">Whale</span>(name: <span class="string">"Wu"</span>)])</span><br><span class="line">exhibit1.tourTheExhibit()</span><br><span class="line"><span class="comment">// Welcome to the Whale Exhibit 🐳!</span></span><br><span class="line"><span class="comment">// Say hello to Wendy 🐳.</span></span><br><span class="line"><span class="comment">// Say hello to Wu 🐳.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the longhand syntax can be used to specify the concrete type</span></span><br><span class="line"><span class="keyword">let</span> exhibit2 = <span class="type">ZooExhibit</span>&lt;<span class="type">Dolphin</span>&gt;(animals: [<span class="type">Dolphin</span>(name: <span class="string">"Dilbert"</span>), <span class="type">Dolphin</span>(name: <span class="string">"Dezeri"</span>)])</span><br><span class="line">exhibit2.tourTheExhibit()</span><br><span class="line"><span class="comment">// Welcome to the Dolphin Exhibit 🐬!</span></span><br><span class="line"><span class="comment">// Say hello to Dilbert 🐬.</span></span><br><span class="line"><span class="comment">// Say hello to Dezeri 🐬.</span></span><br></pre></td></tr></table></figure><p>A single generic type can only be substituted with one concrete type. If Xcode is unable to determine the concrete type that should be substituted for a generic type, it will complain.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let exhibit3 = ZooExhibit(animals: [Whale(name: "Wilber"), Dolphin(name: "Daphnie")])</span></span><br></pre></td></tr></table></figure><p>Extensions can be combined with generics for truly powerful effects. With an extension, it is possible to specify functionality that should only apply to a generic type when the concrete type meets inherits from a specific protocol.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Feedable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> favoriteFood: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dolphin</span>: <span class="title">Feedable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> favoriteFood = <span class="string">"🐟"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ZooExhibit</span> <span class="title">where</span> <span class="title">AnimalType</span>: <span class="title">Feedable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">feedTheAnimals</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> animal <span class="keyword">in</span> animals &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"You feed \(animal.name) \(AnimalType.emoji) some \(AnimalType.favoriteFood)."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exhibit2.feedTheAnimals()</span><br><span class="line"></span><br><span class="line"><span class="comment">// because `Whale` is not `Feedable`, the `feedTheAnimals()` function doesn't exist for the whale exhibit</span></span><br><span class="line"><span class="comment">//exhibit1.feedTheAnimals()</span></span><br></pre></td></tr></table></figure><h2 id="Subclass-a-Generic-Type"><a href="#Subclass-a-Generic-Type" class="headerlink" title="Subclass a Generic Type"></a>Subclass a Generic Type</h2><p>A generic type can be subclassed, assuming it is a class and not a struct. To demonstrate an example of subclassing a generic type, the <code>Animal</code>, <code>Whale</code>, and <code>ZooExhibit</code> types are defined:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> commonName: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Whale</span>: <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> commonName = <span class="string">"Whale"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZooExhibit</span>&lt;<span class="title">AnimalType</span>: <span class="title">Animal</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> animals: [<span class="type">AnimalType</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(animals: [<span class="type">AnimalType</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.animals = animals</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tourTheExhibit</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Welcome to the \(AnimalType.commonName) Exhibit!"</span>)</span><br><span class="line">        <span class="keyword">for</span> animal <span class="keyword">in</span> animals &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Say hello to \(animal.name)."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To subclass the generic type <code>ZooExhibit</code>, one must define a new class with a generic type that can be substituted for <code>AnimalType</code> (any type that implements the <code>Animal</code> protocol). In the subclass below, the generic type <code>A</code> is constrained such that it must implement the <code>Animal</code> protocol. Hence, when <code>ZooExhibit</code> is specified as the superclass, the type <code>A</code> can be used without error.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TravelingExhibit</span>&lt;<span class="title">A</span>: <span class="title">Animal</span>&gt;: <span class="title">ZooExhibit</span>&lt;<span class="title">A</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> location: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(location: <span class="type">String</span>, animals: [<span class="type">A</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.location = location</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(animals: animals)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">tourTheExhibit</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Welcome to the \(A.commonName) Exhibit at \(location)!"</span>)</span><br><span class="line">        <span class="keyword">for</span> animal <span class="keyword">in</span> animals &#123;</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"Say hello to \(animal.name)."</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But, if a subclass tries to specify a generic type that does not satisfy the constraints from the parent class, then Xcode will generate an error.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this generates an error because `B` does not conform to `Animal` protocol</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TankExhibit</span>&lt;<span class="title">B</span>&gt;: <span class="title">ZooExhibit</span>&lt;<span class="title">B</span>&gt; </span>&#123; </span><br><span class="line">    <span class="keyword">let</span> volume: <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(volume: <span class="type">Double</span>, animals: [<span class="type">B</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.volume = volume</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(animals: animals)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Once a generic type is subclassed, it can be created and used in a manner similar to the base class.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// exhibit is of type `TravelingExhibit&lt;Whale&gt;`</span></span><br><span class="line"><span class="keyword">let</span> exhibit = <span class="type">TravelingExhibit</span>(location: <span class="string">"Oakland Zoo"</span>, animals: [<span class="type">Whale</span>(name: <span class="string">"Watson"</span>), <span class="type">Whale</span>(name: <span class="string">"Wren"</span>)])</span><br><span class="line">exhibit.tourTheExhibit()</span><br><span class="line"></span><br><span class="line"><span class="comment">// change exhibit location</span></span><br><span class="line">exhibit.location = <span class="string">"San Francisco Zoo"</span></span><br><span class="line">exhibit.tourTheExhibit()</span><br></pre></td></tr></table></figure><h1 id="Closure"><a href="#Closure" class="headerlink" title="Closure"></a>Closure</h1><h2 id="Create-a-closure"><a href="#Create-a-closure" class="headerlink" title="Create a closure"></a>Create a closure</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> closures = [f,</span><br><span class="line">               &#123; (x:<span class="type">Int</span>) -&gt; <span class="type">Int</span> <span class="keyword">in</span> <span class="keyword">return</span> x * <span class="number">2</span> &#125;,</span><br><span class="line">               &#123; x <span class="keyword">in</span> <span class="keyword">return</span> x - <span class="number">8</span> &#125;,</span><br><span class="line">               &#123; x <span class="keyword">in</span> x * x &#125;,</span><br><span class="line">               &#123; $<span class="number">0</span> * <span class="number">42</span> &#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> fn <span class="keyword">in</span> closures &#123;</span><br><span class="line">  fn(<span class="number">42</span>) <span class="comment">// 5 results</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Closure-and-Function"><a href="#Closure-and-Function" class="headerlink" title="Closure and Function"></a>Closure and Function</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = &#123;(x: <span class="type">Int</span>) -&gt; <span class="type">Int</span></span><br><span class="line">        <span class="keyword">in</span></span><br><span class="line">        <span class="keyword">return</span> x + <span class="number">42</span>&#125;</span><br><span class="line"></span><br><span class="line">f(<span class="number">9</span>) <span class="comment">// 51</span></span><br><span class="line">f(<span class="string">"99"</span>) <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// this function is the same as the closure</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">foo</span><span class="params">(x: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + <span class="number">42</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">Integer</span> = <span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> z: <span class="type">Integer</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">let</span> zz: <span class="type">Int</span> = <span class="number">42</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// (Int) -&gt; Int</span></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">IntToInt</span> = (<span class="type">Int</span>) -&gt; <span class="type">Int</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typealias</span> <span class="type">IntMaker</span> = (<span class="type">Void</span>) -&gt; <span class="type">Int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the function returns another function/closure</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeCounter</span><span class="params">()</span></span> -&gt; <span class="type">IntMaker</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> adder</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter1 = makeCounter() <span class="comment">// counter 1 is equal to the adder function</span></span><br><span class="line"><span class="keyword">let</span> counter2 = makeCounter()</span><br><span class="line"></span><br><span class="line">counter1() <span class="comment">// 1</span></span><br><span class="line">counter1() <span class="comment">// 2</span></span><br><span class="line">counter1() <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// the "n" is not the same for difference instance</span></span><br><span class="line">counter2() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UITableView and Navigation</title>
      <link href="/iOS/UITableView.html"/>
      <url>/iOS/UITableView.html</url>
      
        <content type="html"><![CDATA[<h2 id="Create-UITabelView"><a href="#Create-UITabelView" class="headerlink" title="Create UITabelView"></a>Create UITabelView</h2><blockquote><p>We need to link two delegates(datasource &amp; delegate) from the tabelview in the storyboard to the ViewController.</p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDataSource</span>, <span class="title">UITableViewDelegate</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: Properties</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Get ahold of some villains, for the table</span></span><br><span class="line">    <span class="comment">// This is an array of Villain instances</span></span><br><span class="line">    <span class="keyword">let</span> allVillains = <span class="type">Villain</span>.allVillains</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: Table View Data Source</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// The number of rows</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, numberOfRowsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">self</span>.allVillains.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// The text of every row</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, cellForRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> cell = tableView.dequeueReusableCell(withIdentifier: <span class="string">"VillainCell"</span>)!</span><br><span class="line">        <span class="keyword">let</span> villain = <span class="keyword">self</span>.allVillains[(indexPath <span class="keyword">as</span> <span class="type">NSIndexPath</span>).row]</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Set the name and image</span></span><br><span class="line">        cell.textLabel?.text = villain.name</span><br><span class="line">        cell.imageView?.image = <span class="type">UIImage</span>(named: villain.imageName)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// If the cell has a detail label, we will put the evil scheme in.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> detailTextLabel = cell.detailTextLabel &#123;</span><br><span class="line">            detailTextLabel.text = <span class="string">"Scheme: \(villain.evilScheme)"</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, canEditRowAt indexPath: IndexPath)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">// Use navigationController to show the corresponding page of each row </span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span><span class="params">(<span class="number">_</span> tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> detailController = storyboard?.instantiateViewController(withIdentifier: <span class="string">"VillainDetailViewController"</span>) <span class="keyword">as</span>! <span class="type">VillainDetailViewController</span></span><br><span class="line">        detailController.villain = <span class="keyword">self</span>.allVillains[indexPath.row]</span><br><span class="line">        navigationController?.pushViewController(detailController, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h3 id="Creating-and-preparing-the-DetailViewController"><a href="#Creating-and-preparing-the-DetailViewController" class="headerlink" title="Creating and preparing the DetailViewController"></a>Creating and preparing the DetailViewController</h3><ul><li>Create a <code>VillainDetailViewController</code> with a 100x80 image view, and a label</li><li>Give the <code>VillainDetailViewController</code> a Storyboard ID</li><li>Give the <code>VillainDetailViewController</code> a villain property</li><li>Write the <code>viewWillAppear</code> method in the <code>VillainDetailViewController</code> so that it sets the image and label</li></ul></blockquote><h2 id="Create-the-Villain-struct"><a href="#Create-the-Villain-struct" class="headerlink" title="Create the Villain struct"></a>Create the Villain struct</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Villain</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: Properties</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> evilScheme: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> imageName: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">NameKey</span> = <span class="string">"NameKey"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">EvilSchemeKey</span> = <span class="string">"EvilScheme"</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> <span class="type">ImageNameKey</span> = <span class="string">"ImageNameKey"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// MARK: Initializer</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Generate a Villain from a three entry dictionary</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(dictionary: [<span class="type">String</span> : <span class="type">String</span>]) &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">self</span>.name = dictionary[<span class="type">Villain</span>.<span class="type">NameKey</span>]!</span><br><span class="line">        <span class="keyword">self</span>.evilScheme = dictionary[<span class="type">Villain</span>.<span class="type">EvilSchemeKey</span>]!</span><br><span class="line">        <span class="keyword">self</span>.imageName = dictionary[<span class="type">Villain</span>.<span class="type">ImageNameKey</span>]!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: - Villain (All Villians)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* This extension adds static variable allVillains. An array of Villain objects</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Villain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generate an array full of all of the villains in</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> allVillains: [<span class="type">Villain</span>] &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> villainArray = [<span class="type">Villain</span>]()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> d <span class="keyword">in</span> <span class="type">Villain</span>.localVillainData() &#123;</span><br><span class="line">            villainArray.append(<span class="type">Villain</span>(dictionary: d))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> villainArray</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">localVillainData</span><span class="params">()</span></span> -&gt; [[<span class="type">String</span> : <span class="type">String</span>]] &#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Mr. Big"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Smuggle herion."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Big"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Ernest Blofeld"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Many, many, schemes."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Blofeld"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Sir Hugo Drax"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Nerve gass Earth, from the Moon."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Drax"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Jaws"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Kill Bond with huge metal teeth."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Jaws"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Rosa Klebb"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Humiliate MI6"</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Klebb"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Emilio Largo"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Steal nuclear weapons"</span>, <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"EmilioLargo"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Le Chiffre"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Beat bond at poker."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Lechiffre"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Odd Job"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Kill Bond with razor hat."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"OddJob"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Francisco Scaramanga"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Kill Bond after assembling a golden gun."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Scaramanga"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Raoul Silva"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Kill M."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Silva"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Alec Trevelyan"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Nuke London, after killing Bond."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Trevelyan"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Auric Goldfinger"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Nuke Fort Knox."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Goldfinger"</span>],</span><br><span class="line">            [<span class="type">Villain</span>.<span class="type">NameKey</span> : <span class="string">"Max Zorin"</span>, <span class="type">Villain</span>.<span class="type">EvilSchemeKey</span> : <span class="string">"Destroy Silicon Valley with an earthquake and flood."</span>,  <span class="type">Villain</span>.<span class="type">ImageNameKey</span> : <span class="string">"Zorin"</span>]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="How-to-create-a-Navigation-ViewController"><a href="#How-to-create-a-Navigation-ViewController" class="headerlink" title="How to create a Navigation ViewController"></a>How to create a Navigation ViewController</h2><p><strong>Step 1:</strong> Create a new single view application</p><p><strong>Step 2:</strong> Delete the single view controller (You can delete this view controller by selecting the yellow icon and then tapping the delete button)</p><p><strong>Step 3:</strong> Drag a <code>UINavigationController</code> into the storyboard from the object library.</p><p><strong>Step 4:</strong> Delete the automatically generated root view controller and drag in a new view controller. To reset the Navigation Controller’s Root View Controller property control click on the Navigation Controller’s round yellow icon and drag a line from the root view controller triggered segue to your new view controller.</p><h2 id="Implement-the-StartOver-button"><a href="#Implement-the-StartOver-button" class="headerlink" title="Implement the StartOver button"></a>Implement the StartOver button</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MYOAViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        navigationItem.rightBarButtonItem = <span class="type">UIBarButtonItem</span>(</span><br><span class="line">          title: <span class="string">"Start Over"</span>, </span><br><span class="line">          style: .plain, </span><br><span class="line">          target: <span class="keyword">self</span>, </span><br><span class="line">          action: #selector(startOver))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">startOver</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> navigationController = navigationController &#123;</span><br><span class="line">            navigationController.popToRootViewController(animated: <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>The Navigation Controller is a stack data structure.</p></blockquote><h2 id="How-to-Update-the-Rock-Paper-Scissors-App-with-Navigation"><a href="#How-to-Update-the-Rock-Paper-Scissors-App-with-Navigation" class="headerlink" title="How to Update the Rock Paper Scissors App with Navigation"></a>How to Update the Rock Paper Scissors App with Navigation</h2><p><strong>Step 1.</strong> Drag a navigation controller into the storyboard and set its root view controller property to the <code>RockPaperScissorsViewController</code>.</p><p><strong>Step 2.</strong> Change each of the three segues one at a time.</p><ul><li>Scissors is easiest: Just change the type to “show” instead of “modal”. Note the invocation of <code>prepare(for:sender:)</code>.</li><li>Paper is essentially the same, but follow the invocation in the view controller and note the invocations of an IBAction, and the <code>performSegue(withIdentifier:sender:)</code> method.</li><li>Rock is always the hard way. Read the documentation for <code>UINavigationController</code> to see how to programmatically push the results controller onto the navigation controller. Remember that the <code>RockPaperScissorsViewController</code> will have a navigation controller property that you can use in the action.</li></ul><p><strong>Step 3.</strong> Edit the <code>playAgainButtonPressed</code> method so that the “Play Again” button behaves similarly to the “Start Over” button in Make Your Own Adventure.</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MVC Pattern</title>
      <link href="/iOS/MVC-Pattern.html"/>
      <url>/iOS/MVC-Pattern.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://tva1.sinaimg.cn/large/006gJ2jvgy1gxpk2581unj32ta1fc7jw.jpg" alt="MVC Pattern"></p><h2 id="Model-Objects"><a href="#Model-Objects" class="headerlink" title="Model Objects"></a>Model Objects</h2><p>Model objects encapsulate the data specific to an application and define the logic and computation that manipulate and process that data. For example, a model object might represent a character in a game or a contact in an address book. A model object can have to-one and to-many relationships with other model objects, and so sometimes the model layer of an application effectively is one or more object graphs. Much of the data that is part of the persistent state of the application (whether that persistent state is stored in files or databases) should reside in the model objects after the data is loaded into the application. Because model objects represent knowledge and expertise related to a specific problem domain, they can be reused in similar problem domains. Ideally, a model object should have no explicit connection to the view objects that present its data and allow users to edit that data—it should not be concerned with user-interface and presentation issues.</p><p><strong>Communication</strong>: User actions in the view layer that create or modify data are communicated through a controller object and result in the creation or updating of a model object. When a model object changes (for example, new data is received over a network connection), it notifies a controller object, which updates the appropriate view objects.</p><h2 id="View-Objects"><a href="#View-Objects" class="headerlink" title="View Objects"></a>View Objects</h2><p>A view object is an object in an application that users can see. A view object knows how to draw itself and can respond to user actions. A major purpose of view objects is to display data from the application’s model objects and to enable the editing of that data. Despite this, view objects are typically decoupled from model objects in an MVC application.</p><p>Because you typically reuse and reconfigure them, view objects provide consistency between applications. Both the UIKit and AppKit frameworks provide collections of view classes, and Interface Builder offers dozens of view objects in its Library.</p><p><strong>Communication</strong>: View objects learn about changes in model data through the application’s controller objects and communicate user-initiated changes—for example, text entered in a text field—through controller objects to an application’s model objects.</p><h2 id="Controller-Objects"><a href="#Controller-Objects" class="headerlink" title="Controller Objects"></a>Controller Objects</h2><p>A controller object acts as an intermediary between one or more of an application’s view objects and one or more of its model objects. Controller objects are thus a conduit through which view objects learn about changes in model objects and vice versa. Controller objects can also perform setup and coordinating tasks for an application and manage the life cycles of other objects.</p><p><strong>Communication</strong>: A controller object interprets user actions made in view objects and communicates new or changed data to the model layer. When model objects change, a controller object communicates that new model data to the view objects so that they can display it.</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Delegate</title>
      <link href="/iOS/Delegate.html"/>
      <url>/iOS/Delegate.html</url>
      
        <content type="html"><![CDATA[<h2 id="Defination"><a href="#Defination" class="headerlink" title="Defination"></a>Defination</h2><p>The delegate is an object(Control Object) that executes a group of methods on behalf of another object.</p><blockquote><p>Control object is designed to pass user input to a data model.</p></blockquote><p>We want view classes to be used as is, and then we want control and model classes to have the freedom to customize those views. The delegate pattern allows for this.</p><p>The key to the delegate pattern, is that the view establishes the questions that it needs answered and encodes them in a protocol.</p><blockquote><p>A protocol is a list of methods that a delegate must implement.</p><p>Any object that fulfills the protocol can become a delegate.</p></blockquote><h2 id="UITextFieldDelegate-protocol"><a href="#UITextFieldDelegate-protocol" class="headerlink" title="UITextFieldDelegate protocol"></a><code>UITextFieldDelegate</code> protocol</h2><p>Let’s take a closer look at the protocol we’ll implement next, the <code>UITextFieldDelegate</code> protocol. We’ve listed its methods below. For each of the seven methods, consult the documentation and provide an example implementation. Post one or two of your examples to the discussion forum.</p><p><em>Editing lifecycle methods:</em><br><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619601-textfieldshouldbeginediting" target="_blank" rel="noopener"><code>textFieldShouldBeginEditing(_:)</code></a><br><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619590-textfielddidbeginediting" target="_blank" rel="noopener"><code>textFieldDidBeginEditing(_:)</code></a><br><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619592-textfieldshouldendediting" target="_blank" rel="noopener"><code>textFieldShouldEndEditing(_:)</code></a><br><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619591-textfielddidendediting" target="_blank" rel="noopener"><code>textFieldDidEndEditing(_:)</code></a></p><blockquote><p><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619601-textfieldshouldbeginediting" target="_blank" rel="noopener"><code>textFieldShouldBeginEditing(_:)</code></a></p><p>You could use this method to prevent the user from editing the text field’s contents more than once.</p></blockquote><blockquote><p><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619590-textfielddidbeginediting" target="_blank" rel="noopener"><code>textFieldDidBeginEditing(_:)</code></a></p><p>You might use this method to show overlay views that are visible only while editing.</p></blockquote><blockquote><p><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619592-textfieldshouldendediting" target="_blank" rel="noopener"><code>textFieldShouldEndEditing(_:)</code></a></p><p>The text field calls this method when it is asked to resign the first responder status. This can happen when the user selects another control or when you call the text field’s <a href="https://developer.apple.com/documentation/uikit/uiresponder/1621097-resignfirstresponder" target="_blank" rel="noopener"><code>resignFirstResponder()</code></a> method. Before the focus change occurs, however, the text field calls this method and gives you a chance to prevent the change from happening. </p><p>Normally, you would return <code>true</code> from this method to allow the text field to resign the first responder status. You might return <code>false</code>, however, in cases where your delegate detects invalid contents in the text field. Returning <code>false</code> prevents the user from switching to another control until the text field contains a valid value. </p><p>If you use this method to validate the contents of the text field, you might also want to use an overlay view to provide feedback to that effect. For example, you might display a small icon indicating the text is invalid.</p></blockquote><blockquote><p><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619591-textfielddidendediting" target="_blank" rel="noopener"><code>textFieldDidEndEditing(_:)</code></a></p><p>This method is called after the text field resigns its first responder status. You can use this method to update your delegate’s state information. For example, you might use this method to hide overlay views that should be visible only while editing.</p></blockquote><p><em>The primary method for controlling text:</em><br><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619599-textfield" target="_blank" rel="noopener"><code>textField(_:shouldChangeCharactersIn:replacementString:)</code></a></p><blockquote><ul><li><code>textField</code></li></ul><p>The text field containing the text.</p><ul><li><code>range</code></li></ul><p>The range of characters to be replaced.</p><ul><li><code>string</code></li></ul><p>The replacement string for the specified range. During typing, this parameter normally contains only the single new character that was typed, but it may contain more characters if the user is pasting text. When the user deletes one or more characters, the replacement string is empty.</p><ul><li>The text field calls this method whenever user actions cause its text to change. Use this method to validate text as it is typed by the user. For example, you could use this method to prevent the user from entering anything but numerical values.</li></ul></blockquote><p><em>The clear button (the ‘x’ on the right side of some text fields):</em><br><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619594-textfieldshouldclear" target="_blank" rel="noopener"><code>textFieldShouldClear(_:)</code></a></p><blockquote><p>The text field calls this method in response to the user pressing the built-in clear button. (This button is not shown by default but can be enabled by changing the value in the <a href="https://developer.apple.com/documentation/uikit/uitextfield/1619622-clearbuttonmode" target="_blank" rel="noopener"><code>clearButtonMode</code></a> property of the text field.) This method is also called when editing begins and the <a href="https://developer.apple.com/documentation/uikit/uitextfield/1619639-clearsonbeginediting" target="_blank" rel="noopener"><code>clearsOnBeginEditing</code></a> property of the text field is set to <code>true</code>.</p><p>If you do not implement this method, the text field clears the text as if the method had returned <code>true</code>.</p></blockquote><p><em>The return key in the keyboard:</em><br><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619603-textfieldshouldreturn" target="_blank" rel="noopener"><code>textFieldShouldReturn(_:)</code></a></p><blockquote><p>The default implementation returns <code>true</code>, resigning first responder status. You can override this method in your custom responders to update your object’s state or perform other actions, such as removing the highlight from a selection. You can also return <code>false</code>, refusing to relinquish first responder status. If you override this method, you must call <code>super</code> (the superclass implementation) at some point in your code.</p></blockquote><h2 id="Control-Flow-Walk-trough"><a href="#Control-Flow-Walk-trough" class="headerlink" title="Control Flow Walk-trough"></a>Control Flow Walk-trough</h2><ol><li><p>User taps keyboard</p></li><li><p>Textfield realizes text will change</p></li><li><p>Textfield invokes …</p><blockquote><p><a href="https://developer.apple.com/reference/uikit/uitextfielddelegate/1619599-textfield" target="_blank" rel="noopener"><code>textField(_:shouldChangeCharactersIn:replacementString:)</code></a></p></blockquote></li><li><p>VC receives invocation</p></li><li><p>VC assembles the new text</p></li><li><p>VC updates the label</p></li><li><p>VC returns “true” to allow change</p></li></ol><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MARK: Text Field Delegate Methods</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Step 4</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">textField</span><span class="params">(<span class="number">_</span> textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 5 </span></span><br><span class="line">    <span class="comment">// Figure out what the new text will be, if we return true</span></span><br><span class="line">    <span class="keyword">var</span> newText = textField.text! <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line">    newText = newText.replacingCharacters(<span class="keyword">in</span>: range, with: string) <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// hide the label if the newText will be an empty string</span></span><br><span class="line">    <span class="keyword">self</span>.characterCountLabel.isHidden = (newText.length == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 6</span></span><br><span class="line">    <span class="comment">// Write the length of newText into the label</span></span><br><span class="line">    <span class="keyword">self</span>.characterCountLabel.text = <span class="type">String</span>(newText.length)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Step 7</span></span><br><span class="line">    <span class="comment">// returning true gives the text field permission to change its text</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>We can’t see the first three steps.</p></blockquote><h2 id="Emoji-Textfield"><a href="#Emoji-Textfield" class="headerlink" title="Emoji Textfield"></a>Emoji Textfield</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">textField</span><span class="params">(<span class="number">_</span> textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> replacedAnEmoji = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">var</span> emojiStringRange: <span class="type">NSRange</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Construct the text that will be in the field if this change is accepted</span></span><br><span class="line">        <span class="keyword">var</span> newText = textField.text! <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line">        newText = newText.replacingCharacters(<span class="keyword">in</span>: range, with: string) <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// For each dictionary entry in translations, pull out a string to </span></span><br><span class="line">        <span class="comment">// search for an emoji to replace it with</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (emojiString, emoji) <span class="keyword">in</span> translations &#123;</span><br><span class="line">          </span><br><span class="line">            <span class="comment">// Search for all occurances of key (ie. "dog"), </span></span><br><span class="line">            <span class="comment">// and replace with emoji (ie. 🐶)</span></span><br><span class="line">            <span class="comment">// repeat-while loop</span></span><br><span class="line">            <span class="keyword">repeat</span> &#123;</span><br><span class="line">                emojiStringRange = newText.range(of: emojiString, options: .caseInsensitive)</span><br><span class="line">            </span><br><span class="line">                <span class="comment">// found one</span></span><br><span class="line">                <span class="keyword">if</span> emojiStringRange.location != <span class="type">NSNotFound</span> &#123;</span><br><span class="line">                    newText = newText.replacingCharacters(<span class="keyword">in</span>: emojiStringRange, with: emoji) <span class="keyword">as</span> <span class="type">NSString</span></span><br><span class="line">                    replacedAnEmoji = <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125; <span class="keyword">while</span> emojiStringRange.location != <span class="type">NSNotFound</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we have replaced an emoji, then we directly edit the text field</span></span><br><span class="line">        <span class="comment">// Otherwise we allow the proposed edit.</span></span><br><span class="line">        <span class="keyword">if</span> replacedAnEmoji &#123;</span><br><span class="line">            textField.text = newText <span class="keyword">as</span> <span class="type">String</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Swift进阶</title>
      <link href="/iOS/Swift%E8%BF%9B%E9%98%B6.html"/>
      <url>/iOS/Swift%E8%BF%9B%E9%98%B6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h1><h2 id="Nil-value"><a href="#Nil-value" class="headerlink" title="Nil value"></a>Nil value</h2><p>The Nil value is the same as null in some other languages.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> z: <span class="type">Int?</span></span><br><span class="line"><span class="keyword">var</span> s: <span class="type">String</span></span><br><span class="line">s = <span class="string">"123"</span></span><br><span class="line">z = <span class="type">Int</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> zee: <span class="type">Int?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> string: <span class="type">String</span></span><br><span class="line"><span class="keyword">let</span> randomNumber = <span class="type">Int</span>(arc4random() % <span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span> randomNumber == <span class="number">1</span> &#123;</span><br><span class="line">    string = <span class="string">"123"</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// always 0</span></span><br><span class="line">    string = <span class="string">"ABC"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">zee = <span class="type">Int</span>(string)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> intValue = zee &#123;</span><br><span class="line">  intValue * <span class="number">2</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="string">"No value"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Another-Example-With-Nested-Structures"><a href="#Another-Example-With-Nested-Structures" class="headerlink" title="Another Example With Nested Structures"></a>Another Example With Nested Structures</h2><p>Safely unwrapping optionals is a fundamental Swift skill and one can’t have too much practice. Let’s walk through another example using the following enum and structures.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Genre</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> country, blues, folk</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Artist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> primaryGenre: <span class="type">Genre?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> released: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> artist: <span class="type">Artist?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <code>Song</code> struct contains a property <code>artist</code> of optional type <code>Artist?</code>. Then, the <code>Artist</code> struct as a <code>primaryGenre</code> property of optional type <code>Genre?</code>. <code>Genre</code> is a simple enumeration with only three cases for simplicity.</p><p>Now imagine we have the following instances of the <code>Artist</code> and <code>Song</code> structs. Here, <code>johnny</code> is assigned to the <code>Artist</code> property of <code>walkTheLine</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> johnny = <span class="type">Artist</span>(name: <span class="string">"Johnny Cash"</span>, primaryGenre: <span class="type">Genre</span>.country)</span><br><span class="line"><span class="keyword">var</span> walkTheLine = <span class="type">Song</span>(title: <span class="string">"I Walk the Line"</span>, released: <span class="number">1956</span>, artist: johnny)</span><br></pre></td></tr></table></figure><p>If we only had access to the the <code>Song</code> instance <code>walkTheLine</code> and we wanted to determine the <code>primaryGenre</code> of the song’s artist, we’d need some <code>if let</code>s.</p><p>First, we’d need to get the artist.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> artist = walkTheLine.artist &#123;</span><br><span class="line">  <span class="built_in">print</span>(artist.name)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Artist unknown"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And within the first <code>if let</code>, we’d use another to get the <code>primaryGenre</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> artist = walkTheLine.artist &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> genre = artist.primaryGenre &#123;</span><br><span class="line">      <span class="comment">// If there is no value for enum, it wll be "country"</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Primary genre: \(genre.rawValue)"</span>) </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"Primary genre unknown"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Artist unknown"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If the <code>genre</code> property of <code>artist</code> is not <code>nil</code>, we know it has a value and can safely print out the genre.</p><h2 id="Example-Animals-With-and-Without-Tails"><a href="#Example-Animals-With-and-Without-Tails" class="headerlink" title="Example: Animals With and Without Tails"></a>Example: Animals With and Without Tails</h2><p>Here’s another example: let’s say we have a struct called Animal. The Animal struct has a tail property and the tail property is an optional — not all animals have tails.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tail</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length: <span class="type">String</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(length: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.length = <span class="string">"\(length)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:<span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> species: <span class="type">String</span> = <span class="string">"homo sapiens"</span></span><br><span class="line">    <span class="keyword">var</span> tail: <span class="type">Tail?</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, species: <span class="type">String</span>, tailLength:<span class="type">Int?</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">        <span class="keyword">self</span>.species = species</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> tailLength = tailLength &#123;</span><br><span class="line">            <span class="keyword">self</span>.tail = <span class="type">Tail</span>(length: tailLength)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.tail = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = <span class="type">Animal</span>(name: <span class="string">"Lenny"</span>, species: <span class="string">"lemur"</span>, tailLength: <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> tailLength = animal.tail?.length&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(animal.name)'s tail is \(tailLength) cm long"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(animal.name) doesn't have a tail."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "Lenny's tail is 12 cm long\n"</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> animal = <span class="type">Animal</span>(name: <span class="string">"Gilbert"</span>, species: <span class="string">"Gorilla"</span>, tailLength: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> tailLength = animal.tail?.length&#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(animal.name)'s tail is \(tailLength) cm long"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"\(animal.name) doesn't have a tail."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// "Gilbert doesn't have a tail.\n"</span></span><br></pre></td></tr></table></figure><h2 id="Nil-Coalescing-Operator"><a href="#Nil-Coalescing-Operator" class="headerlink" title="Nil Coalescing Operator"></a>Nil Coalescing Operator</h2><p>We already used optional chaining to avoid nesting <code>if let</code>s, but what if all we want to do is provide <code>tailLength</code> with a default value if the optional chaining fails? Swift provides a useful operator, for situations like these, the <strong>nil coalescing operator</strong>, <code>??</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">optional</span> expression&gt; ?? &lt;<span class="keyword">default</span> <span class="keyword">case</span>&gt;</span><br></pre></td></tr></table></figure><p>To use the operator, simply place <code>??</code> after the optional chaining expression, and then put a default value after the <code>??</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tailLength = animal.tail?.length ?? <span class="string">"0"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"tail length: \(tailLength)"</span>)</span><br><span class="line"><span class="comment">// tail length: 0</span></span><br></pre></td></tr></table></figure><h2 id="Your-Turn"><a href="#Your-Turn" class="headerlink" title="Your Turn"></a>Your Turn</h2><p>Assume the following structs and enum are defined.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Genre</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> country, blues, folk</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Artist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> primaryGenre: <span class="type">Genre?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> released: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> artist: <span class="type">Artist?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using the enums and structures, implement the <code>getArtistGenre()</code> function. Given a <code>Song</code> as input, return the raw value of the artist’s primary genre. If either the <code>artist</code> is <code>nil</code> or the <code>primaryGenre</code> is <code>nil</code>, then return an empty string. You must use optional chaining and the nil coalescing operator (<code>??</code>).</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Genre</span>: <span class="title">String</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> country, blues, folk</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Artist</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> primaryGenre: <span class="type">Genre?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Song</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> released: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> artist: <span class="type">Artist?</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getArtistGenre</span><span class="params">(song: Song)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> songGenre = song.artist?.primaryGenre &#123;</span><br><span class="line">        <span class="keyword">return</span> songGenre.rawValue</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> songGenre = song.artist?.primaryGenre?.rawValue ?? <span class="string">""</span></span><br><span class="line">        <span class="keyword">return</span> songGenre</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> artisTest = <span class="type">Artist</span>(name: <span class="string">"name"</span>, primaryGenre: <span class="literal">nil</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = <span class="type">Song</span>(title: <span class="string">"title"</span>, released: <span class="number">2021</span>, artist: artisTest)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(getArtistGenre(song: test))</span><br></pre></td></tr></table></figure><h2 id="Example-Revisiting-the-Int-Initializer-Method"><a href="#Example-Revisiting-the-Int-Initializer-Method" class="headerlink" title="Example: Revisiting the Int() Initializer Method"></a>Example: Revisiting the <code>Int()</code> Initializer Method</h2><p>Let’s say we’re using the <code>Int()</code> initializer method and invoking it on a variable that we are confident can be converted to an Int.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> w = <span class="type">Int</span>(<span class="string">"123"</span>)</span><br></pre></td></tr></table></figure><p>We know this method is going to return the Int, 123, so in this case, unwrapping with the exclamation point is appropriate. We know there is little risk of a fatal error being thrown. We can place the exclamation point after w, like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w! * <span class="number">2</span></span><br></pre></td></tr></table></figure><p>Or we could unwrap the return value directly, like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> w = <span class="type">Int</span>(<span class="string">"123"</span>)!</span><br><span class="line">w * <span class="number">2</span></span><br></pre></td></tr></table></figure><p>In this second case the value assigned to w will be a plain old Int.</p><h2 id="Implicitly-Unwrapped-Optionals-Revisiting-the-Villain-struct"><a href="#Implicitly-Unwrapped-Optionals-Revisiting-the-Villain-struct" class="headerlink" title="Implicitly Unwrapped Optionals: Revisiting the Villain struct"></a>Implicitly Unwrapped Optionals: Revisiting the Villain struct</h2><p>What about declaring implicitly unwrapped optionals? When is an appropriate time to be so bold? Well, remember the <code>evilScheme</code> property of the <code>Villain</code> struct? We wanted the ability to create instances of <code>Villain</code> with the option of not providing an <code>evilScheme</code> at first. However, once we know that the <code>evilScheme</code> has been set, we can access the property as if it were a regular non-optional type.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Villain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="comment">// exclamation point means implicitly unwrapped</span></span><br><span class="line">    <span class="keyword">var</span> evilScheme: <span class="type">String!</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">performScheme</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// no unwrapping necessary</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"And now, I will \(evilScheme!)"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> villain = <span class="type">Villain</span>(name: <span class="string">"Billy"</span>, evilScheme: <span class="literal">nil</span>)</span><br><span class="line">villain.evilScheme = <span class="string">"steal from the cookie jar"</span></span><br><span class="line"><span class="comment">// we know for sure the scheme has been set</span></span><br><span class="line">villain.performScheme()</span><br></pre></td></tr></table></figure><p>There are a few things to note in the example above.</p><ul><li>The <code>evilScheme</code> property is now declared as an <strong>implicitly unwrapped optional</strong>. It’s type is written as <code>String!</code> instead of <code>String?</code>.</li><li>In the <code>performScheme()</code> method, we reference <code>evilScheme</code> as any other property, without unwrapping.</li><li>We call <code>performScheme()</code> once we know for a fact that <code>evilScheme</code> was set. The function assumes that <code>evilScheme</code> is not <code>nil</code>. If we treat an implicitly unwrapped optional that contains nil as if it contained a value, bad things can happen - including crashes!</li></ul><h2 id="Difference-between-upwrapping-an-with-with-and-with-implicit-unwrapping"><a href="#Difference-between-upwrapping-an-with-with-and-with-implicit-unwrapping" class="headerlink" title="Difference between upwrapping an with ?, with ! and with implicit unwrapping?"></a>Difference between upwrapping an with <code>?</code>, with <code>!</code> and with implicit unwrapping?</h2><p>Unwrapping with <code>?</code> is useful if you’re accessing nested properties or want some default behavior to occur if a value is nil.</p><p>Using <code>!</code> does not require providing a default value and is useful if you know that a value won’t be <code>nil</code>. However, if it is <code>nil</code>, the program will crash.</p><p>Implicitly unwrapping optionals is also useful when you know a value won’t be <code>nil</code>, but you can use the same syntax as a normal property. However, unintended behavior and crashes can occur if it is <code>nil</code>.</p><h1 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h1><h2 id="A-String-is-a-Struct"><a href="#A-String-is-a-Struct" class="headerlink" title="A String is a Struct"></a>A String is a Struct</h2><p>You just saw how a string can be initialized without a string literal.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stringWithPotential = <span class="type">String</span>()</span><br></pre></td></tr></table></figure><h2 id="Counting-Characters"><a href="#Counting-Characters" class="headerlink" title="Counting Characters"></a>Counting Characters</h2><p>Let’s start with something straightforward. If you want to know how many characters are in a string, you use the count property.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Meet me in St. Louis!"</span></span><br><span class="line"><span class="string">"The string is \(str.count) characters long"</span></span><br></pre></td></tr></table></figure><p>Many real apps rely on counting characters - for example, a Twitter client that ensures a user is restricted to typing 140 or fewer characters.</p><h2 id="Accessing-specific-characters"><a href="#Accessing-specific-characters" class="headerlink" title="Accessing specific characters"></a>Accessing specific characters</h2><p>We can also conveniently access the characters at the beginning and end of a string.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstLetter = str.first</span><br><span class="line"><span class="keyword">let</span> isExcited = str.last == <span class="string">"!"</span></span><br></pre></td></tr></table></figure><h2 id="Checking-for-Substrings"><a href="#Checking-for-Substrings" class="headerlink" title="Checking for Substrings"></a>Checking for Substrings</h2><p>A <strong>substring</strong> is the term programmers use for any string that occurs within another string. We can check for the presence of a substring in different cases as shown below.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str.<span class="built_in">contains</span>(<span class="string">"Lou"</span>)</span><br><span class="line">str.hasPrefix(<span class="string">"Me"</span>)</span><br><span class="line">str.hasSuffix(<span class="string">"in"</span>)</span><br></pre></td></tr></table></figure><p><code>contains()</code> simply checks if the substring occurs anywhere in <code>str</code>. <code>hasPrefix()</code> and <code>hasSuffix()</code> are more specialized and check if the substring occurs at the beginning and end of the string respectively.</p><h2 id="Creating-Variations-of-Strings"><a href="#Creating-Variations-of-Strings" class="headerlink" title="Creating Variations of Strings"></a>Creating Variations of Strings</h2><p>We can also use some string methods to generate different strings.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str.lowercased()</span><br><span class="line">str.uppercased()</span><br><span class="line"><span class="type">String</span>(str.reversed())</span><br></pre></td></tr></table></figure><p>Converting strings to all-lowercase or all-uppercase is great when you want user input to be case-insensitive. And reversing a string is useful if you want to see if two strings are <a href="https://en.wikipedia.org/wiki/Palindrome" target="_blank" rel="noopener">palindromes</a>.</p><p>Note in the last example, we need to use <code>str.reversed()</code> with a <code>String</code> initializer. If you look closely at the <a href="https://developer.apple.com/documentation/swift/string/2893808-reversed" target="_blank" rel="noopener">documentation for reversed()</a>, you’ll see that it actually returns a <code>ReversedCollection</code> instead of a <code>String</code>. You won’t need to use this type directly, but just know that Swift uses it “under the hood” for efficiency. You can simply use the <code>String()</code> initializer to convert the result into a usable string.</p><h2 id="Appending-Two-Strings"><a href="#Appending-Two-Strings" class="headerlink" title="Appending Two Strings"></a>Appending Two Strings</h2><p>Similar to concatenation, <code>String</code> also has an <code>append()</code> method that takes a string as an argument and attaches it to the string you’re mutating.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="string">"hello "</span></span><br><span class="line"><span class="keyword">let</span> world = <span class="string">"world!"</span></span><br><span class="line">hello.append(world)</span><br></pre></td></tr></table></figure><p>Is the equivalent of</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello = hello + world</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello += world</span><br></pre></td></tr></table></figure><p>With <code>append()</code> you don’t need to reassign <code>hello</code> a new value, and you’ll find the code is much more readable.</p><h2 id="Trimming-characters"><a href="#Trimming-characters" class="headerlink" title="Trimming characters"></a>Trimming characters</h2><p>In addition to <code>append()</code>, we can also remove characters from the end of a string. For example, you may want to remove all whitespace characters from the end of a user’s input.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">"   Be back later!        "</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> message.last == <span class="string">" "</span> &#123;</span><br><span class="line">    message.removeLast()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And the same can be done at the beginning.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> message.first == <span class="string">" "</span> &#123;</span><br><span class="line">    message.removeFirst()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Replacing-Substrings"><a href="#Replacing-Substrings" class="headerlink" title="Replacing Substrings"></a>Replacing Substrings</h2><p>We can also modify the middle of strings. A common manipulation method is <code>replacingOccurrences(of: String, with: String)</code>, which allows us to swap out one substring with another.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> verbose = <span class="string">"We hope you are very excited to learn Swift. It's a very fun and very useful skill. Soon enough, you'll be writing your very own app!"</span></span><br><span class="line"><span class="keyword">let</span> better = verbose.replacingOccurrences(of: <span class="string">"very "</span>, with: <span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>This method might come in handy for implementing a Find and Replace feature, a profanity filter, and many other cases, and is great to have in your string manipulation bag of tricks.</p><p><strong>Note:</strong> To use the <code>replaceOccurrences()</code> method, you will need to add <code>import Foundation</code> to the top of your file. <code>Foundation</code> is a <strong>framework</strong>, which is just a name for a collection of commonly used code. Apple provides frameworks like Foundation so that developers, like you, don’t need to reinvent the wheel for common tasks like string manipulation. We’ve already imported Foundation in the playground, so you can just follow along with the examples.</p><h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="Initialize"><a href="#Initialize" class="headerlink" title="Initialize"></a>Initialize</h2> <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: ## Initializing Arrays</span></span><br><span class="line"><span class="comment">//: The verbose way</span></span><br><span class="line"><span class="keyword">var</span> numbers = <span class="type">Array</span>&lt;<span class="type">Double</span>&gt;()</span><br><span class="line"><span class="comment">//: More often you will see ...</span></span><br><span class="line"><span class="keyword">var</span> moreNumbers = [<span class="type">Double</span>]()</span><br><span class="line">moreNumbers = [<span class="number">85.0</span>, <span class="number">90.0</span>, <span class="number">95.0</span>]</span><br><span class="line"><span class="comment">//: Array literal syntax</span></span><br><span class="line"><span class="keyword">let</span> differentNumbers = [<span class="number">97.5</span>, <span class="number">98.5</span>, <span class="number">99.0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//: Array concatenation is super convenient in Swift</span></span><br><span class="line">moreNumbers += differentNumbers</span><br><span class="line"></span><br><span class="line"><span class="comment">//: ## Swift Arrays have types</span></span><br><span class="line"><span class="comment">//: An array can hold any type of object</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LightSwitch</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> on: <span class="type">Bool</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> circuit = [<span class="type">LightSwitch</span>]()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> livingRoomSwitch = <span class="type">LightSwitch</span>()</span><br><span class="line"><span class="keyword">var</span> kitchenSwitch = <span class="type">LightSwitch</span>()</span><br><span class="line"><span class="keyword">var</span> bathroomSwitch = <span class="type">LightSwitch</span>()</span><br><span class="line"></span><br><span class="line">circuit = [livingRoomSwitch, kitchenSwitch, bathroomSwitch]</span><br></pre></td></tr></table></figure><p><strong>Append</strong></p><p>Here is an array of type <code>String</code>, listing musicians we want to play in the car on our upcoming road trip. To add an item to the end of an array we can use the append method, like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> musicians = [<span class="string">"Neil Young"</span>, <span class="string">"Kendrick Lamar"</span>, <span class="string">"Flo Rida"</span>, <span class="string">"Fetty Wap"</span>]</span><br><span class="line">musicians.append(<span class="string">"Rae Sremmurd"</span>)</span><br></pre></td></tr></table></figure><p>The array now looks like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"Neil Young"</span>, <span class="string">"Kendrick Lamar"</span>, <span class="string">"Flo Rida"</span>, <span class="string">"Fetty Wap"</span>, <span class="string">"Rae Sremmurd"</span>]</span><br></pre></td></tr></table></figure><p><strong>Insert</strong></p><p>To add an item to a specific place in an array we can use the method, <em>insert(at:)</em>. So, to add in “Dej Loaf” at index 2 we would write the following:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">musicians.insert(<span class="string">"Dej Loaf"</span>, at: <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>The array now looks like this:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"Neil Young"</span>, <span class="string">"Kendrick Lamar"</span>, <span class="string">"Dej Loaf"</span>, <span class="string">"Flo Rida"</span>, <span class="string">"Fetty Wap"</span>, <span class="string">"Rae Sremmurd"</span>]</span><br></pre></td></tr></table></figure><p><strong>Remove</strong></p><p>We can use a method called <code>remove(at:)</code> to remove an item at a particular index. If we remove the item at index 3, you can see that “Flo Rida” is removed:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">musicians.remove(at: <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>Subscripting</strong></p><p>Finally, if you want to retrieve an item at a particular index, you can use subscript syntax. Simply put the index in-between brackets after the array name, like so:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> musician = musician[<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h1 id="Dictionary"><a href="#Dictionary" class="headerlink" title="Dictionary"></a>Dictionary</h1><h2 id="Initialize-1"><a href="#Initialize-1" class="headerlink" title="Initialize"></a>Initialize</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Initializer syntax</span></span><br><span class="line"><span class="keyword">var</span> groupDict = [<span class="type">String</span>:<span class="type">String</span>]()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dictionary literal</span></span><br><span class="line"><span class="keyword">var</span> animalGroupDict = [<span class="string">"whales"</span>:<span class="string">"pod"</span>, <span class="string">"geese"</span>:<span class="string">"flock"</span>, <span class="string">"lions"</span>: <span class="string">"pride"</span>]</span><br></pre></td></tr></table></figure>  <figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: ## Dictionary operations</span></span><br><span class="line"><span class="comment">//: insert, count, remove, update, retrieve</span></span><br><span class="line"><span class="keyword">var</span> animalGroupsDict = [<span class="string">"whales"</span>:<span class="string">"pod"</span>, <span class="string">"geese"</span>:<span class="string">"flock"</span>, <span class="string">"lions"</span>: <span class="string">"pride"</span>]</span><br><span class="line"><span class="comment">//: Adding items to a dictionary</span></span><br><span class="line">animalGroupsDict[<span class="string">"crows"</span>] = <span class="string">"murder"</span></span><br><span class="line">animalGroupsDict[<span class="string">"monkeys"</span>] = <span class="string">"troop"</span></span><br><span class="line"><span class="comment">//: The count method is available to all collections.</span></span><br><span class="line">animalGroupsDict.<span class="built_in">count</span> <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">print</span>(animalGroupsDict)</span><br><span class="line"><span class="comment">//: Removing items from a dictionary</span></span><br><span class="line">animalGroupsDict[<span class="string">"crows"</span>] = <span class="literal">nil</span></span><br><span class="line">animalGroupsDict</span><br><span class="line"><span class="comment">//: Updating a value</span></span><br><span class="line">animalGroupsDict[<span class="string">"monkeys"</span>] = <span class="string">"barrel"</span></span><br><span class="line"><span class="keyword">var</span> group = animalGroupsDict.updateValue(<span class="string">"gaggle"</span>, forKey: <span class="string">"geese"</span>)</span><br><span class="line">type(of: group)</span><br><span class="line"></span><br><span class="line">animalGroupsDict.updateValue(<span class="string">"crash"</span>, forKey: <span class="string">"rhinoceroses"</span>)</span><br><span class="line"><span class="built_in">print</span>(animalGroupsDict)</span><br><span class="line"><span class="comment">//: ## Example</span></span><br><span class="line"><span class="comment">//: Retrieving the value for a particular key</span></span><br><span class="line"><span class="keyword">let</span> groupOfWhales = animalGroupsDict[<span class="string">"whales"</span>]</span><br><span class="line"><span class="comment">//: Why would the code below return an optional?</span></span><br><span class="line"><span class="comment">//:</span></span><br><span class="line"><span class="comment">//:     animalGroupsDict["whales"]</span></span><br><span class="line"><span class="comment">//: We unwrap a value returned from a dictionary just like we would unwrap any other optional.</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> groupOfWhales = animalGroupsDict[<span class="string">"whales"</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"We saw a \(groupOfWhales) of whales from the boat."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No value found for that key."</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//: What happens if the key isn't found?</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> groupOfSasquatches = animalGroupsDict[<span class="string">"Sasquatches"</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"We saw a \(groupOfSasquatches) of Sasquatches on our hike."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No value found for that key."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here we use the <code>removeValueForKey()</code> method to remove the value for the string, “George Bush”. Since <code>removeValueForKey()</code> returns the value removed, we can reset the value of the new key, “George H. W. Bush” to be the previously returned value, “Miss Beazley.”</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldValue = presidentialPetsDict.removeValueForKey(<span class="string">"George Bush"</span>)</span><br><span class="line">presidentialPetsDict[<span class="string">"George W. Bush"</span>] = oldValue</span><br></pre></td></tr></table></figure><p>We unwrap the retrieved value using <code>if let</code> and then use string interpolation to insert “Bo” into the string. The string is printed out as a part of the if block.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> dog = presidentialDogs[<span class="string">"Barack Obama"</span>] &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Michele Obama walks \(dog) evey morning."</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"No value found."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//: ## Sets</span></span><br><span class="line"><span class="comment">//: Literal syntax</span></span><br><span class="line"><span class="keyword">var</span> cutlery: <span class="type">Set</span> = [<span class="string">"fork"</span>, <span class="string">"knife"</span>, <span class="string">"spoon"</span>]</span><br><span class="line"><span class="keyword">var</span> flowers:<span class="type">Set</span>&lt;<span class="type">Character</span>&gt; = [<span class="string">"🌷"</span>,<span class="string">"🌹"</span>,<span class="string">"🌸"</span>]</span><br><span class="line"><span class="comment">//: Initializer syntax</span></span><br><span class="line"><span class="keyword">var</span> utensils = <span class="type">Set</span>&lt;<span class="type">String</span>&gt;()</span><br><span class="line"><span class="keyword">var</span> trees = <span class="type">Set</span>&lt;<span class="type">Character</span>&gt;()</span><br><span class="line"><span class="comment">//: ## Set operations</span></span><br><span class="line"><span class="comment">//: Insert, Remove, Count</span></span><br><span class="line">trees.insert(<span class="string">"🌲"</span>)</span><br><span class="line">trees.insert(<span class="string">"🌳"</span>)</span><br><span class="line">trees.insert(<span class="string">"🌵"</span>)</span><br><span class="line"></span><br><span class="line">trees.remove(<span class="string">"🌵"</span>)</span><br><span class="line">trees.<span class="built_in">count</span></span><br></pre></td></tr></table></figure><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Movie</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> title: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> director: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> releaseYear: <span class="type">Int</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(title: <span class="type">String</span>, director: <span class="type">String</span>, releaseYear: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.title = title</span><br><span class="line">        <span class="keyword">self</span>.director = director</span><br><span class="line">        <span class="keyword">self</span>.releaseYear = releaseYear</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieArchive</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> movies: [<span class="type">Movie</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">filterByYear</span><span class="params">(year: Int)</span></span> -&gt; [<span class="type">Movie</span>] &#123;</span><br><span class="line">        <span class="keyword">var</span> filteredArray = [<span class="type">Movie</span>]()</span><br><span class="line">        <span class="keyword">for</span> movie <span class="keyword">in</span> <span class="keyword">self</span>.movies &#123;</span><br><span class="line">            <span class="keyword">if</span> movie.releaseYear == year &#123;</span><br><span class="line">                filteredArray.append(movie)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> filteredArray</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(movies: [<span class="type">Movie</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.movies = movies</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> movie1 = <span class="type">Movie</span>(title: <span class="string">"Bride of Frankenstein"</span>, director: <span class="string">"James Whale"</span>, releaseYear: <span class="number">1935</span>)</span><br><span class="line"><span class="keyword">let</span> movie2 = <span class="type">Movie</span>(title: <span class="string">"The Night Walker"</span>, director: <span class="string">"William Castle"</span>, releaseYear: <span class="number">1964</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> archive = <span class="type">MovieArchive</span>(movies: [movie1, movie2])</span><br><span class="line">archive.filterByYear(year: <span class="number">1935</span>)</span><br><span class="line">archive.movies</span><br></pre></td></tr></table></figure><h2 id="The-difference-between-class-and-struct"><a href="#The-difference-between-class-and-struct" class="headerlink" title="The difference between class and struct"></a>The difference between class and struct</h2><p>One important difference between structs and classes in Swift is how they’re handled in the computer or phone’s memory. Structs are <strong>passed by value</strong> while classes are <strong>passed by reference</strong>. </p><blockquote><p>引用类型：将一个对象赋值给另一个对象时，系统不会对此对象进行拷贝，而会将指向这个对象的指针赋值给另一个对象，当修改其中一个对象的值时，另一个对象的值会随之改变。</p><p>值类型：将一个对象赋值给另一个对象时，会对此对象进行拷贝，复制出一份副本给另一个对象，在修改其中一个对象的值时，不影响另外一个对象。</p></blockquote><blockquote><p>Array is a type of Struct. Use array as an example.</p></blockquote><p>Each array has an independent value that includes the values of all of its elements. For simple types such as integers and other structures, this means that when you change a value in one array, the value of that element does not change in any copies of the array. For example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="keyword">var</span> numbersCopy = numbers</span><br><span class="line">numbers[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br><span class="line"><span class="comment">// Prints "[100, 2, 3, 4, 5]"</span></span><br><span class="line"><span class="built_in">print</span>(numbersCopy)</span><br><span class="line"><span class="comment">// Prints "[1, 2, 3, 4, 5]"</span></span><br></pre></td></tr></table></figure><p>If the elements in an array are instances of a class, the semantics are the same, though they might appear different at first. In this case, the values stored in the array are references to objects that live outside the array. If you change a reference to an object in one array, only that array has a reference to the new object. However, if two arrays contain references to the same object, you can observe changes to that object’s properties from both arrays. For example:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// An integer type with reference semantics</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerReference</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> firstIntegers = [<span class="type">IntegerReference</span>(), <span class="type">IntegerReference</span>()]</span><br><span class="line"><span class="keyword">var</span> secondIntegers = firstIntegers</span><br><span class="line"></span><br><span class="line"><span class="comment">// Modifications to an instance are visible from either array</span></span><br><span class="line">firstIntegers[<span class="number">0</span>].value = <span class="number">100</span></span><br><span class="line"><span class="built_in">print</span>(secondIntegers[<span class="number">0</span>].value)</span><br><span class="line"><span class="comment">// Prints "100"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Replacements, additions, and removals are still visible</span></span><br><span class="line"><span class="comment">// only in the modified array</span></span><br><span class="line">firstIntegers[<span class="number">0</span>] = <span class="type">IntegerReference</span>()</span><br><span class="line"><span class="built_in">print</span>(firstIntegers[<span class="number">0</span>].value)</span><br><span class="line"><span class="comment">// Prints "10"</span></span><br><span class="line"><span class="built_in">print</span>(secondIntegers[<span class="number">0</span>].value)</span><br><span class="line"><span class="comment">// Prints "100"</span></span><br></pre></td></tr></table></figure><h2 id="Class-Inheritance"><a href="#Class-Inheritance" class="headerlink" title="Class Inheritance"></a>Class Inheritance</h2><p>One powerful feature of classes not available to structs is inheritance. Inheritance allows one class to take on the properties and methods of another class, as well as add its own functionality.</p><p>To start, let’s say we have a <code>Guitar</code> class defined as the following.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Guitar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> strings: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">let</span> frets: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span>(strings: <span class="type">Int</span>, frets: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.strings = strings</span><br><span class="line">        <span class="keyword">self</span>.frets = frets</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pluckString</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"twang"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is a great start, but what if we then wanted to model an electric guitar. The electric guitar is a “kind of” guitar, but with a few differences. For example, the electric guitar has electronics for modifying the volume and tone of its output (check out the knobs on the lower body). We could define a new <code>ElectricGuitar</code> class by copy-pasting the <code>GuitarClass</code> and adding these different properties, but we can do much better. Instead, if we place a colon after the the class name and then specify the class we want to inherit from, the <code>ElectricGuitar</code> automatically has all the properties and methods of a guitar.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ElectricGuitar</span>: <span class="title">Guitar</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> volumeLevel: <span class="type">Float</span> = <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">var</span> toneLevel: <span class="type">Float</span> = <span class="number">1.0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we have a new class, <code>ElectricGuitar</code> that has all the properties of <code>Guitar</code> with the additional properties for volume and tone.</p><table><thead><tr><th align="left">Class</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">superclass</td><td align="left">A class that is inherited from</td></tr><tr><td align="left">subclass</td><td align="left">A class that inherits from another class (the superclass)</td></tr><tr><td align="left">parent class</td><td align="left">A class’s superclass</td></tr><tr><td align="left">child class</td><td align="left">A class that descended (inherited directly) from a parent class.</td></tr><tr><td align="left">descendant</td><td align="left">A class that inherited from an ancestor</td></tr><tr><td align="left">ancestor</td><td align="left">A class that has child or descendent classes</td></tr><tr><td align="left">root class</td><td align="left">A class with no superclass</td></tr><tr><td align="left">leaf class</td><td align="left">A class with no subclasses</td></tr><tr><td align="left">hierarchy</td><td align="left">A tree of inheritance relationships</td></tr></tbody></table><h2 id="Overriding-Methods"><a href="#Overriding-Methods" class="headerlink" title="Overriding Methods"></a>Overriding Methods</h2><p>Inheritance doesn’t just let you add to a class - you can also override its behavior. For example, since an electric guitar’s volume affects its sound, we can provide some custom functionality to the <code>pluck()</code> method.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">pluckString</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> volumeLevel &gt; <span class="number">0.7</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"🎸🎸🎸 DRAOWWW"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> volumeLevel &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"🎸 twang"</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// volumeLevel is 0</span></span><br><span class="line">        <span class="comment">// Guitar's implementation of pluckString()</span></span><br><span class="line">        <span class="keyword">super</span>.pluckString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Overriding a method is as simple as redeclaring it and adding the <code>override</code> keyword before <code>func</code>. And if you ever need to fall back to the original functionality, as we do in the case when the volume is 0, the old implementation can be called <code>super</code> keyword. <code>super</code> just refers to the superclass (the <code>Guitar</code> class we’re inheriting from) so <code>super.pluck()</code> will call the <code>pluck() method of the</code>Guitar` class which will print “twang”.</p><h2 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h2><p>Inheritance, or the ability of one class to take on the properties and methods of a superclass, leads us to the next topic - <strong>polymorphism</strong>.</p><p>Polymorphism means “many forms.” It is a programming language feature by which a type can be substituted for another type. For example, since it inherits from a <code>Guitar</code>, an <code>ElectricGuitar</code> can be substituted anywhere that a <code>Guitar</code> would be used. In other words, an <code>ElectricGuitar</code> is a form of <code>Guitar</code>.</p><p>Polymorphism allows for simpler code that avoids unnecessary specificity, and code that is flexible and expandable because it’s applicable to more than one type. If we were to add additional subclasses of <code>Guitar</code>, we could still use any of these types where a <code>Guitar</code> is used.</p><p><code>override</code> is used to indicate that a subclass’s method implementation will be substituted for a superclass’s method implementation. This is an aspect of polymorphism through inheritance.</p><p>We saw an example of polymorphism previously when we used <code>override</code> to refer to a single <code>Guitar</code> type, and produced different behavior by substituting in an <code>ElectricGuitar</code> instead of a <code>Guitar</code>.</p><p>We can see an example of polymorphism in action below. Because <code>anyGuitar</code>‘s type is <code>Guitar</code> we can assign any subclass of <code>Guitar</code>, including an <code>ElectricGuitar</code> to that variable.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> anyGuitar: <span class="type">Guitar</span> = <span class="type">Guitar</span>(strings: <span class="number">6</span>, frets: <span class="number">20</span>)</span><br><span class="line">anyGuitar.pluckString()</span><br><span class="line"></span><br><span class="line">anyGuitar = <span class="type">ElectricGuitar</span>(strings: <span class="number">6</span>, frets: <span class="number">20</span>)</span><br><span class="line">anyGuitar.pluckString()</span><br></pre></td></tr></table></figure><p>Even though <code>anyGuitar()</code>‘s type is still <code>Guitar</code>, calling <code>pluckString()</code> will call the custom method we defined for <code>ElectricGuitar</code>. As a result, we can keep our code involving <code>Guitar</code> instances reusable, without sacrificing the functionality of any subclasses that happen to override a method.</p><h2 id="Type-Casting"><a href="#Type-Casting" class="headerlink" title="Type Casting"></a>Type Casting</h2><p>Finally, if we know that <code>anyGuitar</code> is assigned an <code>ElectricGuitar</code> and we want to access the <code>toneLevel</code> property, we can convert the types with a special keyword: <code>as</code>. When using the <code>as</code> keyword the variable you want to convert goes on the left and the type you’re converting to goes on the right.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">result = variableToConvert as NewType</span><br><span class="line">// forcibly convert the types with &quot;as!&quot;</span><br><span class="line">let electricGuitar = anyGuitar as! ElectricGuitar</span><br><span class="line">electricGuitar.toneLevel</span><br><span class="line">// or safely convert with &quot;if let&quot; with &quot;as?&quot;</span><br><span class="line">if let electricGuitar = anyGuitar as? ElectricGuitar &#123;</span><br><span class="line">    electricGuitar.toneLevel</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>You’ll also notice the use of <code>as!</code> and <code>as?</code> in this example. This may seem complicated but it’s really the same concept you learned about unwrapping optionals. Since there’s no guarantee that <code>anyGuitar</code> will actually be an <code>ElectricGuitar</code>, casting to an <code>ElectricGuitar</code> returns an optional of type <code>Guitar?</code>. To forcibly unwrap the result, we use <code>as!</code> and to conditionally unwrap with <code>if let</code>, we use <code>as?</code>.</p><h2 id="Defining-Terms"><a href="#Defining-Terms" class="headerlink" title="Defining Terms"></a>Defining Terms</h2><p>There’s some terminology to cover, and then we’ll describe what happens when a method is called on a type that is defined as a <code>class</code>.</p><table><thead><tr><th align="left">Term</th><th align="left">Example</th><th align="left">Definition</th></tr></thead><tbody><tr><td align="left">instance</td><td align="left">Guitar()</td><td align="left">A class or type that we have initialized. Can be referred to with a constant or variable, and refers to its own instance with <code>self</code></td></tr><tr><td align="left">override</td><td align="left">override func pluckString() { }</td><td align="left">Used to indicate that this method implementation should supersede the superclass’s method implementation</td></tr><tr><td align="left">super</td><td align="left">super.someMethod()</td><td align="left">Used to retrieve and invoke a method implementation that has been overridden</td></tr></tbody></table><h1 id="Protocols"><a href="#Protocols" class="headerlink" title="Protocols"></a>Protocols</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Init</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Souschef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chop</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rinse</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Roommate</span>: <span class="title">Souschef</span>, <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hungry = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(hungry: <span class="type">Bool</span>, name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.hungry = hungry</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chop</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"She's choppin' \(vegetable)!"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rinse</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The \(vegetable) is so fresh and so clean"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// implete the function outside the class</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> ==<span class="params">(lhs: Roommate, rhs: Roommate)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> lhs.name == rhs.name &amp;&amp; lhs.hungry == rhs.hungry</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> roomie = <span class="type">Roommate</span>(hungry: <span class="literal">true</span>, name: <span class="string">"Jennifer"</span>)</span><br><span class="line"><span class="keyword">var</span> theBestRoomie = <span class="type">Roommate</span>(hungry: <span class="literal">true</span>, name: <span class="string">"Jennifer"</span>)</span><br><span class="line"></span><br><span class="line">roomie == theBestRoomie</span><br><span class="line"><span class="comment">//: ## A protocol is also a type, any class that adopts this protocol</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DinnerCrew</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> members: [<span class="type">Souschef</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(members: [<span class="type">Souschef</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.members = members</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomPasserby</span>: <span class="title">Souschef</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chop</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"She's choppin' \(vegetable)!"</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rinse</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The \(vegetable) is so fresh and so clean"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newFriend = <span class="type">RandomPasserby</span>(name: <span class="string">"Dave"</span>)</span><br><span class="line"><span class="keyword">var</span> motleyDinnerCrew = <span class="type">DinnerCrew</span>(members: [newFriend, roomie])</span><br></pre></td></tr></table></figure><h2 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h2><p>One more powerful feature of Swift types is the ability to add new methods and properties through <strong>extensions</strong>. You’ll see extensions in action as you start building the Pitch Perfect app, so let’s take a look at an example before wrapping up with object oriented programming.</p><p>To extend a class, simply use the <code>extension</code> keyword, followed by the type name.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">SomeClass</span> </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>Additionally, you can also add a colon after the type name followed by any number of protocols you’d like the type to conform to. Let’s rewrite the <code>Roommate</code> example so that it uses an extension to conform to <code>Souschef</code>.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Roommate</span>: <span class="title">Souschef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">chop</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"She's choppin' \(vegetable)!"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rinse</span><span class="params">(vegetable: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"The \(vegetable) is so fresh and so clean"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Isn’t this the same as the previous example? It is, but with extensions, you don’t even need access to the original class definition for <code>Roommate</code>. As you begin your journey into iOS development, you’ll be working with many classes provided by Apple in which you do not have direct access to the code. However, with extensions you can add functionality to these types without ever modifying the original class definition.</p><h1 id="Review"><a href="#Review" class="headerlink" title="Review"></a>Review</h1><p>Something that is passed by value such as an instance of a struct is copied when it’s assigned to a variable or passed to a function. Changing a property on the instance will only apply to the copy, and the original instance will remain unchanged.</p><p>Values that are passed by reference, such as instances of classes, are not copied. Changing a value on a copy will also modify the original instance, since the copy is simply referencing the original.</p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift初探</title>
      <link href="/iOS/Swift%E5%88%9D%E6%8E%A2.html"/>
      <url>/iOS/Swift%E5%88%9D%E6%8E%A2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Variables-and-Types"><a href="#Variables-and-Types" class="headerlink" title="Variables and Types"></a>Variables and Types</h1><h2 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world!"></a>Hello world!</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> question = <span class="string">"Hello world!"</span></span><br><span class="line"><span class="built_in">print</span>(question)</span><br></pre></td></tr></table></figure><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this is a comment</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* this is a </span></span><br><span class="line"><span class="comment">   multiline comment */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">print("neither will this")</span></span><br><span class="line"><span class="comment">print("or this")</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Data-types"><a href="#Data-types" class="headerlink" title="Data types"></a>Data types</h2><table><thead><tr><th>Type</th><th align="left">Description</th><th>Example Values</th></tr></thead><tbody><tr><td>Int</td><td align="left">whole number values</td><td>0, 2, -2, 100, …</td></tr><tr><td>Float</td><td align="left">floating-point (decimal) numbers that require no more than 6 decimal digits (32-bit)</td><td>3.14, 5.693, -12.321, …</td></tr><tr><td>Double</td><td align="left">floating-point (decimal) numbers that require more precision—guaranteed 15 decimal digits (64-bit)</td><td>3.14, 5.693, -12.321, …</td></tr><tr><td>Bool</td><td align="left">a Boolean truth value</td><td>true, false</td></tr><tr><td>Character</td><td align="left">a single letter, digit, symbol, or code</td><td>“a”, “+”, “q”, …</td></tr><tr><td>String</td><td align="left">combinations of characters</td><td>“swift”, “I Love Swift”, “ “, “:)”, …</td></tr></tbody></table><h2 id="Creating-variables"><a href="#Creating-variables" class="headerlink" title="Creating variables"></a>Creating variables</h2><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberOfWheels: <span class="type">Int</span> = <span class="number">4</span></span><br><span class="line"><span class="keyword">var</span> centimetersOfRainfall: <span class="type">Float</span> = <span class="number">5.5</span></span><br><span class="line"><span class="keyword">var</span> pi: <span class="type">Double</span> = <span class="number">3.14159265359</span></span><br><span class="line"><span class="keyword">var</span> letterOfTheDay: <span class="type">Character</span> = <span class="string">"z"</span></span><br><span class="line"><span class="keyword">var</span> myFavoriteAnimal: <span class="type">String</span>  = <span class="string">"octopus"</span></span><br><span class="line"><span class="keyword">var</span> rainingOutside: <span class="type">Bool</span>  = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>The code below is also okay, because Siwft can infer what is the type of the variable.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstName = <span class="string">"Aisha"</span></span><br></pre></td></tr></table></figure><p>Change the value of the variable, but we can’t change the type of the vcariable.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// initial declaration of petsAge</span></span><br><span class="line"><span class="keyword">var</span> petsAge = <span class="number">12</span></span><br><span class="line"></span><br><span class="line">petsAge = <span class="number">13</span></span><br></pre></td></tr></table></figure><p>Constant.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> encouragement = <span class="string">"You can do it!"</span></span><br><span class="line"><span class="keyword">var</span> customizedEncouragement = <span class="string">"You can do it, Stephanie!"</span></span><br><span class="line">customizedEncouragement = <span class="string">"You can do it, Ryder!"</span></span><br></pre></td></tr></table></figure><p>String.</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> emailSignature = <span class="string">"Aliyah Smith\nVP, Sales\n(555) - 555 - 5555"</span></span><br></pre></td></tr></table></figure><table><thead><tr><th align="left"><strong>Character</strong></th><th align="left"><strong>Usage</strong></th></tr></thead><tbody><tr><td align="left">\n</td><td align="left">Newline / line feed</td></tr><tr><td align="left">\t</td><td align="left">Horizontal tab</td></tr><tr><td align="left">&quot;</td><td align="left">Double quotation mark, using <code>&quot;</code> alone signifies the end of a string</td></tr><tr><td align="left">&#39;</td><td align="left">Single quotation mark</td></tr><tr><td align="left">\</td><td align="left">Backslash, using “&quot; alone escapes the next character</td></tr></tbody></table><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"Happy birthday, \("</span><span class="type">Maverick</span><span class="string">")!"</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h1 id="Operators-and-Expressions"><a href="#Operators-and-Expressions" class="headerlink" title="Operators and Expressions"></a>Operators and Expressions</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> / <span class="number">3</span> <span class="comment">// The result is 1</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> / <span class="number">3.0</span> <span class="comment">// The result is 1.66666667</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hello = <span class="string">"Hello"</span></span><br><span class="line"><span class="keyword">var</span> world = <span class="string">"world!"</span></span><br><span class="line"><span class="keyword">let</span> greeting = hello + <span class="string">" "</span> + world</span><br></pre></td></tr></table></figure><h1 id="Ternary-Operators"><a href="#Ternary-Operators" class="headerlink" title="Ternary Operators"></a>Ternary Operators</h1><p><strong>Ternary operator</strong> : an operator that is applied to three operands</p><p>Ternary operators are much less common than binary operators, but one of the most common ternary operators is the <strong>ternary conditional operator</strong>. It is used to choose between two values based on a truth (Boolean) value, and it uses the following syntax:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trueOrFalseValue ? useThisIfTrue : useThisIfFalse</span><br></pre></td></tr></table></figure><h1 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> onGuestList &amp;&amp; age &gt;= <span class="number">21</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"\(name), come party with us!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !onGuestList || age &lt; <span class="number">21</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Sorry, \(name), maybe you can go play Bingo with the Android team."</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> breakfast &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Good morning!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> lunch &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Good afternoon!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> dinner &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Good evening!"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello!"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> month &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="built_in">print</span>(“<span class="type">January</span>”)</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="built_in">print</span>(“<span class="type">February</span>”)</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> meal = <span class="string">"breakfast"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> meal</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"breakfast"</span>: <span class="built_in">print</span>(<span class="string">"Good morning!"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"lunch"</span>: <span class="built_in">print</span>(<span class="string">"Good afternoon!"</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"dinner"</span>: <span class="built_in">print</span>(<span class="string">"Good evening!"</span>)</span><br><span class="line">    <span class="keyword">default</span>: <span class="built_in">print</span>(<span class="string">"none"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>...<span class="number">10</span> <span class="comment">// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.</span></span><br><span class="line"><span class="number">1</span>..&lt;<span class="number">10</span> <span class="comment">// 1, 2, 3, 4, 5, 6, 7, 8, 9.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span>...<span class="number">10</span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i&lt;<span class="number">1001</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span>) == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">    &#125;</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// repeat-while loop</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">repeat</span> &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Hello, world!"</span>)</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">&#125; <span class="keyword">while</span> i &lt; <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printLove</span><span class="params">(s: String)</span></span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I love \(s)"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printLove(s: <span class="string">"Swift"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printLove</span><span class="params">(s: String)</span></span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"I love"</span> + s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printLove(s: <span class="string">"Swift"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">areaOfRectangle</span><span class="params">(length: Int, width: Int)</span></span>&#123;</span><br><span class="line">    <span class="built_in">print</span>(length * width)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">areaOfRectangle(length: <span class="number">2</span>, width: <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">calculateTip</span><span class="params">(priceOfMeal: Double)</span></span> -&gt; <span class="type">Double</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> priceOfMeal * <span class="number">0.15</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isPastBedtime</span><span class="params">(hour: Int)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> hour &gt; <span class="number">9</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addValues</span><span class="params">(value1 x: Int, value2 y: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="comment">// internally, use `x` and `y`</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// externally, use `value1` and `value2`</span></span><br><span class="line">addValues(value1: <span class="number">5</span>, value2: <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">addExcitementToString</span><span class="params">(<span class="number">_</span> string: String)</span></span> -&gt; <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> string + <span class="string">"!"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addExcitementToString(<span class="string">"Swift"</span>)</span><br></pre></td></tr></table></figure><h1 id="Structures-and-Enums"><a href="#Structures-and-Enums" class="headerlink" title="Structures and Enums"></a>Structures and Enums</h1><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="type">Int</span></span><br><span class="line">    <span class="keyword">var</span> school: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ayush = <span class="type">Student</span>(name: <span class="string">"Ayush Saraswat"</span>, age: <span class="number">19</span>, school: <span class="string">"Udacity"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Beaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> volumeMilliliters: <span class="type">Double</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canContainContents</span><span class="params">(otherBeaker: Beaker)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> volumeMilliliters &gt;= otherBeaker.volumeMilliliters</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> beaker1 = <span class="type">Beaker</span>(volumeMilliliters: <span class="number">500</span>)</span><br><span class="line"><span class="keyword">let</span> beaker2 = <span class="type">Beaker</span>(volumeMilliliters: <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">let</span> canContainContents: <span class="type">Bool</span> = beaker1.canContainContents(otherBeaker: beaker2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// If, however, a method tries to modify (or mutate) one of the struct's properties, then the mutating keyword must be added before func. For example</span></span><br><span class="line"><span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">increaseCapacity</span><span class="params">()</span></span> &#123;</span><br><span class="line">    volumeMilliliters += <span class="number">500</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Beaker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> volumeMilliliters: <span class="type">Double</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">var</span> madeIn = <span class="string">"China"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// These are US ounces</span></span><br><span class="line">    <span class="keyword">var</span> volumeOunces: <span class="type">Double</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> volumeMilliliters * <span class="number">0.033814</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">canContainContents</span><span class="params">(otherBeaker: Beaker)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> volumeMilliliters &gt;= otherBeaker.volumeMilliliters</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// In fact, when we change the value of a static property with dot notation, we reference the type name and not a specific instance (Beaker.madeIn).</span></span><br></pre></td></tr></table></figure><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">PrimaryColor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> red</span><br><span class="line">    <span class="keyword">case</span> blue</span><br><span class="line">    <span class="keyword">case</span> yellow</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Aunties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> aime, billie, diane, gail, janie, pam</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">DrinkSize</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> small = <span class="number">12</span></span><br><span class="line">    <span class="keyword">case</span> medium = <span class="number">16</span></span><br><span class="line">    <span class="keyword">case</span> large = <span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rawValue</span></span><br><span class="line"><span class="type">Var</span> sugar = <span class="string">"A \(DrinkSize.small.rawValue) oz Coke has 33 g of sugar"</span></span><br><span class="line"><span class="comment">// "A 12 oz Coke has 33 g of sugar"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Using 'enum' with 'switch'</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Finger</span>: <span class="title">Int</span> </span>&#123;</span><br><span class="line">    <span class="keyword">case</span> thumb = <span class="number">1</span></span><br><span class="line">    <span class="keyword">case</span> index = <span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> middle = <span class="number">3</span></span><br><span class="line">    <span class="keyword">case</span> ring = <span class="number">4</span></span><br><span class="line">    <span class="keyword">case</span> pinky = <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> destination = <span class="type">Finger</span>.thumb</span><br><span class="line"><span class="keyword">var</span> test = <span class="type">Finger</span>(rawValue: <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// switch destination</span></span><br><span class="line"><span class="keyword">switch</span> test &#123;</span><br><span class="line">    <span class="keyword">case</span> .thumb:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"thumb"</span>)</span><br><span class="line">    <span class="keyword">case</span> .index:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"index"</span>)</span><br><span class="line">    <span class="keyword">case</span> .middle:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"middle"</span>)</span><br><span class="line">    <span class="keyword">case</span> .ring:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"ring"</span>)</span><br><span class="line">    <span class="keyword">case</span> .pinky:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"pinky"</span>)</span><br><span class="line">  <span class="comment">// We need to use none for 'test'</span></span><br><span class="line">    <span class="keyword">case</span> .<span class="keyword">none</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"None!"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UCSD EC80 选课</title>
      <link href="/OtherArticle/%E5%9B%9B%E5%AD%A6%E6%9C%9F%E8%AF%BE%E7%A8%8B%E5%AE%89%E6%8E%92.html"/>
      <url>/OtherArticle/%E5%9B%9B%E5%AD%A6%E6%9C%9F%E8%AF%BE%E7%A8%8B%E5%AE%89%E6%8E%92.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th>SEASON</th><th>CLASS_1</th><th>CLASS_2</th><th>CLASS_3</th></tr></thead><tbody><tr><td>FALL</td><td>ECE269</td><td>CSE252A</td><td>CSE258</td></tr><tr><td>WINTER</td><td>ECE276A</td><td>ECE141A</td><td>ECE143</td></tr><tr><td>SPRING</td><td>ECE272A</td><td>ECE141B</td><td>CSE240</td></tr><tr><td>FALL</td><td>ECE271A</td><td>CSE250</td><td>ECE250</td></tr></tbody></table><h1 id="FALL-2021"><a href="#FALL-2021" class="headerlink" title="FALL 2021:"></a>FALL 2021:</h1><h2 id="ECE-269-Linear-Algebra-and-Application-Piya-Pal"><a href="#ECE-269-Linear-Algebra-and-Application-Piya-Pal" class="headerlink" title="ECE 269: Linear Algebra and Application (Piya Pal)"></a>ECE 269: Linear Algebra and Application (Piya Pal)</h2><p>Class GPA:  ( students)<br>Stats: A+ (0%), A (5.9%, 11), A- (7.5%, 14), B+ (23.7%,44), B (16.1%, 30), B- (30.6%, 57), C+ (9.7%, 18) …<br>Weights: Quiz (20%), Final (35%), Assignments (45%)<br>Comments:<br>由于EC80的专业特性，毕业要求四门核心课，所以如果想要在一学期之内毕业，就必须要每学期选一门。根据往届的信息，ECE269这门课是所有四门课程中相对简单的，毕竟本科都有点线性代数的基础（对于我来说等于没学）。<br>作为第一学期的核心课，我自认为还是比较认真的，上课次次不落，discussion也每次都去，课后也会复习笔记，因为有些内容真的没有完全听懂。作业的话由于自己马虎，加上有些题目确实不会，导致分数也不理想，都在medium附近徘徊。两个quiz，第一个quiz难度还算可以，第二个quiz难度飙升，三道题目就对了一个。到了期末就更惨了，6道题只会两个半道，到现在我还不知道能打多少分。毕竟这门课是个comprehensive的课程，要达到一定标准才能毕业，再加上GPA 3.0才能达到毕业要求，让这个等待出分的我非常的慌张。</p><h2 id="CSE252A-Computer-Vision-I-Ben-Ochoa"><a href="#CSE252A-Computer-Vision-I-Ben-Ochoa" class="headerlink" title="CSE252A: Computer Vision I (Ben Ochoa)"></a>CSE252A: Computer Vision I (Ben Ochoa)</h2>]]></content>
      
      
      <categories>
          
          <category> UCSD </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LAIOFEER公开课</title>
      <link href="/OtherArticle/LAIOFEER%E5%85%AC%E5%BC%80%E8%AF%BE.html"/>
      <url>/OtherArticle/LAIOFEER%E5%85%AC%E5%BC%80%E8%AF%BE.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Always put yourself in other people’s shoes. 换位思考</p><p>Critical thinking 任何事情并不是非黑即白</p></blockquote><h2 id="BQ-question-1"><a href="#BQ-question-1" class="headerlink" title="BQ question 1"></a>BQ question 1</h2><p>Tell me about yourself:</p><ol><li>Name, Education, Background</li><li>Skills: Primary programming language, Projects experience, intern experience</li><li>Thank you</li></ol><p>Variants:</p><ol><li>Tell me your weakness(e.g. 多任务同时处理，优先级问题) 承认自己的问题，尽量真实</li><li>Key points: How to avoid/address the same problems in the future.</li></ol><h2 id="BQ-question-2"><a href="#BQ-question-2" class="headerlink" title="BQ question 2"></a>BQ question 2</h2><p>When you have different opinions from your colleagues</p><ol><li>Scenarios</li><li>Communication: 1 on 1 不在公共场合批评别人; How/When/Where</li></ol><h2 id="BQ-question-3"><a href="#BQ-question-3" class="headerlink" title="BQ question 3"></a>BQ question 3</h2><p>When you have limited time available to finish your project. Quality vs Speed</p><p>分情况讨论，用项目举例</p><p>Variant 1:Provide an example scenario in which you made a quick decision under pressure</p><p>Variant 2: Write an email to your manager on how to explain why you missed the deadline</p><h2 id="BQ-question-4"><a href="#BQ-question-4" class="headerlink" title="BQ question 4"></a>BQ question 4</h2><p>What is your career plan for the next 5 years?</p><p>现在有什么，未来期待什么，怎么做？</p><p>concrete example</p><h2 id="BQ-question-5"><a href="#BQ-question-5" class="headerlink" title="BQ question 5"></a>BQ question 5</h2><p>How do you define a good manager? Or what do you expect from your manager?</p><p>grow path</p><h2 id="BQ-question-6"><a href="#BQ-question-6" class="headerlink" title="BQ question 6"></a>BQ question 6</h2><p>Please tell me one of the most challenging projects you have accomplished.</p><p>Why is it challenging？</p><ol><li>Technical </li><li>Human resource </li><li>Operational complexity/ cost</li><li>Novelty</li><li>Time constraints</li></ol><p>How did you solve it?</p><p>How did you evaluate the results? Scope/Impact</p><blockquote><p>择高处立，就平处坐，向宽处行；立上等志，行中等事，享下等福。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 找工作 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>托福备考指北</title>
      <link href="/OtherArticle/%E6%89%98%E7%A6%8F%E5%A4%87%E8%80%83%E6%8C%87%E5%8C%97.html"/>
      <url>/OtherArticle/%E6%89%98%E7%A6%8F%E5%A4%87%E8%80%83%E6%8C%87%E5%8C%97.html</url>
      
        <content type="html"><![CDATA[<h2 id="成绩"><a href="#成绩" class="headerlink" title="成绩"></a>成绩</h2><p>说来惭愧，考了3年托福，一共四次，最终还是在临近申请前的不到一个月考出的分，而且分数也只是刚刚过百（见下图），尽管最终成绩很低，但我也有一些经验和心得与各位分享，当然，也会有一些我认为比较好的学习资源通过百度云的方式供大家学习。</p><p><img src="https://tvax3.sinaimg.cn/large/006BuM4Jly1gkw0pe0b9pj30r70b8q5w.jpg" alt="TOEFLGRADE"></p><h2 id="学习顺序与学习时间"><a href="#学习顺序与学习时间" class="headerlink" title="学习顺序与学习时间"></a>学习顺序与学习时间</h2><p>对于理工科学生，强烈建议先学习GRE。理由有以下几点：</p><ol><li>GRE的数学对于理工科学生难度不高，不需要太多准备；</li><li>GRE的verbal部分以背单词为主，这部分单词并不需要托福单词为基础，如果这部分单词搞定了，学托福难度会明显降低不少；</li><li>GRE提分较快，只要刷题就会看到成效，不存在原地踏步的情况，适合初期准备。</li></ol><p>但无论是托福和GRE我的建议都是利用暑假、寒假大块时间准备，切忌将学习英语的时间与上课/实习等杂糅在一起，这样不但英语能力不会很快见效，而且还会影响课内的学习成绩。总之用一个1-2个月的空闲时间全力学习英语之后考试一定是最高效的。</p><h2 id="托福单词"><a href="#托福单词" class="headerlink" title="托福单词"></a>托福单词</h2><p>回归到托福学习。学习英语无论怎样最重要的还是背单词，单词积累的到位了，看文章听听力等自然得心应手，我比较明显的体会是在我单词掌握不扎实的时候看托福阅读都是不知所云的，仿佛在看一段加了密的文字，但在我学习GRE后，单词量得到了较大的提升，看托福阅读速度明显加快，读了一遍后内容也达到了其义自见的程度（再次说明先学GRE的好处），但不能忽视的是，很多GRE的单词书并不涵盖托福需要掌握的重点词汇，更不能轻视的是很多重要的四六级词汇，它们既不会出现在托福单词书中也不会出现在GRE单词书中，但它们的出现频率却惊人的高，这些单词一定要及时弥补！</p><p>分享两个比较好的单词书（pdf），提取码见评论区：</p><p><a href="https://pan.baidu.com/s/1cR1FpD2a8BIvRQCyUYYsYg" target="_blank" rel="noopener">托福救命800词&amp;四六级救命800词</a></p><p><a href="https://pan.baidu.com/s/11h-2epNIy0UFbNkKuLa_ug" target="_blank" rel="noopener">7天搞定托福单词</a></p>]]></content>
      
      
      <categories>
          
          <category> 出国经验分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 托福 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab机器人工具箱（Robotic Toolbox）仿真双六轴机械臂对侧打磨加工</title>
      <link href="/Robotics/Matlab%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%AE%B1%EF%BC%88Robotic%20Toolbox%EF%BC%89%E4%BB%BF%E7%9C%9F%E5%8F%8C%E5%85%AD%E8%BD%B4%E6%9C%BA%E6%A2%B0%E8%87%82%E5%AF%B9%E4%BE%A7%E6%89%93%E7%A3%A8%E5%8A%A0%E5%B7%A5.html"/>
      <url>/Robotics/Matlab%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%AE%B1%EF%BC%88Robotic%20Toolbox%EF%BC%89%E4%BB%BF%E7%9C%9F%E5%8F%8C%E5%85%AD%E8%BD%B4%E6%9C%BA%E6%A2%B0%E8%87%82%E5%AF%B9%E4%BE%A7%E6%89%93%E7%A3%A8%E5%8A%A0%E5%B7%A5.html</url>
      
        <content type="html"><![CDATA[<p>本任务为完成大三下学期机器人学课程讨论是所做<br>实际上也是在之前做的双机仿真的基础上进行了修改。</p><p>最终结果如下：</p><p><a href="https://www.bilibili.com/video/BV1t541147vs/" target="_blank" rel="noopener">B站视频地址</a></p><iframe src="//player.bilibili.com/player.html?aid=455552595&bvid=BV1t541147vs&cid=189565321&page=1" scrolling="no" border="0" frameborder="no" width="95%" height="600"> </iframe><blockquote><p>使用的机器人工具箱版本为10.3.1版本</p><p>修改了工具箱自带的函数mdl_puma560，要使用代码需要在函数开头加上function p560 = mdl_puma560，结尾加上end以实现调用功能。</p></blockquote><p>代码：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line">close all</span><br><span class="line">clear;</span><br><span class="line">d = <span class="number">0.2</span>;</span><br><span class="line"><span class="built_in">plot3</span>([<span class="number">0</span> <span class="number">0</span>],[<span class="number">-1</span> <span class="number">1</span>],[<span class="number">0</span> <span class="number">0</span>])</span><br><span class="line">p560_1 = mdl_puma560;</span><br><span class="line">p560_1.name = <span class="string">'puma1'</span>;</span><br><span class="line">p560_1.base = [<span class="number">-0.8</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">p560_2 = mdl_puma560;</span><br><span class="line">p560_2.name = <span class="string">'puma2'</span>;</span><br><span class="line">p560_2.base = [<span class="number">0.8</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">t=<span class="number">0</span>:<span class="number">0.05</span>:<span class="number">2</span>;</span><br><span class="line"><span class="comment">%计算puma1机械臂移动到指定点，并将z轴指向朝前的齐次变换矩阵</span></span><br><span class="line">T1 = transl(<span class="number">-0.4</span>,<span class="number">0.2</span>,<span class="number">0.1</span>);</span><br><span class="line">T2 = transl(<span class="number">0</span>-d,<span class="number">-0.4</span>,<span class="number">0</span>)*troty(<span class="number">90</span>);</span><br><span class="line"><span class="comment">%计算puma2机械臂移动到指定点，z轴指向朝后的齐次变换矩阵</span></span><br><span class="line">T3 = transl(<span class="number">0.3</span>,<span class="number">-0.3</span>,<span class="number">0</span>)*troty(<span class="number">-90</span>);</span><br><span class="line">T4 = transl(<span class="number">0</span>+d,<span class="number">-0.4</span>,<span class="number">0</span>)*troty(<span class="number">-90</span>);</span><br><span class="line"><span class="comment">%利用ctraj函数让两个机械臂运动到指定点</span></span><br><span class="line">m1=ctraj(T1,T2,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">n1=ctraj(T3,T4,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">q1=p560_1.ikine6s(m1);</span><br><span class="line">s1=p560_2.ikine6s(n1);</span><br><span class="line"><span class="comment">%移动到指定点后沿直线移动</span></span><br><span class="line">T5 = transl(<span class="number">0</span>-d,<span class="number">0.5</span>,<span class="number">0</span>)*troty(<span class="number">90</span>);<span class="comment">%puma1沿直线移动</span></span><br><span class="line">T6 = transl(<span class="number">0</span>+d,<span class="number">0.5</span>,<span class="number">0</span>)*troty(<span class="number">-90</span>);<span class="comment">%puma2沿直线移动                                                         </span></span><br><span class="line">m2=ctraj(T2,T5,<span class="built_in">length</span>(t));</span><br><span class="line">n2=ctraj(T4,T6,<span class="built_in">length</span>(t));</span><br><span class="line">y1=p560_1.ikine6s(m2);</span><br><span class="line">f1=p560_2.ikine6s(n2);</span><br><span class="line"><span class="comment">%重复</span></span><br><span class="line">T7 = transl(<span class="number">0</span>-d,<span class="number">0.5</span>,<span class="number">0.2</span>)*troty(<span class="number">90</span>);</span><br><span class="line">T8 = transl(<span class="number">0</span>+d,<span class="number">0.5</span>,<span class="number">0.2</span>)*troty(<span class="number">-90</span>); </span><br><span class="line">m3=ctraj(T5,T7,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">n3=ctraj(T6,T8,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">q2=p560_1.ikine6s(m3);</span><br><span class="line">s2=p560_2.ikine6s(n3);</span><br><span class="line">T9 = transl(<span class="number">0</span>-d,<span class="number">-0.4</span>,<span class="number">0.2</span>)*troty(<span class="number">90</span>);</span><br><span class="line">T10 = transl(<span class="number">0</span>+d,<span class="number">-0.4</span>,<span class="number">0.2</span>)*troty(<span class="number">-90</span>);</span><br><span class="line">m4=ctraj(T7,T9,<span class="built_in">length</span>(t));</span><br><span class="line">n4=ctraj(T8,T10,<span class="built_in">length</span>(t));</span><br><span class="line">y2=p560_1.ikine6s(m4);</span><br><span class="line">f2=p560_2.ikine6s(n4);</span><br><span class="line"><span class="comment">%画图</span></span><br><span class="line">p560_1.<span class="built_in">plot</span>(q1);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(s1);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_1.<span class="built_in">plot</span>(y1);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(f1);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="built_in">plot3</span>([<span class="number">0</span> <span class="number">0</span>],[<span class="number">-1</span> <span class="number">1</span>],[<span class="number">0.2</span> <span class="number">0.2</span>])</span><br><span class="line">p560_1.<span class="built_in">plot</span>(q2);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(s2);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_1.<span class="built_in">plot</span>(y2);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(f2);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br></pre></td></tr></table></figure><p>由于Matlab无法实现双线程编程，所以并不是同步运动，所以考虑用循环的方式来实现“同步运动”，但本质上仍然不同步。</p><p>代码如下：</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%%</span></span><br><span class="line">close all</span><br><span class="line">clear;</span><br><span class="line">d = <span class="number">0.2</span>;</span><br><span class="line"><span class="built_in">plot3</span>([<span class="number">0</span> <span class="number">0</span>],[<span class="number">-1</span> <span class="number">1</span>],[<span class="number">0</span> <span class="number">0</span>])</span><br><span class="line">p560_1 = mdl_puma560;</span><br><span class="line">p560_1.name = <span class="string">'puma1'</span>;</span><br><span class="line">p560_1.base = [<span class="number">-0.8</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">p560_2 = mdl_puma560;</span><br><span class="line">p560_2.name = <span class="string">'puma2'</span>;</span><br><span class="line">p560_2.base = [<span class="number">0.8</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">t=<span class="number">0</span>:<span class="number">0.05</span>:<span class="number">2</span>;</span><br><span class="line"><span class="comment">%计算puma1机械臂移动到指定点，并将z轴指向朝下的齐次变换矩阵</span></span><br><span class="line">T1 = transl(<span class="number">-0.4</span>,<span class="number">0.2</span>,<span class="number">0.1</span>);</span><br><span class="line">T2 = transl(<span class="number">0</span>-d,<span class="number">-0.4</span>,<span class="number">0</span>)*troty(<span class="number">90</span>);</span><br><span class="line"><span class="comment">%计算puma2机械臂移动到指定点，z轴指向朝上的齐次变换矩阵</span></span><br><span class="line">T3 = transl(<span class="number">0.3</span>,<span class="number">-0.3</span>,<span class="number">0</span>)*troty(<span class="number">-90</span>);</span><br><span class="line">T4 = transl(<span class="number">0</span>+d,<span class="number">-0.4</span>,<span class="number">0</span>)*troty(<span class="number">-90</span>);</span><br><span class="line"><span class="comment">%利用jtraj函数让两个机械臂运动到指定点</span></span><br><span class="line">m1=ctraj(T1,T2,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">n1=ctraj(T3,T4,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">q1=p560_1.ikine6s(m1);</span><br><span class="line">s1=p560_2.ikine6s(n1);</span><br><span class="line"><span class="comment">%移动到指定点后沿直线移动</span></span><br><span class="line">T5 = transl(<span class="number">0</span>-d,<span class="number">0.5</span>,<span class="number">0</span>)*troty(<span class="number">90</span>);<span class="comment">%puma1沿直线移动</span></span><br><span class="line">T6 = transl(<span class="number">0</span>+d,<span class="number">0.5</span>,<span class="number">0</span>)*troty(<span class="number">-90</span>);<span class="comment">%puma2沿直线移动                                                         </span></span><br><span class="line">m2=ctraj(T2,T5,<span class="built_in">length</span>(t));</span><br><span class="line">n2=ctraj(T4,T6,<span class="built_in">length</span>(t));</span><br><span class="line">y1=p560_1.ikine6s(m2);</span><br><span class="line">f1=p560_2.ikine6s(n2);</span><br><span class="line"><span class="comment">%重复</span></span><br><span class="line">T7 = transl(<span class="number">0</span>-d,<span class="number">0.5</span>,<span class="number">0.2</span>)*troty(<span class="number">90</span>);</span><br><span class="line">T8 = transl(<span class="number">0</span>+d,<span class="number">0.5</span>,<span class="number">0.2</span>)*troty(<span class="number">-90</span>); </span><br><span class="line">m3=ctraj(T5,T7,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">n3=ctraj(T6,T8,<span class="built_in">length</span>(t)/<span class="number">2</span>);</span><br><span class="line">q2=p560_1.ikine6s(m3);</span><br><span class="line">s2=p560_2.ikine6s(n3);</span><br><span class="line">T9 = transl(<span class="number">0</span>-d,<span class="number">-0.4</span>,<span class="number">0.2</span>)*troty(<span class="number">90</span>);</span><br><span class="line">T10 = transl(<span class="number">0</span>+d,<span class="number">-0.4</span>,<span class="number">0.2</span>)*troty(<span class="number">-90</span>);</span><br><span class="line">m4=ctraj(T7,T9,<span class="built_in">length</span>(t));</span><br><span class="line">n4=ctraj(T8,T10,<span class="built_in">length</span>(t));</span><br><span class="line">y2=p560_1.ikine6s(m4);</span><br><span class="line">f2=p560_2.ikine6s(n4);</span><br><span class="line"><span class="comment">%画图</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(t)/<span class="number">2</span></span><br><span class="line">p560_1.<span class="built_in">plot</span>(q1(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(s1(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(t)</span><br><span class="line">p560_1.<span class="built_in">plot</span>(y1(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(f1(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">plot3</span>([<span class="number">0</span> <span class="number">0</span>],[<span class="number">-1</span> <span class="number">1</span>],[<span class="number">0.2</span> <span class="number">0.2</span>])</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(t)/<span class="number">2</span></span><br><span class="line">p560_1.<span class="built_in">plot</span>(q2(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(s2(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:<span class="built_in">length</span>(t)</span><br><span class="line">p560_1.<span class="built_in">plot</span>(y2(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(f2(<span class="built_in">i</span>,:));</span><br><span class="line"><span class="built_in">hold</span> on</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器人学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robotic Toolbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何理解欧拉角中的pitch,roll,yaw</title>
      <link href="/Robotics/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%AC%A7%E6%8B%89%E8%A7%92%E4%B8%AD%E7%9A%84roll%EF%BC%8Cpitch%EF%BC%8Cyaw.html"/>
      <url>/Robotics/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E6%AC%A7%E6%8B%89%E8%A7%92%E4%B8%AD%E7%9A%84roll%EF%BC%8Cpitch%EF%BC%8Cyaw.html</url>
      
        <content type="html"><![CDATA[<p>欧拉角也就是绕着固定轴x,y,z旋转</p><p>在资料中关于x,y,z和三个角度的方向和对应关系定义的并不是很明确，我认为可能是这个并没有一个严格的规定，但是pitch,roll,yaw三个角度的含义定义还是很明确的。具体定义如下：</p><h2 id="pitch"><a href="#pitch" class="headerlink" title="pitch"></a>pitch</h2><p>pitch在英文中的意思是倾斜，坠落的含义，因此就是以翅膀所在的直线为轴发生旋转</p><p><img src="//tva1.sinaimg.cn/large/006BuM4Jly1gcufkbno87g30dy0b87dz.gif" alt="pitch"></p><h2 id="roll"><a href="#roll" class="headerlink" title="roll"></a>roll</h2><p>roll在英文中的意思是翻滚，就是绕着机身所在的那个轴</p><p><img src="//tva2.sinaimg.cn/large/006BuM4Jly1gcuflbey7gg30e00bbdpp.gif" alt="roll"></p><h2 id="yaw"><a href="#yaw" class="headerlink" title="yaw"></a>yaw</h2><p>yaw在英文中是yaw是（火箭、飞机、宇宙飞船等）偏航的意思，也就是绕着重力方向为轴旋转</p><p><img src="//tvax4.sinaimg.cn/large/006BuM4Jly1gcuff4nhx5g30e00b7122.gif" alt="0_1303867644Dzds"></p>]]></content>
      
      
      <categories>
          
          <category> 机器人学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器人学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab机器人工具箱（Robotic Toolbox）</title>
      <link href="/Robotics/Matlab%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%AE%B1.html"/>
      <url>/Robotics/Matlab%E6%9C%BA%E5%99%A8%E4%BA%BA%E5%B7%A5%E5%85%B7%E7%AE%B1.html</url>
      
        <content type="html"><![CDATA[<p>Matlab机器人工具箱是我们在学习机器人学时候的一个非常好的工具，不但可以帮助我们计算，也可以做图形化的输出。</p><p>在此就不多谈安装问题，主要介绍各个函数的使用方法。</p><h2 id="启动机器人工具箱"><a href="#启动机器人工具箱" class="headerlink" title="启动机器人工具箱"></a>启动机器人工具箱</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">startup_rvc;</span><br></pre></td></tr></table></figure><h2 id="绕xyz轴的旋转变化矩阵"><a href="#绕xyz轴的旋转变化矩阵" class="headerlink" title="绕xyz轴的旋转变化矩阵"></a>绕xyz轴的旋转变化矩阵</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rotx(<span class="number">30</span>*<span class="built_in">pi</span>/<span class="number">180</span>) <span class="comment">%用弧度</span></span><br><span class="line">rotx(<span class="number">30</span>,<span class="string">'deg'</span>) <span class="comment">%用角度</span></span><br><span class="line">roty(<span class="number">30</span>,<span class="string">'deg'</span>)</span><br><span class="line">rotz(<span class="number">30</span>,<span class="string">'deg'</span>)</span><br></pre></td></tr></table></figure><h2 id="绕xyz轴旋转的齐次变换矩阵"><a href="#绕xyz轴旋转的齐次变换矩阵" class="headerlink" title="绕xyz轴旋转的齐次变换矩阵"></a>绕xyz轴旋转的齐次变换矩阵</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">trotx(<span class="number">30</span>*<span class="built_in">pi</span>/<span class="number">180</span>) <span class="comment">%用弧度</span></span><br><span class="line">trotx(<span class="number">30</span>,<span class="string">'deg'</span>) <span class="comment">%用角度</span></span><br><span class="line">troty(<span class="number">30</span>,<span class="string">'deg'</span>)</span><br><span class="line">trotz(<span class="number">30</span>,<span class="string">'deg'</span>)</span><br></pre></td></tr></table></figure><h2 id="平移齐次变换矩阵"><a href="#平移齐次变换矩阵" class="headerlink" title="平移齐次变换矩阵"></a>平移齐次变换矩阵</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transl([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>])</span><br></pre></td></tr></table></figure><h2 id="旋转变换的连续乘积"><a href="#旋转变换的连续乘积" class="headerlink" title="旋转变换的连续乘积"></a>旋转变换的连续乘积</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trotx(<span class="number">30</span>,<span class="string">'deg'</span>)*troty(<span class="number">30</span>,<span class="string">'deg'</span>)*trotz(<span class="number">30</span>,<span class="string">'deg'</span>)</span><br></pre></td></tr></table></figure><h2 id="rpy角"><a href="#rpy角" class="headerlink" title="rpy角"></a>rpy角</h2><h3 id="旋转矩阵"><a href="#旋转矩阵" class="headerlink" title="旋转矩阵"></a>旋转矩阵</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">roll=<span class="number">10</span>*<span class="built_in">pi</span>/<span class="number">180</span>; pitch=<span class="number">20</span>*<span class="built_in">pi</span>/<span class="number">180</span>; yaw=<span class="number">30</span>*<span class="built_in">pi</span>/<span class="number">180</span>;</span><br><span class="line">rpy2r(roll,pitch,yaw)</span><br><span class="line">rpy2r(roll,pitch,yaw,<span class="string">'zyx'</span>)</span><br><span class="line">rpy2r(roll,pitch,yaw,<span class="string">'xyz'</span>)</span><br></pre></td></tr></table></figure><blockquote><p>需要说名的是，rpy2r这个函数在不同的工具箱版本的函数并不一样，使用的角度顺序发生了改变，具体内容可以看具体版本的rpy2r.m文件。</p></blockquote><p>在此附上机器人工具箱中关于各个参数option的定义，仅提供10版本</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> opt.order</span><br><span class="line">        <span class="keyword">case</span> &#123;<span class="string">'xyz'</span>, <span class="string">'arm'</span>&#125;</span><br><span class="line">            <span class="comment">% XYZ order</span></span><br><span class="line">            <span class="keyword">if</span> numrows(roll) == <span class="number">1</span></span><br><span class="line">                R = rotx(yaw) * roty(pitch) * rotz(roll);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                R = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">3</span>,numrows(roll));</span><br><span class="line">                <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:numrows(roll)</span><br><span class="line">                    R(:,:,<span class="built_in">i</span>) = rotx(yaw(<span class="built_in">i</span>)) * roty(pitch(<span class="built_in">i</span>)) * rotz(roll(<span class="built_in">i</span>));</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">case</span> &#123;<span class="string">'zyx'</span>, <span class="string">'vehicle'</span>&#125;</span><br><span class="line">            <span class="comment">% ZYX order</span></span><br><span class="line">            <span class="keyword">if</span> numrows(roll) == <span class="number">1</span></span><br><span class="line">                R = rotz(yaw) * roty(pitch) * rotx(roll);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                R = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">3</span>,numrows(roll));</span><br><span class="line">                <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:numrows(roll)</span><br><span class="line">                    R(:,:,<span class="built_in">i</span>) = rotz(yaw(<span class="built_in">i</span>)) * roty(pitch(<span class="built_in">i</span>)) * rotx(roll(<span class="built_in">i</span>));</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> &#123;<span class="string">'yxz'</span>, <span class="string">'camera'</span>&#125;</span><br><span class="line">            <span class="comment">% YXZ order</span></span><br><span class="line">            <span class="keyword">if</span> numrows(roll) == <span class="number">1</span></span><br><span class="line">                R = roty(yaw) * rotx(pitch) * rotz(roll);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                R = <span class="built_in">zeros</span>(<span class="number">3</span>,<span class="number">3</span>,numrows(roll));</span><br><span class="line">                <span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:numrows(roll)</span><br><span class="line">                    R(:,:,<span class="built_in">i</span>) = roty(yaw(<span class="built_in">i</span>)) * rotx(pitch(<span class="built_in">i</span>)) * rotz(roll(<span class="built_in">i</span>));</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rotx(yaw)*roty(pitch)*rotz(roll)</span><br><span class="line">rotz(roll)*roty(pitch)*rotx(yaw)</span><br><span class="line">rotx(roll)*roty(pitch)*rotz(yaw)</span><br><span class="line">rotz(yaw)*roty(pitch)*rotx(roll)</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%以下二者结果相同</span></span><br><span class="line">rpy2r(roll,pitch,yaw,<span class="string">'zyx'</span>)</span><br><span class="line">rotz(yaw)*roty(pitch)*rotx(roll)</span><br><span class="line"><span class="comment">%以下二者结果相同</span></span><br><span class="line">rpy2r(roll,pitch,yaw,<span class="string">'xyz'</span>)</span><br><span class="line">rotx(yaw)*roty(pitch)*rotz(roll)</span><br></pre></td></tr></table></figure><blockquote><p>个人认为没必要背下来，也没必要理解，只要想用的时候能知道它是怎么算的就好。</p></blockquote><h2 id="Euler角"><a href="#Euler角" class="headerlink" title="Euler角"></a>Euler角</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%Euler角 旋转矩阵</span></span><br><span class="line">alpha=<span class="number">10</span>*<span class="built_in">pi</span>/<span class="number">180</span>; <span class="built_in">beta</span>=<span class="number">20</span>*<span class="built_in">pi</span>/<span class="number">180</span>; gama=<span class="number">30</span>*<span class="built_in">pi</span>/<span class="number">180</span>;</span><br><span class="line">eul2r(alpha,<span class="built_in">beta</span>,gama)</span><br><span class="line"><span class="comment">%检验</span></span><br><span class="line">rotz(alpha)*roty(<span class="built_in">beta</span>)*rotz(gama)</span><br></pre></td></tr></table></figure><h2 id="齐次变换函数homtrans"><a href="#齐次变换函数homtrans" class="headerlink" title="齐次变换函数homtrans"></a>齐次变换函数<code>homtrans</code></h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">V=[<span class="number">30</span>,<span class="number">40</span>,<span class="number">60</span>];T=trotx(<span class="number">30</span>*<span class="built_in">pi</span>/<span class="number">180</span>);</span><br><span class="line">V=[V';<span class="number">1</span>];</span><br><span class="line">homtrans(T,V)</span><br><span class="line"><span class="comment">%检验</span></span><br><span class="line">T*V</span><br></pre></td></tr></table></figure><h2 id="绕任意轴旋转函数"><a href="#绕任意轴旋转函数" class="headerlink" title="绕任意轴旋转函数"></a>绕任意轴旋转函数</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">%绕任意轴旋转函数</span></span><br><span class="line">theta=<span class="number">30</span>*<span class="built_in">pi</span>/<span class="number">180</span>; k=[<span class="number">1</span>;<span class="number">0</span>;<span class="number">0</span>];</span><br><span class="line">angvec2r(theta,k)</span><br></pre></td></tr></table></figure><h2 id="建立连杆坐标系"><a href="#建立连杆坐标系" class="headerlink" title="建立连杆坐标系"></a>建立连杆坐标系</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">L(<span class="number">1</span>)=Link(<span class="string">'revolute'</span>,<span class="string">'a'</span>,<span class="number">0</span>,<span class="string">'alpha'</span>,<span class="number">0</span>,<span class="string">'d'</span>,<span class="number">0</span>);</span><br><span class="line">L(<span class="number">1</span>).mdh=<span class="number">1</span>;</span><br><span class="line">L(<span class="number">2</span>)=Link(<span class="string">'revolute'</span>,<span class="string">'a'</span>,<span class="number">10</span>,<span class="string">'alpha'</span>,<span class="built_in">pi</span>/<span class="number">2</span>,<span class="string">'d'</span>,<span class="number">0</span>);</span><br><span class="line">L(<span class="number">2</span>).mdh=<span class="number">1</span>;</span><br><span class="line">L(<span class="number">3</span>)=Link(<span class="string">'revolute'</span>,<span class="string">'a'</span>,<span class="number">6</span>,<span class="string">'alpha'</span>,<span class="number">0</span>,<span class="string">'d'</span>,<span class="number">0</span>);</span><br><span class="line">L(<span class="number">3</span>).mdh=<span class="number">1</span>;</span><br><span class="line">R=SerialLink(L,<span class="string">'name'</span>,<span class="string">'3RRR'</span>)</span><br><span class="line"><span class="comment">%改变一些参数</span></span><br><span class="line">R.base=transl([<span class="number">-10</span> <span class="number">0</span> <span class="number">0</span>]);</span><br><span class="line">R.tool=transl([<span class="number">4</span> <span class="number">0</span> <span class="number">0</span>]);</span><br><span class="line">q0=[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">R.<span class="built_in">plot</span>(q0)</span><br></pre></td></tr></table></figure><h2 id="让连杆坐标系运动起来"><a href="#让连杆坐标系运动起来" class="headerlink" title="让连杆坐标系运动起来"></a>让连杆坐标系运动起来</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">L(<span class="number">1</span>)=Link(<span class="string">'revolute'</span>,<span class="string">'a'</span>,<span class="number">0</span>,<span class="string">'alpha'</span>,<span class="number">0</span>,<span class="string">'d'</span>,<span class="number">0</span>);</span><br><span class="line">L(<span class="number">1</span>).mdh=<span class="number">1</span>;</span><br><span class="line">L(<span class="number">2</span>)=Link(<span class="string">'revolute'</span>,<span class="string">'a'</span>,<span class="number">10</span>,<span class="string">'alpha'</span>,<span class="built_in">pi</span>/<span class="number">2</span>,<span class="string">'d'</span>,<span class="number">0</span>);</span><br><span class="line">L(<span class="number">2</span>).mdh=<span class="number">1</span>;</span><br><span class="line">L(<span class="number">3</span>)=Link(<span class="string">'revolute'</span>,<span class="string">'a'</span>,<span class="number">6</span>,<span class="string">'alpha'</span>,<span class="number">0</span>,<span class="string">'d'</span>,<span class="number">0</span>);</span><br><span class="line">L(<span class="number">3</span>).mdh=<span class="number">1</span>;</span><br><span class="line">R=SerialLink(L,<span class="string">'name'</span>,<span class="string">'3RRR'</span>)</span><br><span class="line">q1=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="built_in">pi</span>/<span class="number">2</span>,<span class="number">100</span>)';</span><br><span class="line">q2=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="built_in">pi</span>/<span class="number">2</span>,<span class="number">100</span>)';</span><br><span class="line">q3=<span class="built_in">linspace</span>(<span class="number">0</span>,<span class="built_in">pi</span>/<span class="number">2</span>,<span class="number">100</span>)';</span><br><span class="line">Q=[q1,q2,q3];</span><br><span class="line"><span class="built_in">figure</span>(<span class="number">2</span>)</span><br><span class="line">R.<span class="built_in">plot</span>(Q)</span><br><span class="line">R.fkine(Q(<span class="keyword">end</span>,:))</span><br></pre></td></tr></table></figure><h1 id="实操任务"><a href="#实操任务" class="headerlink" title="实操任务"></a>实操任务</h1><ol><li>建立两个机器人，机器人基座的相对位置可调。（实际环境中，机器人位置可能发生变动，需要进行修改）</li><li>建立一个一条线段（一系列散点），线段的位置可调。（此线段即为机器人末端需要走的xyz轨迹点。实际环境中，轨迹位置随着工件安装位置而变换）</li><li>针对线段上的任意一个点，使某一机器人末端以某种姿态到达该点。（为xyz轨迹点加上姿态，一般的，机械臂末端z轴应当和工件表面垂直。这里只有一条线段，可指定rpy为pi/4,0,0)</li><li>针对线段上的任意一个点，使某一机器人末端以某种姿态，到达距离该点z向（末端坐标系下的z向）距离为某值的点。(此处表达的是待加工平板有一定厚度，而线段位于平板中部的情况。)</li><li>在4的基础上，使得两个机器人末端z 向正对（xy不作要求），且两个机器人末端距离可调b</li></ol><h2 id="Matlab仿真结果图"><a href="#Matlab仿真结果图" class="headerlink" title="Matlab仿真结果图"></a>Matlab仿真结果图</h2><p><img src="https://tvax3.sinaimg.cn/large/006BuM4Jly1gd2tp522waj30ji0hgq42.jpg" alt="19"></p><blockquote><p>使用的机器人工具箱版本为10.3.1版本</p><p>修改了工具箱自带的函数mdl_puma560，要使用代码需要在函数开头加上function p560 = mdl_puma560，结尾加上end以实现调用功能。</p></blockquote><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">close all</span><br><span class="line">clear;</span><br><span class="line">d = <span class="number">0.1</span>;</span><br><span class="line"><span class="built_in">plot3</span>([<span class="number">0</span> <span class="number">0</span>],[<span class="number">-1</span> <span class="number">1</span>],[<span class="number">0</span> <span class="number">0</span>])</span><br><span class="line">p560_1 = mdl_puma560;</span><br><span class="line">p560_1.name = <span class="string">'puma1'</span>;</span><br><span class="line">p560_1.base = [<span class="number">-0.6</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">p560_2 = mdl_puma560;</span><br><span class="line">p560_2.name = <span class="string">'puma2'</span>;</span><br><span class="line">p560_2.base = [<span class="number">0.6</span> <span class="number">0</span> <span class="number">0</span>];</span><br><span class="line">t=<span class="number">0</span>:<span class="number">0.05</span>:<span class="number">2</span>;</span><br><span class="line"><span class="comment">%计算puma1机械臂移动到指定点，并将z轴指向朝下的齐次变换矩阵</span></span><br><span class="line">T1 = transl(<span class="number">-0.4</span>,<span class="number">0.2</span>,<span class="number">0.1</span>);</span><br><span class="line">T2 = transl(<span class="number">0</span>,<span class="number">-0.4</span>,d)*trotx(<span class="number">180</span>);</span><br><span class="line"><span class="comment">%计算puma2机械臂移动到指定点，z轴指向朝上的齐次变换矩阵</span></span><br><span class="line">T3 = transl(<span class="number">0.2</span>,<span class="number">-0.2</span>,<span class="number">-0.1</span>);</span><br><span class="line">T4 = transl(<span class="number">0</span>,<span class="number">-0.4</span>,-d);</span><br><span class="line"><span class="comment">%利用jtraj函数让两个机械臂运动到指定点</span></span><br><span class="line">q=p560_1.jtraj(T1,T2,t);</span><br><span class="line">s=p560_2.jtraj(T3,T4,t);</span><br><span class="line"><span class="comment">%移动到指定点后沿直线移动</span></span><br><span class="line">T5 = transl(<span class="number">0</span>,<span class="number">0.5</span>,d)*trotx(<span class="number">180</span>);<span class="comment">%puma1沿直线移动</span></span><br><span class="line">T6 = transl(<span class="number">0</span>,<span class="number">0.5</span>,-d);<span class="comment">%puma2沿直线移动                                                         </span></span><br><span class="line">m=ctraj(T2,T5,<span class="number">50</span>);</span><br><span class="line">n=ctraj(T4,T6,<span class="built_in">length</span>(t));</span><br><span class="line">y=p560_1.ikine6s(m);</span><br><span class="line">f=p560_2.ikine6s(n);</span><br><span class="line"><span class="comment">%画图</span></span><br><span class="line">p560_1.<span class="built_in">plot</span>(q);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(s);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_1.<span class="built_in">plot</span>(y);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br><span class="line">p560_2.<span class="built_in">plot</span>(f);</span><br><span class="line"><span class="built_in">hold</span> on;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器人学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Robotic Toolbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020美赛有感</title>
      <link href="/OtherArticle/2020%E7%BE%8E%E8%B5%9B%E6%9C%89%E6%84%9F.html"/>
      <url>/OtherArticle/2020%E7%BE%8E%E8%B5%9B%E6%9C%89%E6%84%9F.html</url>
      
        <content type="html"><![CDATA[ <font size="3" face="楷体"><p>为了出国，提升背景为目的，我在大三报名了美赛，机缘巧合在一个留学交流群里，看到一个同学问有没有人有参加数模美赛的意向，要求是会写代码，我想着就去问问，毕竟我一个从小对数学无感，并且考了几次托福都上不了90的垃圾来说，除了写写代码还能干点什么呢？我就去说明了下自己的情况，他们考虑后也同意了，他们两个是同学，都是在经济学院，男生数学好，微积分什么的都接近满分，女生英语好，托福首考105，我了解到他们的情况之后压力还是很大的，毕竟我也只是一个懂$Matlab$语法的小白啊，数学建模这个词在我的印象里简直就像是“量子力学”一样的神秘（滑稽）。后来我们三个见面聊了聊，互相了解了下情况，我们都没有太多的数学建模基础，情况类似，之后也就没再多聊。</p><p>直到考试前，我们关于建模的事情聊得都不多，感觉我们三个都是比较内敛的人，我还算是其中比较外向的了，很多时候如果我不说话，估计群里就不会有人说话了。赶在寒假前期末考试后，我打算好好准备一下，虽然感觉毫无头绪，不知道从哪个高深的算法开始学起，但还是硬着头皮上，买了个课，每天听一听，后来就去北京学GRE了，数模什么的也就暂且搁置了，直到比赛前几周，才继续学一些知识。忘记说了，今年比较特殊的是，受疫情影响，美赛从一次改成了两次，一次是2月份，一次是3月份，我们当时想着或许3月能开学，就去搞3月的比赛（我实际上是觉得自己啥也不会，能拖几天是几天，拖，就恩拖）</p><p>然而躲得过初一却躲不过十五，3月份的比赛马上就到了，我们采用的是腾讯会议的方式线上交流。第一天早上起得很早，六点多就看赛题了，没记错的话，我3点多就醒了一次，估计是没准备太紧张了吧…拿到赛题，用词典把B题翻译了下，了解了题意，大概就是问想在海边建沙堡的话，怎么剪最好，我当时看了就觉得，这不就是开脑洞胡思乱想嘛，一个从小都没怎么去过海边的中国人，沙堡？别搞笑了，你问我怎么做汉堡好吃还差不多。</p><p>但当我用翻译软件把B题翻译了之后我才发现，或许B题是唯一一个我能理解的题目了，这就像是养龙，你说咋养就咋养，你说怎么搭沙堡就怎么搭，没有硬性规定，全靠你自己的理解，这种还算好的，毕竟只要说服了自己，就觉得没问题不是。在和两个队友商量后，也一致认为B题比较好理解，虽然暂时没有太明确的思路，但至少能靠脑子想想，编，就恩编。第一天，我们最开始思路很乱，没搞清楚应该从哪个点入手，毕竟对一个沙堡要分析的东西还是很多的，没有限定条件随便扯总不是一个事，搞数学的同学想从含水量的角度出发，我想从力的角度考虑，但奈何我的流体力学也只是学了一个皮毛，现在一个公式都想不起来的我，想从力学出发未免太难了点，搞数学的同学倒是想出了个思路，还写了不少式子，到了下午，搞数学的同学竟然已经写出了一个模型，虽然忽略了很多因素，但听起来觉得很有道理，达到了“自圆其说”的作用，于是我们就照着这个方向继续研究，提出问题，否决问题，提出方案，改正方案…就这样我慢慢觉得这个模型有搞头，至少我开始有了点思路。当晚搞数学的同学给我提出了一个难题，让我求一个函数的最小值，单求最小值不要紧，毕竟我还是上了点网课的，懂一点算法，但这函数也太复杂了，迭代套迭代，简直就是一个套娃，我完全没有思路。当晚我们还说明天要不要讨论一下F题，毕竟如果这个式子不能解决，可能这个思路就没法继续下去了。实在不行，我们就去做文字建模。。。</p><p>那晚我也没怎么睡好，因为我真的不知道这个“套娃”怎么解决，第二天早上起来我就自学了下可能能解决的办法–蒙特卡洛模拟，试着化简一下式子，再写写代码，听着两个队友在腾讯会议里讨论F题的题意，我得到了一个看起来“不错”的结果，我就在里面和他们说，如果我得到了第二问的结果，你们是觉得做F题还是B题？在我的语言诱导下，我们又开始脑洞大开建沙堡。可能是算出了个结果，有了信心，我们逐渐攻克各个难题，一起讨论，我认为我们仨合作还是很愉快的，总之就是在自圆其说的道路上越走越远233。</p><p>我们每天也不熬夜，大概10点左右就收工，早上八点集合，第三天，大部分问题也都已经想好。最后一天，该算的也算完了，我就给自己找点事做，下了个Latex（真的是作死），最后一天把我搞得死去活来，硬是坐在电脑前一天，从零入门Latex还好我有点Markdown基础，搞这个上手也比较快，我们改了又改，填了又填，最后在后半夜两点，在我们三个人一同的见证下交上了论文，4天的美赛到此结束，圆满收工。</p><p>这次美赛，收获很多，首先感谢我的两个队友，都很靠谱！我自己也算尽心尽力了，虽然基础差，但在这几天现学了不少东西，总之还是那句话，“尽吾志也而不能至者，可以无悔矣。”</p></font>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【STM32】外部中断实验</title>
      <link href="/MicroController/%E3%80%90STM32%E3%80%91%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD%E5%AE%9E%E9%AA%8C.html"/>
      <url>/MicroController/%E3%80%90STM32%E3%80%91%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD%E5%AE%9E%E9%AA%8C.html</url>
      
        <content type="html"><![CDATA[<h1 id="外部中断概述"><a href="#外部中断概述" class="headerlink" title="外部中断概述"></a>外部中断概述</h1><ol><li><p>STM32的每个IO都可以作为外部中断输入。</p></li><li><p>STM32的中断控制器支持19个外部中断/事件请求：</p></li></ol><ul><li>线0~15：对应外部IO口的输入中断。</li><li>线16：连接到PVD输出。</li><li>线17：连接到RTC闹钟事件。</li><li>线18：连接到USB唤醒事件。</li></ul><ol start="3"><li><p>每个外部中断线可以独立的配置触发方式（上升沿，下降沿或者双边沿触发），触发/屏蔽，专用的状态位。</p></li><li><p>从上面可以看出，STM32供IO使用的中断线只有16个，但是STM32F10x系列的IO口多达上百个，那么中断线怎么跟io口对应呢？</p></li></ol><ul><li>GPIOx.0映射到EXTI0</li><li>GPIOx.1映射到EXTI1</li><li>…</li><li>GPIOx.15映射到EXTI15</li></ul><ol start="5"><li>IO口外部中断在中断向量表中只分配了7个中断向量，也就是<br>只能使用7个中断服务函数<blockquote><p>从表中可以看出，外部中断线5<del>9分配一个中断向量，共用一个服务函数，外部中断线10</del>15分配一个中断向量，共用一个中断服务函数。</p></blockquote></li></ol><h1 id="外部中断常用库函数"><a href="#外部中断常用库函数" class="headerlink" title="外部中断常用库函数"></a>外部中断常用库函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//exti.c文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_EXTILineConfig</span><span class="params">(<span class="keyword">uint8_t</span> GPIO_PortSource, <span class="keyword">uint8_t</span> GPIO_PinSource)</span></span>;</span><br><span class="line"><span class="comment">//设置IO口与中断线的映射关系</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exp</span>:  GPIO_EXTILineConfig(GPIO_PortSourceGPIOE,GPIO_PinSource2);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI_Init</span><span class="params">(EXTI_InitTypeDef* EXTI_InitStruct)</span></span>;</span><br><span class="line"> <span class="comment">//初始化中断线：触发方式等</span></span><br><span class="line"></span><br><span class="line"><span class="function">ITStatus <span class="title">EXTI_GetITStatus</span><span class="params">(<span class="keyword">uint32_t</span> EXTI_Line)</span></span>;</span><br><span class="line"><span class="comment">//判断中断线中断状态，是否发生</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI_ClearITPendingBit</span><span class="params">(<span class="keyword">uint32_t</span> EXTI_Line)</span></span>;</span><br><span class="line"><span class="comment">//清除中断线上的中断标志位</span></span><br></pre></td></tr></table></figure><h1 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"exti.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"key.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTIX_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">EXTI_InitTypeDef  EXTI_InitStruct;</span><br><span class="line">NVIC_InitTypeDef  NVIC_InitStruct;</span><br><span class="line"></span><br><span class="line">KEY_Init();</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_EXTILineConfig(GPIO_PortSourceGPIOE,GPIO_PinSource4);</span><br><span class="line"></span><br><span class="line">EXTI_InitStruct.EXTI_Line = EXTI_Line4;</span><br><span class="line">EXTI_InitStruct.EXTI_LineCmd = ENABLE;</span><br><span class="line">EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;</span><br><span class="line">EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Falling;</span><br><span class="line">EXTI_Init(&amp;EXTI_InitStruct);</span><br><span class="line"></span><br><span class="line">NVIC_InitStruct.NVIC_IRQChannel = EXTI4_IRQn;</span><br><span class="line">NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;</span><br><span class="line">NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = <span class="number">2</span>;</span><br><span class="line">NVIC_InitStruct.NVIC_IRQChannelSubPriority = <span class="number">2</span>;</span><br><span class="line">NVIC_Init(&amp;NVIC_InitStruct);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXTI4_IRQHandler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(KEY0 == <span class="number">0</span>)&#123;</span><br><span class="line">LED0 = !LED0;</span><br><span class="line">LED1 = !LED1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//手动清除中断标志位</span></span><br><span class="line">EXTI_ClearITPendingBit(EXTI_Line4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beep.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"key.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sys.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"exti.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"usart.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">delay_init();      <span class="comment">//延时函数初始化  </span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line"> LED_Init();      <span class="comment">//LED端口初始化</span></span><br><span class="line">KEY_Init();           <span class="comment">//初始化与按键连接的硬件接口</span></span><br><span class="line">EXTIX_Init();</span><br><span class="line">LED0 = <span class="number">0</span>;    <span class="comment">//先点亮红灯</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"OK\r\n"</span>);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【STM32】串口通信基本原理</title>
      <link href="/MicroController/%E3%80%90STM32%E3%80%91%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html"/>
      <url>/MicroController/%E3%80%90STM32%E3%80%91%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="处理器与外部设备通信的两种方式"><a href="#处理器与外部设备通信的两种方式" class="headerlink" title="处理器与外部设备通信的两种方式"></a>处理器与外部设备通信的两种方式</h1><ol><li><p>并行通信</p><ul><li>传输原理：数据各个位同时传输。</li><li>优点：速度快</li><li>缺点：占用引脚资源多</li></ul></li><li><p>串行通信</p><ul><li>传输原理：数据按位顺序传输。</li><li>优点：占用引脚资源少</li><li>缺点：速度相对较慢</li></ul></li></ol><h1 id="串行通信"><a href="#串行通信" class="headerlink" title="串行通信"></a>串行通信</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>按照数据传送方向，分为：</p><ol><li><p>单工：数据传输只支持数据在<strong>一个方向上</strong>传输</p></li><li><p>半双工：允许数据在两个方向上传输，但是，在某一时刻，只允许数据在一个方向上传输，它实际上是一种<strong>切换方向</strong>的单工通信；</p></li><li><p>全双工：允许数据同时在两个方向上传输，因此，全双工通信是两个单工通信方式的结合，它要求发送设备和接收设备都有<strong>独立的</strong>接收和发送能力。 </p></li></ol><h2 id="串行通信的通信方式"><a href="#串行通信的通信方式" class="headerlink" title="串行通信的通信方式"></a>串行通信的通信方式</h2><ol><li><p>同步通信：<strong>带时钟同步信号</strong>传输。-SPI，IIC通信接口</p></li><li><p>异步通信：<strong>不带时钟同步信号</strong>。-<code>UART</code>(通用异步收发器),单总线（必须约定波特率，按照相同的速度发送和读取）</p></li></ol><h1 id="常见的串行通信接口"><a href="#常见的串行通信接口" class="headerlink" title="常见的串行通信接口"></a>常见的串行通信接口</h1><p><img src="http://wx1.sinaimg.cn/large/006BuM4Jgy1g653m0aqzgj30ml0acdgt.jpg" alt="图片6"></p><p>STM32的串口通信接口</p><ul><li>UART:通用异步收发器</li><li>USART:通用同步异步收发器</li></ul><p>大容量STM32F10x系列芯片，包含3个USART和2个UART</p><h1 id="UART异步通信方式引脚连接方法"><a href="#UART异步通信方式引脚连接方法" class="headerlink" title="UART异步通信方式引脚连接方法"></a>UART异步通信方式引脚连接方法</h1><ul><li>RXD:数据输入引脚。数据接受。</li><li>TXD:数据发送引脚。数据发送。</li></ul><p><img src="http://wx2.sinaimg.cn/large/006BuM4Jgy1g653v4l3u9j309g05hjrm.jpg" alt="图片7"></p><p><img src="http://wx2.sinaimg.cn/large/006BuM4Jgy1g653vfp7wtj30d4059gm0.jpg" alt="图片8"></p><p><img src="http://wx2.sinaimg.cn/large/006BuM4Jgy1g653wqh5f9j30j4071aa5.jpg" alt="图片9"></p><h1 id="UART异步通信方式特点"><a href="#UART异步通信方式特点" class="headerlink" title="UART异步通信方式特点"></a>UART异步通信方式特点</h1><ul><li>全双工异步通信。</li><li>分数波特率发生器系统，提供精确的波特率。</li><li>发送和接受共用的可编程波特率，最高可达4.5Mbits/s</li><li>可编程的数据字长度（8位或者9位）；</li><li>可配置的停止位（支持1或者2位停止位）；</li><li>可配置的使用DMA多缓冲器通信。</li><li>单独的发送器和接收器使能位。</li><li>检测标志：① 接受缓冲器  ②发送缓冲器空 ③传输结束标志</li><li>多个带标志的中断源。触发中断。</li><li>其他：校验控制，四个错误检测标志。</li></ul><h1 id="STM32串口异步通信需要定义的参数"><a href="#STM32串口异步通信需要定义的参数" class="headerlink" title="STM32串口异步通信需要定义的参数"></a>STM32串口异步通信需要定义的参数</h1><ul><li>起始位，通信双方约定从空闲位开始</li><li>数据位（8位或者9位），第九位就是奇偶校验位</li><li>奇偶校验位（第9位），偶校验：使1的数量为偶数；奇校验：使1的数量为奇数</li><li>停止位（1,15,2位）</li><li>波特率设置</li></ul><h1 id="常用的串口相关寄存器"><a href="#常用的串口相关寄存器" class="headerlink" title="常用的串口相关寄存器"></a>常用的串口相关寄存器</h1><ul><li>USART_SR状态寄存器</li><li>USART_DR数据寄存器</li><li>USART_BRR波特率寄存器 </li></ul><h1 id="波特率计算方法"><a href="#波特率计算方法" class="headerlink" title="波特率计算方法"></a>波特率计算方法</h1><p><img src="http://wx1.sinaimg.cn/large/006BuM4Jgy1g654k6970sj30lv0d90z4.jpg" alt="图片11"></p><h1 id="串口操作相关库函数"><a href="#串口操作相关库函数" class="headerlink" title="串口操作相关库函数"></a>串口操作相关库函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_Init</span><span class="params">()</span></span>; <span class="comment">//串口初始化：波特率，数据字长，奇偶校验，硬件流控以及收发使能</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_Cmd</span><span class="params">()</span></span>;<span class="comment">//使能串口</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_ITConfig</span><span class="params">()</span></span>;<span class="comment">//使能相关中断</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_SendData</span><span class="params">()</span></span>;<span class="comment">//发送数据到串口，DR</span></span><br><span class="line"><span class="keyword">uint16_t</span> USART_ReceiveData();<span class="comment">//接受数据，从DR读取接受到的数据</span></span><br><span class="line"></span><br><span class="line"><span class="function">FlagStatus <span class="title">USART_GetFlagStatus</span><span class="params">()</span></span>;<span class="comment">//获取状态标志位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_ClearFlag</span><span class="params">()</span></span>;<span class="comment">//清除状态标志位</span></span><br><span class="line"><span class="function">ITStatus <span class="title">USART_GetITStatus</span><span class="params">()</span></span>;<span class="comment">//获取中断状态标志位</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">USART_ClearITPendingBit</span><span class="params">()</span></span>;<span class="comment">//清除中断状态标志位</span></span><br></pre></td></tr></table></figure><h1 id="串口配置的一般步骤"><a href="#串口配置的一般步骤" class="headerlink" title="串口配置的一般步骤"></a>串口配置的一般步骤</h1><ol><li>串口时钟使能，GPIO时钟使能:<code>RCC_APB2PeriphClockCmd();</code></li><li>串口复位:<code>USART_DeInit()</code>; 这一步不是必须的</li><li>GPIO端口模式设置:<code>GPIO_Init();</code> 模式设置为<code>GPIO_Mode_AF_PP</code></li><li>串口参数初始化：<code>USART_Init();</code></li><li>开启中断并且初始化NVIC（如果需要开启中断才需要这个步骤）<code>NVIC_Init();``USART_ITConfig();</code></li><li>使能串口:<code>USART_Cmd();</code></li><li>编写中断处理函数：<code>USARTx_IRQHandler();</code></li><li>串口数据收发：<br><code>void USART_SendData();//发送数据到串口，DR</code>, <code>uint16_t USART_ReceiveData();//接受数据，从DR读取接受到的数据</code></li><li>串口传输状态获取：<br><code>FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG);void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT);</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【STM32】NVIC中断优先级管理</title>
      <link href="/MicroController/%E3%80%90STM32%E3%80%91NVIC%E4%B8%AD%E6%96%AD%E4%BC%98%E5%85%88%E7%BA%A7%E7%AE%A1%E7%90%86.html"/>
      <url>/MicroController/%E3%80%90STM32%E3%80%91NVIC%E4%B8%AD%E6%96%AD%E4%BC%98%E5%85%88%E7%BA%A7%E7%AE%A1%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="NVIC中断介绍"><a href="#NVIC中断介绍" class="headerlink" title="NVIC中断介绍"></a>NVIC中断介绍</h1><ul><li>CM3内核支持256个中断，其中包含了16个内核中断和240个外部中断，并且具有256级的可编程中断设置。</li><li>STM32并没有使用CM3内核的全部东西，而是只用了它的一部分。</li><li>STM32有84个中断，包括16个内核中断和68个可屏蔽中断，具有16级可编程的中断优先级。</li><li>STM32F103系列上面，又只有60个可屏蔽中断（在107系列才有68个）</li></ul><h1 id="中断管理方法"><a href="#中断管理方法" class="headerlink" title="中断管理方法"></a>中断管理方法</h1><p>首先，对STM32中断进行分组，组0~4。同时，对每个中断设置一个抢占优先级和一个响应优先级值。</p><p>分组配置是在寄存器SCB-&gt;AIRCR中配置：</p><p><img src="http://ws3.sinaimg.cn/large/006BuM4Jgy1g67l4p94d5j30jf073t8r.jpg" alt="图片5"></p><h1 id="抢占优先级-amp-响应优先级区别"><a href="#抢占优先级-amp-响应优先级区别" class="headerlink" title="抢占优先级 &amp; 响应优先级区别"></a>抢占优先级 &amp; 响应优先级区别</h1><ul><li>高优先级的抢占优先级是可以打断正在进行的低抢占优先级中断的。</li><li>抢占优先级相同的中断，高响应优先级不可以打断低响应优先级的中断。</li><li>抢占优先级相同的中断，当两个中断同时发生的情况下，哪个响应优先级高，哪个先执行。</li><li>如果两个中断的抢占优先级和响应优先级都是一样的话，则看哪个中断先发生就先执行；</li></ul><h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p>假定设置中断优先级组为2，然后设置中断3(RTC中断)的抢占优先级为2，响应优先级为1。  中断6（外部中断0）的抢占优先级为3，响应优先级为0。中断7（外部中断1）的抢占优先级为2，响应优先级为0。</p><p>那么这3个中断的优先级顺序为：中断7&gt;中断3&gt;中断6。 </p><h1 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h1><p>一般情况下，系统代码执行过程中，只设置一次中断优先级分组，比如分组2，设置好分组之后一般不会再改变分组。随意改变分组会导致中断管理混乱，程序出现意想不到的执行结果。</p><h1 id="中断优先级分组函数"><a href="#中断优先级分组函数" class="headerlink" title="中断优先级分组函数"></a>中断优先级分组函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_PriorityGroupConfig</span><span class="params">(<span class="keyword">uint32_t</span> NVIC_PriorityGroup)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));</span><br><span class="line">  SCB-&gt;AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//比如：</span></span><br><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br></pre></td></tr></table></figure><h1 id="中断设置相关寄存器"><a href="#中断设置相关寄存器" class="headerlink" title="中断设置相关寄存器"></a>中断设置相关寄存器</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">__IO <span class="keyword">uint8_t</span>  IP[<span class="number">240</span>]; <span class="comment">//中断优先级控制的寄存器组</span></span><br><span class="line">__IO <span class="keyword">uint32_t</span> ISER[<span class="number">8</span>]; <span class="comment">//中断使能寄存器组</span></span><br><span class="line">__IO <span class="keyword">uint32_t</span> ICER[<span class="number">8</span>]; <span class="comment">//中断失能寄存器组</span></span><br><span class="line">__IO <span class="keyword">uint32_t</span> ISPR[<span class="number">8</span>]; <span class="comment">//中断挂起寄存器组</span></span><br><span class="line">__IO <span class="keyword">uint32_t</span> ICPR[<span class="number">8</span>]; <span class="comment">//中断解挂寄存器组</span></span><br><span class="line">__IO <span class="keyword">uint32_t</span> IABR[<span class="number">8</span>]; <span class="comment">//中断激活标志位寄存器组</span></span><br></pre></td></tr></table></figure><h1 id="MDK中NVIC寄存器结构体"><a href="#MDK中NVIC寄存器结构体" class="headerlink" title="MDK中NVIC寄存器结构体"></a>MDK中NVIC寄存器结构体</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __IO <span class="keyword">uint32_t</span> ISER[<span class="number">8</span>];             </span><br><span class="line">       <span class="keyword">uint32_t</span> RESERVED0[<span class="number">24</span>];                                   </span><br><span class="line">  __IO <span class="keyword">uint32_t</span> ICER[<span class="number">8</span>];                    </span><br><span class="line">       <span class="keyword">uint32_t</span> RSERVED1[<span class="number">24</span>];                                    </span><br><span class="line">  __IO <span class="keyword">uint32_t</span> ISPR[<span class="number">8</span>];                     </span><br><span class="line">       <span class="keyword">uint32_t</span> RESERVED2[<span class="number">24</span>];                                   </span><br><span class="line">  __IO <span class="keyword">uint32_t</span> ICPR[<span class="number">8</span>];                   </span><br><span class="line">       <span class="keyword">uint32_t</span> RESERVED3[<span class="number">24</span>];                                   </span><br><span class="line">  __IO <span class="keyword">uint32_t</span> IABR[<span class="number">8</span>];                     </span><br><span class="line">       <span class="keyword">uint32_t</span> RESERVED4[<span class="number">56</span>];                                   </span><br><span class="line">  __IO <span class="keyword">uint8_t</span>  IP[<span class="number">240</span>];                     </span><br><span class="line">       <span class="keyword">uint32_t</span> RESERVED5[<span class="number">644</span>];                                  </span><br><span class="line">  __O  <span class="keyword">uint32_t</span> STIR;                         </span><br><span class="line">&#125;  NVIC_Type;</span><br></pre></td></tr></table></figure><h1 id="对于每个中断怎么设置优先级"><a href="#对于每个中断怎么设置优先级" class="headerlink" title="对于每个中断怎么设置优先级"></a>对于每个中断怎么设置优先级</h1><h2 id="中断优先级控制的寄存器组：IP-240"><a href="#中断优先级控制的寄存器组：IP-240" class="headerlink" title="中断优先级控制的寄存器组：IP[240]"></a>中断优先级控制的寄存器组：IP[240]</h2><ul><li><p>全称是：Interrupt Priority Registers</p></li><li><p>240个8位寄存器，每个中断使用一个寄存器来确定优先级。STM32F10x系列一共60个可屏蔽中断，使用IP[59]~IP[0]。</p></li><li><p>每个IP寄存器的高4位用来设置抢占和响应优先级（根据分组），低4位没有用到。</p></li><li><p><code>void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);</code></p></li></ul><h2 id="中断使能寄存器组：ISER-8"><a href="#中断使能寄存器组：ISER-8" class="headerlink" title="中断使能寄存器组：ISER[8]"></a>中断使能寄存器组：ISER[8]</h2><ul><li><p>作用：用来使能中断</p></li><li><p>32位寄存器，每个位控制一个中断的使能。STM32F10x只有60个可屏蔽中断，所以只使用了其中的ISER[0]和ISER[1]。</p></li><li><p>ISER[0]的<code>bit0-bit31</code>分别对应中断<code>0-31</code>。ISER[1]的<code>bit0-27</code>对应中断<code>32~59</code>；</p></li><li><p><code>void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);</code></p></li></ul><h2 id="中断失能寄存器组：ICER-8"><a href="#中断失能寄存器组：ICER-8" class="headerlink" title="中断失能寄存器组：ICER[8]"></a>中断失能寄存器组：ICER[8]</h2><ul><li><p>作用：只读，通过它可以知道当前在执行的中断是哪一个</p></li><li><p>32位寄存器，每个位控制一个中断的失能。STM32F10x只有60个可屏蔽中断，所以只使用了其中的ICER[0]和ICER[1]。</p></li><li><p>ICER[0]的<code>bit0~bit31</code>分别对应中断<code>0~31</code>。ICER[1]的<code>bit0~27</code>对应中断<code>32~59</code>；</p></li><li><p>配置方法跟ISER一样<br><code>static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)</code></p></li></ul><h2 id="中断挂起控制寄存器组：ISPR-8"><a href="#中断挂起控制寄存器组：ISPR-8" class="headerlink" title="中断挂起控制寄存器组：ISPR[8]"></a>中断挂起控制寄存器组：ISPR[8]</h2><ul><li>作用：用来挂起中断</li></ul><h2 id="中断解挂控制寄存器组：ICPR-8"><a href="#中断解挂控制寄存器组：ICPR-8" class="headerlink" title="中断解挂控制寄存器组：ICPR[8]"></a>中断解挂控制寄存器组：ICPR[8]</h2><ul><li>作用：用来解挂中断</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static __INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)；</span><br><span class="line">static __INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)；</span><br><span class="line"><span class="keyword">static</span> __<span class="function">INLINE <span class="keyword">void</span> <span class="title">NVIC_ClearPendingIRQ</span><span class="params">(IRQn_Type IRQn)</span></span></span><br></pre></td></tr></table></figure><h2 id="中断激活标志位寄存器组：IABR-8"><a href="#中断激活标志位寄存器组：IABR-8" class="headerlink" title="中断激活标志位寄存器组：IABR [8]"></a>中断激活标志位寄存器组：IABR [8]</h2><ul><li><p>作用：只读，通过它可以知道当前在执行的中断是哪一个</p></li><li><p>如果对应位为1，说明该中断正在执行。</p></li><li><p><code>static __INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)</code></p></li></ul><h1 id="中断参数初始化函数"><a href="#中断参数初始化函数" class="headerlink" title="中断参数初始化函数"></a>中断参数初始化函数</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NVIC_Init</span><span class="params">(NVIC_InitTypeDef* NVIC_InitStruct)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">uint8_t</span> NVIC_IRQChannel; <span class="comment">//设置中断通道</span></span><br><span class="line">  <span class="keyword">uint8_t</span> NVIC_IRQChannelPreemptionPriority;<span class="comment">//设置响应优先级</span></span><br><span class="line">  <span class="keyword">uint8_t</span> NVIC_IRQChannelSubPriority; <span class="comment">//设置抢占优先级</span></span><br><span class="line">  FunctionalState NVIC_IRQChannelCmd; <span class="comment">//使能/使能</span></span><br><span class="line">&#125; NVIC_InitTypeDef;</span><br><span class="line"></span><br><span class="line">NVIC_InitTypeDef   NVIC_InitStructure;</span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;<span class="comment">//串口1中断</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=<span class="number">1</span> ;<span class="comment">// 抢占优先级为1</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelSubPriority = <span class="number">2</span>;<span class="comment">// 子优先级位2</span></span><br><span class="line">NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;<span class="comment">//IRQ通道使能</span></span><br><span class="line">NVIC_Init(&amp;NVIC_InitStructure);<span class="comment">//根据上面指定的参数初始化NVIC寄存器</span></span><br></pre></td></tr></table></figure><h1 id="中断优先级设置步骤"><a href="#中断优先级设置步骤" class="headerlink" title="中断优先级设置步骤"></a>中断优先级设置步骤</h1><ul><li>系统运行后先设置中断优先级分组。调用函数：<br><code>void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);</code>整个系统执行过程中，只设置一次中断分组。</li><li>针对每个中断，设置对应的抢占优先级和响应优先级：<br><code>void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct);</code></li><li>如果需要挂起/解挂，查看中断当前激活状态，分别调用相关函数即可。</li></ul>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【STM32】端口复用</title>
      <link href="/MicroController/%E3%80%90STM32%E3%80%91%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8.html"/>
      <url>/MicroController/%E3%80%90STM32%E3%80%91%E7%AB%AF%E5%8F%A3%E5%A4%8D%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是端口复用"><a href="#什么是端口复用" class="headerlink" title="什么是端口复用"></a>什么是端口复用</h1><p>STM32有很多的内置外设，这些外设的外部引脚都是与GPIO复用的。也就是说，一个GPIO如果可以复用为内置外设的功能引脚，那么当这个GPIO作为内置外设使用的时候，就叫做复用。</p><blockquote><p> 例如串口1 的发送接收引脚是PA9,PA10，当我们把PA9,PA10不用作GPIO，而用做复用功能串口1的发送接收引脚的时候，叫端口复用。</p></blockquote><h1 id="端口复用配置过程"><a href="#端口复用配置过程" class="headerlink" title="端口复用配置过程"></a>端口复用配置过程</h1><p>以PA9,PA10配置为串口1为例</p><ul><li><p>GPIO端口时钟使能。<code>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);</code></p></li><li><p>复用外设时钟使能。比如你要将端口PA9,PA10复用为串口，所以要使能串口时钟。<code>RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);</code></p></li><li><p>端口模式配置。 GPIO_Init（）函数。查表：《STM32中文参考手册V10》P110的表格“8.1.11外设的GPIO配置”</p></li></ul><p><img src="http://ws1.sinaimg.cn/large/006BuM4Jgy1g67l5tal6nj30pb07qq4w.jpg" alt="图片4"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);<span class="comment">//①IO时钟使能</span></span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);<span class="comment">//②外设时钟使能</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//③初始化IO为对应的模式</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9; <span class="comment">//PA.9//复用推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP; </span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br><span class="line">  </span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;<span class="comment">//PA10 PA.10 浮空输入</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;<span class="comment">//浮空输入</span></span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【STM32】SysTick定时器</title>
      <link href="/MicroController/%E3%80%90STM32%E3%80%91SysTick%E5%AE%9A%E6%97%B6%E5%99%A8.html"/>
      <url>/MicroController/%E3%80%90STM32%E3%80%91SysTick%E5%AE%9A%E6%97%B6%E5%99%A8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Systick定时器是什么"><a href="#Systick定时器是什么" class="headerlink" title="Systick定时器是什么"></a>Systick定时器是什么</h1><ul><li><p>Systick定时器，是一个简单的定时器，对于CM3,CM4内核芯片，都有Systick定时器。</p></li><li><p>Systick定时器常用来做延时，或者实时系统的心跳时钟。这样可以节省MCU资源，不用浪费一个定时器。比如UCOS中，分时复用，需要一个最小的时间戳，一般在STM32+UCOS系统中，都采用Systick做UCOS心跳时钟。</p></li><li><p>Systick定时器就是系统滴答定时器，一个24 位的倒计数定时器，计到0 时，将从RELOAD 寄存器中自动重装载定时初值。只要不把它在SysTick 控制及状态寄存器中的使能位清除，就永不停息，即使在睡眠模式下也能工作。</p></li><li><p>SysTick定时器被捆绑在NVIC中，用于产生SYSTICK异常（异常号：15）</p></li><li><p>Systick中断的优先级也可以设置。</p></li></ul><h1 id="Systick相关寄存器"><a href="#Systick相关寄存器" class="headerlink" title="Systick相关寄存器"></a>Systick相关寄存器</h1><ul><li><p>CTRL             SysTick 控制和状态寄存器  LOAD<br><img src="https://wx4.sinaimg.cn/large/006BuM4Jgy1g64su5lcdnj30oo02ngm8.jpg" alt="图片2"></p></li><li><p>SysTick       自动重装载除值寄存器<br><img src="https://wx3.sinaimg.cn/large/006BuM4Jgy1g64sme60v6j30oh07wad1.jpg" alt="图片1"><br>对于STM32，外部时钟源是 HCLK(AHB总线时钟）的1/8内核时钟是 HCLK时钟,配置函数：SysTick_CLKSourceConfig()</p></li><li><p>VAL                SysTick 当前值寄存器<br><img src="https://wx3.sinaimg.cn/large/006BuM4Jgy1g64svteyv1j30od04aq4c.jpg" alt="图片3"></p></li><li><p>CALIB            SysTick 校准值寄存器</p></li></ul><h1 id="Systick库函数"><a href="#Systick库函数" class="headerlink" title="Systick库函数"></a>Systick库函数</h1><p>固件库中的Systick相关函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SysTick_CLKSourceConfig()    <span class="comment">//Systick时钟源选择  misc.c文件中</span></span><br><span class="line">SysTick_Config(<span class="keyword">uint32_t</span> ticks) </span><br><span class="line"><span class="comment">//初始化systick,时钟为HCLK,并开启中断</span></span><br><span class="line"><span class="comment">//core_cm3.h/core_cm4.h文件中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Systick中断服务函数：</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SysTick_CLKSourceConfig函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_CLKSourceConfig</span><span class="params">(<span class="keyword">uint32_t</span> SysTick_CLKSource)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* Check the parameters */</span></span><br><span class="line">  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (SysTick_CLKSource == SysTick_CLKSource_HCLK)</span><br><span class="line">  &#123;</span><br><span class="line">    SysTick-&gt;CTRL |= SysTick_CLKSource_HCLK;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    SysTick-&gt;CTRL &amp;= SysTick_CLKSource_HCLK_Div8;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SysTick_CLKSourceConfig函数</span></span><br><span class="line"><span class="keyword">static</span> __<span class="function">INLINE uint32_t <span class="title">SysTick_Config</span><span class="params">(<span class="keyword">uint32_t</span> ticks)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (ticks &gt; SysTick_LOAD_RELOAD_Msk)  <span class="keyword">return</span> (<span class="number">1</span>);         <span class="comment">/* Reload value impossible */</span></span><br><span class="line">   </span><br><span class="line"> <span class="comment">/* set reload register */</span>                                                            </span><br><span class="line">  SysTick-&gt;LOAD  = (ticks &amp; SysTick_LOAD_RELOAD_Msk) - <span class="number">1</span>; </span><br><span class="line"><span class="comment">/* set Priority for Cortex-M0 System Interrupts */</span></span><br><span class="line">  NVIC_SetPriority (SysTick_IRQn, (<span class="number">1</span>&lt;&lt;__NVIC_PRIO_BITS) - <span class="number">1</span>); </span><br><span class="line">  SysTick-&gt;VAL   = <span class="number">0</span>;                                        <span class="comment">/* Load the SysTick Counter Value */</span></span><br><span class="line">  SysTick-&gt;CTRL  = SysTick_CTRL_CLKSOURCE_Msk | </span><br><span class="line">                   SysTick_CTRL_TICKINT_Msk   | </span><br><span class="line">                   SysTick_CTRL_ENABLE_Msk;     <span class="comment">/* Enable SysTick IRQ and SysTick Timer */</span></span><br><span class="line">  <span class="keyword">return</span> (<span class="number">0</span>);                                                  <span class="comment">/* Function successful */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用中断的方式实现delay延时</span></span><br><span class="line"><span class="keyword">static</span> __IO <span class="keyword">uint32_t</span> TimingDelay;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delay</span><span class="params">(__IO <span class="keyword">uint32_t</span> nTime)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">   TimingDelay = nTime;</span><br><span class="line">   <span class="keyword">while</span>(TimingDelay != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SysTick_Handler</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (TimingDelay != <span class="number">0x00</span>) </span><br><span class="line">     &#123; </span><br><span class="line">       TimingDelay--;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"> </span>&#123;  …</span><br><span class="line">    <span class="keyword">if</span> (SysTick_Config(SystemCoreClock / <span class="number">1000</span>)) <span class="comment">//systick时钟为HCLK，中断时间间隔1ms</span></span><br><span class="line">     &#123;</span><br><span class="line">     <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">     &#123; Delay(<span class="number">200</span>);<span class="comment">//2ms</span></span><br><span class="line">     … </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS  <span class="comment">//如果需要支持OS.</span></span></span><br><span class="line">u32 reload;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8);<span class="comment">//选择外部时钟  HCLK/8</span></span><br><span class="line">fac_us=SystemCoreClock/<span class="number">8000000</span>;<span class="comment">//为系统时钟的1/8  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS  <span class="comment">//如果需要支持OS.</span></span></span><br><span class="line">reload=SystemCoreClock/<span class="number">8000000</span>;<span class="comment">//每秒钟的计数次数 单位为K   </span></span><br><span class="line">reload*=<span class="number">1000000</span>/delay_ostickspersec;<span class="comment">//根据delay_ostickspersec设定溢出时间</span></span><br><span class="line"><span class="comment">//reload为24位寄存器,最大值:16777216,在72M下,约合1.86s左右</span></span><br><span class="line">fac_ms=<span class="number">1000</span>/delay_ostickspersec;<span class="comment">//代表OS可以延时的最少单位   </span></span><br><span class="line"></span><br><span class="line">SysTick-&gt;CTRL|=SysTick_CTRL_TICKINT_Msk;   <span class="comment">//开启SYSTICK中断</span></span><br><span class="line">SysTick-&gt;LOAD=reload; <span class="comment">//每1/delay_ostickspersec秒中断一次</span></span><br><span class="line">SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk;   <span class="comment">//开启SYSTICK    </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">fac_ms=(u16)fac_us*<span class="number">1000</span>;<span class="comment">//非OS下,代表每个ms需要的systick时钟数   </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> SYSTEM_SUPPORT_OS  <span class="comment">//如果需要支持OS.</span></span></span><br><span class="line"><span class="comment">//延时nus</span></span><br><span class="line"><span class="comment">//nus为要延时的us数.       </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 nus)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 ticks;</span><br><span class="line">u32 told,tnow,tcnt=<span class="number">0</span>;</span><br><span class="line">u32 reload=SysTick-&gt;LOAD;<span class="comment">//LOAD的值     </span></span><br><span class="line">ticks=nus*fac_us; <span class="comment">//需要的节拍数   </span></span><br><span class="line">tcnt=<span class="number">0</span>;</span><br><span class="line">delay_osschedlock();<span class="comment">//阻止OS调度，防止打断us延时</span></span><br><span class="line">told=SysTick-&gt;VAL;        <span class="comment">//刚进入时的计数器值</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">tnow=SysTick-&gt;VAL;</span><br><span class="line"><span class="keyword">if</span>(tnow!=told)</span><br><span class="line">&#123;    </span><br><span class="line"><span class="keyword">if</span>(tnow&lt;told)tcnt+=told-tnow;<span class="comment">//这里注意一下SYSTICK是一个递减的计数器就可以了.</span></span><br><span class="line"><span class="keyword">else</span> tcnt+=reload-tnow+told;    </span><br><span class="line">told=tnow;</span><br><span class="line"><span class="keyword">if</span>(tcnt&gt;=ticks)<span class="keyword">break</span>;<span class="comment">//时间超过/等于要延迟的时间,则退出.</span></span><br><span class="line">&#125;  </span><br><span class="line">&#125;;</span><br><span class="line">delay_osschedunlock();<span class="comment">//恢复OS调度    </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时nms</span></span><br><span class="line"><span class="comment">//nms:要延时的ms数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(delay_osrunning&amp;&amp;delay_osintnesting==<span class="number">0</span>)<span class="comment">//如果OS已经在跑了,并且不是在中断里面(中断里面不能任务调度)    </span></span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">if</span>(nms&gt;=fac_ms)<span class="comment">//延时的时间大于OS的最少时间周期 </span></span><br><span class="line">&#123; </span><br><span class="line">   delay_ostimedly(nms/fac_ms);<span class="comment">//OS延时</span></span><br><span class="line">&#125;</span><br><span class="line">nms%=fac_ms;<span class="comment">//OS已经无法提供这么小的延时了,采用普通方式延时    </span></span><br><span class="line">&#125;</span><br><span class="line">delay_us((u32)(nms*<span class="number">1000</span>));<span class="comment">//普通方式延时  </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> <span class="comment">//不用OS时</span></span></span><br><span class="line"><span class="comment">//延时nus</span></span><br><span class="line"><span class="comment">//nus为要延时的us数.       </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_us</span><span class="params">(u32 nus)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u32 temp;     </span><br><span class="line">SysTick-&gt;LOAD=nus*fac_us; <span class="comment">//时间加载   </span></span><br><span class="line">SysTick-&gt;VAL=<span class="number">0x00</span>;        <span class="comment">//清空计数器</span></span><br><span class="line">SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk ;<span class="comment">//开始倒数  </span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">temp=SysTick-&gt;CTRL;</span><br><span class="line">&#125;<span class="keyword">while</span>((temp&amp;<span class="number">0x01</span>)&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)));<span class="comment">//等待时间到达   </span></span><br><span class="line">SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;<span class="comment">//关闭计数器</span></span><br><span class="line">SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//延时nms</span></span><br><span class="line"><span class="comment">//注意nms的范围</span></span><br><span class="line"><span class="comment">//SysTick-&gt;LOAD为24位寄存器,所以,最大延时为:</span></span><br><span class="line"><span class="comment">//nms&lt;=0xffffff*8*1000/SYSCLK</span></span><br><span class="line"><span class="comment">//SYSCLK单位为Hz,nms单位为ms</span></span><br><span class="line"><span class="comment">//对72M条件下,nms&lt;=1864 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delay_ms</span><span class="params">(u16 nms)</span></span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">u32 temp;   </span><br><span class="line">SysTick-&gt;LOAD=(u32)nms*fac_ms;<span class="comment">//时间加载(SysTick-&gt;LOAD为24bit)</span></span><br><span class="line">SysTick-&gt;VAL =<span class="number">0x00</span>;<span class="comment">//清空计数器</span></span><br><span class="line">SysTick-&gt;CTRL|=SysTick_CTRL_ENABLE_Msk ;<span class="comment">//开始倒数  </span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">temp=SysTick-&gt;CTRL;</span><br><span class="line">&#125;<span class="keyword">while</span>((temp&amp;<span class="number">0x01</span>)&amp;&amp;!(temp&amp;(<span class="number">1</span>&lt;&lt;<span class="number">16</span>)));<span class="comment">//等待时间到达   </span></span><br><span class="line">SysTick-&gt;CTRL&amp;=~SysTick_CTRL_ENABLE_Msk;<span class="comment">//关闭计数器</span></span><br><span class="line">SysTick-&gt;VAL =<span class="number">0X00</span>;       <span class="comment">//清空计数器      </span></span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【STM32】STM32时钟系统和时钟系统初始化函数</title>
      <link href="/MicroController/%E3%80%90STM32%E3%80%91STM32%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F.html"/>
      <url>/MicroController/%E3%80%90STM32%E3%80%91STM32%E6%97%B6%E9%92%9F%E7%B3%BB%E7%BB%9F.html</url>
      
        <content type="html"><![CDATA[<h1 id="时钟系统知识总结"><a href="#时钟系统知识总结" class="headerlink" title="时钟系统知识总结"></a>时钟系统知识总结</h1><ol><li>STM32 有5个时钟源:HSI、HSE、LSI、LSE、PLL。</li></ol><ul><li>HSI是高速内部时钟，RC振荡器，频率为8MHz，精度不高。</li><li>HSE是高速外部时钟，可接石英/陶瓷谐振器，或者接外部时钟源，频率范围为4MHz~16MHz。</li><li>LSI是低速内部时钟，RC振荡器，频率为40kHz，提供低功耗时钟。WDG</li><li>LSE是低速外部时钟，接频率为32.768kHz的石英晶体。RTC </li><li>PLL为锁相环倍频输出，其时钟输入源可选择为HSI/2、HSE或者HSE/2倍频可选择为2~16倍，但是其输出频率最大不得超过72MHz。</li></ul><ol start="2"><li>系统时钟SYSCLK可来源于三个时钟源：       </li></ol><ul><li>HSI振荡器时钟</li><li>HSE振荡器时钟</li><li>PLL时钟</li></ul><ol start="3"><li><p>STM32可以选择一个时钟信号输出到MCO脚(PA8)上，可以选择为PLL<br>输出的2分频、HSI、HSE、或者系统时钟。</p></li><li><p>任何一个外设在使用之前，必须首先使能其相应的时钟。</p></li></ol><p>几个重要的时钟：</p><ul><li>SYSCLK(系统时钟) :</li><li>AHB总线时钟</li><li>APB1总线时钟(低速): 速度最高36MHz</li><li>APB2总线时钟(高速): 速度最高72MHz</li><li>PLL时钟</li></ul><h1 id="RCC相关配置寄存器"><a href="#RCC相关配置寄存器" class="headerlink" title="RCC相关配置寄存器"></a>RCC相关配置寄存器</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __IO <span class="keyword">uint32_t</span> CR;    <span class="comment">//HSI,HSE,CSS,PLL等的使能和就绪标志位 </span></span><br><span class="line">  __IO <span class="keyword">uint32_t</span> CFGR;     <span class="comment">//PLL等的时钟源选择，分频系数设定</span></span><br><span class="line">  __IO <span class="keyword">uint32_t</span> CIR;       <span class="comment">// 清除/使能 时钟就绪中断</span></span><br><span class="line">  __IO <span class="keyword">uint32_t</span> APB2RSTR;  <span class="comment">//APB2线上外设复位寄存器</span></span><br><span class="line">  __IO <span class="keyword">uint32_t</span> APB1RSTR;   <span class="comment">//APB1线上外设复位寄存器</span></span><br><span class="line">  __IO <span class="keyword">uint32_t</span> AHBENR;    <span class="comment">//DMA，SDIO等时钟使能</span></span><br><span class="line">  __IO <span class="keyword">uint32_t</span> APB2ENR;   <span class="comment">//APB2线上外设时钟使能</span></span><br><span class="line">  __IO <span class="keyword">uint32_t</span> APB1ENR;   <span class="comment">//APB1线上外设时钟使能</span></span><br><span class="line">  __IO <span class="keyword">uint32_t</span> BDCR;        <span class="comment">//备份域控制寄存器</span></span><br><span class="line">  __IO <span class="keyword">uint32_t</span> CSR;           <span class="comment">//控制状态寄存器</span></span><br><span class="line">&#125; RCC_TypeDef;</span><br></pre></td></tr></table></figure><h1 id="SystemInit源代码"><a href="#SystemInit源代码" class="headerlink" title="SystemInit源代码"></a>SystemInit源代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SystemInit</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">/* Reset the RCC clock configuration to the default reset state(for debug purpose) */</span></span><br><span class="line">  <span class="comment">/* Set HSION bit */</span></span><br><span class="line">  RCC-&gt;CR |= (<span class="keyword">uint32_t</span>)<span class="number">0x00000001</span>;</span><br><span class="line">  <span class="comment">//或等于，也就是将最低位设置为1，其它位不变</span></span><br><span class="line">  <span class="comment">//将最低位设置为1，HSION：内部高速时钟使能</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STM32F10X_CL</span></span><br><span class="line">  RCC-&gt;CFGR &amp;= (<span class="keyword">uint32_t</span>)<span class="number">0xF8FF0000</span>;</span><br><span class="line">  <span class="comment">//并未定义STM32F10X_CL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  RCC-&gt;CFGR &amp;= (<span class="keyword">uint32_t</span>)<span class="number">0xF0FF0000</span>;</span><br><span class="line">  <span class="comment">//将0-15位置零，将24-27置零</span></span><br><span class="line">  <span class="comment">//查表可知，低四位为零目的是使SW, HPRE, PPRE1, PPRE2, ADCPRE, MCO几个寄存器复位。</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* STM32F10X_CL */</span>   </span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Reset HSEON, CSSON and PLLON bits */</span></span><br><span class="line">  RCC-&gt;CR &amp;= (<span class="keyword">uint32_t</span>)<span class="number">0xFEF6FFFF</span>;</span><br><span class="line">  <span class="comment">//将16-19位与0110运算，也就是16,19位置零</span></span><br><span class="line">  <span class="comment">//将24-27位与1110运算，也就是24位置零</span></span><br><span class="line">  <span class="comment">//查表可知，目的是将HSEON, CSSON and PLLON几个寄存器复位</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset HSEBYP bit */</span></span><br><span class="line">  RCC-&gt;CR &amp;= (<span class="keyword">uint32_t</span>)<span class="number">0xFFFBFFFF</span>;</span><br><span class="line">  <span class="comment">//16-19位为B，也就是1011</span></span><br><span class="line">  <span class="comment">//与运算，也就是将18位置零</span></span><br><span class="line">  <span class="comment">//查表可知，目的是将HSEBYP复位</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */</span></span><br><span class="line">  RCC-&gt;CFGR &amp;= (<span class="keyword">uint32_t</span>)<span class="number">0xFF80FFFF</span>;</span><br><span class="line">  <span class="comment">//16-19位为与运算0000</span></span><br><span class="line">  <span class="comment">//20-23位为与运算1000</span></span><br><span class="line">  <span class="comment">//也就是将16-19位置零，20-23位置零</span></span><br><span class="line">  <span class="comment">//查表可知，目的是将PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE 复位</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> STM32F10X_CL   <span class="comment">//并未定义</span></span></span><br><span class="line">  <span class="comment">/* Reset PLL2ON and PLL3ON bits */</span></span><br><span class="line">  RCC-&gt;CR &amp;= (<span class="keyword">uint32_t</span>)<span class="number">0xEBFFFFFF</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Disable all interrupts and clear pending bits  */</span></span><br><span class="line">  RCC-&gt;CIR = <span class="number">0x00FF0000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset CFGR2 register */</span></span><br><span class="line">  RCC-&gt;CFGR2 = <span class="number">0x00000000</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)</span></span><br><span class="line">  <span class="comment">/* Disable all interrupts and clear pending bits  */</span></span><br><span class="line">  RCC-&gt;CIR = <span class="number">0x009F0000</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Reset CFGR2 register */</span></span><br><span class="line">  RCC-&gt;CFGR2 = <span class="number">0x00000000</span>;      </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  <span class="comment">/* Disable all interrupts and clear pending bits  */</span></span><br><span class="line">  RCC-&gt;CIR = <span class="number">0x009F0000</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* STM32F10X_CL */</span></span></span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)           <span class="comment">//定义了STM32F10X_HD</span></span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> DATA_IN_ExtSRAM</span></span><br><span class="line">    SystemInit_ExtMemCtl(); </span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* DATA_IN_ExtSRAM */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */</span></span><br><span class="line">  <span class="comment">/* Configure the Flash Latency cycles and enable prefetch buffer */</span></span><br><span class="line">  SetSysClock();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> VECT_TAB_SRAM</span></span><br><span class="line">  SCB-&gt;VTOR = SRAM_BASE | VECT_TAB_OFFSET; <span class="comment">/* Vector Table Relocation in Internal SRAM. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">  SCB-&gt;VTOR = FLASH_BASE | VECT_TAB_OFFSET; <span class="comment">/* Vector Table Relocation in Internal FLASH. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetSysClock</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SYSCLK_FREQ_HSE</span></span><br><span class="line">  SetSysClockToHSE();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined SYSCLK_FREQ_24MHz</span></span><br><span class="line">  SetSysClockTo24();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined SYSCLK_FREQ_36MHz</span></span><br><span class="line">  SetSysClockTo36();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined SYSCLK_FREQ_48MHz</span></span><br><span class="line">  SetSysClockTo48();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined SYSCLK_FREQ_56MHz</span></span><br><span class="line">  SetSysClockTo56();  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined SYSCLK_FREQ_72MHz</span></span><br><span class="line">  SetSysClockTo72();</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetSysClockTo72</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __IO <span class="keyword">uint32_t</span> StartUpCounter = <span class="number">0</span>, HSEStatus = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/</span>    </span><br><span class="line">  <span class="comment">/* Enable HSE */</span>    </span><br><span class="line">  RCC-&gt;CR |= ((<span class="keyword">uint32_t</span>)RCC_CR_HSEON);</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* Wait till HSE is ready and if Time out is reached exit */</span></span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    HSEStatus = RCC-&gt;CR &amp; RCC_CR_HSERDY;</span><br><span class="line">    StartUpCounter++;  </span><br><span class="line">  &#125; <span class="keyword">while</span>((HSEStatus == <span class="number">0</span>) &amp;&amp; (StartUpCounter != HSE_STARTUP_TIMEOUT));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ((RCC-&gt;CR &amp; RCC_CR_HSERDY) != RESET)</span><br><span class="line">  &#123;</span><br><span class="line">    HSEStatus = (<span class="keyword">uint32_t</span>)<span class="number">0x01</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    HSEStatus = (<span class="keyword">uint32_t</span>)<span class="number">0x00</span>;</span><br><span class="line">  &#125;  </span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (HSEStatus == (<span class="keyword">uint32_t</span>)<span class="number">0x01</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* Enable Prefetch Buffer */</span></span><br><span class="line">    FLASH-&gt;ACR |= FLASH_ACR_PRFTBE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Flash 2 wait state */</span></span><br><span class="line">    FLASH-&gt;ACR &amp;= (<span class="keyword">uint32_t</span>)((<span class="keyword">uint32_t</span>)~FLASH_ACR_LATENCY);</span><br><span class="line">    FLASH-&gt;ACR |= (<span class="keyword">uint32_t</span>)FLASH_ACR_LATENCY_2;    </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* HCLK = SYSCLK */</span></span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)RCC_CFGR_HPRE_DIV1;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">/* PCLK2 = HCLK */</span></span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)RCC_CFGR_PPRE2_DIV1;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* PCLK1 = HCLK */</span></span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)RCC_CFGR_PPRE1_DIV2;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> STM32F10X_CL</span></span><br><span class="line">    <span class="comment">/* Configure PLLs ------------------------------------------------------*/</span></span><br><span class="line">    <span class="comment">/* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */</span></span><br><span class="line">    <span class="comment">/* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */</span></span><br><span class="line">        </span><br><span class="line">    RCC-&gt;CFGR2 &amp;= (<span class="keyword">uint32_t</span>)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |</span><br><span class="line">                              RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);</span><br><span class="line">    RCC-&gt;CFGR2 |= (<span class="keyword">uint32_t</span>)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |</span><br><span class="line">                             RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/* Enable PLL2 */</span></span><br><span class="line">    RCC-&gt;CR |= RCC_CR_PLL2ON;</span><br><span class="line">    <span class="comment">/* Wait till PLL2 is ready */</span></span><br><span class="line">    <span class="keyword">while</span>((RCC-&gt;CR &amp; RCC_CR_PLL2RDY) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">/* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */</span> </span><br><span class="line">    RCC-&gt;CFGR &amp;= (<span class="keyword">uint32_t</span>)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);</span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | </span><br><span class="line">                            RCC_CFGR_PLLMULL9); </span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span>    </span></span><br><span class="line">    <span class="comment">/*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */</span></span><br><span class="line">    RCC-&gt;CFGR &amp;= (<span class="keyword">uint32_t</span>)((<span class="keyword">uint32_t</span>)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |</span><br><span class="line">                                        RCC_CFGR_PLLMULL));</span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* STM32F10X_CL */</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Enable PLL */</span></span><br><span class="line">    RCC-&gt;CR |= RCC_CR_PLLON;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wait till PLL is ready */</span></span><br><span class="line">    <span class="keyword">while</span>((RCC-&gt;CR &amp; RCC_CR_PLLRDY) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Select PLL as system clock source */</span></span><br><span class="line">    RCC-&gt;CFGR &amp;= (<span class="keyword">uint32_t</span>)((<span class="keyword">uint32_t</span>)~(RCC_CFGR_SW));</span><br><span class="line">    RCC-&gt;CFGR |= (<span class="keyword">uint32_t</span>)RCC_CFGR_SW_PLL;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Wait till PLL is used as system clock source */</span></span><br><span class="line">    <span class="keyword">while</span> ((RCC-&gt;CFGR &amp; (<span class="keyword">uint32_t</span>)RCC_CFGR_SWS) != (<span class="keyword">uint32_t</span>)<span class="number">0x08</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123; <span class="comment">/* If HSE fails to start-up, the application will have wrong clock </span></span><br><span class="line"><span class="comment">         configuration. User can add here some code to deal with this error */</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C】struct和typedef struct</title>
      <link href="/MicroController/%E3%80%90C%E3%80%91struct%E5%92%8Ctypedef%20struct.html"/>
      <url>/MicroController/%E3%80%90C%E3%80%91struct%E5%92%8Ctypedef%20struct.html</url>
      
        <content type="html"><![CDATA[<h1 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h1><p>注意在C和C++里不同</p><p>在C中定义一个结构体类型要用typedef:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">　　　　&#123;</span></span><br><span class="line">　　　　 <span class="keyword">int</span> a;</span><br><span class="line">　　　　&#125;Stu;</span><br></pre></td></tr></table></figure><p>于是在声明变量的时候就可：<code>Stu stu1</code> (如果没有typedef就必须用struct Student stu1;来声明)</p><p>这里的Stu实际上就是struct Student的别名。<code>Stu==struct Student</code><br>　　　　<br>另外这里也可以不写Student（于是也不能struct Student stu1;了，必须是Stu stu1;）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">　　　 &#123;</span></span><br><span class="line">　　　　 <span class="keyword">int</span> a;</span><br><span class="line">　　　　&#125;Stu;</span><br></pre></td></tr></table></figure><p>但在c++里很简单，直接</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">　　　　&#123;</span></span><br><span class="line">　　　　 <span class="keyword">int</span> a;</span><br><span class="line">　　　　&#125;;</span><br></pre></td></tr></table></figure><p>于是就定义了结构体类型Student，声明变量时直接<code>Student stu2</code></p><h1 id="其次"><a href="#其次" class="headerlink" title="其次"></a>其次</h1><p>　　　　<br>在c++中如果用typedef的话，又会造成区别：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">&#125;stu1;          <span class="comment">//stu1是一个变量</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Student2</span></span></span><br><span class="line"><span class="class">　　　　&#123;</span></span><br><span class="line">　　　　    <span class="keyword">int</span> a;</span><br><span class="line">　　　　&#125;stu2;   <span class="comment">//stu2是一个结构体类型=struct Student</span></span><br></pre></td></tr></table></figure><p>使用时可以直接访问<code>stu1.a</code>，</p><p>但是stu2则必须先<code>stu2 s2</code>;然后<code>s2.a=10</code>;</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>　typedef struct和struct的区别：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMyStruct</span></span></span><br><span class="line"><span class="class">　　　　&#123;</span> </span><br><span class="line">　　　　　<span class="keyword">int</span> iNum;</span><br><span class="line">　　　　　<span class="keyword">long</span> lLength;</span><br><span class="line">　　　　&#125; MyStruct;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的tagMyStruct是标识符，</span></span><br><span class="line"><span class="comment">//MyStruct是变量类型（相当于（int,char等））</span></span><br></pre></td></tr></table></figure><p>这语句实际上完成两个操作：</p><ol><li>定义一个新的结构类型</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tagMyStruct</span></span></span><br><span class="line"><span class="class">　　　　&#123;</span>　　 </span><br><span class="line">　　　　　<span class="keyword">int</span> iNum; </span><br><span class="line">　　　　　<span class="keyword">long</span> lLength; </span><br><span class="line">　　　　&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>typedef为这个新的结构起了一个名字，叫MyStruct</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　<span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagMyStruct</span> <span class="title">MyStruct</span>;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct tagMyStruct</span><br><span class="line">　　　　&#123; </span><br><span class="line">　　　　　int iNum;</span><br><span class="line">　　　　　long lLength;</span><br><span class="line">　　　　&#125; MyStruct;</span><br></pre></td></tr></table></figure><p>在C中，这个申明后申请结构变量的方法有两种：</p><ul><li><p>struct tagMyStruct 变量名</p></li><li><p>MyStruct 变量名</p></li></ul><p>在c++中可以有</p><ul><li><p>struct tagMyStruct 变量名</p></li><li><p>MyStruct 变量名</p></li><li><p>tagMyStruct 变量名</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C】从GPIO_Init引发的关于C的研究</title>
      <link href="/MicroController/%E3%80%90C%E3%80%91%E4%BB%8EGPIO_Init%E5%BC%95%E5%8F%91%E7%9A%84%E5%85%B3%E4%BA%8EC%E7%9A%84%E7%A0%94%E7%A9%B6.html"/>
      <url>/MicroController/%E3%80%90C%E3%80%91%E4%BB%8EGPIO_Init%E5%BC%95%E5%8F%91%E7%9A%84%E5%85%B3%E4%BA%8EC%E7%9A%84%E7%A0%94%E7%A9%B6.html</url>
      
        <content type="html"><![CDATA[<p>在我看下面这段代码对<code>GPIO_Init</code>有一些不理解</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BEEP_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> GPIO_InitTypeDef  GPIO_InitStructure;     <span class="comment">//声明变量</span></span><br><span class="line"> </span><br><span class="line"> RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8; </span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  </span><br><span class="line"> GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; </span><br><span class="line"> </span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure);  <span class="comment">//不理解</span></span><br><span class="line"> GPIO_ResetBits(GPIOB,GPIO_Pin_8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先看一下<code>GPIO_Init</code>的语法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_Init</span><span class="params">(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)</span></span>;</span><br></pre></td></tr></table></figure><p>我产生了几个疑问：</p><ol><li><code>GPIO_TypeDef* GPIOx</code>是什么意思？</li><li>为什么<code>&amp;GPIO_InitStructure</code>要用指针类型？</li><li>为什么<code>GPIOB</code>不用使用指针类型？</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里定义了一个结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  u16 GPIO_Pin;</span><br><span class="line">  GPIOSpeed_TypeDef GPIO_Speed;</span><br><span class="line">  GPIOMode_TypeDef GPIO_Mode;</span><br><span class="line">&#125;GPIO_InitTypeDef;     <span class="comment">//代码里用它来声明变量</span></span><br></pre></td></tr></table></figure><blockquote><p>怎么理解呢？<br>int 是 类型， i 是变量<br>GPIO_InitTypeDef GPIO_InitStructure;<br>同样，GPIO_InitTypeDef 是类型，GPIO_InitStructure 是变量！</p></blockquote><blockquote><p>C语言里面没有这种GPIO_InitTypeDef 类型 ，所以要自己 通过 typedef 来定义这种类型。</p></blockquote><p>引用自一个知乎问题，<a href="https://www.zhihu.com/question/21136956" target="_blank" rel="noopener">链接</a></p><blockquote><p>一般int* p表示p类型是一个int型指针，int *p表示p是一个指针，指向的类型是int。</p></blockquote><p>也就是<code>GPIO_TypeDef* GPIOx</code>等同于<code>GPIO_TypeDef *GPIOx</code>，而且我之前对于<code>init *p</code>也有误解，我以为这是在声明一个<code>init</code>常量，我当时误认<code>*</code>已经把地址取值了，实则是造成了误会，它是定义了一个指向<code>init</code>类型的指针变量，也就是<code>p</code>，所以从这点考虑，<code>init* p</code>或许表意更清楚一点！</p><p>终于搞懂了！！！</p><p>第二个问题也就好解释了，因为<code>GPIO_Init</code>就是要求输入两个指针变量</p><p>第三个问题</p><blockquote><p>GPIOB本身就是一个指针类型！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【STM32】按键输入实验</title>
      <link href="/MicroController/%E3%80%90STM32%E3%80%91%E6%8C%89%E9%94%AE%E8%BE%93%E5%85%A5%E5%AE%9E%E9%AA%8C.html"/>
      <url>/MicroController/%E3%80%90STM32%E3%80%91%E6%8C%89%E9%94%AE%E8%BE%93%E5%85%A5%E5%AE%9E%E9%AA%8C.html</url>
      
        <content type="html"><![CDATA[<h1 id="GPIO操作复习"><a href="#GPIO操作复习" class="headerlink" title="GPIO操作复习"></a>GPIO操作复习</h1><ul><li>读取IO口输入电平调用库函数为</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint8_t</span> GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, <span class="keyword">uint16_t</span> GPIO_Pin);</span><br></pre></td></tr></table></figure><ul><li>读取IO口输入电平操作寄存器为</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GPIOx_IDR:端口输入寄存器</span><br></pre></td></tr></table></figure><ul><li>使用位带操作读取IO口输入电平：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PEin(<span class="number">4</span>)          <span class="comment">//读取GPIOE.4口电平</span></span><br><span class="line">PEin(n)          <span class="comment">//读取GPIOE.n口电平</span></span><br></pre></td></tr></table></figure><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul><li>使能按键对应IO口时钟。调用函数：<code>RCC_APB2PeriphClockCmd()</code></li><li>初始化IO模式：上拉/下拉输入。调用函数：<code>GPIO_Init()</code></li><li>扫描IO口电平（库函数/寄存器/位操作）</li></ul><h1 id="硬件连接"><a href="#硬件连接" class="headerlink" title="硬件连接"></a>硬件连接</h1><p><img src="http://wx3.sinaimg.cn/large/006BuM4Jgy1g607sfu2jyj30ku059q4q.jpg" alt="key"></p><p>所以需要打开<code>PA</code>,<code>PE</code>的时钟，并打开<code>PA0</code>; <code>PE2,3,4</code>;</p><p>而且，对于KEY0，一端连接地，另一端连接PE4的IO口，KEY1，KEY2同理，所以当案件按下的时候，IO口坚持得到低电平。WK_UP正好相反。</p><h1 id="按键扫描思路"><a href="#按键扫描思路" class="headerlink" title="按键扫描思路"></a>按键扫描思路</h1><h2 id="扫描的两种类型"><a href="#扫描的两种类型" class="headerlink" title="扫描的两种类型"></a>扫描的两种类型</h2><ul><li>支持连续监测，比如遥控器选台的前进按钮，一直按会一直跳台</li><li>不支持连续监测，比如遥控器的关机/开机按钮，一直按但只会执行一次操作</li></ul><h2 id="引入C语言关键字：static"><a href="#引入C语言关键字：static" class="headerlink" title="引入C语言关键字：static"></a>引入C语言关键字：<code>static</code></h2><ul><li><p>Static申明的<strong>局部变量</strong>，存储在静态存储区。</p></li><li><p>它在函数调用结束之后，<strong>不会被释放</strong>。它的值会一直保留下来。</p></li><li><p>所以可以说static申明的局部变量，具有<strong>记忆功能</strong>。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//利用两个函数说明问题</span></span><br><span class="line"><span class="comment">//1. 用int</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValue</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>  flag=<span class="number">0</span>;</span><br><span class="line">  flag++;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 用static</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getValue</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">int</span>  flag=<span class="number">0</span>; </span><br><span class="line">  <span class="comment">/*初始化函数只会在第一次使用中运行，第二次调用getvalue函数就会直接跳到下面的语句，不会再次执行。*/</span></span><br><span class="line">  flag++;</span><br><span class="line">  <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实际代码操作尝试！"><a href="#实际代码操作尝试！" class="headerlink" title="实际代码操作尝试！"></a>实际代码操作尝试！</h3><h4 id="第一次"><a href="#第一次" class="headerlink" title="第一次"></a>第一次</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*demo1，将循环体放在两个getvalue中*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getvalue1</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getvalue2</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        b++;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c = getvalue1();</span><br><span class="line">    <span class="keyword">int</span> d = getvalue2();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d"</span>, c, d);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译报<code>warning: control reaches end of non-void function</code></p><p>编译结果为<code>“1,1”</code>，结果不对！</p><p>分析原因: </p><ul><li>C语言必须要有返回值，例如return 0，或者return a等等</li><li>我将两个getvalue函数中的return写在了循环体里，并不会返回！</li><li>至于为什么出现了错误的结果，根据debug发现，并没有执行循环，而是只执行了一次，原因在于第一次就return了！</li></ul><h4 id="第二次"><a href="#第二次" class="headerlink" title="第二次"></a>第二次</h4><p>进行如下修改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将return修改到循环体之外</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getvalue1</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        a++;      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getvalue2</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        b++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c = getvalue1();</span><br><span class="line">    <span class="keyword">int</span> d = getvalue2();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d"</span>, c, d);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译出现错误：<br><code>identifier &quot;a&quot; is undefined；identifier &quot;b&quot; is undefined；</code></p><p>原因：未定义变量a和b！</p><p>我的<code>int a</code>,<code>static int b</code>,都是在循环体里定义的，依然在函数中生效</p><h4 id="第三次"><a href="#第三次" class="headerlink" title="第三次"></a>第三次</h4><p>继续修改！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getvalue1</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;                           <span class="comment">//添加定义</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        a++;      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getvalue2</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> b;                           <span class="comment">//添加定义</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        b++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c = getvalue1();</span><br><span class="line">    <span class="keyword">int</span> d = getvalue2();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d"</span>, c, d);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译未出现错误，但结果为<code>“0,1”</code>，结果不对</p><font color="#dd0000">分析原因：暂时未知，怀疑是循环体执行的`b`并没有并没有返回出来</font><br><h4 id="第四次"><a href="#第四次" class="headerlink" title="第四次"></a>第四次</h4><p>继续修改！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将循环体放在main中，而getvalue函数不执行循环功能</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getvalue1</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getvalue2</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    b++;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c,d;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> c = getvalue1();</span><br><span class="line">        <span class="keyword">int</span> d = getvalue2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d"</span>, c, d);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果仍然不对…<br>得到的结果为：<code>7349584, 0</code></p><p>原因重复定义？一个变量只能被定义一次！</p><p>一个函数外面对变量进行了定义，循环体里就不用定义了。static可能是个例外…</p><h4 id="第五次"><a href="#第五次" class="headerlink" title="第五次"></a>第五次</h4><p>最终修改版本：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getvalue1</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getvalue2</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    b++;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &gt;<span class="number">0</span>; i--)&#123;</span><br><span class="line">        a = getvalue1();</span><br><span class="line">        b = getvalue2();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d, %d"</span>, a, b);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果正确，得到<code>“1,10”</code>!!</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>问题在于C语言基础不牢，关于变量定义范围还需要进行复习！！</p><h2 id="两种扫描的具体思路"><a href="#两种扫描的具体思路" class="headerlink" title="两种扫描的具体思路"></a>两种扫描的具体思路</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//支持连续按</span></span><br><span class="line"><span class="comment">//代码比较好理解</span></span><br><span class="line"><span class="function">u8 <span class="title">KEY_Scan</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(KEY按下）</span><br><span class="line">    &#123;</span><br><span class="line">          delay_ms(<span class="number">10</span>)；<span class="comment">//延时10-20ms，防抖。</span></span><br><span class="line">          <span class="keyword">if</span>(KEY确实按下)</span><br><span class="line">           &#123;</span><br><span class="line">              <span class="keyword">return</span> KEY_Value；</span><br><span class="line">            &#125;</span><br><span class="line">         <span class="keyword">return</span> 无效值；</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不支持连续按，按一次就是一次</span></span><br><span class="line"><span class="comment">//代码稍显复杂，比较巧妙</span></span><br><span class="line"><span class="function">u8 <span class="title">KEY_Scan</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> u8 key_up=<span class="number">1</span>;      <span class="comment">//引入局部变量key_up</span></span><br><span class="line">    <span class="keyword">if</span>（key_up &amp;&amp;  KEY按下）</span><br><span class="line">    &#123;</span><br><span class="line">       delay_ms(<span class="number">10</span>);         <span class="comment">//延时，防抖</span></span><br><span class="line">       key_up=<span class="number">0</span>;             <span class="comment">//标记这次key已经按下</span></span><br><span class="line">       <span class="keyword">if</span>(KEY确实按下)</span><br><span class="line">         &#123;</span><br><span class="line">          <span class="keyword">return</span> KEY_VALUE;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(KEY没有按下)  key_up=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">return</span> 没有按下</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按键扫描二合一！</span></span><br><span class="line"><span class="comment">//函数需要给一个值</span></span><br><span class="line"><span class="function">u8 <span class="title">KEY_Scan</span><span class="params">(u8 mode)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">     <span class="keyword">static</span> u8 key_up=<span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span>(mode==<span class="number">1</span>) key_up=<span class="number">1</span>;<span class="comment">//支持连续按</span></span><br><span class="line">      <span class="keyword">if</span>（key_up &amp;&amp;  KEY按下）</span><br><span class="line">      &#123;</span><br><span class="line">        delay_ms(<span class="number">10</span>);<span class="comment">//延时，防抖</span></span><br><span class="line">        key_up=<span class="number">0</span>;<span class="comment">//标记这次key已经按下</span></span><br><span class="line">        <span class="keyword">if</span>(KEY确实按下)</span><br><span class="line">          &#123;</span><br><span class="line">           <span class="keyword">return</span> KEY_VALUE;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(KEY没有按下)  key_up=<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">return</span> 没有按下</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//key.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __KEY_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __KEY_H </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY0  GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_4)  <span class="comment">//读取按键0</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY1  GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_3)  <span class="comment">//读取按键1</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY2  GPIO_ReadInputDataBit(GPIOE,GPIO_Pin_2)  <span class="comment">//读取按键2 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WK_UP   GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_0)<span class="comment">//读取按键3(WK_UP) </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY0_PRES 1<span class="comment">//KEY0按下</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY1_PRES2<span class="comment">//KEY1按下</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> KEY2_PRES3<span class="comment">//KEY2按下</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WKUP_PRES   4<span class="comment">//KEY_UP按下(即WK_UP/KEY_UP)</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KEY_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">//IO初始化</span></span><br><span class="line"><span class="function">u8 <span class="title">KEY_Scan</span><span class="params">(u8)</span></span>;   <span class="comment">//按键扫描函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//key.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"key.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">KEY_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOE,ENABLE); <span class="comment">//使能PORTA,PORTE时钟</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_4;          <span class="comment">//KEY0-KEY2</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;                             <span class="comment">//设置成上拉输入</span></span><br><span class="line">GPIO_Init(GPIOE, &amp;GPIO_InitStructure);                                    <span class="comment">//初始化GPIOE2,3,4</span></span><br><span class="line"><span class="comment">//初始化 WK_UP--&gt;GPIOA.0  下拉输入</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin  = GPIO_Pin_0;</span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPD;                             <span class="comment">//PA0设置成输入，默认下拉</span></span><br><span class="line">GPIO_Init(GPIOA, &amp;GPIO_InitStructure);                                    <span class="comment">//初始化GPIOA.0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按键处理函数，用来返回按键值</span></span><br><span class="line"><span class="comment">//mode:0,不支持连续按;1,支持连续按;</span></span><br><span class="line"><span class="comment">//各种返回值代表的情况：</span></span><br><span class="line"><span class="comment">//0，没有任何按键按下</span></span><br><span class="line"><span class="comment">//1，KEY0按下</span></span><br><span class="line"><span class="comment">//2，KEY1按下</span></span><br><span class="line"><span class="comment">//3，KEY2按下 </span></span><br><span class="line"><span class="comment">//4，KEY3按下 WK_UP</span></span><br><span class="line"><span class="function">u8 <span class="title">KEY_Scan</span><span class="params">(u8 mode)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="keyword">static</span> u8 key_up=<span class="number">1</span>;<span class="comment">//按键按松开标志</span></span><br><span class="line"><span class="keyword">if</span>(mode)key_up=<span class="number">1</span>;  <span class="comment">//支持连按  </span></span><br><span class="line"><span class="keyword">if</span>(key_up&amp;&amp;(KEY0==<span class="number">0</span>||KEY1==<span class="number">0</span>||KEY2==<span class="number">0</span>||WK_UP==<span class="number">1</span>)) <span class="comment">// if条件句判读是否有按键按下，有则执行判断语句</span></span><br><span class="line">&#123;</span><br><span class="line">delay_ms(<span class="number">10</span>);    <span class="comment">//去抖动 </span></span><br><span class="line">key_up=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(KEY0==<span class="number">0</span>)<span class="keyword">return</span> KEY0_PRES;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(KEY1==<span class="number">0</span>)<span class="keyword">return</span> KEY1_PRES;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(KEY2==<span class="number">0</span>)<span class="keyword">return</span> KEY2_PRES;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(WK_UP==<span class="number">1</span>)<span class="keyword">return</span> WKUP_PRES;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(KEY0==<span class="number">1</span>&amp;&amp;KEY1==<span class="number">1</span>&amp;&amp;KEY2==<span class="number">1</span>&amp;&amp;WK_UP==<span class="number">0</span>)key_up=<span class="number">1</span>;     </span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;          <span class="comment">// 无按键按下</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beep.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"key.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sys.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">u8 key=<span class="number">0</span>;</span><br><span class="line">delay_init();      <span class="comment">//延时函数初始化  </span></span><br><span class="line"> LED_Init();      <span class="comment">//LED端口初始化</span></span><br><span class="line">KEY_Init();           <span class="comment">//初始化与按键连接的硬件接口</span></span><br><span class="line">beep_init();         <span class="comment">//初始化蜂鸣器端口</span></span><br><span class="line">LED0 = <span class="number">0</span>;    <span class="comment">//先点亮红灯</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"> key = KEY_Scan(<span class="number">0</span>);<span class="comment">//得到键值</span></span><br><span class="line">   <span class="keyword">if</span>(key)</span><br><span class="line">&#123;   </span><br><span class="line"><span class="keyword">switch</span>(key)</span><br><span class="line">&#123; </span><br><span class="line"><span class="keyword">case</span> WKUP_PRES:<span class="comment">//控制蜂鸣器</span></span><br><span class="line">BEEP = !BEEP; <span class="comment">//取反，则蜂鸣器不叫</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KEY2_PRES:<span class="comment">//控制LED0翻转</span></span><br><span class="line">LED0 = !LED0;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KEY1_PRES:<span class="comment">//控制LED1翻转 </span></span><br><span class="line">LED1 = !LED1;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> KEY0_PRES:<span class="comment">//同时控制LED0,LED1翻转 </span></span><br><span class="line">LED0 = !LED0;</span><br><span class="line">LED1 = !LED1;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> delay_ms(<span class="number">10</span>); </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用VSCode写博客</title>
      <link href="/Blog/%E4%BD%BF%E7%94%A8VScode%E5%86%99%E5%8D%9A%E5%AE%A2.html"/>
      <url>/Blog/%E4%BD%BF%E7%94%A8VScode%E5%86%99%E5%8D%9A%E5%AE%A2.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用原因"><a href="#使用原因" class="headerlink" title="使用原因"></a>使用原因</h1><p>偶然之间看到一篇文章推荐使用VSCode，对于它我也是早有耳闻，一个开源的代码编辑器，但是之前觉得麻烦，觉得自己已经有了Visual Studio 2017就没必要再下一个代码编辑器了，当时以为VSCode不带有编译功能。</p><p>昨晚没事干，就下了个尝试一下啊，果然耳目一新，觉得从颜值也好，使用上也好都很舒服，但在配置的时候也遇到了问题，研究了好久才终于解决，特此记录！</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ul><li>从官网安装VSCode</li><li>安装MinGW64,并将bin文件添加到Path路径中</li><li>安装插件</li><li>成功运行代码！</li></ul><h1 id="具体过程"><a href="#具体过程" class="headerlink" title="具体过程"></a>具体过程</h1><h2 id="从官网安装VSCode"><a href="#从官网安装VSCode" class="headerlink" title="从官网安装VSCode"></a>从官网安装VSCode</h2><p>过程比较简单，从Google搜索VSCode进入官方网站，下载Windows的版本，运行即可。</p><h2 id="安装MinGW64"><a href="#安装MinGW64" class="headerlink" title="安装MinGW64"></a>安装MinGW64</h2><p>由于想在VSCode里跑C代码，最开始下了个C/C++的扩展程序，以为就可以用<code>Fn+F5</code>正常运行，实则不然，遇到报错！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">提示这个内容：lauch:program does not exist</span><br></pre></td></tr></table></figure><p>并要求我修改<code>launch.json</code>文件，可是我怎么修改也不管用…<br>逐渐开始进入崩溃状态，想要直接写在这**的VSCode…<br>可是作为一个颜控的我沉迷于VSCode的颜值无法自拔，决定再试试…</p><p>最终发现问题出现在没有安装MinGW64无法调试，于是搜索教程，前往官网下载，并将bin文件的目录添加到<code>path</code>路径中去。</p><p>并最终用<code>gcc -v</code>测试是否安装成功，要注意在<code>cmd</code>里测试，不要像我一样，在<code>cmder</code>里怎么测试都不成功…</p><p>安装具体教程点击这个<a href="https://www.cnblogs.com/findumars/p/8289454.html" target="_blank" rel="noopener">链接</a></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>VSCode不安装插件是没有灵魂的…</p><p>我目前还不是很懂，也只是安装了一下几个插件</p><ul><li>C/C++</li><li>C++ Intellisense</li><li>Chinese Language</li><li>Code Runner</li><li>Seti-theme</li></ul><h2 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h2><p>最终用配置好的环境跑了一下<code>hello，world</code>成功编译！<br><font color="#006600"></font></p><h2 id="问题补充（修改于19-8-14）"><a href="#问题补充（修改于19-8-14）" class="headerlink" title="问题补充（修改于19.8.14）"></a>问题补充（修改于19.8.14）</h2><p>再次出现问题！之前成功编译只是通过了代码右上角的“播放”按键，也就是插件<code>Code Runner</code>，然而<code>F5</code>依然无法通过！</p><p>继续查阅资料，查到一篇比较详细的教程，<a href="https://blog.csdn.net/bat67/article/details/76095813#commentBox" target="_blank" rel="noopener">地址请点击</a></p><p>简单来讲就是还要修改<code>.vscode</code>文件夹里的<code>launch.json</code>和<code>tasks.json</code>文件。</p><p>而我是将<code>launch.json</code>修改为，其中<code>gdb.exe</code>的路径需要自己进行修改一下<br><br> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"0.2.0"</span>,  </span><br><span class="line">    <span class="string">"configurations"</span>: [  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"(gdb) Launch"</span>, <span class="comment">// 配置名称，将会在启动配置的下拉菜单中显示  </span></span><br><span class="line">            <span class="string">"type"</span>: <span class="string">"cppdbg"</span>,       <span class="comment">// 配置类型，这里只能为cppdbg  </span></span><br><span class="line">            <span class="string">"request"</span>: <span class="string">"launch"</span>,    <span class="comment">// 请求配置类型，可以为launch（启动）或attach（附加）  </span></span><br><span class="line">            <span class="string">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;.exe"</span>,<span class="comment">// 将要进行调试的程序的路径  </span></span><br><span class="line">            <span class="string">"args"</span>: [],             <span class="comment">// 程序调试时传递给程序的命令行参数，一般设为空即可  </span></span><br><span class="line">            <span class="string">"stopAtEntry"</span>: <span class="keyword">false</span>,   <span class="comment">// 设为true时程序将暂停在程序入口处，一般设置为false  </span></span><br><span class="line">            <span class="string">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>, <span class="comment">// 调试程序时的工作目录，一般为$&#123;workspaceFolder&#125;即代码所在目录  </span></span><br><span class="line">            <span class="string">"environment"</span>: [],  </span><br><span class="line">            <span class="string">"externalConsole"</span>: <span class="keyword">true</span>, <span class="comment">// 调试时是否显示控制台窗口，一般设置为true显示控制台  </span></span><br><span class="line">            <span class="string">"MIMode"</span>: <span class="string">"gdb"</span>,  </span><br><span class="line">            <span class="string">"miDebuggerPath"</span>: <span class="string">"D:\\MinGW64\\mingw64\\bin\\gdb.exe"</span>, <span class="comment">// miDebugger的路径，注意这里要与MinGw的路径对应  </span></span><br><span class="line">            <span class="string">"preLaunchTask"</span>: <span class="string">"g++"</span>, <span class="comment">// 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc  </span></span><br><span class="line">            <span class="string">"setupCommands"</span>: [  </span><br><span class="line">                &#123;   </span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,  </span><br><span class="line">                    <span class="string">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,  </span><br><span class="line">                    <span class="string">"ignoreFailures"</span>: <span class="keyword">true</span>  </span><br><span class="line">                &#125;  </span><br><span class="line">            ]  </span><br><span class="line">        &#125;  </span><br><span class="line">    ]  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>tasks.json</code>修改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"version"</span>: <span class="string">"2.0.0"</span>,</span><br><span class="line">    <span class="string">"command"</span>: <span class="string">"g++"</span>,</span><br><span class="line">    <span class="string">"args"</span>: [<span class="string">"-g"</span>,<span class="string">"$&#123;file&#125;"</span>,<span class="string">"-o"</span>,<span class="string">"$&#123;fileBasenameNoExtension&#125;.exe"</span>],    <span class="comment">// 编译命令参数</span></span><br><span class="line">    <span class="string">"problemMatcher"</span>: &#123;</span><br><span class="line">        <span class="string">"owner"</span>: <span class="string">"cpp"</span>,</span><br><span class="line">        <span class="string">"fileLocation"</span>: [<span class="string">"relative"</span>, <span class="string">"$&#123;workspaceFolder&#125;"</span>],</span><br><span class="line">        <span class="string">"pattern"</span>: &#123;</span><br><span class="line">            <span class="string">"regexp"</span>: <span class="string">"^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$"</span>,</span><br><span class="line">            <span class="string">"file"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"line"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">"column"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">"severity"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">"message"</span>: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终实现F5调试"><a href="#最终实现F5调试" class="headerlink" title="最终实现F5调试"></a>最终实现<code>F5</code>调试</h2><p>并且可以实现断点debug等功能</p><h1 id="使用VSCode编辑博客"><a href="#使用VSCode编辑博客" class="headerlink" title="使用VSCode编辑博客"></a>使用VSCode编辑博客</h1><p>VSCode让我比较喜欢的一点是在于可以直接打开文件夹，并且继承了终端处理，git等，很多功能我还没有发掘出来，之后会深度体验一下VSCode！</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VScode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【STM32】手把手写跑马灯实验</title>
      <link href="/MicroController/%E3%80%90STM32%E3%80%91%E6%89%8B%E6%8A%8A%E6%89%8B%E5%86%99%E8%B7%91%E9%A9%AC%E7%81%AF%E5%AE%9E%E9%AA%8C.html"/>
      <url>/MicroController/%E3%80%90STM32%E3%80%91%E6%89%8B%E6%8A%8A%E6%89%8B%E5%86%99%E8%B7%91%E9%A9%AC%E7%81%AF%E5%AE%9E%E9%AA%8C.html</url>
      
        <content type="html"><![CDATA[<h1 id="库函数版本"><a href="#库函数版本" class="headerlink" title="库函数版本"></a>库函数版本</h1><h2 id="回顾GPIO基础知识"><a href="#回顾GPIO基础知识" class="headerlink" title="回顾GPIO基础知识"></a>回顾GPIO基础知识</h2><h3 id="4种输入模式："><a href="#4种输入模式：" class="headerlink" title="4种输入模式："></a>4种输入模式：</h3><ul><li>输入浮空</li><li>输入上拉</li><li>输入下拉</li><li>模拟输入</li></ul><h3 id="4种输出模式："><a href="#4种输出模式：" class="headerlink" title="4种输出模式："></a>4种输出模式：</h3><ul><li>开漏输出</li><li>开漏复用功能</li><li>推挽式输出</li><li>推挽式复用功能</li></ul><h3 id="3种最大输出速度："><a href="#3种最大输出速度：" class="headerlink" title="3种最大输出速度："></a>3种最大输出速度：</h3><ul><li>2MHZ</li><li>10MHz</li><li>50MHz</li></ul><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><ul><li><code>GPIOx_CRL</code> : 端口配置低寄存器（低8位）</li><li><code>GPIOx_CRH</code>: 端口配置高寄存器（高8位）</li><li><code>GPIOx_IDR</code>: 端口输入寄存器</li><li><code>GPIOx_ODR</code>: 端口输出寄存器</li><li><code>GPIOx_BSRR</code>: 端口位设置/清除寄存器</li><li><code>GPIOx_BRR</code> : 端口位清除寄存器</li><li><code>GPIOx_LCKR</code>: 端口配置锁存寄存器</li></ul><h2 id="跑马灯的硬件连接"><a href="#跑马灯的硬件连接" class="headerlink" title="跑马灯的硬件连接"></a>跑马灯的硬件连接</h2><ul><li>LED0连接PB5</li><li>LED1连接PE5</li></ul><h2 id="库函数介绍"><a href="#库函数介绍" class="headerlink" title="库函数介绍"></a>库函数介绍</h2><ul><li><p>头文件：<code>stm32f10x_gpio.h</code></p></li><li><p>源文件：<code>stm32f10x_gpio.c</code></p></li></ul><h2 id="具体函数"><a href="#具体函数" class="headerlink" title="具体函数"></a>具体函数</h2><h3 id="1个初始化函数："><a href="#1个初始化函数：" class="headerlink" title="1个初始化函数："></a>1个初始化函数：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_Init</span><span class="params">(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)</span></span>;</span><br><span class="line"><span class="comment">//作用：初始化一个或者多个IO口（同一组）的工作方式和速度。该函数主要是操作GPIO_CRL(CRH)寄存器</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//样例</span></span><br><span class="line"> GPIO_InitTypeDef  GPIO_InitStructure;</span><br><span class="line"></span><br><span class="line"> GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;         <span class="comment">//LED0--&gt;PB.5 端口配置</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;  <span class="comment">//推挽输出</span></span><br><span class="line"> GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz; <span class="comment">//IO口速度为50MHz</span></span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure);           <span class="comment">//根据设定参数初始化GPIOB.5</span></span><br></pre></td></tr></table></figure><h3 id="2个读取输入电平函数："><a href="#2个读取输入电平函数：" class="headerlink" title="2个读取输入电平函数："></a>2个读取输入电平函数：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint8_t</span> GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, <span class="keyword">uint16_t</span> GPIO_Pin);</span><br><span class="line"><span class="comment">//作用：读取某个GPIO的输入电平。实际操作的是GPIOx_IDR寄存器。</span></span><br><span class="line"><span class="comment">//举例：</span></span><br><span class="line">GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_5);<span class="comment">//读取GPIOA.5的输入电平</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint16_t</span> GPIO_ReadInputData(GPIO_TypeDef* GPIOx);</span><br><span class="line"><span class="comment">//作用：读取某组GPIO的输入电平。实际操作的是GPIOx_IDR寄存器。</span></span><br><span class="line"><span class="comment">//举例：</span></span><br><span class="line">GPIO_ReadInputData(GPIOA);<span class="comment">//读取GPIOA组中所有IO口输入电平</span></span><br></pre></td></tr></table></figure><h3 id="2个读取输出电平函数："><a href="#2个读取输出电平函数：" class="headerlink" title="2个读取输出电平函数："></a>2个读取输出电平函数：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uint8_t</span> GPIO_ReadOutputDataBit (GPIO_TypeDef* GPIOx, <span class="keyword">uint16_t</span> GPIO_Pin);</span><br><span class="line"><span class="comment">//作用：读取某个GPIO的输出电平。实际操作的是GPIO_ODR寄存器。</span></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line">GPIO_ReadOutputDataBit(GPIOA, GPIO_Pin_5);<span class="comment">//读取GPIOA.5的输出电平</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uint16_t</span> GPIO_ReadOutputData(GPIO_TypeDef* GPIOx);</span><br><span class="line"><span class="comment">//作用：读取某组GPIO的输出电平。实际操作的是GPIO_ODR寄存器。</span></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line">GPIO_ReadOutputData(GPIOA);<span class="comment">//读取GPIOA组中所有io口输出电平</span></span><br></pre></td></tr></table></figure><h3 id="4个设置输出电平函数："><a href="#4个设置输出电平函数：" class="headerlink" title="4个设置输出电平函数："></a>4个设置输出电平函数：</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_SetBits</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="keyword">uint16_t</span> GPIO_Pin)</span></span>;</span><br><span class="line"><span class="comment">//作用：设置某个IO口输出为高电平（1）。实际操作BSRR寄存器</span></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line">GPIO_SetBits(GPIOB,GPIO_Pin_5);   <span class="comment">//GPIOB.5设置为高电平，LED高电平不亮</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GPIO_ResetBits</span><span class="params">(GPIO_TypeDef* GPIOx, <span class="keyword">uint16_t</span> GPIO_Pin)</span></span>;</span><br><span class="line"><span class="comment">//作用：设置某个IO口输出为低电平（0）。实际操作的BRR寄存器。</span></span><br><span class="line"><span class="comment">//例如：</span></span><br><span class="line"> GPIO_ResetBits(GPIOB,GPIO_Pin_5);<span class="comment">//GPIOB.5设置为低电平，LED高电平亮</span></span><br></pre></td></tr></table></figure><h2 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h2><ul><li>使能IO口时钟。调用函数<code>RCC_APB2PeriphColckCmd()</code>;</li><li>初始化IO口模式。调用函数<code>GPIO_Init()</code>;</li><li>操作IO口，输出高低电平<code>GPIO_SetBits()</code>,<code>GPIO_ResetBits()</code>;</li></ul><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//led.h 文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __LED_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//led.c 文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure; <span class="comment">//GPIO初始化定义</span></span><br><span class="line"></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE); <span class="comment">//GPIOB时钟使能</span></span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE); <span class="comment">//GPIOE时钟使能</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;      <span class="comment">//推挽输出</span></span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;             <span class="comment">//端口配置</span></span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;     <span class="comment">//IO口速度为50MHz</span></span><br><span class="line">GPIO_Init(GPIOB,&amp;GPIO_InitStructure);                 <span class="comment">//根据设定参数初始化GPIOB.5</span></span><br><span class="line">GPIO_SetBits(GPIOB,GPIO_Pin_5);                       <span class="comment">//GPIOB.5设置为高电平，LED高电平不亮</span></span><br><span class="line"></span><br><span class="line">GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_Init(GPIOE,&amp;GPIO_InitStructure);</span><br><span class="line">GPIO_SetBits(GPIOE,GPIO_Pin_5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.c</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LED_Init();</span><br><span class="line">delay_init();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">GPIO_SetBits(GPIOB,GPIO_Pin_5);</span><br><span class="line">GPIO_SetBits(GPIOE,GPIO_Pin_5);</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">GPIO_ResetBits(GPIOB,GPIO_Pin_5);</span><br><span class="line">GPIO_ResetBits(GPIOE,GPIO_Pin_5);</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="寄存器版本"><a href="#寄存器版本" class="headerlink" title="寄存器版本"></a>寄存器版本</h1><h2 id="代码思路-1"><a href="#代码思路-1" class="headerlink" title="代码思路"></a>代码思路</h2><ul><li>使能IO口时钟。配置寄存器<code>RCC_APB2ENR</code></li><li>初始化IO口模式。配置寄存器<code>GPIOx_CRH/CRL</code></li><li>操作IO口，输出高低电平。配置寄存器<code>GPIOX_ODR</code>或者<code>BSRR/BRR</code></li></ul><h2 id="最终代码-1"><a href="#最终代码-1" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//led.h 文件</span></span><br><span class="line"><span class="comment">//与库函数版本相同</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __LED_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __LED_H</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//led.c 文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">RCC-&gt;APB2ENR |= <span class="number">1</span>&lt;&lt;<span class="number">3</span>;      <span class="comment">//使能IO口时钟，GPIOB</span></span><br><span class="line">RCC-&gt;APB2ENR |= <span class="number">1</span>&lt;&lt;<span class="number">6</span>;      <span class="comment">//使能IO口时钟, GPIOE</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIOB.5</span></span><br><span class="line">GPIOB-&gt;CRL &amp;= <span class="number">0xFF0FFFFF</span>;  <span class="comment">//先用与运算将欲修改的位修改为0（修改第六位）</span></span><br><span class="line">GPIOB-&gt;CRL |= <span class="number">0x00300000</span>;  <span class="comment">//再用或运算将PB5修改为通用推挽输出，即0011，也就是3</span></span><br><span class="line">GPIOB-&gt;ODR |= <span class="number">1</span>&lt;&lt;<span class="number">5</span>;        <span class="comment">//将PB5的ODR寄存器设置为高电平，即最开始不亮</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIOE.5</span></span><br><span class="line">GPIOE-&gt;CRL &amp;= <span class="number">0xFF0FFFFF</span>;  <span class="comment">//同理</span></span><br><span class="line">GPIOE-&gt;CRL |= <span class="number">0x00300000</span>;</span><br><span class="line">GPIOE-&gt;ODR |= <span class="number">1</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main 文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LED_Init();</span><br><span class="line">delay_init();</span><br><span class="line"></span><br><span class="line">GPIOB-&gt;ODR |= <span class="number">1</span>&lt;&lt;<span class="number">5</span>; </span><br><span class="line">GPIOE-&gt;ODR |= <span class="number">1</span>&lt;&lt;<span class="number">5</span>; </span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">GPIOB-&gt;ODR = ~(<span class="number">1</span>&lt;&lt;<span class="number">5</span>);</span><br><span class="line">GPIOE-&gt;ODR = ~(<span class="number">1</span>&lt;&lt;<span class="number">5</span>);</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="位带操作版本"><a href="#位带操作版本" class="headerlink" title="位带操作版本"></a>位带操作版本</h1><h2 id="位操作原理"><a href="#位操作原理" class="headerlink" title="位操作原理"></a>位操作原理</h2><p>把每个比特膨胀为一个32位的字，当访问这些字的时候就达到了访问比特的目的，比如说BSRR寄存器有32个位，那么可以映射到32个地址上，我们去访问（读-改-写）这32个地址就达到访问32个比特的目的。</p><h2 id="代码思路-2"><a href="#代码思路-2" class="headerlink" title="代码思路"></a>代码思路</h2><ul><li>使能IO口时钟。调用函数<code>RCC_APB2PeriphColckCmd()</code></li><li>初始化IO口模式。调用函数<code>GPIO_Init()</code></li><li>操作IO口，输出高低电平。<strong>使用位带操作</strong>。</li></ul><h2 id="最终代码-2"><a href="#最终代码-2" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//led.h 文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __LED_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __LED_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED0 PBout(5)<span class="comment">// PB5 添加宏定义</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED1 PEout(5)<span class="comment">// PE5</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LED_Init</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main 文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stm32f10x.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"led.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"delay.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LED_Init();</span><br><span class="line">delay_init();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">LED0 = <span class="number">1</span>;</span><br><span class="line">LED1 = <span class="number">1</span>;</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">LED0 = <span class="number">0</span>;</span><br><span class="line">LED1 = <span class="number">0</span>;</span><br><span class="line">delay_ms(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STM32 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用GCC编译Keil5的代码，了解GCC工具链</title>
      <link href="/MicroController/%E3%80%90STM32%E3%80%91%E7%94%A8GCC%E7%BC%96%E8%AF%91Keil5%E7%9A%84%E4%BB%A3%E7%A0%81%EF%BC%8C%E4%BA%86%E8%A7%A3GCC%E5%B7%A5%E5%85%B7%E9%93%BE.html"/>
      <url>/MicroController/%E3%80%90STM32%E3%80%91%E7%94%A8GCC%E7%BC%96%E8%AF%91Keil5%E7%9A%84%E4%BB%A3%E7%A0%81%EF%BC%8C%E4%BA%86%E8%A7%A3GCC%E5%B7%A5%E5%85%B7%E9%93%BE.html</url>
      
        <content type="html"><![CDATA[<h1 id="用GCC编译Keil5的代码，了解GCC工具链"><a href="#用GCC编译Keil5的代码，了解GCC工具链" class="headerlink" title="用GCC编译Keil5的代码，了解GCC工具链"></a>用GCC编译Keil5的代码，了解GCC工具链</h1><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>本周接到任务，首先是熟悉<code>STM32cubemx</code>，既然是熟悉框也就不做太高的要求，毕竟也只是一个提升效率的工具，我就按照教程新建了一个简单地模板，算是知道怎么用<code>cubemx</code>从头开始建一个工程了。</p><p>而本周的第二个任务就是研究用<code>GCC</code>工具链编译<code>Keil5</code>的代码，这个的确对我来说难度不小，算是卡了我将近三天的时间，而出现这个问题的原因就是我基础不够牢靠，<code>Keil5</code>软件最基本的知识没有掌握，导致找不到问题的原因所在。还好我中途没有放弃，一直在尝试，也一直在找可能的原因，最终找到了，也算功夫不负有心人吧。</p><p>特此记录一下，因为我在出现这些问题之后并不能在网上找到答案，借此机会来帮助之后和我一样基础不好的小白吧。</p><h2 id="问题产生"><a href="#问题产生" class="headerlink" title="问题产生"></a>问题产生</h2><p>在研究用<code>GCC</code>编译<code>Keil5</code>的代码的时候，我在网上找到了<a href="https://blog.csdn.net/weixin_39871788/article/details/78858791" target="_blank" rel="noopener">CSDN上的一个教程</a>，讲解的还是十分详细的。</p><p>但我按照教程，把我用<code>cubemx</code>建的工程搞了一遍却出现了很多很多的bug，具体如下：</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79gy1g5r9pg9gfxj314o0m2dpg.jpg" alt></p><p>遇到这个问题之后我也查了一下，并没有找到原因，多数是说我没有定义，但我也不知道应该怎么定义呀！</p><h2 id="寻找问题"><a href="#寻找问题" class="headerlink" title="寻找问题"></a>寻找问题</h2><p>我的直觉觉得问题可能出在教程中配置的部分，但同样的配置为什么会出现不同的结果呢？</p><p>我于是按照正点原子的教程从头开始看了一下怎么配置一个用<code>armcc</code>编译的流水灯模板，因为之前我没自己搞过模板，于是发现了很多我之前不知道的细节，比如添加添加定义，头文件，修改<code>output输出</code>文件夹，而我出现的问题就是<code>define</code>没有添加，导致未定义。</p><p><img src="http://ww3.sinaimg.cn/large/006tNc79gy1g5r9pg5syoj30lq0g9778.jpg" alt></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在图中define一定要添加</span></span><br><span class="line">Define: USE_HAL_DRIVER,STM32F103xE,USE_HAL_DRIVER,STM32F103xE</span><br></pre></td></tr></table></figure><p>解决之后成功编译！</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79gy1g5r9pfzuh2j31hc0u0jwv.jpg" alt></p><p><a href="https://download.csdn.net/download/weixin_42559298/11493634" target="_blank" rel="noopener">附上可编译模板的链接</a></p>]]></content>
      
      
      <categories>
          
          <category> STM32 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keil </tag>
            
            <tag> GCC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【从零入门Qt】开发一款属于自己的串口调试助手</title>
      <link href="/OtherTechnique/%E3%80%90%E4%BB%8E%E9%9B%B6%E5%85%A5%E9%97%A8Qt%E3%80%91%E5%BC%80%E5%8F%91%E4%B8%80%E6%AC%BE%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95%E5%8A%A9%E6%89%8B.html"/>
      <url>/OtherTechnique/%E3%80%90%E4%BB%8E%E9%9B%B6%E5%85%A5%E9%97%A8Qt%E3%80%91%E5%BC%80%E5%8F%91%E4%B8%80%E6%AC%BE%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95%E5%8A%A9%E6%89%8B.html</url>
      
        <content type="html"><![CDATA[<p>暑假来深圳这边实习，做的是嵌入式方向，负责人分配给我的第一个任务是用Qt写一个串口调试助手。这个任务总体来讲难度适中，尽管我没接触过Qt，但能查到很多很多的资料，甚至包括别人写好的源代码，所以有很多的学习资源。</p><p>我第一天在同学的推荐下，看了一个入门的文档，<a href="https://www.devbean.net/2012/08/qt-study-road-2-catelog/" target="_blank" rel="noopener">《Qt 学习之路 2》</a>，其中内容讲的比较基础，基本可以理解，算是能对Qt的语法了解个大概。而且如果实在不懂，也可以参看b站上的视频教程，是<a href="https://www.bilibili.com/video/av20446734" target="_blank" rel="noopener">黑马程序员的教程</a>，视频内容比较冗长，但对于初学者来说可能更好理解，各取所需，看个人选择。</p><p>因为负责人只给了我三天的时间，所以我也就花了一天左右的时间看教程，就开始看我在网上看的一份源码了。当时我的进度是黑马程序员看了不到10个视频，《Qt 学习之路 2》看了不到20节教程，虽然说看了不少，但我当时还是很慌的，对于我这种小白来说，还是不知道源代码是什么意思，但这个时候我能大概明白每个函数要做什么功能了，也就是我看懂了函数名，但函数里的句子我看不懂。</p><p>然后我就选择了按照这份代码自己复刻一份，算是尝试着自己写一下。</p><p>于是我新建了一个<code>project</code>，名字是<code>Myserialport</code>，发现源代码中<code>main.cpp</code>完全一样，也就是一个窗体的显示功能，很好理解，直接略去~</p><p>上面的<code>mainwindow.h</code>文件里面有很多库函数的引用，函数的声明，我姑且认为不重要，暂时略去</p><p>而代码最多的就集中在<code>mainwindow.cpp</code>文件里了，也是我最需要解决的部分！</p><p>这是我新建工程后的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而源代码在<code>MainWindow::MainWindow(QWidget *parent)</code>中添加了很多窗体生成的初始化语句</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    textstate_receive = <span class="literal">false</span>;                 <span class="comment">//初始化发送窗口状态为文本模式</span></span><br><span class="line">    textstate_send = <span class="literal">false</span>;                    <span class="comment">//初始化接收窗口状态为文本模式</span></span><br><span class="line">    serialport = <span class="keyword">new</span> QSerialPort;              <span class="comment">//创建QSerialPort类，需要在头文件中添加#include &lt;QSerialPort&gt;</span></span><br><span class="line">    ui-&gt;send_button-&gt;setEnabled(<span class="literal">false</span>);        <span class="comment">//初始化接收按钮不可用</span></span><br><span class="line">    ui-&gt;close_port-&gt;setEnabled(<span class="literal">false</span>);         <span class="comment">//初始化接收按钮不可用</span></span><br><span class="line">    ui-&gt;Receive_text_window-&gt;setReadOnly(<span class="literal">true</span>);<span class="comment">//讲接收窗口设置为只读窗口</span></span><br><span class="line">    setWindowTitle(<span class="string">"串口调试助手"</span>);              <span class="comment">//设置程序的标题</span></span><br><span class="line">    setWindowIcon(QIcon(<span class="string">":/images/exe.jpg"</span>));  <span class="comment">//设置程序左上角图标</span></span><br><span class="line">    find_port();                               <span class="comment">//查找可用串口函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上语句还是比较好理解的，每句话我都进行了注释。</p><p>下面的代码就是定义各个函数，而.h文件里的很多函数声明也就很好理解了，也就是在.h文件里定义一下各个函数</p><p>比如以下很重要的两个函数，用于实现数据的发送和接收</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送数据</span></span><br><span class="line"><span class="keyword">void</span> MainWindow::on_send_button_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(textstate_send == <span class="literal">false</span>)  <span class="comment">//文本模式</span></span><br><span class="line">    &#123;</span><br><span class="line">        serialport-&gt;write(ui-&gt;Send_text_window-&gt;toPlainText().toUtf8());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(textstate_send == <span class="literal">true</span>)     <span class="comment">//hex模式</span></span><br><span class="line">    &#123;</span><br><span class="line">        QString str = ui-&gt;Send_text_window-&gt;toPlainText();</span><br><span class="line">        <span class="keyword">int</span> num = str.toInt();</span><br><span class="line">        str = str.setNum(num,<span class="number">16</span>);</span><br><span class="line">        ui-&gt;Send_text_window-&gt;clear();</span><br><span class="line">        ui-&gt;Send_text_window-&gt;append(str);</span><br><span class="line">        serialport-&gt;write(ui-&gt;Send_text_window-&gt;toPlainText().toLatin1());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//窗口显示串口传来的数据</span></span><br><span class="line"><span class="keyword">void</span> MainWindow::Read_Data()</span><br><span class="line">&#123;</span><br><span class="line">    QByteArray buf;</span><br><span class="line">    buf = serialport-&gt;readAll();</span><br><span class="line">    <span class="keyword">if</span>(!buf.isEmpty())          <span class="comment">//将数据显示到文本串口</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(textstate_receive == <span class="literal">false</span>)   <span class="comment">//文本模式</span></span><br><span class="line">        &#123;</span><br><span class="line">            QString str = ui-&gt;Receive_text_window-&gt;toPlainText();</span><br><span class="line">            str += tr(buf);</span><br><span class="line">            ui-&gt;Receive_text_window-&gt;clear();</span><br><span class="line">            ui-&gt;Receive_text_window-&gt;append(str);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(textstate_receive == <span class="literal">true</span>)   <span class="comment">//hex模式</span></span><br><span class="line">        &#123;</span><br><span class="line">            QString str = ui-&gt;Receive_text_window-&gt;toPlainText();</span><br><span class="line">            <span class="comment">// byteArray 转 16进制</span></span><br><span class="line">            QByteArray temp = buf.toHex().toUpper();</span><br><span class="line">            str += tr(temp);</span><br><span class="line">            ui-&gt;Receive_text_window-&gt;clear();</span><br><span class="line">            ui-&gt;Receive_text_window-&gt;append(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buf.clear();    <span class="comment">//清空缓存区</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后实现了以下的界面，以及文本模式和16进制（hex模式）两种模式转换的数据收发</p><p>p.s.：尝试了很久想要解决中文无法显示的问题，最终无果…</p><p><img src="http://ww1.sinaimg.cn/large/006tNc79gy1g5j5oshorpj30kc0k5769.jpg" alt></p><p><a href="https://download.csdn.net/download/weixin_42559298/11457836" target="_blank" rel="noopener">有需要的话可以在这个链接下载嗷~</a></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式开发学习笔记</title>
      <link href="/MicroController/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
      <url>/MicroController/%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-distribution-linux的发行版本"><a href="#Linux-distribution-linux的发行版本" class="headerlink" title="Linux distribution (linux的发行版本)"></a>Linux distribution (linux的发行版本)</h2><p>软件，shell 保护层，kernel内核，硬件</p><p>linux系统，完整的分层模型</p><p>RedHat：server 服务器 面向企业用户 具有license</p><p>CentOS：已经被红帽子收购，开源免费版本，区别于企业版，比较稳定</p><p>以上两款界面不好看，不追求绚丽的东西</p><p>Ubuntu：稳定性不如上面两个，但适用于普通用户，中文支持，软件支持做的都比较好</p><h2 id="ubuntu操作"><a href="#ubuntu操作" class="headerlink" title="ubuntu操作"></a>ubuntu操作</h2><ol><li>sudo 为普通命令提升权限</li><li>sudo  passwd root </li><li>su - 切换到系统的身份</li><li>apt-get update更新源，用于下载新的安装包（如果是普通用于，记得在前面加sudo</li><li>尽量用命令行的方式来学习linux</li><li>vim安装 apt-get install vim-nox</li><li>vi已经安装，是一个编辑软件的记事本</li><li>vim回车，进入</li><li>退出，敲：q（不知道要不要加！）</li><li>vim全键盘操作，效率很高</li><li>cd /    根目录  </li><li>c—change  d—directory 目录</li><li>ls</li><li>不要在根目录里面操作</li><li>回去 cd</li><li>vi /etc/</li><li>vi 命令模式，编辑模式，用 i 切换模式，esc键退出</li><li>ssh-secure shell</li><li>SecureCRT安装 </li><li>sshd回车</li><li>apt-get install openssh-server</li><li>ifconfig</li><li>net add:</li><li>rz zmodem r:receive</li><li>sz zmodem s:send</li><li>samba</li><li>apt-get install samba</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式开发 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梦里花落知多少</title>
      <link href="/OtherArticle/%E6%A2%A6%E9%87%8C%E8%8A%B1%E8%90%BD%E7%9F%A5%E5%A4%9A%E5%B0%91.html"/>
      <url>/OtherArticle/%E6%A2%A6%E9%87%8C%E8%8A%B1%E8%90%BD%E7%9F%A5%E5%A4%9A%E5%B0%91.html</url>
      
        <content type="html"><![CDATA[<p> 很喜欢何炅说的一段话：要得到你必须要付出，要付出你还要学会坚持，如果你真的觉得很难，那你就放弃，但你放弃了就不要抱怨，我觉得人生就是这样，世界真的是公平的，每个人都是通过自己的努力，去决定自己生活的样子！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的Hexo博客搭建经历</title>
      <link href="/Blog/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93.html"/>
      <url>/Blog/%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<h1 id="为什么要做自己的博客？"><a href="#为什么要做自己的博客？" class="headerlink" title="为什么要做自己的博客？"></a>为什么要做自己的博客？</h1><p>说到为什么要这么做，这个想法也是已经有很久了。当时的起因是我想通过互联网上的某个平台来记录自己的学习笔记或者自己的一些思考。在知乎等搜索了很多，都没有找到太合适的，其中包括公众号，简书，csdn等等。我觉得不合适的原因有的是因为网站太过烟火气，对我来说我觉得不够“干净”。有的是因为我觉得和我的圈子不符合，有的是因为我个人的喜好，最终都没有选择。有一天就突然萌生了做一个自己的博客的想法！</p><p>但问题来了，怎么做呢？我完全摸不到头脑。我就去知乎查了一下看到了蛮多科普的帖子，但一翻，好长好长，其中也包括很多很多的代码。对于一个机械专业的学生来说，看到这些内心是恐惧的。于是…我就把那篇帖子收藏了，打算等我有时间再做…当时可能觉得的时间是大四…可是这个想法实际上一直深深的埋在我的心里。</p><p>上周，这学期该忙的事情几乎结束，剩下的就是为了期末考试做准备了，我向来是一个喜欢拖延的人，不到考试前一周应该是打不起学习的兴趣的。我就在教室看着电脑，可能又萌生了写点东西的想法，奈何没有平台给我发挥。于是突然决定，就现在！把博客给我搞出来</p><h1 id="我花了多少时间？"><a href="#我花了多少时间？" class="headerlink" title="我花了多少时间？"></a>我花了多少时间？</h1><p>总共时长大概是3天白天的时间，对于我这个毫无基础的IT小白来说还是可以接受的（毕竟如果我不是搞这个的话估计也不会学习吧）</p><h1 id="我是怎么做出来的？"><a href="#我是怎么做出来的？" class="headerlink" title="我是怎么做出来的？"></a>我是怎么做出来的？</h1><p>遇到了很多问题，也查了很多资料，通过别人的教程一步一步完善自己的博客</p><p>推荐链接：<a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener"><strong>知乎上的一篇文章，我的启蒙</strong></a> </p><p>看了这个博客之后大部分操作就都可以完成了，当然你可能会像我一样，遇到很多的问题，那么怎么办呢？当然是自己查！而且很容易查到你想要的解决方法</p><p><a href="https://slanceli.top/2019/02/18/%E6%B7%B1%E5%BA%A6%E7%BE%8E%E5%8C%96Hexo%EF%BC%88NexT%E4%B8%BB%E9%A2%98%EF%BC%89/" target="_blank" rel="noopener"><strong>这篇博客是我的努力目标，当时就是朝着这个方向努力完善</strong></a></p><p><a href="http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html" target="_blank" rel="noopener"><strong>这篇博客讲了很多博客美化的内容，我都是自己一步一步搞的</strong></a></p><p><a href="http://yearito.cn/posts/hexo-theme-beautify.html" target="_blank" rel="noopener"><strong>另一个美化博客的教程，也很不错哦</strong></a></p><p>以上部分完成了，你的博客基本就完成啦！如果你遇到了什么问题，都可以去google，相信你能得到你想要的答案~</p><h2 id="会不会出教程？"><a href="#会不会出教程？" class="headerlink" title="会不会出教程？"></a>会不会出教程？</h2><p>应该不会，教程太多了，我还没那么牛，等我再学习学习吧…</p><h2 id="如果换电脑了，想在新电脑上写博客，怎么迁移"><a href="#如果换电脑了，想在新电脑上写博客，怎么迁移" class="headerlink" title="如果换电脑了，想在新电脑上写博客，怎么迁移"></a>如果换电脑了，想在新电脑上写博客，怎么迁移</h2><p><a href="https://showcc.github.io/2017/06/08/Change%20the%20computer%20update%20the%20hexo%20blog/" target="_blank" rel="noopener"><strong>一个比较好的教程</strong></a></p><h2 id="想在两台电脑上同时写博客的方法"><a href="#想在两台电脑上同时写博客的方法" class="headerlink" title="想在两台电脑上同时写博客的方法"></a>想在两台电脑上同时写博客的方法</h2><p>利用git的分支功能！</p><p>把生成的静态网页上传到master分支，把写的原文件上传到新建的hexo分支</p><p>每次在另一台电脑上写博客前，先<code>git pull</code>将本地文件更新，而在写好文章后要记得用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add . </span><br><span class="line">git commit -m &quot;&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>参考了知乎上的一篇答案，十分详细，对新手小白十分友好，<a href="https://www.zhihu.com/question/21193762/answer/489124966" target="_blank" rel="noopener"><strong>点击跳转</strong></a></p><p>做完这个对git的分支功能有了更深刻的认识~</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown 语法总结整理</title>
      <link href="/Blog/Markdown-%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%E6%95%B4%E7%90%86.html"/>
      <url>/Blog/Markdown-%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93%E6%95%B4%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown文本学习"><a href="#Markdown文本学习" class="headerlink" title="Markdown文本学习"></a>Markdown文本学习</h1><p>就不总结了</p><p>直接上传一个我觉得不错的链接吧</p><p><a href="https://list.yinxiang.com/markdown/eef42447-db3f-48ee-827b-1bb34c03eb83.php" target="_blank" rel="noopener">印象笔记Markdown文本入门指南</a></p><h1 id="Markdown文本公式写法"><a href="#Markdown文本公式写法" class="headerlink" title="Markdown文本公式写法"></a>Markdown文本公式写法</h1><p><a href="https://blog.csdn.net/mingzhuo_126/article/details/82722455" target="_blank" rel="noopener">超全公式指南，简单易懂</a></p><p>hhh ，比如：<br>$$<br>E=mc^2<br>$$</p><p>然而用这个写法在Hexo Next主题下网页上并不会显示出公式，我查了一下</p><p><a href="https://blog.csdn.net/yexiaohhjk/article/details/82526604" target="_blank" rel="noopener">这个教程不错</a></p><p><a href="https://jdhao.github.io/2017/10/06/hexo-markdown-latex-equation/" target="_blank" rel="noopener">打矩阵的时候你会发现无法多行显示，这个教程告诉了我们解决办法</a></p><h1 id="Markdown代码块的使用方法"><a href="#Markdown代码块的使用方法" class="headerlink" title="Markdown代码块的使用方法"></a>Markdown代码块的使用方法</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include1 &lt;iostream&gt;</span><br></pre></td></tr></table></figure><p>在句首加”” <figure class="highlight plain"><figcaption><span>即可，即键盘左上角</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># Markdown引用的方法</span><br><span class="line"></span><br><span class="line">&gt; 引用内容</span><br><span class="line"></span><br><span class="line">引用方法在句首‘ &gt; ’加空格即可</span><br><span class="line"></span><br><span class="line"># 修改文字的颜色</span><br><span class="line"></span><br><span class="line">```html</span><br><span class="line">浅红色文字：&lt;font color=&quot;#dd0000&quot;&gt;浅红色文字：&lt;/font&gt;&lt;br /&gt; </span><br><span class="line"></span><br><span class="line">深红色文字：&lt;font color=&quot;#660000&quot;&gt;深红色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line"></span><br><span class="line">浅绿色文字：&lt;font color=&quot;#00dd00&quot;&gt;浅绿色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line"></span><br><span class="line">深绿色文字：&lt;font color=&quot;#006600&quot;&gt;深绿色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line"></span><br><span class="line">浅蓝色文字：&lt;font color=&quot;#0000dd&quot;&gt;浅蓝色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line"></span><br><span class="line">深蓝色文字：&lt;font color=&quot;#000066&quot;&gt;深蓝色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line"></span><br><span class="line">浅黄色文字：&lt;font color=&quot;#dddd00&quot;&gt;浅黄色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line"></span><br><span class="line">深黄色文字：&lt;font color=&quot;#666600&quot;&gt;深黄色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line"></span><br><span class="line">浅青色文字：&lt;font color=&quot;#00dddd&quot;&gt;浅青色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line"></span><br><span class="line">深青色文字：&lt;font color=&quot;#006666&quot;&gt;深青色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line"></span><br><span class="line">浅紫色文字：&lt;font color=&quot;#dd00dd&quot;&gt;浅紫色文字&lt;/font&gt;&lt;br /&gt; </span><br><span class="line"></span><br><span class="line">深紫色文字：&lt;font color=&quot;#660066&quot;&gt;深紫色文字&lt;/font&gt;&lt;br /&gt;</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><p>浅红色文字：<font color="#dd0000">浅红色文字：</font><br> </p><p>深红色文字：<font color="#660000">深红色文字</font><br> </p><p>浅绿色文字：<font color="#00dd00">浅绿色文字</font><br> </p><p>深绿色文字：<font color="#006600">深绿色文字</font><br> </p><p>浅蓝色文字：<font color="#0000dd">浅蓝色文字</font><br> </p><p>深蓝色文字：<font color="#000066">深蓝色文字</font><br> </p><p>浅黄色文字：<font color="#dddd00">浅黄色文字</font><br> </p><p>深黄色文字：<font color="#666600">深黄色文字</font><br> </p><p>浅青色文字：<font color="#00dddd">浅青色文字</font><br> </p><p>深青色文字：<font color="#006666">深青色文字</font><br> </p><p>浅紫色文字：<font color="#dd00dd">浅紫色文字</font><br> </p><p>深紫色文字：<font color="#660066">深紫色文字</font><br> </p><h1 id="修改字体大小"><a href="#修改字体大小" class="headerlink" title="修改字体大小"></a>修改字体大小</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">size为1：<span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"1"</span>&gt;</span>size为1<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">size为2：<span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"2"</span>&gt;</span>size为2<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span> </span><br><span class="line">size为3：<span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"3"</span>&gt;</span>size为3<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p>size为1：<font size="1">size为1</font><br><br>size为2：<font size="2">size为2</font><br><br>size为3：<font size="3">size为3</font><br> </p><h1 id="修改背景色"><a href="#修改背景色" class="headerlink" title="修改背景色"></a>修改背景色</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#FF00FF</span>&gt;</span>背景色的设置是按照十六进制颜色值：#7FFFD4<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#FF83FA</span>&gt;</span>背景色的设置是按照十六进制颜色值：#FF83FA<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#D1EEEE</span>&gt;</span>背景色的设置是按照十六进制颜色值：#D1EEEE<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">#C0FF3E</span>&gt;</span>背景色的设置是按照十六进制颜色值：#C0FF3E<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><table><tr><td bgcolor="#FF00FF">背景色的设置是按照十六进制颜色值：#7FFFD4</td></tr></table><table><tr><td bgcolor="#FF83FA">背景色的设置是按照十六进制颜色值：#FF83FA</td></tr></table><table><tr><td bgcolor="#D1EEEE">背景色的设置是按照十六进制颜色值：#D1EEEE</td></tr></table><table><tr><td bgcolor="#C0FF3E">背景色的设置是按照十六进制颜色值：#C0FF3E</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
